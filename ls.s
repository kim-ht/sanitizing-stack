	.section	.text
	.align	32
	#Procedure 0x8049cdb

	# 0x8049cdb:	pushl	%ebp [REG]
	.globl initialize_exit_failure
	.type initialize_exit_failure, @function
initialize_exit_failure:
	pushl	%ebp
	# 0x8049cdc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049cde:	cmpl	$1, 8(%ebp) [IMM, MEM]
	cmpl	$1, 8(%ebp)
	# 0x8049ce2:	je	0x8049cec [IMM <CODEREF>]
	je	.label_5
	# 0x8049ce4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049ce7:	movl	%eax, 0x806a314 [REG, MEM]
	movl	%eax, exit_failure
	# 0x8049cec:	nop	 []
.label_5:
	nop	
	# 0x8049ced:	popl	%ebp [REG]
	popl	%ebp
	# 0x8049cee:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049cef

	# 0x8049cef:	pushl	%ebp [REG]
	.globl to_uchar
	.type to_uchar, @function
to_uchar:
	pushl	%ebp
	# 0x8049cf0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049cf2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049cf5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049cf8:	movb	%al, -4(%ebp) [REG, MEM]
	movb	%al, -4(%ebp)
	# 0x8049cfb:	movzbl	-4(%ebp), %eax [MEM, REG]
	movzbl	-4(%ebp), %eax
	# 0x8049cff:	leave	 []
	leave	
	# 0x8049d00:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049d01

	# 0x8049d01:	pushl	%ebp [REG]
	.globl dot_or_dotdot
	.type dot_or_dotdot, @function
dot_or_dotdot:
	pushl	%ebp
	# 0x8049d02:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049d04:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8049d07:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049d0a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8049d0d:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x8049d0f:	jne	0x8049d52 [IMM <CODEREF>]
	jne	.label_7
	# 0x8049d11:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049d14:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8049d17:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8049d1a:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x8049d1c:	jne	0x8049d25 [IMM <CODEREF>]
	jne	.label_10
	# 0x8049d1e:	movl	$2, %edx [IMM, REG]
	movl	$2, %edx
	# 0x8049d23:	jmp	0x8049d2a [IMM <CODEREF>]
	jmp	.label_12
	# 0x8049d25:	movl	$1, %edx [IMM, REG]
.label_10:
	movl	$1, %edx
	# 0x8049d2a:	movl	8(%ebp), %eax [MEM, REG]
.label_12:
	movl	8(%ebp), %eax
	# 0x8049d2d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8049d2f:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8049d32:	movb	%al, -1(%ebp) [REG, MEM]
	movb	%al, -1(%ebp)
	# 0x8049d35:	cmpb	$0, -1(%ebp) [IMM, MEM]
	cmpb	$0, -1(%ebp)
	# 0x8049d39:	je	0x8049d41 [IMM <CODEREF>]
	je	.label_8
	# 0x8049d3b:	cmpb	$0x2f, -1(%ebp) [IMM, MEM]
	cmpb	$0x2f, -1(%ebp)
	# 0x8049d3f:	jne	0x8049d48 [IMM <CODEREF>]
	jne	.label_9
	# 0x8049d41:	movl	$1, %eax [IMM, REG]
.label_8:
	movl	$1, %eax
	# 0x8049d46:	jmp	0x8049d4d [IMM <CODEREF>]
	jmp	.label_6
	# 0x8049d48:	movl	$0, %eax [IMM, REG]
.label_9:
	movl	$0, %eax
	# 0x8049d4d:	andl	$1, %eax [IMM, REG]
.label_6:
	andl	$1, %eax
	# 0x8049d50:	jmp	0x8049d57 [IMM <CODEREF>]
	jmp	.label_11
	# 0x8049d52:	movl	$0, %eax [IMM, REG]
.label_7:
	movl	$0, %eax
	# 0x8049d57:	leave	 []
.label_11:
	leave	
	# 0x8049d58:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049d59

	# 0x8049d59:	pushl	%ebp [REG]
	.globl emit_mandatory_arg_note
	.type emit_mandatory_arg_note, @function
emit_mandatory_arg_note:
	pushl	%ebp
	# 0x8049d5a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049d5c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049d5d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049d60:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8049d66:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8049d69:	pushl	$0x805ece0 [IMM <DATAREF>]
	pushl	$label_13
	# 0x8049d6e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049d73:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049d76:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049d79:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049d7a:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049d7b:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8049d80:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049d83:	nop	 []
	nop	
	# 0x8049d84:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8049d87:	leave	 []
	leave	
	# 0x8049d88:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049d89

	# 0x8049d89:	pushl	%ebp [REG]
	.globl emit_size_note
	.type emit_size_note, @function
emit_size_note:
	pushl	%ebp
	# 0x8049d8a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049d8c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049d8d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049d90:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8049d96:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8049d99:	pushl	$0x805ed2c [IMM <DATAREF>]
	pushl	$label_14
	# 0x8049d9e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049da3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049da6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049da9:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049daa:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049dab:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8049db0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049db3:	nop	 []
	nop	
	# 0x8049db4:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8049db7:	leave	 []
	leave	
	# 0x8049db8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049db9

	# 0x8049db9:	pushl	%ebp [REG]
	.globl emit_ancillary_info
	.type emit_ancillary_info, @function
emit_ancillary_info:
	pushl	%ebp
	# 0x8049dba:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049dbc:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049dbd:	subl	$0x64, %esp [IMM, REG]
	subl	$0x64, %esp
	# 0x8049dc0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049dc3:	movl	%eax, -0x5c(%ebp) [REG, MEM]
	movl	%eax, -0x5c(%ebp)
	# 0x8049dc6:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8049dcc:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8049dcf:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8049dd1:	movl	$0x805edc5, -0x44(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_31, -68(%ebp)
	# 0x8049dd8:	movl	$0x805edc7, -0x40(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_32, -64(%ebp)
	# 0x8049ddf:	movl	$0x805edd7, -0x3c(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_33, -60(%ebp)
	# 0x8049de6:	movl	$0x805ede1, -0x38(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_34, -56(%ebp)
	# 0x8049ded:	movl	$0x805edf7, -0x34(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_35, -52(%ebp)
	# 0x8049df4:	movl	$0x805ee01, -0x30(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_36, -48(%ebp)
	# 0x8049dfb:	movl	$0x805ee10, -0x2c(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_37, -44(%ebp)
	# 0x8049e02:	movl	$0x805ee01, -0x28(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_36, -40(%ebp)
	# 0x8049e09:	movl	$0x805ee1a, -0x24(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_38, -36(%ebp)
	# 0x8049e10:	movl	$0x805ee01, -0x20(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_36, -32(%ebp)
	# 0x8049e17:	movl	$0x805ee24, -0x1c(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_39, -28(%ebp)
	# 0x8049e1e:	movl	$0x805ee01, -0x18(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_36, -24(%ebp)
	# 0x8049e25:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8049e2c:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x8049e33:	movl	-0x5c(%ebp), %eax [MEM, REG]
	movl	-0x5c(%ebp), %eax
	# 0x8049e36:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8049e39:	leal	-0x44(%ebp), %eax [MEM, REG]
	leal	-0x44(%ebp), %eax
	# 0x8049e3c:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x8049e3f:	jmp	0x8049e45 [IMM <CODEREF>]
	jmp	.label_40
	# 0x8049e41:	addl	$8, -0x4c(%ebp) [IMM, MEM]
.label_24:
	addl	$8, -0x4c(%ebp)
	# 0x8049e45:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_40:
	movl	-0x4c(%ebp), %eax
	# 0x8049e48:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8049e4a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8049e4c:	je	0x8049e66 [IMM <CODEREF>]
	je	.label_16
	# 0x8049e4e:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8049e51:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8049e53:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049e56:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049e57:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x8049e5a:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8049e5f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049e62:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8049e64:	jne	0x8049e41 [IMM <CODEREF>]
	jne	.label_24
	# 0x8049e66:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_16:
	movl	-0x4c(%ebp), %eax
	# 0x8049e69:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8049e6c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8049e6e:	je	0x8049e79 [IMM <CODEREF>]
	je	.label_27
	# 0x8049e70:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8049e73:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8049e76:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8049e79:	subl	$0xc, %esp [IMM, REG]
.label_27:
	subl	$0xc, %esp
	# 0x8049e7c:	pushl	$0x805ee2e [IMM <DATAREF>]
	pushl	$label_21
	# 0x8049e81:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049e86:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049e89:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049e8c:	pushl	$0x805ee48 [IMM <DATAREF>]
	pushl	$label_17
	# 0x8049e91:	pushl	$0x805ee70 [IMM <DATAREF>]
	pushl	$label_18
	# 0x8049e96:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049e97:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x8049e9c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049e9f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049ea2:	pushl	$0 [IMM]
	pushl	$0
	# 0x8049ea4:	pushl	$5 [IMM]
	pushl	$5
	# 0x8049ea6:	calll	0x8049a30 [IMM <CODEREF>]
	calll	setlocale
	# 0x8049eab:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049eae:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x8049eb1:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
	cmpl	$0, -0x48(%ebp)
	# 0x8049eb5:	je	0x8049eef [IMM <CODEREF>]
	je	.label_19
	# 0x8049eb7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049eba:	pushl	$3 [IMM]
	pushl	$3
	# 0x8049ebc:	pushl	$0x805ee7e [IMM <DATAREF>]
	pushl	$label_30
	# 0x8049ec1:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x8049ec4:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x8049ec9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049ecc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8049ece:	je	0x8049eef [IMM <CODEREF>]
	je	.label_19
	# 0x8049ed0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8049ed3:	pushl	$0x805ee84 [IMM <DATAREF>]
	pushl	$label_20
	# 0x8049ed8:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049edd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049ee0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049ee3:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x8049ee6:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049ee7:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x8049eec:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049eef:	subl	$0xc, %esp [IMM, REG]
.label_19:
	subl	$0xc, %esp
	# 0x8049ef2:	pushl	$0x805eecc [IMM <DATAREF>]
	pushl	$label_29
	# 0x8049ef7:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049efc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049eff:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049f02:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x8049f05:	pushl	$0x805ee48 [IMM <DATAREF>]
	pushl	$label_17
	# 0x8049f0a:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049f0b:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x8049f10:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049f13:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x8049f16:	cmpl	-0x5c(%ebp), %eax [MEM, REG]
	cmpl	-0x5c(%ebp), %eax
	# 0x8049f19:	jne	0x8049f22 [IMM <CODEREF>]
	jne	.label_25
	# 0x8049f1b:	movl	$0x805eeeb, %ebx [IMM <DATAREF>, REG]
	movl	$label_22,  %ebx
	# 0x8049f20:	jmp	0x8049f27 [IMM <CODEREF>]
	jmp	.label_23
	# 0x8049f22:	movl	$0x805eef7, %ebx [IMM <DATAREF>, REG]
.label_25:
	movl	$label_26,  %ebx
	# 0x8049f27:	subl	$0xc, %esp [IMM, REG]
.label_23:
	subl	$0xc, %esp
	# 0x8049f2a:	pushl	$0x805eef8 [IMM <DATAREF>]
	pushl	$label_28
	# 0x8049f2f:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8049f34:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049f37:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049f3a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8049f3b:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x8049f3e:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049f3f:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x8049f44:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049f47:	nop	 []
	nop	
	# 0x8049f48:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8049f4b:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x8049f52:	je	0x8049f59 [IMM <CODEREF>]
	je	.label_15
	# 0x8049f54:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8049f59:	movl	-4(%ebp), %ebx [MEM, REG]
.label_15:
	movl	-4(%ebp), %ebx
	# 0x8049f5c:	leave	 []
	leave	
	# 0x8049f5d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049f5e

	# 0x8049f5e:	pushl	%ebp [REG]
	.globl timetostr
	.type timetostr, @function
timetostr:
	pushl	%ebp
	# 0x8049f5f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049f61:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049f64:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049f67:	cltd	 []
	cltd	
	# 0x8049f68:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8049f6b:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8049f6e:	pushl	%edx [REG]
	pushl	%edx
	# 0x8049f6f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8049f70:	calll	0x8056f5d [IMM <CODEREF>]
	calll	imaxtostr
	# 0x8049f75:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049f78:	leave	 []
	leave	
	# 0x8049f79:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049f7a

	# 0x8049f7a:	pushl	%ebp [REG]
	.globl bad_cast
	.type bad_cast, @function
bad_cast:
	pushl	%ebp
	# 0x8049f7b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049f7d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049f80:	popl	%ebp [REG]
	popl	%ebp
	# 0x8049f81:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049f82

	# 0x8049f82:	pushl	%ebp [REG]
	.globl is_ENOTSUP
	.type is_ENOTSUP, @function
is_ENOTSUP:
	pushl	%ebp
	# 0x8049f83:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049f85:	cmpl	$0x5f, 8(%ebp) [IMM, MEM]
	cmpl	$0x5f, 8(%ebp)
	# 0x8049f89:	sete	%al [REG]
	sete	%al
	# 0x8049f8c:	popl	%ebp [REG]
	popl	%ebp
	# 0x8049f8d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049f8e

	# 0x8049f8e:	pushl	%ebp [REG]
	.globl is_smack_enabled
	.type is_smack_enabled, @function
is_smack_enabled:
	pushl	%ebp
	# 0x8049f8f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049f91:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8049f96:	popl	%ebp [REG]
	popl	%ebp
	# 0x8049f97:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8049f98

	# 0x8049f98:	pushl	%ebp [REG]
	.globl dev_ino_push
	.type dev_ino_push, @function
dev_ino_push:
	pushl	%ebp
	# 0x8049f99:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8049f9b:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8049f9e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8049fa1:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x8049fa4:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8049fa7:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8049faa:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8049fad:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x8049fb0:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8049fb3:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x8049fb6:	movl	$0x10, -0x20(%ebp) [IMM, MEM]
	movl	$0x10, -0x20(%ebp)
	# 0x8049fbd:	movl	$0x806a5c0, -0x1c(%ebp) [IMM <DATAREF>, MEM]
	movl	$dev_ino_obstack, -28(%ebp)
	# 0x8049fc4:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8049fc7:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8049fca:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8049fcd:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8049fd0:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8049fd3:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8049fd6:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8049fd8:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8049fdb:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8049fde:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8049fe0:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8049fe2:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x8049fe5:	jae	0x8049ff8 [IMM <CODEREF>]
	jae	.label_41
	# 0x8049fe7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8049fea:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8049fed:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x8049ff0:	calll	0x805d691 [IMM <CODEREF>]
	calll	_obstack_newchunk
	# 0x8049ff5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8049ff8:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_41:
	movl	-0x1c(%ebp), %eax
	# 0x8049ffb:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x8049ffe:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x804a001:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804a003:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804a006:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804a009:	movl	0x806a5cc, %eax [MEM, REG]
	movl	label_42,  %eax
	# 0x804a00e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a011:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804a014:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a017:	subl	$0x10, -0xc(%ebp) [IMM, MEM]
	subl	$0x10, -0xc(%ebp)
	# 0x804a01b:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x804a01e:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804a021:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x804a024:	movl	%eax, 8(%ecx) [REG, MEM]
	movl	%eax, 8(%ecx)
	# 0x804a027:	movl	%edx, 0xc(%ecx) [REG, MEM]
	movl	%edx, 0xc(%ecx)
	# 0x804a02a:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x804a02d:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x804a030:	movl	-0x34(%ebp), %edx [MEM, REG]
	movl	-0x34(%ebp), %edx
	# 0x804a033:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x804a035:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x804a038:	nop	 []
	nop	
	# 0x804a039:	leave	 []
	leave	
	# 0x804a03a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a03b

	# 0x804a03b:	pushl	%ebp [REG]
	.globl dev_ino_pop
	.type dev_ino_pop, @function
dev_ino_pop:
	pushl	%ebp
	# 0x804a03c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a03e:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804a041:	movl	$0x10, -0x18(%ebp) [IMM, MEM]
	movl	$0x10, -0x18(%ebp)
	# 0x804a048:	movl	$0x806a5c0, -0x14(%ebp) [IMM <DATAREF>, MEM]
	movl	$dev_ino_obstack, -20(%ebp)
	# 0x804a04f:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a052:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804a055:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a057:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a05a:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804a05d:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x804a05f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a061:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a063:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x804a066:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x804a068:	jae	0x804a083 [IMM <CODEREF>]
	jae	.label_45
	# 0x804a06a:	pushl	$0x8063228 [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.8064
	# 0x804a06f:	pushl	$0x403 [IMM]
	pushl	$0x403
	# 0x804a074:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804a079:	pushl	$0x8060770 [IMM <DATAREF>]
	pushl	$label_44
	# 0x804a07e:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804a083:	movl	0x806a5cc, %eax [MEM, REG]
.label_45:
	movl	label_42,  %eax
	# 0x804a088:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x804a08b:	negl	%edx [REG]
	negl	%edx
	# 0x804a08d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804a08f:	movl	%eax, 0x806a5cc [REG, MEM]
	movl	%eax, label_42
	# 0x804a094:	movl	0x806a5cc, %eax [MEM, REG]
	movl	label_42,  %eax
	# 0x804a099:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a09c:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804a09f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a0a2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a0a5:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x804a0a8:	movl	0(%edx), %ecx [MEM, REG]
	movl	0(%edx), %ecx
	# 0x804a0aa:	movl	%ecx, 0(%eax) [REG, MEM]
	movl	%ecx, 0(%eax)
	# 0x804a0ac:	movl	4(%edx), %ecx [MEM, REG]
	movl	4(%edx), %ecx
	# 0x804a0af:	movl	%ecx, 4(%eax) [REG, MEM]
	movl	%ecx, 4(%eax)
	# 0x804a0b2:	movl	8(%edx), %ecx [MEM, REG]
	movl	8(%edx), %ecx
	# 0x804a0b5:	movl	%ecx, 8(%eax) [REG, MEM]
	movl	%ecx, 8(%eax)
	# 0x804a0b8:	movl	0xc(%edx), %edx [MEM, REG]
	movl	0xc(%edx), %edx
	# 0x804a0bb:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804a0be:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a0c1:	leave	 []
	leave	
	# 0x804a0c2:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x804a0c5

	# 0x804a0c5:	pushl	%ebp [REG]
	.globl dired_dump_obstack
	.type dired_dump_obstack, @function
dired_dump_obstack:
	pushl	%ebp
	# 0x804a0c6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a0c8:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804a0cb:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804a0ce:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804a0d1:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804a0d4:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804a0d7:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a0d9:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804a0dc:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804a0df:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x804a0e1:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a0e3:	shrl	$2, %eax [IMM, REG]
	shrl	$2, %eax
	# 0x804a0e6:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x804a0e9:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x804a0ed:	je	0x804a1dc [IMM <CODEREF>]
	je	.label_47
	# 0x804a0f3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804a0f6:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804a0f9:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a0fc:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804a0ff:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a102:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a105:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804a108:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x804a10b:	jne	0x804a11a [IMM <CODEREF>]
	jne	.label_49
	# 0x804a10d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a110:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x804a114:	orl	$2, %edx [IMM, REG]
	orl	$2, %edx
	# 0x804a117:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x804a11a:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_49:
	movl	-0x14(%ebp), %eax
	# 0x804a11d:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804a120:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a122:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a125:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x804a128:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804a12a:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a12d:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x804a130:	notl	%eax [REG]
	notl	%eax
	# 0x804a132:	andl	%edx, %eax [REG, REG]
	andl	%edx, %eax
	# 0x804a134:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a136:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a139:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804a13c:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a13f:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804a142:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a144:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a147:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804a14a:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x804a14c:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a14e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a150:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a153:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x804a156:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x804a158:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a15b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804a15e:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x804a160:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x804a162:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x804a164:	jbe	0x804a172 [IMM <CODEREF>]
	jbe	.label_51
	# 0x804a166:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a169:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x804a16c:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a16f:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804a172:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_51:
	movl	-0x14(%ebp), %eax
	# 0x804a175:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x804a178:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804a17b:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x804a17e:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804a181:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a184:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804a189:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a18c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a18d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804a190:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804a195:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a198:	movl	$0, -0x20(%ebp) [IMM, MEM]
	movl	$0, -0x20(%ebp)
	# 0x804a19f:	jmp	0x804a1c7 [IMM <CODEREF>]
	jmp	.label_50
	# 0x804a1a1:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_48:
	movl	-0x20(%ebp), %eax
	# 0x804a1a4:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x804a1ab:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a1ae:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804a1b0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804a1b2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a1b5:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a1b6:	pushl	$0x80607a7 [IMM <DATAREF>]
	pushl	$label_46
	# 0x804a1bb:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x804a1c0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a1c3:	addl	$1, -0x20(%ebp) [IMM, MEM]
	addl	$1, -0x20(%ebp)
	# 0x804a1c7:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_50:
	movl	-0x20(%ebp), %eax
	# 0x804a1ca:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x804a1cd:	jb	0x804a1a1 [IMM <CODEREF>]
	jb	.label_48
	# 0x804a1cf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a1d2:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804a1d4:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804a1d9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a1dc:	nop	 []
.label_47:
	nop	
	# 0x804a1dd:	leave	 []
	leave	
	# 0x804a1de:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a1df

	# 0x804a1df:	pushl	%ebp [REG]
	.globl first_percent_b
	.type first_percent_b, @function
first_percent_b:
	pushl	%ebp
	# 0x804a1e0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a1e2:	jmp	0x804a212 [IMM <CODEREF>]
	jmp	.label_56
	# 0x804a1e4:	movl	8(%ebp), %eax [MEM, REG]
.label_52:
	movl	8(%ebp), %eax
	# 0x804a1e7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804a1ea:	cmpb	$0x25, %al [IMM, REG]
	cmpb	$0x25, %al
	# 0x804a1ec:	jne	0x804a20e [IMM <CODEREF>]
	jne	.label_53
	# 0x804a1ee:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a1f1:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804a1f4:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804a1f7:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x804a1fa:	cmpl	$0x25, %eax [IMM, REG]
	cmpl	$0x25, %eax
	# 0x804a1fd:	je	0x804a209 [IMM <CODEREF>]
	je	.label_54
	# 0x804a1ff:	cmpl	$0x62, %eax [IMM, REG]
	cmpl	$0x62, %eax
	# 0x804a202:	jne	0x804a20e [IMM <CODEREF>]
	jne	.label_53
	# 0x804a204:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a207:	jmp	0x804a221 [IMM <CODEREF>]
	jmp	.label_55
	# 0x804a209:	addl	$1, 8(%ebp) [IMM, MEM]
.label_54:
	addl	$1, 8(%ebp)
	# 0x804a20d:	nop	 []
	nop	
	# 0x804a20e:	addl	$1, 8(%ebp) [IMM, MEM]
.label_53:
	addl	$1, 8(%ebp)
	# 0x804a212:	movl	8(%ebp), %eax [MEM, REG]
.label_56:
	movl	8(%ebp), %eax
	# 0x804a215:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804a218:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a21a:	jne	0x804a1e4 [IMM <CODEREF>]
	jne	.label_52
	# 0x804a21c:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804a221:	popl	%ebp [REG]
.label_55:
	popl	%ebp
	# 0x804a222:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a223

	# 0x804a223:	pushl	%ebp [REG]
	.globl file_escape_init
	.type file_escape_init, @function
file_escape_init:
	pushl	%ebp
	# 0x804a224:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a226:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804a229:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x804a230:	jmp	0x804a283 [IMM <CODEREF>]
	jmp	.label_57
	# 0x804a232:	subl	$0xc, %esp [IMM, REG]
.label_59:
	subl	$0xc, %esp
	# 0x804a235:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804a238:	calll	0x8052d67 [IMM <CODEREF>]
	calll	c_isalnum
	# 0x804a23d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a240:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a242:	jne	0x804a25c [IMM <CODEREF>]
	jne	.label_58
	# 0x804a244:	cmpl	$0x7e, -0xc(%ebp) [IMM, MEM]
	cmpl	$0x7e, -0xc(%ebp)
	# 0x804a248:	je	0x804a25c [IMM <CODEREF>]
	je	.label_58
	# 0x804a24a:	cmpl	$0x2d, -0xc(%ebp) [IMM, MEM]
	cmpl	$0x2d, -0xc(%ebp)
	# 0x804a24e:	je	0x804a25c [IMM <CODEREF>]
	je	.label_58
	# 0x804a250:	cmpl	$0x2e, -0xc(%ebp) [IMM, MEM]
	cmpl	$0x2e, -0xc(%ebp)
	# 0x804a254:	je	0x804a25c [IMM <CODEREF>]
	je	.label_58
	# 0x804a256:	cmpl	$0x5f, -0xc(%ebp) [IMM, MEM]
	cmpl	$0x5f, -0xc(%ebp)
	# 0x804a25a:	jne	0x804a263 [IMM <CODEREF>]
	jne	.label_60
	# 0x804a25c:	movl	$1, %edx [IMM, REG]
.label_58:
	movl	$1, %edx
	# 0x804a261:	jmp	0x804a268 [IMM <CODEREF>]
	jmp	.label_61
	# 0x804a263:	movl	$0, %edx [IMM, REG]
.label_60:
	movl	$0, %edx
	# 0x804a268:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_61:
	movl	-0xc(%ebp), %eax
	# 0x804a26b:	addl	$0x806a600, %eax [IMM <DATAREF>, REG]
	addl	$RFC3986,  %eax
	# 0x804a270:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804a273:	orl	%eax, %edx [REG, REG]
	orl	%eax, %edx
	# 0x804a275:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a278:	addl	$0x806a600, %eax [IMM <DATAREF>, REG]
	addl	$RFC3986,  %eax
	# 0x804a27d:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804a27f:	addl	$1, -0xc(%ebp) [IMM, MEM]
	addl	$1, -0xc(%ebp)
	# 0x804a283:	cmpl	$0xff, -0xc(%ebp) [IMM, MEM]
.label_57:
	cmpl	$0xff, -0xc(%ebp)
	# 0x804a28a:	jle	0x804a232 [IMM <CODEREF>]
	jle	.label_59
	# 0x804a28c:	nop	 []
	nop	
	# 0x804a28d:	leave	 []
	leave	
	# 0x804a28e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a28f

	# 0x804a28f:	pushl	%ebp [REG]
	.globl abmon_init
	.type abmon_init, @function
abmon_init:
	pushl	%ebp
	# 0x804a290:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a292:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804a295:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a298:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804a29b:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804a2a1:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a2a4:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804a2a6:	movl	$0xc, -0x20(%ebp) [IMM, MEM]
	movl	$0xc, -0x20(%ebp)
	# 0x804a2ad:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_66:
	movl	-0x20(%ebp), %eax
	# 0x804a2b0:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x804a2b3:	movl	$0, -0x20(%ebp) [IMM, MEM]
	movl	$0, -0x20(%ebp)
	# 0x804a2ba:	movl	$0, -0x1c(%ebp) [IMM, MEM]
	movl	$0, -0x1c(%ebp)
	# 0x804a2c1:	jmp	0x804a349 [IMM <CODEREF>]
	jmp	.label_64
	# 0x804a2c6:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_63:
	movl	-0x18(%ebp), %eax
	# 0x804a2c9:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x804a2cc:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804a2cf:	addl	$0x2000e, %eax [IMM, REG]
	addl	$0x2000e, %eax
	# 0x804a2d4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a2d7:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a2d8:	calll	0x805d481 [IMM <CODEREF>]
	calll	rpl_nl_langinfo
	# 0x804a2dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a2e0:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804a2e3:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a2e6:	pushl	$0x25 [IMM]
	pushl	$0x25
	# 0x804a2e8:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804a2eb:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x804a2f0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a2f3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a2f5:	je	0x804a2fe [IMM <CODEREF>]
	je	.label_65
	# 0x804a2f7:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804a2fc:	jmp	0x804a364 [IMM <CODEREF>]
	jmp	.label_67
	# 0x804a2fe:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_65:
	movl	-0x1c(%ebp), %eax
	# 0x804a301:	shll	$7, %eax [IMM, REG]
	shll	$7, %eax
	# 0x804a304:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a306:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804a309:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804a30b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a30e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a310:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a312:	leal	-0x24(%ebp), %eax [MEM, REG]
	leal	-0x24(%ebp), %eax
	# 0x804a315:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a316:	pushl	$0x80 [IMM]
	pushl	$0x80
	# 0x804a31b:	pushl	%edx [REG]
	pushl	%edx
	# 0x804a31c:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804a31f:	calll	0x805717c [IMM <CODEREF>]
	calll	mbsalign
	# 0x804a324:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804a327:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a32a:	cmpl	$0x7f, -0x10(%ebp) [IMM, MEM]
	cmpl	$0x7f, -0x10(%ebp)
	# 0x804a32e:	jbe	0x804a337 [IMM <CODEREF>]
	jbe	.label_68
	# 0x804a330:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804a335:	jmp	0x804a364 [IMM <CODEREF>]
	jmp	.label_67
	# 0x804a337:	movl	-0x24(%ebp), %edx [MEM, REG]
.label_68:
	movl	-0x24(%ebp), %edx
	# 0x804a33a:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x804a33d:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x804a33f:	cmovael	%edx, %eax [REG, REG]
	cmovael	%edx, %eax
	# 0x804a342:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804a345:	addl	$1, -0x1c(%ebp) [IMM, MEM]
	addl	$1, -0x1c(%ebp)
	# 0x804a349:	cmpl	$0xb, -0x1c(%ebp) [IMM, MEM]
.label_64:
	cmpl	$0xb, -0x1c(%ebp)
	# 0x804a34d:	jle	0x804a2c6 [IMM <CODEREF>]
	jle	.label_63
	# 0x804a353:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x804a356:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x804a359:	ja	0x804a2ad [IMM <CODEREF>]
	ja	.label_66
	# 0x804a35f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804a364:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_67:
	movl	-0xc(%ebp), %ecx
	# 0x804a367:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804a36e:	je	0x804a375 [IMM <CODEREF>]
	je	.label_62
	# 0x804a370:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804a375:	leave	 []
.label_62:
	leave	
	# 0x804a376:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a377

	# 0x804a377:	pushl	%ebp [REG]
	.globl abformat_init
	.type abformat_init, @function
abformat_init:
	pushl	%ebp
	# 0x804a378:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a37a:	subl	$0x638, %esp [IMM, REG]
	subl	$0x638, %esp
	# 0x804a380:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804a386:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a389:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804a38b:	movl	$0, -0x630(%ebp) [IMM, MEM]
	movl	$0, -0x630(%ebp)
	# 0x804a395:	jmp	0x804a3c3 [IMM <CODEREF>]
	jmp	.label_85
	# 0x804a397:	movl	-0x630(%ebp), %eax [MEM, REG]
.label_70:
	movl	-0x630(%ebp), %eax
	# 0x804a39d:	movl	0x806a2c0(, %eax, 4), %eax [MEM, REG]
	movl	long_time_format(, %eax, 4),  %eax
	# 0x804a3a4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a3a5:	calll	0x804a1df [IMM <CODEREF>]
	calll	first_percent_b
	# 0x804a3aa:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804a3ad:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a3af:	movl	-0x630(%ebp), %eax [MEM, REG]
	movl	-0x630(%ebp), %eax
	# 0x804a3b5:	movl	%edx, -0x614(%ebp, %eax, 4) [REG, MEM]
	movl	%edx, -0x614(%ebp, %eax, 4)
	# 0x804a3bc:	addl	$1, -0x630(%ebp) [IMM, MEM]
	addl	$1, -0x630(%ebp)
	# 0x804a3c3:	cmpl	$1, -0x630(%ebp) [IMM, MEM]
.label_85:
	cmpl	$1, -0x630(%ebp)
	# 0x804a3ca:	jle	0x804a397 [IMM <CODEREF>]
	jle	.label_70
	# 0x804a3cc:	movl	-0x614(%ebp), %eax [MEM, REG]
	movl	-0x614(%ebp), %eax
	# 0x804a3d2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a3d4:	jne	0x804a3e4 [IMM <CODEREF>]
	jne	.label_72
	# 0x804a3d6:	movl	-0x610(%ebp), %eax [MEM, REG]
	movl	-0x610(%ebp), %eax
	# 0x804a3dc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a3de:	je	0x804a567 [IMM <CODEREF>]
	je	.label_77
	# 0x804a3e4:	subl	$0xc, %esp [IMM, REG]
.label_72:
	subl	$0xc, %esp
	# 0x804a3e7:	leal	-0x60c(%ebp), %eax [MEM, REG]
	leal	-0x60c(%ebp), %eax
	# 0x804a3ed:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a3ee:	calll	0x804a28f [IMM <CODEREF>]
	calll	abmon_init
	# 0x804a3f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a3f6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804a3f9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a3fb:	jne	0x804a56a [IMM <CODEREF>]
	jne	.label_83
	# 0x804a401:	movl	$0, -0x62c(%ebp) [IMM, MEM]
	movl	$0, -0x62c(%ebp)
	# 0x804a40b:	jmp	0x804a551 [IMM <CODEREF>]
	jmp	.label_69
	# 0x804a410:	movl	-0x62c(%ebp), %eax [MEM, REG]
.label_75:
	movl	-0x62c(%ebp), %eax
	# 0x804a416:	movl	0x806a2c0(, %eax, 4), %eax [MEM, REG]
	movl	long_time_format(, %eax, 4),  %eax
	# 0x804a41d:	movl	%eax, -0x620(%ebp) [REG, MEM]
	movl	%eax, -0x620(%ebp)
	# 0x804a423:	movl	$0, -0x628(%ebp) [IMM, MEM]
	movl	$0, -0x628(%ebp)
	# 0x804a42d:	jmp	0x804a53d [IMM <CODEREF>]
	jmp	.label_74
	# 0x804a432:	movl	-0x62c(%ebp), %edx [MEM, REG]
.label_80:
	movl	-0x62c(%ebp), %edx
	# 0x804a438:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a43a:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x804a43c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804a43e:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x804a441:	movl	-0x628(%ebp), %edx [MEM, REG]
	movl	-0x628(%ebp), %edx
	# 0x804a447:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804a449:	shll	$7, %eax [IMM, REG]
	shll	$7, %eax
	# 0x804a44c:	addl	$0x806a700, %eax [IMM <DATAREF>, REG]
	addl	$abformat,  %eax
	# 0x804a451:	movl	%eax, -0x61c(%ebp) [REG, MEM]
	movl	%eax, -0x61c(%ebp)
	# 0x804a457:	movl	-0x62c(%ebp), %eax [MEM, REG]
	movl	-0x62c(%ebp), %eax
	# 0x804a45d:	movl	-0x614(%ebp, %eax, 4), %eax [MEM, REG]
	movl	-0x614(%ebp, %eax, 4), %eax
	# 0x804a464:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a466:	jne	0x804a491 [IMM <CODEREF>]
	jne	.label_82
	# 0x804a468:	pushl	-0x620(%ebp) [MEM]
	pushl	-0x620(%ebp)
	# 0x804a46e:	pushl	$0x80607ac [IMM <DATAREF>]
	pushl	$label_79
	# 0x804a473:	pushl	$0x80 [IMM]
	pushl	$0x80
	# 0x804a478:	pushl	-0x61c(%ebp) [MEM]
	pushl	-0x61c(%ebp)
	# 0x804a47e:	calll	0x8049980 [IMM <CODEREF>]
	calll	snprintf
	# 0x804a483:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a486:	movl	%eax, -0x624(%ebp) [REG, MEM]
	movl	%eax, -0x624(%ebp)
	# 0x804a48c:	jmp	0x804a524 [IMM <CODEREF>]
	jmp	.label_76
	# 0x804a491:	movl	-0x62c(%ebp), %eax [MEM, REG]
.label_82:
	movl	-0x62c(%ebp), %eax
	# 0x804a497:	movl	-0x614(%ebp, %eax, 4), %eax [MEM, REG]
	movl	-0x614(%ebp, %eax, 4), %eax
	# 0x804a49e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a4a0:	movl	-0x620(%ebp), %eax [MEM, REG]
	movl	-0x620(%ebp), %eax
	# 0x804a4a6:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x804a4a8:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a4aa:	cmpl	$0x80, %eax [IMM, REG]
	cmpl	$0x80, %eax
	# 0x804a4af:	jg	0x804a56d [IMM <CODEREF>]
	jg	.label_71
	# 0x804a4b5:	movl	-0x62c(%ebp), %eax [MEM, REG]
	movl	-0x62c(%ebp), %eax
	# 0x804a4bb:	movl	-0x614(%ebp, %eax, 4), %eax [MEM, REG]
	movl	-0x614(%ebp, %eax, 4), %eax
	# 0x804a4c2:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804a4c4:	movl	-0x620(%ebp), %eax [MEM, REG]
	movl	-0x620(%ebp), %eax
	# 0x804a4ca:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x804a4cc:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804a4ce:	movl	%eax, -0x618(%ebp) [REG, MEM]
	movl	%eax, -0x618(%ebp)
	# 0x804a4d4:	movl	-0x62c(%ebp), %eax [MEM, REG]
	movl	-0x62c(%ebp), %eax
	# 0x804a4da:	movl	-0x614(%ebp, %eax, 4), %eax [MEM, REG]
	movl	-0x614(%ebp, %eax, 4), %eax
	# 0x804a4e1:	leal	2(%eax), %edx [MEM, REG]
	leal	2(%eax), %edx
	# 0x804a4e4:	leal	-0x60c(%ebp), %eax [MEM, REG]
	leal	-0x60c(%ebp), %eax
	# 0x804a4ea:	movl	-0x628(%ebp), %ecx [MEM, REG]
	movl	-0x628(%ebp), %ecx
	# 0x804a4f0:	shll	$7, %ecx [IMM, REG]
	shll	$7, %ecx
	# 0x804a4f3:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804a4f5:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804a4f8:	pushl	%edx [REG]
	pushl	%edx
	# 0x804a4f9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a4fa:	pushl	-0x620(%ebp) [MEM]
	pushl	-0x620(%ebp)
	# 0x804a500:	pushl	-0x618(%ebp) [MEM]
	pushl	-0x618(%ebp)
	# 0x804a506:	pushl	$0x80607af [IMM <DATAREF>]
	pushl	$label_84
	# 0x804a50b:	pushl	$0x80 [IMM]
	pushl	$0x80
	# 0x804a510:	pushl	-0x61c(%ebp) [MEM]
	pushl	-0x61c(%ebp)
	# 0x804a516:	calll	0x8049980 [IMM <CODEREF>]
	calll	snprintf
	# 0x804a51b:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804a51e:	movl	%eax, -0x624(%ebp) [REG, MEM]
	movl	%eax, -0x624(%ebp)
	# 0x804a524:	cmpl	$0, -0x624(%ebp) [IMM, MEM]
.label_76:
	cmpl	$0, -0x624(%ebp)
	# 0x804a52b:	js	0x804a570 [IMM <CODEREF>]
	js	.label_73
	# 0x804a52d:	cmpl	$0x7f, -0x624(%ebp) [IMM, MEM]
	cmpl	$0x7f, -0x624(%ebp)
	# 0x804a534:	jg	0x804a570 [IMM <CODEREF>]
	jg	.label_73
	# 0x804a536:	addl	$1, -0x628(%ebp) [IMM, MEM]
	addl	$1, -0x628(%ebp)
	# 0x804a53d:	cmpl	$0xb, -0x628(%ebp) [IMM, MEM]
.label_74:
	cmpl	$0xb, -0x628(%ebp)
	# 0x804a544:	jle	0x804a432 [IMM <CODEREF>]
	jle	.label_80
	# 0x804a54a:	addl	$1, -0x62c(%ebp) [IMM, MEM]
	addl	$1, -0x62c(%ebp)
	# 0x804a551:	cmpl	$1, -0x62c(%ebp) [IMM, MEM]
.label_69:
	cmpl	$1, -0x62c(%ebp)
	# 0x804a558:	jle	0x804a410 [IMM <CODEREF>]
	jle	.label_75
	# 0x804a55e:	movb	$1, 0x806b300 [IMM, MEM]
	movb	$1, use_abformat
	# 0x804a565:	jmp	0x804a571 [IMM <CODEREF>]
	jmp	.label_78
	# 0x804a567:	nop	 []
.label_77:
	nop	
	# 0x804a568:	jmp	0x804a571 [IMM <CODEREF>]
	jmp	.label_78
	# 0x804a56a:	nop	 []
.label_83:
	nop	
	# 0x804a56b:	jmp	0x804a571 [IMM <CODEREF>]
	jmp	.label_78
	# 0x804a56d:	nop	 []
.label_71:
	nop	
	# 0x804a56e:	jmp	0x804a571 [IMM <CODEREF>]
	jmp	.label_78
	# 0x804a570:	nop	 []
.label_73:
	nop	
	# 0x804a571:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_78:
	movl	-0xc(%ebp), %eax
	# 0x804a574:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x804a57b:	je	0x804a582 [IMM <CODEREF>]
	je	.label_81
	# 0x804a57d:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804a582:	leave	 []
.label_81:
	leave	
	# 0x804a583:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a584

	# 0x804a584:	pushl	%ebp [REG]
	.globl dev_ino_hash
	.type dev_ino_hash, @function
dev_ino_hash:
	pushl	%ebp
	# 0x804a585:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a587:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804a588:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x804a58b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a58e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a591:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a594:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x804a597:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804a599:	movl	0xc(%ebp), %ecx [MEM, REG]
	movl	0xc(%ebp), %ecx
	# 0x804a59c:	movl	$0, %ebx [IMM, REG]
	movl	$0, %ebx
	# 0x804a5a1:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804a5a2:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804a5a3:	pushl	%edx [REG]
	pushl	%edx
	# 0x804a5a4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a5a5:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x804a5aa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a5ad:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x804a5b0:	leave	 []
	leave	
	# 0x804a5b1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a5b2

	# 0x804a5b2:	pushl	%ebp [REG]
	.globl dev_ino_compare
	.type dev_ino_compare, @function
dev_ino_compare:
	pushl	%ebp
	# 0x804a5b3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a5b5:	pushl	%esi [REG]
	pushl	%esi
	# 0x804a5b6:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804a5b7:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x804a5ba:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a5bd:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a5c0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804a5c3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a5c6:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804a5c9:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x804a5cb:	movl	4(%eax), %ebx [MEM, REG]
	movl	4(%eax), %ebx
	# 0x804a5ce:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a5d1:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x804a5d4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804a5d6:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804a5d8:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x804a5da:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x804a5dc:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x804a5de:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a5e0:	jne	0x804a607 [IMM <CODEREF>]
	jne	.label_87
	# 0x804a5e2:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804a5e5:	movl	8(%eax), %ecx [MEM, REG]
	movl	8(%eax), %ecx
	# 0x804a5e8:	movl	0xc(%eax), %ebx [MEM, REG]
	movl	0xc(%eax), %ebx
	# 0x804a5eb:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a5ee:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x804a5f1:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804a5f4:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804a5f6:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x804a5f8:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x804a5fa:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x804a5fc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a5fe:	jne	0x804a607 [IMM <CODEREF>]
	jne	.label_87
	# 0x804a600:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804a605:	jmp	0x804a60c [IMM <CODEREF>]
	jmp	.label_86
	# 0x804a607:	movl	$0, %eax [IMM, REG]
.label_87:
	movl	$0, %eax
	# 0x804a60c:	andl	$1, %eax [IMM, REG]
.label_86:
	andl	$1, %eax
	# 0x804a60f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a612:	popl	%ebx [REG]
	popl	%ebx
	# 0x804a613:	popl	%esi [REG]
	popl	%esi
	# 0x804a614:	popl	%ebp [REG]
	popl	%ebp
	# 0x804a615:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a616

	# 0x804a616:	pushl	%ebp [REG]
	.globl dev_ino_free
	.type dev_ino_free, @function
dev_ino_free:
	pushl	%ebp
	# 0x804a617:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a619:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a61c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a61f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804a622:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804a627:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a62a:	nop	 []
	nop	
	# 0x804a62b:	leave	 []
	leave	
	# 0x804a62c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a62d

	# 0x804a62d:	pushl	%ebp [REG]
	.globl visit_dir
	.type visit_dir, @function
visit_dir:
	pushl	%ebp
	# 0x804a62e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a630:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804a633:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a636:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804a639:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804a63c:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804a63f:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804a642:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x804a645:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x804a648:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x804a64b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a64e:	pushl	$0x10 [IMM]
	pushl	$0x10
	# 0x804a650:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804a655:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a658:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a65b:	movl	-0x10(%ebp), %ecx [MEM, REG]
	movl	-0x10(%ebp), %ecx
	# 0x804a65e:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x804a661:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x804a664:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x804a666:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x804a669:	movl	-0x10(%ebp), %ecx [MEM, REG]
	movl	-0x10(%ebp), %ecx
	# 0x804a66c:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x804a66f:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x804a672:	movl	%eax, 8(%ecx) [REG, MEM]
	movl	%eax, 8(%ecx)
	# 0x804a675:	movl	%edx, 0xc(%ecx) [REG, MEM]
	movl	%edx, 0xc(%ecx)
	# 0x804a678:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804a67d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a680:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804a683:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a684:	calll	0x80557f0 [IMM <CODEREF>]
	calll	hash_insert
	# 0x804a689:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a68c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a68f:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804a693:	jne	0x804a69a [IMM <CODEREF>]
	jne	.label_88
	# 0x804a695:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x804a69a:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_88:
	movl	-0xc(%ebp), %eax
	# 0x804a69d:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x804a6a0:	setne	%al [REG]
	setne	%al
	# 0x804a6a3:	movb	%al, -0x11(%ebp) [REG, MEM]
	movb	%al, -0x11(%ebp)
	# 0x804a6a6:	cmpb	$0, -0x11(%ebp) [IMM, MEM]
	cmpb	$0, -0x11(%ebp)
	# 0x804a6aa:	je	0x804a6ba [IMM <CODEREF>]
	je	.label_89
	# 0x804a6ac:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a6af:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804a6b2:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804a6b7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a6ba:	movzbl	-0x11(%ebp), %eax [MEM, REG]
.label_89:
	movzbl	-0x11(%ebp), %eax
	# 0x804a6be:	leave	 []
	leave	
	# 0x804a6bf:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a6c0

	# 0x804a6c0:	pushl	%ebp [REG]
	.globl free_pending_ent
	.type free_pending_ent, @function
free_pending_ent:
	pushl	%ebp
	# 0x804a6c1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a6c3:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a6c6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a6c9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804a6cb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a6ce:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a6cf:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804a6d4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a6d7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a6da:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804a6dd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a6e0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a6e1:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804a6e6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a6e9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a6ec:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804a6ef:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804a6f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a6f7:	nop	 []
	nop	
	# 0x804a6f8:	leave	 []
	leave	
	# 0x804a6f9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a6fa

	# 0x804a6fa:	pushl	%ebp [REG]
	.globl is_colored
	.type is_colored, @function
is_colored:
	pushl	%ebp
	# 0x804a6fb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a6fd:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804a700:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a703:	movl	0x806a200(, %eax, 8), %eax [MEM, REG]
	movl	color_indicator(, %eax, 8),  %eax
	# 0x804a70a:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804a70d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a710:	movl	0x806a204(, %eax, 8), %eax [MEM, REG]
	movl	label_96(, %eax, 8),  %eax
	# 0x804a717:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a71a:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x804a71e:	je	0x804a75e [IMM <CODEREF>]
	je	.label_91
	# 0x804a720:	cmpl	$1, -0x10(%ebp) [IMM, MEM]
	cmpl	$1, -0x10(%ebp)
	# 0x804a724:	jne	0x804a738 [IMM <CODEREF>]
	jne	.label_90
	# 0x804a726:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a729:	movzbl	0(%eax), %edx [MEM, REG]
	movzbl	0(%eax), %edx
	# 0x804a72c:	movl	$0x80600c9, %eax [IMM <DATAREF>, REG]
	movl	$label_93,  %eax
	# 0x804a731:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804a734:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x804a736:	je	0x804a75e [IMM <CODEREF>]
	je	.label_91
	# 0x804a738:	cmpl	$2, -0x10(%ebp) [IMM, MEM]
.label_90:
	cmpl	$2, -0x10(%ebp)
	# 0x804a73c:	jne	0x804a757 [IMM <CODEREF>]
	jne	.label_95
	# 0x804a73e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804a741:	pushl	$2 [IMM]
	pushl	$2
	# 0x804a743:	pushl	$0x80607b8 [IMM <DATAREF>]
	pushl	$label_92
	# 0x804a748:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804a74b:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x804a750:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a753:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a755:	je	0x804a75e [IMM <CODEREF>]
	je	.label_91
	# 0x804a757:	movl	$1, %eax [IMM, REG]
.label_95:
	movl	$1, %eax
	# 0x804a75c:	jmp	0x804a763 [IMM <CODEREF>]
	jmp	.label_94
	# 0x804a75e:	movl	$0, %eax [IMM, REG]
.label_91:
	movl	$0, %eax
	# 0x804a763:	andl	$1, %eax [IMM, REG]
.label_94:
	andl	$1, %eax
	# 0x804a766:	leave	 []
	leave	
	# 0x804a767:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a768

	# 0x804a768:	pushl	%ebp [REG]
	.globl restore_default_color
	.type restore_default_color, @function
restore_default_color:
	pushl	%ebp
	# 0x804a769:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a76b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a76e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a771:	pushl	$0x806a200 [IMM <DATAREF>]
	pushl	$color_indicator
	# 0x804a776:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x804a77b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a77e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a781:	pushl	$0x806a208 [IMM <DATAREF>]
	pushl	$label_97
	# 0x804a786:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x804a78b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a78e:	nop	 []
	nop	
	# 0x804a78f:	leave	 []
	leave	
	# 0x804a790:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a791

	# 0x804a791:	pushl	%ebp [REG]
	.globl set_normal_color
	.type set_normal_color, @function
set_normal_color:
	pushl	%ebp
	# 0x804a792:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a794:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a797:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804a79e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a7a0:	je	0x804a7e3 [IMM <CODEREF>]
	je	.label_99
	# 0x804a7a2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a7a5:	pushl	$4 [IMM]
	pushl	$4
	# 0x804a7a7:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804a7ac:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a7af:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a7b1:	je	0x804a7e3 [IMM <CODEREF>]
	je	.label_99
	# 0x804a7b3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a7b6:	pushl	$0x806a200 [IMM <DATAREF>]
	pushl	$color_indicator
	# 0x804a7bb:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x804a7c0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a7c3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a7c6:	pushl	$0x806a220 [IMM <DATAREF>]
	pushl	$label_98
	# 0x804a7cb:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x804a7d0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a7d3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a7d6:	pushl	$0x806a208 [IMM <DATAREF>]
	pushl	$label_97
	# 0x804a7db:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x804a7e0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a7e3:	nop	 []
.label_99:
	nop	
	# 0x804a7e4:	leave	 []
	leave	
	# 0x804a7e5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a7e6

	# 0x804a7e6:	pushl	%ebp [REG]
	.globl sighandler
	.type sighandler, @function
sighandler:
	pushl	%ebp
	# 0x804a7e7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a7e9:	movl	0x806a520, %eax [MEM, REG]
	movl	interrupt_signal,  %eax
	# 0x804a7ee:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a7f0:	jne	0x804a7fa [IMM <CODEREF>]
	jne	.label_100
	# 0x804a7f2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a7f5:	movl	%eax, 0x806a520 [REG, MEM]
	movl	%eax, interrupt_signal
	# 0x804a7fa:	nop	 []
.label_100:
	nop	
	# 0x804a7fb:	popl	%ebp [REG]
	popl	%ebp
	# 0x804a7fc:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a7fd

	# 0x804a7fd:	pushl	%ebp [REG]
	.globl stophandler
	.type stophandler, @function
stophandler:
	pushl	%ebp
	# 0x804a7fe:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a800:	movl	0x806a520, %eax [MEM, REG]
	movl	interrupt_signal,  %eax
	# 0x804a805:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a807:	jne	0x804a816 [IMM <CODEREF>]
	jne	.label_101
	# 0x804a809:	movl	0x806a524, %eax [MEM, REG]
	movl	stop_signal_count,  %eax
	# 0x804a80e:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804a811:	movl	%eax, 0x806a524 [REG, MEM]
	movl	%eax, stop_signal_count
	# 0x804a816:	nop	 []
.label_101:
	nop	
	# 0x804a817:	popl	%ebp [REG]
	popl	%ebp
	# 0x804a818:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a819

	# 0x804a819:	pushl	%ebp [REG]
	.globl process_signals
	.type process_signals, @function
process_signals:
	pushl	%ebp
	# 0x804a81a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a81c:	subl	$0x98, %esp [IMM, REG]
	subl	$0x98, %esp
	# 0x804a822:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804a828:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804a82b:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804a82d:	jmp	0x804a8df [IMM <CODEREF>]
	jmp	.label_106
	# 0x804a832:	movzbl	0x806a446, %eax [MEM, REG]
.label_104:
	movzbl	used_color,  %eax
	# 0x804a839:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804a83b:	je	0x804a842 [IMM <CODEREF>]
	je	.label_105
	# 0x804a83d:	calll	0x804a768 [IMM <CODEREF>]
	calll	restore_default_color
	# 0x804a842:	movl	0x806a398, %eax [MEM, REG]
.label_105:
	movl	stdout,  %eax
	# 0x804a847:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a84a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a84b:	calll	0x8049700 [IMM <CODEREF>]
	calll	fflush_unlocked
	# 0x804a850:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a853:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804a856:	leal	-0x8c(%ebp), %eax [MEM, REG]
	leal	-0x8c(%ebp), %eax
	# 0x804a85c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a85d:	pushl	$0x806a4a0 [IMM <DATAREF>]
	pushl	$caught_signals
	# 0x804a862:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a864:	calll	0x80495b0 [IMM <CODEREF>]
	calll	sigprocmask
	# 0x804a869:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a86c:	movl	0x806a520, %eax [MEM, REG]
	movl	interrupt_signal,  %eax
	# 0x804a871:	movl	%eax, -0x94(%ebp) [REG, MEM]
	movl	%eax, -0x94(%ebp)
	# 0x804a877:	movl	0x806a524, %eax [MEM, REG]
	movl	stop_signal_count,  %eax
	# 0x804a87c:	movl	%eax, -0x90(%ebp) [REG, MEM]
	movl	%eax, -0x90(%ebp)
	# 0x804a882:	cmpl	$0, -0x90(%ebp) [IMM, MEM]
	cmpl	$0, -0x90(%ebp)
	# 0x804a889:	je	0x804a8a5 [IMM <CODEREF>]
	je	.label_103
	# 0x804a88b:	movl	-0x90(%ebp), %eax [MEM, REG]
	movl	-0x90(%ebp), %eax
	# 0x804a891:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x804a894:	movl	%eax, 0x806a524 [REG, MEM]
	movl	%eax, stop_signal_count
	# 0x804a899:	movl	$0x13, -0x94(%ebp) [IMM, MEM]
	movl	$0x13, -0x94(%ebp)
	# 0x804a8a3:	jmp	0x804a8b8 [IMM <CODEREF>]
	jmp	.label_102
	# 0x804a8a5:	subl	$8, %esp [IMM, REG]
.label_103:
	subl	$8, %esp
	# 0x804a8a8:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a8aa:	pushl	-0x94(%ebp) [MEM]
	pushl	-0x94(%ebp)
	# 0x804a8b0:	calll	0x8049680 [IMM <CODEREF>]
	calll	signal
	# 0x804a8b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a8b8:	subl	$0xc, %esp [IMM, REG]
.label_102:
	subl	$0xc, %esp
	# 0x804a8bb:	pushl	-0x94(%ebp) [MEM]
	pushl	-0x94(%ebp)
	# 0x804a8c1:	calll	0x8049530 [IMM <CODEREF>]
	calll	raise
	# 0x804a8c6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a8c9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804a8cc:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a8ce:	leal	-0x8c(%ebp), %eax [MEM, REG]
	leal	-0x8c(%ebp), %eax
	# 0x804a8d4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a8d5:	pushl	$2 [IMM]
	pushl	$2
	# 0x804a8d7:	calll	0x80495b0 [IMM <CODEREF>]
	calll	sigprocmask
	# 0x804a8dc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a8df:	movl	0x806a520, %eax [MEM, REG]
.label_106:
	movl	interrupt_signal,  %eax
	# 0x804a8e4:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a8e6:	jne	0x804a832 [IMM <CODEREF>]
	jne	.label_104
	# 0x804a8ec:	movl	0x806a524, %eax [MEM, REG]
	movl	stop_signal_count,  %eax
	# 0x804a8f1:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a8f3:	jne	0x804a832 [IMM <CODEREF>]
	jne	.label_104
	# 0x804a8f9:	nop	 []
	nop	
	# 0x804a8fa:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804a8fd:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x804a904:	je	0x804a90b [IMM <CODEREF>]
	je	.label_107
	# 0x804a906:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804a90b:	leave	 []
.label_107:
	leave	
	# 0x804a90c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804a90d

	# 0x804a90d:	pushl	%ebp [REG]
	.globl signal_setup
	.type signal_setup, @function
signal_setup:
	pushl	%ebp
	# 0x804a90e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804a910:	pushl	%edi [REG]
	pushl	%edi
	# 0x804a911:	pushl	%esi [REG]
	pushl	%esi
	# 0x804a912:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804a913:	subl	$0xbc, %esp [IMM, REG]
	subl	$0xbc, %esp
	# 0x804a919:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804a91c:	movb	%al, -0xbc(%ebp) [REG, MEM]
	movb	%al, -0xbc(%ebp)
	# 0x804a922:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804a928:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804a92b:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804a92d:	cmpb	$0, -0xbc(%ebp) [IMM, MEM]
	cmpb	$0, -0xbc(%ebp)
	# 0x804a934:	je	0x804aa56 [IMM <CODEREF>]
	je	.label_111
	# 0x804a93a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804a93d:	pushl	$0x806a4a0 [IMM <DATAREF>]
	pushl	$caught_signals
	# 0x804a942:	calll	0x8049a10 [IMM <CODEREF>]
	calll	sigemptyset
	# 0x804a947:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a94a:	movl	$0, -0xac(%ebp) [IMM, MEM]
	movl	$0, -0xac(%ebp)
	# 0x804a954:	jmp	0x804a9a8 [IMM <CODEREF>]
	jmp	.label_108
	# 0x804a956:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_116:
	movl	-0xac(%ebp), %eax
	# 0x804a95c:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804a963:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804a966:	leal	-0xa8(%ebp), %edx [MEM, REG]
	leal	-0xa8(%ebp), %edx
	# 0x804a96c:	pushl	%edx [REG]
	pushl	%edx
	# 0x804a96d:	pushl	$0 [IMM]
	pushl	$0
	# 0x804a96f:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a970:	calll	0x8049ad0 [IMM <CODEREF>]
	calll	sigaction
	# 0x804a975:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a978:	movl	-0xa8(%ebp), %eax [MEM, REG]
	movl	-0xa8(%ebp), %eax
	# 0x804a97e:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804a981:	je	0x804a9a1 [IMM <CODEREF>]
	je	.label_118
	# 0x804a983:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x804a989:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804a990:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a993:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a994:	pushl	$0x806a4a0 [IMM <DATAREF>]
	pushl	$caught_signals
	# 0x804a999:	calll	0x8049960 [IMM <CODEREF>]
	calll	sigaddset
	# 0x804a99e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a9a1:	addl	$1, -0xac(%ebp) [IMM, MEM]
.label_118:
	addl	$1, -0xac(%ebp)
	# 0x804a9a8:	cmpl	$0xb, -0xac(%ebp) [IMM, MEM]
.label_108:
	cmpl	$0xb, -0xac(%ebp)
	# 0x804a9af:	jle	0x804a956 [IMM <CODEREF>]
	jle	.label_116
	# 0x804a9b1:	leal	-0xa4(%ebp), %eax [MEM, REG]
	leal	-0xa4(%ebp), %eax
	# 0x804a9b7:	movl	$0x806a4a0, %ebx [IMM <DATAREF>, REG]
	movl	$caught_signals,  %ebx
	# 0x804a9bc:	movl	$0x20, %edx [IMM, REG]
	movl	$0x20, %edx
	# 0x804a9c1:	movl	%eax, %edi [REG, REG]
	movl	%eax, %edi
	# 0x804a9c3:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804a9c5:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x804a9c7:	rep movsl	(%esi), %es:(%edi) [MEM, MEM]
	rep movsl	(%esi), %es:(%edi)
	# 0x804a9c9:	movl	$0x10000000, -0x24(%ebp) [IMM, MEM]
	movl	$0x10000000, -0x24(%ebp)
	# 0x804a9d0:	movl	$0, -0xac(%ebp) [IMM, MEM]
	movl	$0, -0xac(%ebp)
	# 0x804a9da:	jmp	0x804aa4b [IMM <CODEREF>]
	jmp	.label_109
	# 0x804a9dc:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_110:
	movl	-0xac(%ebp), %eax
	# 0x804a9e2:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804a9e9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804a9ec:	pushl	%eax [REG]
	pushl	%eax
	# 0x804a9ed:	pushl	$0x806a4a0 [IMM <DATAREF>]
	pushl	$caught_signals
	# 0x804a9f2:	calll	0x80496f0 [IMM <CODEREF>]
	calll	sigismember
	# 0x804a9f7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804a9fa:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804a9fc:	je	0x804aa44 [IMM <CODEREF>]
	je	.label_119
	# 0x804a9fe:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x804aa04:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804aa0b:	cmpl	$0x14, %eax [IMM, REG]
	cmpl	$0x14, %eax
	# 0x804aa0e:	jne	0x804aa17 [IMM <CODEREF>]
	jne	.label_121
	# 0x804aa10:	movl	$0x804a7fd, %eax [IMM <CODEREF>, REG]
	movl	$stophandler,  %eax
	# 0x804aa15:	jmp	0x804aa1c [IMM <CODEREF>]
	jmp	.label_112
	# 0x804aa17:	movl	$0x804a7e6, %eax [IMM <CODEREF>, REG]
.label_121:
	movl	$sighandler,  %eax
	# 0x804aa1c:	movl	%eax, -0xa8(%ebp) [REG, MEM]
.label_112:
	movl	%eax, -0xa8(%ebp)
	# 0x804aa22:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x804aa28:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804aa2f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804aa32:	pushl	$0 [IMM]
	pushl	$0
	# 0x804aa34:	leal	-0xa8(%ebp), %edx [MEM, REG]
	leal	-0xa8(%ebp), %edx
	# 0x804aa3a:	pushl	%edx [REG]
	pushl	%edx
	# 0x804aa3b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804aa3c:	calll	0x8049ad0 [IMM <CODEREF>]
	calll	sigaction
	# 0x804aa41:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aa44:	addl	$1, -0xac(%ebp) [IMM, MEM]
.label_119:
	addl	$1, -0xac(%ebp)
	# 0x804aa4b:	cmpl	$0xb, -0xac(%ebp) [IMM, MEM]
.label_109:
	cmpl	$0xb, -0xac(%ebp)
	# 0x804aa52:	jle	0x804a9dc [IMM <CODEREF>]
	jle	.label_110
	# 0x804aa54:	jmp	0x804aaaf [IMM <CODEREF>]
	jmp	.label_113
	# 0x804aa56:	movl	$0, -0xac(%ebp) [IMM, MEM]
.label_111:
	movl	$0, -0xac(%ebp)
	# 0x804aa60:	jmp	0x804aaa6 [IMM <CODEREF>]
	jmp	.label_114
	# 0x804aa62:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_115:
	movl	-0xac(%ebp), %eax
	# 0x804aa68:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804aa6f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804aa72:	pushl	%eax [REG]
	pushl	%eax
	# 0x804aa73:	pushl	$0x806a4a0 [IMM <DATAREF>]
	pushl	$caught_signals
	# 0x804aa78:	calll	0x80496f0 [IMM <CODEREF>]
	calll	sigismember
	# 0x804aa7d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aa80:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804aa82:	je	0x804aa9f [IMM <CODEREF>]
	je	.label_120
	# 0x804aa84:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x804aa8a:	movl	0x8063240(, %eax, 4), %eax [MEM, REG]
	movl	sig.8191(, %eax, 4),  %eax
	# 0x804aa91:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804aa94:	pushl	$0 [IMM]
	pushl	$0
	# 0x804aa96:	pushl	%eax [REG]
	pushl	%eax
	# 0x804aa97:	calll	0x8049680 [IMM <CODEREF>]
	calll	signal
	# 0x804aa9c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aa9f:	addl	$1, -0xac(%ebp) [IMM, MEM]
.label_120:
	addl	$1, -0xac(%ebp)
	# 0x804aaa6:	cmpl	$0xb, -0xac(%ebp) [IMM, MEM]
.label_114:
	cmpl	$0xb, -0xac(%ebp)
	# 0x804aaad:	jle	0x804aa62 [IMM <CODEREF>]
	jle	.label_115
	# 0x804aaaf:	nop	 []
.label_113:
	nop	
	# 0x804aab0:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804aab3:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x804aaba:	je	0x804aac1 [IMM <CODEREF>]
	je	.label_117
	# 0x804aabc:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804aac1:	leal	-0xc(%ebp), %esp [MEM, REG]
.label_117:
	leal	-0xc(%ebp), %esp
	# 0x804aac4:	popl	%ebx [REG]
	popl	%ebx
	# 0x804aac5:	popl	%esi [REG]
	popl	%esi
	# 0x804aac6:	popl	%edi [REG]
	popl	%edi
	# 0x804aac7:	popl	%ebp [REG]
	popl	%ebp
	# 0x804aac8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804aac9

	# 0x804aac9:	pushl	%ebp [REG]
	.globl signal_init
	.type signal_init, @function
signal_init:
	pushl	%ebp
	# 0x804aaca:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804aacc:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804aacf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804aad2:	pushl	$1 [IMM]
	pushl	$1
	# 0x804aad4:	calll	0x804a90d [IMM <CODEREF>]
	calll	signal_setup
	# 0x804aad9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aadc:	nop	 []
	nop	
	# 0x804aadd:	leave	 []
	leave	
	# 0x804aade:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804aadf

	# 0x804aadf:	pushl	%ebp [REG]
	.globl signal_restore
	.type signal_restore, @function
signal_restore:
	pushl	%ebp
	# 0x804aae0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804aae2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804aae5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804aae8:	pushl	$0 [IMM]
	pushl	$0
	# 0x804aaea:	calll	0x804a90d [IMM <CODEREF>]
	calll	signal_setup
	# 0x804aaef:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aaf2:	nop	 []
	nop	
	# 0x804aaf3:	leave	 []
	leave	
	# 0x804aaf4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804aaf5

	# 0x804aaf5:	leal	4(%esp), %ecx [MEM, REG]
	.globl main
	.type main, @function
main:
	leal	4(%esp), %ecx
	# 0x804aaf9:	andl	$0xfffffff0, %esp [IMM, REG]
	andl	$0xfffffff0, %esp
	# 0x804aafc:	pushl	-4(%ecx) [MEM]
	pushl	-4(%ecx)
	# 0x804aaff:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x804ab00:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ab02:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804ab03:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804ab04:	subl	$0x40, %esp [IMM, REG]
	subl	$0x40, %esp
	# 0x804ab07:	movl	%ecx, %ebx [REG, REG]
	movl	%ecx, %ebx
	# 0x804ab09:	movl	4(%ebx), %eax [MEM, REG]
	movl	4(%ebx), %eax
	# 0x804ab0c:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x804ab0f:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804ab15:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804ab18:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804ab1a:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x804ab1d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804ab1f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ab22:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ab23:	calll	0x805a0bc [IMM <CODEREF>]
	calll	set_program_name
	# 0x804ab28:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab2b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ab2e:	pushl	$0x805eef7 [IMM <DATAREF>]
	pushl	$label_26
	# 0x804ab33:	pushl	$6 [IMM]
	pushl	$6
	# 0x804ab35:	calll	0x8049a30 [IMM <CODEREF>]
	calll	setlocale
	# 0x804ab3a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab3d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ab40:	pushl	$0x80607bb [IMM <DATAREF>]
	pushl	$label_143
	# 0x804ab45:	pushl	$0x805edd7 [IMM <DATAREF>]
	pushl	$label_33
	# 0x804ab4a:	calll	0x8049ae0 [IMM <CODEREF>]
	calll	bindtextdomain
	# 0x804ab4f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab52:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ab55:	pushl	$0x805edd7 [IMM <DATAREF>]
	pushl	$label_33
	# 0x804ab5a:	calll	0x8049720 [IMM <CODEREF>]
	calll	textdomain
	# 0x804ab5f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab62:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ab65:	pushl	$2 [IMM]
	pushl	$2
	# 0x804ab67:	calll	0x8049cdb [IMM <CODEREF>]
	calll	initialize_exit_failure
	# 0x804ab6c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab6f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ab72:	pushl	$0x8053975 [IMM <CODEREF>]
	pushl	$close_stdout
	# 0x804ab77:	calll	0x805ebb0 [IMM <CODEREF>]
	calll	atexit
	# 0x804ab7c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ab7f:	movl	$0, 0x806a528 [IMM, MEM]
	movl	$0, exit_status
	# 0x804ab89:	movb	$1, 0x806a478 [IMM, MEM]
	movb	$1, print_dir_name
	# 0x804ab90:	movl	$0, 0x806a3e4 [IMM, MEM]
	movl	$0, pending_dirs
	# 0x804ab9a:	movl	$0x80000000, 0x806a3e8 [IMM, MEM]
	movl	$0x80000000, current_time
	# 0x804aba4:	movl	$0xffffffff, 0x806a3ec [IMM, MEM]
	movl	$0xffffffff, label_165
	# 0x804abae:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804abb1:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x804abb4:	pushl	0(%ebx) [MEM]
	pushl	0(%ebx)
	# 0x804abb6:	calll	0x804b205 [IMM <CODEREF>]
	calll	decode_switches
	# 0x804abbb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804abbe:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804abc1:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804abc8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804abca:	je	0x804abd1 [IMM <CODEREF>]
	je	.label_158
	# 0x804abcc:	calll	0x804c4be [IMM <CODEREF>]
	calll	parse_ls_color
	# 0x804abd1:	movzbl	0x806a444, %eax [MEM, REG]
.label_158:
	movzbl	print_with_color,  %eax
	# 0x804abd8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804abda:	je	0x804ac2a [IMM <CODEREF>]
	je	.label_125
	# 0x804abdc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804abdf:	pushl	$0xd [IMM]
	pushl	$0xd
	# 0x804abe1:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804abe6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804abe9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804abeb:	jne	0x804ac23 [IMM <CODEREF>]
	jne	.label_164
	# 0x804abed:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804abf0:	pushl	$0xe [IMM]
	pushl	$0xe
	# 0x804abf2:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804abf7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804abfa:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804abfc:	je	0x804ac09 [IMM <CODEREF>]
	je	.label_167
	# 0x804abfe:	movzbl	0x806a3dc, %eax [MEM, REG]
	movzbl	color_symlink_as_referent,  %eax
	# 0x804ac05:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ac07:	jne	0x804ac23 [IMM <CODEREF>]
	jne	.label_164
	# 0x804ac09:	subl	$0xc, %esp [IMM, REG]
.label_167:
	subl	$0xc, %esp
	# 0x804ac0c:	pushl	$0xc [IMM]
	pushl	$0xc
	# 0x804ac0e:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804ac13:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ac16:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ac18:	je	0x804ac2a [IMM <CODEREF>]
	je	.label_125
	# 0x804ac1a:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804ac1f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ac21:	jne	0x804ac2a [IMM <CODEREF>]
	jne	.label_125
	# 0x804ac23:	movb	$1, 0x806a450 [IMM, MEM]
.label_164:
	movb	$1, check_symlink_color
	# 0x804ac2a:	movl	0x806a454, %eax [MEM, REG]
.label_125:
	movl	dereference,  %eax
	# 0x804ac2f:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804ac32:	jne	0x804ac63 [IMM <CODEREF>]
	jne	.label_133
	# 0x804ac34:	movzbl	0x806a459, %eax [MEM, REG]
	movzbl	immediate_dirs,  %eax
	# 0x804ac3b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ac3d:	jne	0x804ac52 [IMM <CODEREF>]
	jne	.label_139
	# 0x804ac3f:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x804ac44:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804ac47:	je	0x804ac52 [IMM <CODEREF>]
	je	.label_139
	# 0x804ac49:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804ac4e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ac50:	jne	0x804ac59 [IMM <CODEREF>]
	jne	.label_156
	# 0x804ac52:	movl	$2, %eax [IMM, REG]
.label_139:
	movl	$2, %eax
	# 0x804ac57:	jmp	0x804ac5e [IMM <CODEREF>]
	jmp	.label_166
	# 0x804ac59:	movl	$4, %eax [IMM, REG]
.label_156:
	movl	$4, %eax
	# 0x804ac5e:	movl	%eax, 0x806a454 [REG, MEM]
.label_166:
	movl	%eax, dereference
	# 0x804ac63:	movzbl	0x806a458, %eax [MEM, REG]
.label_133:
	movzbl	recursive,  %eax
	# 0x804ac6a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ac6c:	je	0x804acbd [IMM <CODEREF>]
	je	.label_147
	# 0x804ac6e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ac71:	pushl	$0x804a616 [IMM <CODEREF>]
	pushl	$dev_ino_free
	# 0x804ac76:	pushl	$0x804a5b2 [IMM <CODEREF>]
	pushl	$dev_ino_compare
	# 0x804ac7b:	pushl	$0x804a584 [IMM <CODEREF>]
	pushl	$dev_ino_hash
	# 0x804ac80:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ac82:	pushl	$0x1e [IMM]
	pushl	$0x1e
	# 0x804ac84:	calll	0x8054daf [IMM <CODEREF>]
	calll	hash_initialize
	# 0x804ac89:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ac8c:	movl	%eax, 0x806a3c0 [REG, MEM]
	movl	%eax, active_dir_set
	# 0x804ac91:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804ac96:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ac98:	jne	0x804ac9f [IMM <CODEREF>]
	jne	.label_151
	# 0x804ac9a:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x804ac9f:	subl	$0xc, %esp [IMM, REG]
.label_151:
	subl	$0xc, %esp
	# 0x804aca2:	pushl	$0x8049600 [IMM <CODEREF>]
	pushl	$free
	# 0x804aca7:	pushl	$0x8049870 [IMM <CODEREF>]
	pushl	$malloc
	# 0x804acac:	pushl	$0 [IMM]
	pushl	$0
	# 0x804acae:	pushl	$0 [IMM]
	pushl	$0
	# 0x804acb0:	pushl	$0x806a5c0 [IMM <DATAREF>]
	pushl	$dev_ino_obstack
	# 0x804acb5:	calll	0x805d612 [IMM <CODEREF>]
	calll	_obstack_begin
	# 0x804acba:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804acbd:	subl	$0xc, %esp [IMM, REG]
.label_147:
	subl	$0xc, %esp
	# 0x804acc0:	pushl	$0x80607d3 [IMM <DATAREF>]
	pushl	$label_159
	# 0x804acc5:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804acca:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804accd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804acd0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804acd1:	calll	0x805da4d [IMM <CODEREF>]
	calll	tzalloc
	# 0x804acd6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804acd9:	movl	%eax, 0x806a480 [REG, MEM]
	movl	%eax, localtz
	# 0x804acde:	movl	0x806a424, %eax [MEM, REG]
	movl	sort_type,  %eax
	# 0x804ace3:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x804ace6:	je	0x804ad11 [IMM <CODEREF>]
	je	.label_162
	# 0x804ace8:	movl	0x806a424, %eax [MEM, REG]
	movl	sort_type,  %eax
	# 0x804aced:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804acf0:	je	0x804ad11 [IMM <CODEREF>]
	je	.label_162
	# 0x804acf2:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804acf7:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804acf9:	je	0x804ad11 [IMM <CODEREF>]
	je	.label_162
	# 0x804acfb:	movzbl	0x806a3f0, %eax [MEM, REG]
	movzbl	print_scontext,  %eax
	# 0x804ad02:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad04:	jne	0x804ad11 [IMM <CODEREF>]
	jne	.label_162
	# 0x804ad06:	movzbl	0x806a42b, %eax [MEM, REG]
	movzbl	print_block_size,  %eax
	# 0x804ad0d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad0f:	je	0x804ad18 [IMM <CODEREF>]
	je	.label_123
	# 0x804ad11:	movl	$1, %eax [IMM, REG]
.label_162:
	movl	$1, %eax
	# 0x804ad16:	jmp	0x804ad1d [IMM <CODEREF>]
	jmp	.label_124
	# 0x804ad18:	movl	$0, %eax [IMM, REG]
.label_123:
	movl	$0, %eax
	# 0x804ad1d:	andl	$1, %eax [IMM, REG]
.label_124:
	andl	$1, %eax
	# 0x804ad20:	movb	%al, 0x806a484 [REG, MEM]
	movb	%al, format_needs_stat
	# 0x804ad25:	movzbl	0x806a484, %eax [MEM, REG]
	movzbl	format_needs_stat,  %eax
	# 0x804ad2c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ad2f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad31:	je	0x804ad64 [IMM <CODEREF>]
	je	.label_130
	# 0x804ad33:	movzbl	0x806a458, %eax [MEM, REG]
	movzbl	recursive,  %eax
	# 0x804ad3a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad3c:	jne	0x804ad5d [IMM <CODEREF>]
	jne	.label_138
	# 0x804ad3e:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804ad45:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad47:	jne	0x804ad5d [IMM <CODEREF>]
	jne	.label_138
	# 0x804ad49:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x804ad4e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ad50:	jne	0x804ad5d [IMM <CODEREF>]
	jne	.label_138
	# 0x804ad52:	movzbl	0x806a45a, %eax [MEM, REG]
	movzbl	directories_first,  %eax
	# 0x804ad59:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad5b:	je	0x804ad64 [IMM <CODEREF>]
	je	.label_130
	# 0x804ad5d:	movl	$1, %eax [IMM, REG]
.label_138:
	movl	$1, %eax
	# 0x804ad62:	jmp	0x804ad69 [IMM <CODEREF>]
	jmp	.label_136
	# 0x804ad64:	movl	$0, %eax [IMM, REG]
.label_130:
	movl	$0, %eax
	# 0x804ad69:	andl	$1, %eax [IMM, REG]
.label_136:
	andl	$1, %eax
	# 0x804ad6c:	movb	%al, 0x806a485 [REG, MEM]
	movb	%al, format_needs_type
	# 0x804ad71:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x804ad78:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ad7a:	je	0x804adb8 [IMM <CODEREF>]
	je	.label_148
	# 0x804ad7c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ad7f:	pushl	$0x8049600 [IMM <CODEREF>]
	pushl	$free
	# 0x804ad84:	pushl	$0x8049870 [IMM <CODEREF>]
	pushl	$malloc
	# 0x804ad89:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ad8b:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ad8d:	pushl	$0x806a540 [IMM <DATAREF>]
	pushl	$dired_obstack
	# 0x804ad92:	calll	0x805d612 [IMM <CODEREF>]
	calll	_obstack_begin
	# 0x804ad97:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ad9a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ad9d:	pushl	$0x8049600 [IMM <CODEREF>]
	pushl	$free
	# 0x804ada2:	pushl	$0x8049870 [IMM <CODEREF>]
	pushl	$malloc
	# 0x804ada7:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ada9:	pushl	$0 [IMM]
	pushl	$0
	# 0x804adab:	pushl	$0x806a580 [IMM <DATAREF>]
	pushl	$subdired_obstack
	# 0x804adb0:	calll	0x805d612 [IMM <CODEREF>]
	calll	_obstack_begin
	# 0x804adb5:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804adb8:	movzbl	0x806a445, %eax [MEM, REG]
.label_148:
	movzbl	print_hyperlink,  %eax
	# 0x804adbf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804adc1:	je	0x804ade5 [IMM <CODEREF>]
	je	.label_157
	# 0x804adc3:	calll	0x804a223 [IMM <CODEREF>]
	calll	file_escape_init
	# 0x804adc8:	calll	0x805c929 [IMM <CODEREF>]
	calll	xgethostname
	# 0x804adcd:	movl	%eax, 0x806a3e0 [REG, MEM]
	movl	%eax, hostname
	# 0x804add2:	movl	0x806a3e0, %eax [MEM, REG]
	movl	hostname,  %eax
	# 0x804add7:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804add9:	jne	0x804ade5 [IMM <CODEREF>]
	jne	.label_157
	# 0x804addb:	movl	$0x805eef7, 0x806a3e0 [IMM <DATAREF>, MEM]
	movl	$label_26, hostname
	# 0x804ade5:	movl	$0x64, 0x806a3c8 [IMM, MEM]
.label_157:
	movl	$0x64, cwd_n_alloc
	# 0x804adef:	movl	0x806a3c8, %eax [MEM, REG]
	movl	cwd_n_alloc,  %eax
	# 0x804adf4:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804adf7:	pushl	$0x88 [IMM]
	pushl	$0x88
	# 0x804adfc:	pushl	%eax [REG]
	pushl	%eax
	# 0x804adfd:	calll	0x805c3f0 [IMM <CODEREF>]
	calll	xnmalloc
	# 0x804ae02:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ae05:	movl	%eax, 0x806a3c4 [REG, MEM]
	movl	%eax, cwd_file
	# 0x804ae0a:	movl	$0, 0x806a3cc [IMM, MEM]
	movl	$0, cwd_n_used
	# 0x804ae14:	calll	0x804d221 [IMM <CODEREF>]
	calll	clear_files
	# 0x804ae19:	movl	0(%ebx), %eax [MEM, REG]
	movl	0(%ebx), %eax
	# 0x804ae1b:	subl	-0x30(%ebp), %eax [MEM, REG]
	subl	-0x30(%ebp), %eax
	# 0x804ae1e:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x804ae21:	cmpl	$0, -0x28(%ebp) [IMM, MEM]
	cmpl	$0, -0x28(%ebp)
	# 0x804ae25:	jg	0x804ae67 [IMM <CODEREF>]
	jg	.label_128
	# 0x804ae27:	movzbl	0x806a459, %eax [MEM, REG]
	movzbl	immediate_dirs,  %eax
	# 0x804ae2e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ae30:	je	0x804ae51 [IMM <CODEREF>]
	je	.label_132
	# 0x804ae32:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ae35:	pushl	$0x805eef7 [IMM <DATAREF>]
	pushl	$label_26
	# 0x804ae3a:	pushl	$1 [IMM]
	pushl	$1
	# 0x804ae3c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae3e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae40:	pushl	$3 [IMM]
	pushl	$3
	# 0x804ae42:	pushl	$0x80607d6 [IMM <DATAREF>]
	pushl	$label_137
	# 0x804ae47:	calll	0x804d560 [IMM <CODEREF>]
	calll	gobble_file
	# 0x804ae4c:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ae4f:	jmp	0x804ae9e [IMM <CODEREF>]
	jmp	.label_146
	# 0x804ae51:	subl	$4, %esp [IMM, REG]
.label_132:
	subl	$4, %esp
	# 0x804ae54:	pushl	$1 [IMM]
	pushl	$1
	# 0x804ae56:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae58:	pushl	$0x80607d6 [IMM <DATAREF>]
	pushl	$label_137
	# 0x804ae5d:	calll	0x804c94e [IMM <CODEREF>]
	calll	queue_directory
	# 0x804ae62:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ae65:	jmp	0x804ae9e [IMM <CODEREF>]
	jmp	.label_146
	# 0x804ae67:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_128:
	movl	-0x30(%ebp), %eax
	# 0x804ae6a:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804ae6d:	movl	%edx, -0x30(%ebp) [REG, MEM]
	movl	%edx, -0x30(%ebp)
	# 0x804ae70:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x804ae77:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x804ae7a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804ae7c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804ae7e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ae81:	pushl	$0x805eef7 [IMM <DATAREF>]
	pushl	$label_26
	# 0x804ae86:	pushl	$1 [IMM]
	pushl	$1
	# 0x804ae88:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae8a:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae8c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ae8e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ae8f:	calll	0x804d560 [IMM <CODEREF>]
	calll	gobble_file
	# 0x804ae94:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ae97:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804ae9a:	cmpl	0(%ebx), %eax [MEM, REG]
	cmpl	0(%ebx), %eax
	# 0x804ae9c:	jl	0x804ae67 [IMM <CODEREF>]
	jl	.label_128
	# 0x804ae9e:	movl	0x806a3cc, %eax [MEM, REG]
.label_146:
	movl	cwd_n_used,  %eax
	# 0x804aea3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804aea5:	je	0x804aec9 [IMM <CODEREF>]
	je	.label_155
	# 0x804aea7:	calll	0x804f7c0 [IMM <CODEREF>]
	calll	sort_files
	# 0x804aeac:	movzbl	0x806a459, %eax [MEM, REG]
	movzbl	immediate_dirs,  %eax
	# 0x804aeb3:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804aeb6:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804aeb8:	je	0x804aec9 [IMM <CODEREF>]
	je	.label_155
	# 0x804aeba:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804aebd:	pushl	$1 [IMM]
	pushl	$1
	# 0x804aebf:	pushl	$0 [IMM]
	pushl	$0
	# 0x804aec1:	calll	0x804e470 [IMM <CODEREF>]
	calll	extract_dirs_from_files
	# 0x804aec6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aec9:	movl	0x806a3cc, %eax [MEM, REG]
.label_155:
	movl	cwd_n_used,  %eax
	# 0x804aece:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804aed0:	je	0x804af03 [IMM <CODEREF>]
	je	.label_160
	# 0x804aed2:	calll	0x804f8de [IMM <CODEREF>]
	calll	print_current_files
	# 0x804aed7:	movl	0x806a3e4, %eax [MEM, REG]
	movl	pending_dirs,  %eax
	# 0x804aedc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804aede:	je	0x804aff9 [IMM <CODEREF>]
	je	.label_122
	# 0x804aee4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804aee7:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804aee9:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804aeee:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aef1:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804aef6:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804aef9:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804aefe:	jmp	0x804aff9 [IMM <CODEREF>]
	jmp	.label_122
	# 0x804af03:	cmpl	$1, -0x28(%ebp) [IMM, MEM]
.label_160:
	cmpl	$1, -0x28(%ebp)
	# 0x804af07:	jg	0x804aff9 [IMM <CODEREF>]
	jg	.label_122
	# 0x804af0d:	movl	0x806a3e4, %eax [MEM, REG]
	movl	pending_dirs,  %eax
	# 0x804af12:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804af14:	je	0x804aff9 [IMM <CODEREF>]
	je	.label_122
	# 0x804af1a:	movl	0x806a3e4, %eax [MEM, REG]
	movl	pending_dirs,  %eax
	# 0x804af1f:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804af22:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804af24:	jne	0x804aff9 [IMM <CODEREF>]
	jne	.label_122
	# 0x804af2a:	movb	$0, 0x806a478 [IMM, MEM]
	movb	$0, print_dir_name
	# 0x804af31:	jmp	0x804aff9 [IMM <CODEREF>]
	jmp	.label_122
	# 0x804af36:	movl	0x806a3e4, %eax [MEM, REG]
.label_168:
	movl	pending_dirs,  %eax
	# 0x804af3b:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x804af3e:	movl	0x806a3e4, %eax [MEM, REG]
	movl	pending_dirs,  %eax
	# 0x804af43:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804af46:	movl	%eax, 0x806a3e4 [REG, MEM]
	movl	%eax, pending_dirs
	# 0x804af4b:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804af50:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804af52:	je	0x804afc1 [IMM <CODEREF>]
	je	.label_141
	# 0x804af54:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804af57:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804af59:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804af5b:	jne	0x804afc1 [IMM <CODEREF>]
	jne	.label_141
	# 0x804af5d:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x804af60:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804af63:	pushl	%eax [REG]
	pushl	%eax
	# 0x804af64:	calll	0x804a03b [IMM <CODEREF>]
	calll	dev_ino_pop
	# 0x804af69:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804af6c:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804af71:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804af74:	leal	-0x1c(%ebp), %edx [MEM, REG]
	leal	-0x1c(%ebp), %edx
	# 0x804af77:	pushl	%edx [REG]
	pushl	%edx
	# 0x804af78:	pushl	%eax [REG]
	pushl	%eax
	# 0x804af79:	calll	0x8055853 [IMM <CODEREF>]
	calll	hash_delete
	# 0x804af7e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804af81:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804af84:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
	cmpl	$0, -0x20(%ebp)
	# 0x804af88:	jne	0x804afa3 [IMM <CODEREF>]
	jne	.label_150
	# 0x804af8a:	pushl	$0x8063270 [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.8218
	# 0x804af8f:	pushl	$0x63c [IMM]
	pushl	$0x63c
	# 0x804af94:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804af99:	pushl	$0x80607d8 [IMM <DATAREF>]
	pushl	$label_152
	# 0x804af9e:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804afa3:	subl	$0xc, %esp [IMM, REG]
.label_150:
	subl	$0xc, %esp
	# 0x804afa6:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x804afa9:	calll	0x804a616 [IMM <CODEREF>]
	calll	dev_ino_free
	# 0x804afae:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804afb1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804afb4:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x804afb7:	calll	0x804a6c0 [IMM <CODEREF>]
	calll	free_pending_ent
	# 0x804afbc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804afbf:	jmp	0x804aff9 [IMM <CODEREF>]
	jmp	.label_122
	# 0x804afc1:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_141:
	movl	-0x24(%ebp), %eax
	# 0x804afc4:	movzbl	8(%eax), %eax [MEM, REG]
	movzbl	8(%eax), %eax
	# 0x804afc8:	movzbl	%al, %ecx [REG, REG]
	movzbl	%al, %ecx
	# 0x804afcb:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804afce:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x804afd1:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804afd4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804afd6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804afd9:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804afda:	pushl	%edx [REG]
	pushl	%edx
	# 0x804afdb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804afdc:	calll	0x804c9d0 [IMM <CODEREF>]
	calll	print_dir
	# 0x804afe1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804afe4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804afe7:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x804afea:	calll	0x804a6c0 [IMM <CODEREF>]
	calll	free_pending_ent
	# 0x804afef:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804aff2:	movb	$1, 0x806a478 [IMM, MEM]
	movb	$1, print_dir_name
	# 0x804aff9:	movl	0x806a3e4, %eax [MEM, REG]
.label_122:
	movl	pending_dirs,  %eax
	# 0x804affe:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b000:	jne	0x804af36 [IMM <CODEREF>]
	jne	.label_168
	# 0x804b006:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804b00d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b00f:	je	0x804b0b8 [IMM <CODEREF>]
	je	.label_126
	# 0x804b015:	movzbl	0x806a446, %eax [MEM, REG]
	movzbl	used_color,  %eax
	# 0x804b01c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b01e:	je	0x804b0b8 [IMM <CODEREF>]
	je	.label_126
	# 0x804b024:	movl	0x806a200, %eax [MEM, REG]
	movl	color_indicator,  %eax
	# 0x804b029:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804b02c:	jne	0x804b060 [IMM <CODEREF>]
	jne	.label_131
	# 0x804b02e:	movl	0x806a204, %eax [MEM, REG]
	movl	label_96,  %eax
	# 0x804b033:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804b036:	pushl	$2 [IMM]
	pushl	$2
	# 0x804b038:	pushl	$0x80600c4 [IMM <DATAREF>]
	pushl	$label_135
	# 0x804b03d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b03e:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x804b043:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b046:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b048:	jne	0x804b060 [IMM <CODEREF>]
	jne	.label_131
	# 0x804b04a:	movl	0x806a208, %eax [MEM, REG]
	movl	label_97,  %eax
	# 0x804b04f:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804b052:	jne	0x804b060 [IMM <CODEREF>]
	jne	.label_131
	# 0x804b054:	movl	0x806a20c, %eax [MEM, REG]
	movl	label_144,  %eax
	# 0x804b059:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804b05c:	cmpb	$0x6d, %al [IMM, REG]
	cmpb	$0x6d, %al
	# 0x804b05e:	je	0x804b065 [IMM <CODEREF>]
	je	.label_145
	# 0x804b060:	calll	0x804a768 [IMM <CODEREF>]
.label_131:
	calll	restore_default_color
	# 0x804b065:	movl	0x806a398, %eax [MEM, REG]
.label_145:
	movl	stdout,  %eax
	# 0x804b06a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b06d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b06e:	calll	0x8049700 [IMM <CODEREF>]
	calll	fflush_unlocked
	# 0x804b073:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b076:	calll	0x804aadf [IMM <CODEREF>]
	calll	signal_restore
	# 0x804b07b:	movl	0x806a524, %eax [MEM, REG]
	movl	stop_signal_count,  %eax
	# 0x804b080:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804b083:	jmp	0x804b096 [IMM <CODEREF>]
	jmp	.label_149
	# 0x804b085:	subl	$0xc, %esp [IMM, REG]
.label_154:
	subl	$0xc, %esp
	# 0x804b088:	pushl	$0x13 [IMM]
	pushl	$0x13
	# 0x804b08a:	calll	0x8049530 [IMM <CODEREF>]
	calll	raise
	# 0x804b08f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b092:	subl	$1, -0x2c(%ebp) [IMM, MEM]
	subl	$1, -0x2c(%ebp)
	# 0x804b096:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
.label_149:
	cmpl	$0, -0x2c(%ebp)
	# 0x804b09a:	jne	0x804b085 [IMM <CODEREF>]
	jne	.label_154
	# 0x804b09c:	movl	0x806a520, %eax [MEM, REG]
	movl	interrupt_signal,  %eax
	# 0x804b0a1:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804b0a4:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x804b0a8:	je	0x804b0b8 [IMM <CODEREF>]
	je	.label_126
	# 0x804b0aa:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b0ad:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x804b0b0:	calll	0x8049530 [IMM <CODEREF>]
	calll	raise
	# 0x804b0b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b0b8:	movzbl	0x806a43c, %eax [MEM, REG]
.label_126:
	movzbl	dired,  %eax
	# 0x804b0bf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b0c1:	je	0x804b116 [IMM <CODEREF>]
	je	.label_129
	# 0x804b0c3:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b0c6:	pushl	$0x806a540 [IMM <DATAREF>]
	pushl	$dired_obstack
	# 0x804b0cb:	pushl	$0x80607de [IMM <DATAREF>]
	pushl	$label_153
	# 0x804b0d0:	calll	0x804a0c5 [IMM <CODEREF>]
	calll	dired_dump_obstack
	# 0x804b0d5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b0d8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b0db:	pushl	$0x806a580 [IMM <DATAREF>]
	pushl	$subdired_obstack
	# 0x804b0e0:	pushl	$0x80607e8 [IMM <DATAREF>]
	pushl	$label_161
	# 0x804b0e5:	calll	0x804a0c5 [IMM <CODEREF>]
	calll	dired_dump_obstack
	# 0x804b0ea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b0ed:	movl	0x806a46c, %eax [MEM, REG]
	movl	filename_quoting_options,  %eax
	# 0x804b0f2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b0f5:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b0f6:	calll	0x805a1bc [IMM <CODEREF>]
	calll	get_quoting_style
	# 0x804b0fb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b0fe:	movl	0x8063820(, %eax, 4), %eax [MEM, REG]
	movl	quoting_style_args(, %eax, 4),  %eax
	# 0x804b105:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b108:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b109:	pushl	$0x80607f8 [IMM <DATAREF>]
	pushl	$label_163
	# 0x804b10e:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x804b113:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b116:	movl	0x806a3c0, %eax [MEM, REG]
.label_129:
	movl	active_dir_set,  %eax
	# 0x804b11b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b11d:	je	0x804b15e [IMM <CODEREF>]
	je	.label_127
	# 0x804b11f:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804b124:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b127:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b128:	calll	0x80546c7 [IMM <CODEREF>]
	calll	hash_get_n_entries
	# 0x804b12d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b130:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b132:	je	0x804b14d [IMM <CODEREF>]
	je	.label_134
	# 0x804b134:	pushl	$0x8063270 [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.8218
	# 0x804b139:	pushl	$0x670 [IMM]
	pushl	$0x670
	# 0x804b13e:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804b143:	pushl	$0x8060820 [IMM <DATAREF>]
	pushl	$label_142
	# 0x804b148:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804b14d:	movl	0x806a3c0, %eax [MEM, REG]
.label_134:
	movl	active_dir_set,  %eax
	# 0x804b152:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b155:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b156:	calll	0x8054fac [IMM <CODEREF>]
	calll	hash_free
	# 0x804b15b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b15e:	movl	0x806a528, %eax [MEM, REG]
.label_127:
	movl	exit_status,  %eax
	# 0x804b163:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x804b166:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804b16d:	je	0x804b174 [IMM <CODEREF>]
	je	.label_140
	# 0x804b16f:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804b174:	leal	-8(%ebp), %esp [MEM, REG]
.label_140:
	leal	-8(%ebp), %esp
	# 0x804b177:	popl	%ecx [REG]
	popl	%ecx
	# 0x804b178:	popl	%ebx [REG]
	popl	%ebx
	# 0x804b179:	popl	%ebp [REG]
	popl	%ebp
	# 0x804b17a:	leal	-4(%ecx), %esp [MEM, REG]
	leal	-4(%ecx), %esp
	# 0x804b17d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804b17e

	# 0x804b17e:	pushl	%ebp [REG]
	.globl set_line_length
	.type set_line_length, @function
set_line_length:
	pushl	%ebp
	# 0x804b17f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804b181:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804b184:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804b187:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804b18a:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804b190:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804b193:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804b195:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b198:	pushl	$0x805eef7 [IMM <DATAREF>]
	pushl	$label_26
	# 0x804b19d:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x804b1a0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b1a1:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b1a3:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b1a5:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804b1a8:	calll	0x805d00c [IMM <CODEREF>]
	calll	xstrtoumax
	# 0x804b1ad:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b1b0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b1b2:	je	0x804b1bb [IMM <CODEREF>]
	je	.label_169
	# 0x804b1b4:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804b1b7:	je	0x804b1dc [IMM <CODEREF>]
	je	.label_172
	# 0x804b1b9:	jmp	0x804b1ed [IMM <CODEREF>]
	jmp	.label_173
	# 0x804b1bb:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_169:
	movl	-0x18(%ebp), %eax
	# 0x804b1be:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x804b1c1:	cmpl	$0, %edx [IMM, REG]
	cmpl	$0, %edx
	# 0x804b1c4:	jbe	0x804b1d0 [IMM <CODEREF>]
	jbe	.label_174
	# 0x804b1c6:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804b1cb:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804b1d0:	movl	%eax, 0x806a47c [REG, MEM]
.label_174:
	movl	%eax, line_length
	# 0x804b1d5:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804b1da:	jmp	0x804b1f2 [IMM <CODEREF>]
	jmp	.label_170
	# 0x804b1dc:	movl	$0xffffffff, 0x806a47c [IMM, MEM]
.label_172:
	movl	$0xffffffff, line_length
	# 0x804b1e6:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804b1eb:	jmp	0x804b1f2 [IMM <CODEREF>]
	jmp	.label_170
	# 0x804b1ed:	movl	$0, %eax [IMM, REG]
.label_173:
	movl	$0, %eax
	# 0x804b1f2:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_170:
	movl	-0xc(%ebp), %edx
	# 0x804b1f5:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x804b1fc:	je	0x804b203 [IMM <CODEREF>]
	je	.label_171
	# 0x804b1fe:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804b203:	leave	 []
.label_171:
	leave	
	# 0x804b204:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804b205

	# 0x804b205:	pushl	%ebp [REG]
	.globl decode_switches
	.type decode_switches, @function
decode_switches:
	pushl	%ebp
	# 0x804b206:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804b208:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804b209:	subl	$0x74, %esp [IMM, REG]
	subl	$0x74, %esp
	# 0x804b20c:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804b20f:	movl	%eax, -0x6c(%ebp) [REG, MEM]
	movl	%eax, -0x6c(%ebp)
	# 0x804b212:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804b218:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804b21b:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804b21d:	movl	$0, -0x58(%ebp) [IMM, MEM]
	movl	$0, -0x58(%ebp)
	# 0x804b224:	movb	$0, -0x5a(%ebp) [IMM, MEM]
	movb	$0, -0x5a(%ebp)
	# 0x804b228:	movb	$0, -0x59(%ebp) [IMM, MEM]
	movb	$0, -0x59(%ebp)
	# 0x804b22c:	movb	$0, 0x806a468 [IMM, MEM]
	movb	$0, qmark_funny_chars
	# 0x804b233:	movl	0x806a308, %eax [MEM, REG]
	movl	ls_mode,  %eax
	# 0x804b238:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804b23b:	je	0x804b249 [IMM <CODEREF>]
	je	.label_178
	# 0x804b23d:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804b240:	je	0x804b264 [IMM <CODEREF>]
	je	.label_189
	# 0x804b242:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804b245:	je	0x804b27f [IMM <CODEREF>]
	je	.label_246
	# 0x804b247:	jmp	0x804b2c5 [IMM <CODEREF>]
	jmp	.label_190
	# 0x804b249:	movl	$2, 0x806a41c [IMM, MEM]
.label_178:
	movl	$2, format
	# 0x804b253:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b256:	pushl	$7 [IMM]
	pushl	$7
	# 0x804b258:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b25a:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b25f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b262:	jmp	0x804b2ca [IMM <CODEREF>]
	jmp	.label_197
	# 0x804b264:	movl	$0, 0x806a41c [IMM, MEM]
.label_189:
	movl	$0, format
	# 0x804b26e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b271:	pushl	$7 [IMM]
	pushl	$7
	# 0x804b273:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b275:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b27a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b27d:	jmp	0x804b2ca [IMM <CODEREF>]
	jmp	.label_197
	# 0x804b27f:	subl	$0xc, %esp [IMM, REG]
.label_246:
	subl	$0xc, %esp
	# 0x804b282:	pushl	$1 [IMM]
	pushl	$1
	# 0x804b284:	calll	0x8049b00 [IMM <CODEREF>]
	calll	isatty
	# 0x804b289:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b28c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b28e:	je	0x804b2b2 [IMM <CODEREF>]
	je	.label_248
	# 0x804b290:	movl	$2, 0x806a41c [IMM, MEM]
	movl	$2, format
	# 0x804b29a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b29d:	pushl	$3 [IMM]
	pushl	$3
	# 0x804b29f:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b2a1:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b2a6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b2a9:	movb	$1, 0x806a468 [IMM, MEM]
	movb	$1, qmark_funny_chars
	# 0x804b2b0:	jmp	0x804b2ca [IMM <CODEREF>]
	jmp	.label_197
	# 0x804b2b2:	movl	$1, 0x806a41c [IMM, MEM]
.label_248:
	movl	$1, format
	# 0x804b2bc:	movb	$0, 0x806a468 [IMM, MEM]
	movb	$0, qmark_funny_chars
	# 0x804b2c3:	jmp	0x804b2ca [IMM <CODEREF>]
	jmp	.label_197
	# 0x804b2c5:	calll	0x8049b10 [IMM <CODEREF>]
.label_190:
	calll	abort
	# 0x804b2ca:	movl	$0, 0x806a420 [IMM, MEM]
.label_197:
	movl	$0, time_type
	# 0x804b2d4:	movl	$0, 0x806a424 [IMM, MEM]
	movl	$0, sort_type
	# 0x804b2de:	movb	$0, 0x806a428 [IMM, MEM]
	movb	$0, sort_reverse
	# 0x804b2e5:	movb	$0, 0x806a42a [IMM, MEM]
	movb	$0, numeric_ids
	# 0x804b2ec:	movb	$0, 0x806a42b [IMM, MEM]
	movb	$0, print_block_size
	# 0x804b2f3:	movl	$0, 0x806a440 [IMM, MEM]
	movl	$0, indicator_style
	# 0x804b2fd:	movb	$0, 0x806a451 [IMM, MEM]
	movb	$0, print_inode
	# 0x804b304:	movl	$1, 0x806a454 [IMM, MEM]
	movl	$1, dereference
	# 0x804b30e:	movb	$0, 0x806a458 [IMM, MEM]
	movb	$0, recursive
	# 0x804b315:	movb	$0, 0x806a459 [IMM, MEM]
	movb	$0, immediate_dirs
	# 0x804b31c:	movl	$0, 0x806a45c [IMM, MEM]
	movl	$0, ignore_mode
	# 0x804b326:	movl	$0, 0x806a460 [IMM, MEM]
	movl	$0, ignore_patterns
	# 0x804b330:	movl	$0, 0x806a464 [IMM, MEM]
	movl	$0, hide_patterns
	# 0x804b33a:	movb	$0, 0x806a3f0 [IMM, MEM]
	movb	$0, print_scontext
	# 0x804b341:	calll	0x804c841 [IMM <CODEREF>]
	calll	getenv_quoting_style
	# 0x804b346:	movl	$0x50, 0x806a47c [IMM, MEM]
	movl	$0x50, line_length
	# 0x804b350:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b353:	pushl	$0x8060849 [IMM <DATAREF>]
	pushl	$label_238
	# 0x804b358:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804b35d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b360:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x804b363:	cmpl	$0, -0x38(%ebp) [IMM, MEM]
	cmpl	$0, -0x38(%ebp)
	# 0x804b367:	je	0x804b3b6 [IMM <CODEREF>]
	je	.label_204
	# 0x804b369:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x804b36c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804b36f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b371:	je	0x804b3b6 [IMM <CODEREF>]
	je	.label_204
	# 0x804b373:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b376:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x804b379:	calll	0x804b17e [IMM <CODEREF>]
	calll	set_line_length
	# 0x804b37e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b381:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804b384:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b386:	je	0x804b3b6 [IMM <CODEREF>]
	je	.label_204
	# 0x804b388:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b38b:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x804b38e:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804b393:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b396:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804b398:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b39b:	pushl	$0x8060854 [IMM <DATAREF>]
	pushl	$label_226
	# 0x804b3a0:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804b3a5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b3a8:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804b3a9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b3aa:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b3ac:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b3ae:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804b3b3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b3b6:	subl	$4, %esp [IMM, REG]
.label_204:
	subl	$4, %esp
	# 0x804b3b9:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804b3bc:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b3bd:	pushl	$0x5413 [IMM]
	pushl	$0x5413
	# 0x804b3c2:	pushl	$1 [IMM]
	pushl	$1
	# 0x804b3c4:	calll	0x8049770 [IMM <CODEREF>]
	calll	ioctl
	# 0x804b3c9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b3cc:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x804b3cf:	je	0x804b3e6 [IMM <CODEREF>]
	je	.label_256
	# 0x804b3d1:	movzwl	-0x12(%ebp), %eax [MEM, REG]
	movzwl	-0x12(%ebp), %eax
	# 0x804b3d5:	testw	%ax, %ax [REG, REG]
	testw	%ax, %ax
	# 0x804b3d8:	je	0x804b3e6 [IMM <CODEREF>]
	je	.label_256
	# 0x804b3da:	movzwl	-0x12(%ebp), %eax [MEM, REG]
	movzwl	-0x12(%ebp), %eax
	# 0x804b3de:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x804b3e1:	movl	%eax, 0x806a47c [REG, MEM]
	movl	%eax, line_length
	# 0x804b3e6:	subl	$0xc, %esp [IMM, REG]
.label_256:
	subl	$0xc, %esp
	# 0x804b3e9:	pushl	$0x806088f [IMM <DATAREF>]
	pushl	$label_243
	# 0x804b3ee:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804b3f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b3f6:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x804b3f9:	movl	$8, 0x806a474 [IMM, MEM]
	movl	$8, tabsize
	# 0x804b403:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
	cmpl	$0, -0x34(%ebp)
	# 0x804b407:	je	0x804b45d [IMM <CODEREF>]
	je	.label_184
	# 0x804b409:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b40c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b40e:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804b411:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b412:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b414:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b416:	pushl	-0x34(%ebp) [MEM]
	pushl	-0x34(%ebp)
	# 0x804b419:	calll	0x805ca96 [IMM <CODEREF>]
	calll	xstrtoul
	# 0x804b41e:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b421:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b423:	jne	0x804b42f [IMM <CODEREF>]
	jne	.label_183
	# 0x804b425:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804b428:	movl	%eax, 0x806a474 [REG, MEM]
	movl	%eax, tabsize
	# 0x804b42d:	jmp	0x804b45d [IMM <CODEREF>]
	jmp	.label_184
	# 0x804b42f:	subl	$0xc, %esp [IMM, REG]
.label_183:
	subl	$0xc, %esp
	# 0x804b432:	pushl	-0x34(%ebp) [MEM]
	pushl	-0x34(%ebp)
	# 0x804b435:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804b43a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b43d:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804b43f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b442:	pushl	$0x8060898 [IMM <DATAREF>]
	pushl	$label_188
	# 0x804b447:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804b44c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b44f:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804b450:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b451:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b453:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b455:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804b45a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b45d:	movl	$0xffffffff, -0x14(%ebp) [IMM, MEM]
.label_184:
	movl	$0xffffffff, -0x14(%ebp)
	# 0x804b464:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b467:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804b46a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b46b:	pushl	$0x8060300 [IMM <DATAREF>]
	pushl	$long_options
	# 0x804b470:	pushl	$0x80608d8 [IMM <DATAREF>]
	pushl	$label_195
	# 0x804b475:	pushl	-0x6c(%ebp) [MEM]
	pushl	-0x6c(%ebp)
	# 0x804b478:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804b47b:	calll	0x80498e0 [IMM <CODEREF>]
	calll	getopt_long
	# 0x804b480:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b483:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804b486:	cmpl	$-1, -0x30(%ebp) [IMM, MEM]
	cmpl	$-1, -0x30(%ebp)
	# 0x804b48a:	jne	0x804b4a6 [IMM <CODEREF>]
	jne	.label_207
	# 0x804b48c:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804b491:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804b497:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x804b499:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b49b:	je	0x804bc5e [IMM <CODEREF>]
	je	.label_239
	# 0x804b4a1:	jmp	0x804bce7 [IMM <CODEREF>]
	jmp	.label_214
	# 0x804b4a6:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_207:
	movl	-0x30(%ebp), %eax
	# 0x804b4a9:	addl	$0x83, %eax [IMM, REG]
	addl	$0x83, %eax
	# 0x804b4ae:	cmpl	$0x113, %eax [IMM, REG]
	cmpl	$0x113, %eax
	# 0x804b4b3:	ja	0x804bc42 [IMM <CODEREF>]
	ja	.label_217
	# 0x804b4b9:	movl	0x8060aa0(, %eax, 4), %eax [MEM, REG]
	movl	label_222(, %eax, 4),  %eax
	# 0x804b4c0:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804b4c2:	movl	$2, 0x806a45c [IMM, MEM]
.label_2583:
	movl	$2, ignore_mode
	# 0x804b4cc:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b4d1

	# 0x804b4d1:	subl	$8, %esp [IMM, REG]
	.globl sub_804b4d1
	.type sub_804b4d1, @function
sub_804b4d1:
	subl	$8, %esp
	# 0x804b4d4:	pushl	$7 [IMM]
	pushl	$7
	# 0x804b4d6:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b4d8:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b4dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b4e0:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b4e5:	movl	$1, 0x806a420 [IMM, MEM]
.label_2584:
	movl	$1, time_type
	# 0x804b4ef:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b4f4:	movb	$1, 0x806a459 [IMM, MEM]
.label_2585:
	movb	$1, immediate_dirs
	# 0x804b4fb:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b500:	movl	$2, 0x806a45c [IMM, MEM]
.label_2586:
	movl	$2, ignore_mode
	# 0x804b50a:	movl	$0xffffffff, 0x806a424 [IMM, MEM]
	movl	$0xffffffff, sort_type
	# 0x804b514:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b518:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804b51d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b51f:	jne	0x804b543 [IMM <CODEREF>]
	jne	.label_230
	.section	.text
	.align	32
	#Procedure 0x804b521
	.globl sub_804b521
	.type sub_804b521, @function
sub_804b521:

	# 0x804b521:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b524:	pushl	$1 [IMM]
	pushl	$1
	# 0x804b526:	calll	0x8049b00 [IMM <CODEREF>]
	calll	isatty
	# 0x804b52b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b52e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b530:	je	0x804b539 [IMM <CODEREF>]
	je	.label_266
	# 0x804b532:	movl	$2, %eax [IMM, REG]
	movl	$2, %eax
	# 0x804b537:	jmp	0x804b53e [IMM <CODEREF>]
	jmp	.label_265
	# 0x804b539:	movl	$1, %eax [IMM, REG]
.label_266:
	movl	$1, %eax
	# 0x804b53e:	movl	%eax, 0x806a41c [REG, MEM]
.label_265:
	movl	%eax, format
	# 0x804b543:	movb	$0, 0x806a42b [IMM, MEM]
.label_230:
	movb	$0, print_block_size
	# 0x804b54a:	movb	$0, 0x806a444 [IMM, MEM]
	movb	$0, print_with_color
	# 0x804b551:	movb	$0, 0x806a445 [IMM, MEM]
	movb	$0, print_hyperlink
	# 0x804b558:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b55d:	movl	$2, 0x806a440 [IMM, MEM]
.label_2608:
	movl	$2, indicator_style
	# 0x804b567:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b56c:	movl	$0, 0x806a41c [IMM, MEM]
.label_2587:
	movl	$0, format
	# 0x804b576:	movb	$0, 0x806a1e2 [IMM, MEM]
	movb	$0, print_owner
	# 0x804b57d:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b582:	movl	$0xb0, 0x806a42c [IMM, MEM]
.label_2588:
	movl	$0xb0, human_output_opts
	# 0x804b58c:	movl	0x806a42c, %eax [MEM, REG]
	movl	human_output_opts,  %eax
	# 0x804b591:	movl	%eax, 0x806a438 [REG, MEM]
	movl	%eax, file_human_output_opts
	# 0x804b596:	movl	$1, 0x806a430 [IMM, MEM]
	movl	$1, output_block_size
	# 0x804b5a0:	movl	$0, 0x806a434 [IMM, MEM]
	movl	$0, label_215
	# 0x804b5aa:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804b5af:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804b5b5:	movl	%eax, 0x806a1e8 [REG, MEM]
	movl	%eax, file_output_block_size
	# 0x804b5ba:	movl	%edx, 0x806a1ec [REG, MEM]
	movl	%edx, label_216
	# 0x804b5c0:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b5c5:	movb	$1, 0x806a451 [IMM, MEM]
.label_2589:
	movb	$1, print_inode
	# 0x804b5cc:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b5d1:	movb	$1, -0x59(%ebp) [IMM, MEM]
.label_2590:
	movb	$1, -0x59(%ebp)
	# 0x804b5d5:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b5da:	movl	$0, 0x806a41c [IMM, MEM]
.label_2591:
	movl	$0, format
	# 0x804b5e4:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b5e9:	movl	$4, 0x806a41c [IMM, MEM]
.label_2592:
	movl	$4, format
	# 0x804b5f3:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b5f8:	movb	$1, 0x806a42a [IMM, MEM]
.label_2593:
	movb	$1, numeric_ids
	# 0x804b5ff:	movl	$0, 0x806a41c [IMM, MEM]
	movl	$0, format
	# 0x804b609:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b60e:	movl	$0, 0x806a41c [IMM, MEM]
.label_2594:
	movl	$0, format
	# 0x804b618:	movb	$0, 0x806a1e3 [IMM, MEM]
	movb	$0, print_group
	# 0x804b61f:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b624:	movl	$1, 0x806a440 [IMM, MEM]
.label_2595:
	movl	$1, indicator_style
	# 0x804b62e:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b633:	movb	$1, 0x806a468 [IMM, MEM]
.label_2596:
	movb	$1, qmark_funny_chars
	# 0x804b63a:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b63f:	movb	$1, 0x806a428 [IMM, MEM]
.label_2597:
	movb	$1, sort_reverse
	# 0x804b646:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b64b:	movb	$1, 0x806a42b [IMM, MEM]
.label_2598:
	movb	$1, print_block_size
	# 0x804b652:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b657:	movl	$4, 0x806a424 [IMM, MEM]
.label_2599:
	movl	$4, sort_type
	# 0x804b661:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b665:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b66a:	movl	$2, 0x806a420 [IMM, MEM]
.label_2600:
	movl	$2, time_type
	# 0x804b674:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b679:	movl	$3, 0x806a424 [IMM, MEM]
.label_2601:
	movl	$3, sort_type
	# 0x804b683:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b687:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b68c:	movl	0x806a3a0, %eax [MEM, REG]
.label_2602:
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b691
	.globl sub_804b691
	.type sub_804b691, @function
sub_804b691:

	# 0x804b691:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b694:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b695:	calll	0x804b17e [IMM <CODEREF>]
	calll	set_line_length
	# 0x804b69a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b69d:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804b6a0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804b6a2:	je	0x804bc4c [IMM <CODEREF>]
	je	.label_268
	# 0x804b6a8:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	# 0x804b6ad:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b6b0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b6b1:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804b6b6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b6b9:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804b6bb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b6be:	pushl	$0x8060904 [IMM <DATAREF>]
	pushl	$label_267
	# 0x804b6c3:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804b6c8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b6cb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b6ce:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804b6cf:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b6d0:	pushl	$0x8060917 [IMM <DATAREF>]
	pushl	$label_269
	# 0x804b6d5:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b6d7:	pushl	$2 [IMM]
	pushl	$2
	# 0x804b6d9:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804b6de:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b6e1:	movl	$3, 0x806a41c [IMM, MEM]
.label_2603:
	movl	$3, format
	# 0x804b6eb:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b6f0:	movl	$1, 0x806a45c [IMM, MEM]
.label_2570:
	movl	$1, ignore_mode
	# 0x804b6fa:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b6ff

	# 0x804b6ff:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804b6ff
	.type sub_804b6ff, @function
sub_804b6ff:
	subl	$0xc, %esp
	# 0x804b702:	pushl	$0x806091e [IMM <DATAREF>]
	pushl	$label_271
	# 0x804b707:	calll	0x804d069 [IMM <CODEREF>]
	calll	add_ignore_pattern
	# 0x804b70c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b70f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b712:	pushl	$0x8060921 [IMM <DATAREF>]
	pushl	$label_270
	# 0x804b717:	calll	0x804d069 [IMM <CODEREF>]
	calll	add_ignore_pattern
	# 0x804b71c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b71f:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b724:	movl	$2, 0x806a41c [IMM, MEM]
.label_2571:
	movl	$2, format
	# 0x804b72e:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b733:	movb	$1, 0x806a43c [IMM, MEM]
.label_2572:
	movb	$1, dired
	# 0x804b73a:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b73f:	movl	$3, 0x806a440 [IMM, MEM]
.label_2573:
	movl	$3, indicator_style
	# 0x804b749:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b74e:	movb	$0, 0x806a1e3 [IMM, MEM]
.label_2574:
	movb	$0, print_group
	# 0x804b755:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b75a:	movl	$3, 0x806a454 [IMM, MEM]
.label_2575:
	movl	$3, dereference
	# 0x804b764:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b769:	movl	$4, 0x806a454 [IMM, MEM]
.label_2607:
	movl	$4, dereference
	# 0x804b773:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b778:	movl	0x806a3a0, %eax [MEM, REG]
.label_2576:
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b77d
	.globl sub_804b77d
	.type sub_804b77d, @function
sub_804b77d:

	# 0x804b77d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b780:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b781:	calll	0x804d069 [IMM <CODEREF>]
	calll	add_ignore_pattern
	# 0x804b786:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b789:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b78e:	movl	$5, 0x806a454 [IMM, MEM]
.label_2577:
	movl	$5, dereference
	# 0x804b798:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b79d

	# 0x804b79d:	subl	$8, %esp [IMM, REG]
	.globl sub_804b79d
	.type sub_804b79d, @function
sub_804b79d:
	subl	$8, %esp
	# 0x804b7a0:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b7a2:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b7a4:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b7a9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b7ac:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b7b1

	# 0x804b7b1:	subl	$8, %esp [IMM, REG]
	.globl sub_804b7b1
	.type sub_804b7b1, @function
sub_804b7b1:
	subl	$8, %esp
	# 0x804b7b4:	pushl	$5 [IMM]
	pushl	$5
	# 0x804b7b6:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b7b8:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804b7bd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b7c0:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b7c5:	movb	$1, 0x806a458 [IMM, MEM]
.label_2578:
	movb	$1, recursive
	# 0x804b7cc:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b7d1:	movl	$2, 0x806a424 [IMM, MEM]
.label_2579:
	movl	$2, sort_type
	# 0x804b7db:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b7df:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b7e4

	# 0x804b7e4:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804b7e4
	.type sub_804b7e4, @function
sub_804b7e4:
	subl	$0xc, %esp
	# 0x804b7e7:	pushl	$0x8060925 [IMM <DATAREF>]
	pushl	$label_272
	# 0x804b7ec:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804b7f1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b7f4:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804b7f6:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	# 0x804b7fb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b7fe:	pushl	$2 [IMM]
	pushl	$2
	# 0x804b800:	pushl	%edx [REG]
	pushl	%edx
	# 0x804b801:	pushl	$0x805eef7 [IMM <DATAREF>]
	pushl	$label_26
	# 0x804b806:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b808:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x804b80a:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b80c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b80e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804b810:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b811:	calll	0x805c759 [IMM <CODEREF>]
	calll	xnumtoumax
	# 0x804b816:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x804b819:	movl	%eax, 0x806a474 [REG, MEM]
	movl	%eax, tabsize
	# 0x804b81e:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b823:	movl	$0xffffffff, 0x806a424 [IMM, MEM]
.label_2580:
	movl	$0xffffffff, sort_type
	# 0x804b82d:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b831:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b836:	movl	$1, 0x806a424 [IMM, MEM]
.label_2581:
	movl	$1, sort_type
	# 0x804b840:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b844:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b849:	movl	0x806a41c, %eax [MEM, REG]
.label_2569:
	movl	format,  %eax
	# 0x804b84e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b850:	je	0x804bc52 [IMM <CODEREF>]
	je	.label_191
	# 0x804b856:	movl	$1, 0x806a41c [IMM, MEM]
	movl	$1, format
	# 0x804b860:	jmp	0x804bc52 [IMM <CODEREF>]
	jmp	.label_191
	# 0x804b865:	movb	$1, 0x806a429 [IMM, MEM]
.label_2604:
	movb	$1, print_author
	# 0x804b86c:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804b871

	# 0x804b871:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804b871
	.type sub_804b871, @function
sub_804b871:
	subl	$0xc, %esp
	# 0x804b874:	pushl	$8 [IMM]
	pushl	$8
	# 0x804b876:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804b87b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b87e:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804b881:	movl	0x806a3a0, %edx [MEM, REG]
	movl	optarg,  %edx
	# 0x804b887:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804b88a:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804b88c:	movl	0x806a464, %edx [MEM, REG]
	movl	hide_patterns,  %edx
	# 0x804b892:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804b895:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x804b898:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804b89b:	movl	%eax, 0x806a464 [REG, MEM]
	movl	%eax, hide_patterns
	# 0x804b8a0:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b8a5:	movl	0x806a310, %edx [MEM, REG]
.label_2617:
	movl	argmatch_die,  %edx
	# 0x804b8ab:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b8b0
	.globl sub_804b8b0
	.type sub_804b8b0, @function
sub_804b8b0:

	# 0x804b8b0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b8b3:	pushl	%edx [REG]
	pushl	%edx
	# 0x804b8b4:	pushl	$4 [IMM]
	pushl	$4
	# 0x804b8b6:	pushl	$0x8060660 [IMM <DATAREF>]
	pushl	$sort_types
	# 0x804b8bb:	pushl	$0x8060648 [IMM <DATAREF>]
	pushl	$sort_args
	# 0x804b8c0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b8c1:	pushl	$0x8060936 [IMM <DATAREF>]
	pushl	$label_273
	# 0x804b8c6:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804b8cb:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b8ce:	movl	0x8060660(, %eax, 4), %eax [MEM, REG]
	movl	sort_types(, %eax, 4),  %eax
	# 0x804b8d5:	movl	%eax, 0x806a424 [REG, MEM]
	movl	%eax, sort_type
	# 0x804b8da:	movb	$1, -0x5a(%ebp) [IMM, MEM]
	movb	$1, -0x5a(%ebp)
	# 0x804b8de:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b8e3:	movb	$1, 0x806a45a [IMM, MEM]
.label_2611:
	movb	$1, directories_first
	# 0x804b8ea:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b8ef:	movl	0x806a310, %edx [MEM, REG]
.label_2618:
	movl	argmatch_die,  %edx
	# 0x804b8f5:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b8fa
	.globl sub_804b8fa
	.type sub_804b8fa, @function
sub_804b8fa:

	# 0x804b8fa:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b8fd:	pushl	%edx [REG]
	pushl	%edx
	# 0x804b8fe:	pushl	$4 [IMM]
	pushl	$4
	# 0x804b900:	pushl	$0x80606ac [IMM <DATAREF>]
	pushl	$time_types
	# 0x804b905:	pushl	$0x8060694 [IMM <DATAREF>]
	pushl	$time_args
	# 0x804b90a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b90b:	pushl	$0x806093d [IMM <DATAREF>]
	pushl	$label_274
	# 0x804b910:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804b915:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b918:	movl	0x80606ac(, %eax, 4), %eax [MEM, REG]
	movl	time_types(, %eax, 4),  %eax
	# 0x804b91f:	movl	%eax, 0x806a420 [REG, MEM]
	movl	%eax, time_type
	# 0x804b924:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b929:	movl	0x806a310, %edx [MEM, REG]
.label_2609:
	movl	argmatch_die,  %edx
	# 0x804b92f:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b934
	.globl sub_804b934
	.type sub_804b934, @function
sub_804b934:

	# 0x804b934:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b937:	pushl	%edx [REG]
	pushl	%edx
	# 0x804b938:	pushl	$4 [IMM]
	pushl	$4
	# 0x804b93a:	pushl	$0x8060620 [IMM <DATAREF>]
	pushl	$format_types
	# 0x804b93f:	pushl	$0x8060600 [IMM <DATAREF>]
	pushl	$format_args
	# 0x804b944:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b945:	pushl	$0x8060944 [IMM <DATAREF>]
	pushl	$label_275
	# 0x804b94a:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804b94f:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b952:	movl	0x8060620(, %eax, 4), %eax [MEM, REG]
	movl	format_types(, %eax, 4),  %eax
	# 0x804b959:	movl	%eax, 0x806a41c [REG, MEM]
	movl	%eax, format
	# 0x804b95e:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b963:	movl	$0, 0x806a41c [IMM, MEM]
.label_2610:
	movl	$0, format
	.section	.text
	.align	32
	#Procedure 0x804b96d
	.globl sub_804b96d
	.type sub_804b96d, @function
sub_804b96d:

	# 0x804b96d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b970:	pushl	$0x805ff8f [IMM <DATAREF>]
	pushl	$label_276
	# 0x804b975:	calll	0x8049f7a [IMM <CODEREF>]
	calll	bad_cast
	# 0x804b97a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b97d:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x804b980:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804b985:	movl	0x806a3a0, %eax [MEM, REG]
.label_2606:
	movl	optarg,  %eax
	# 0x804b98a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b98c:	je	0x804b9c3 [IMM <CODEREF>]
	je	.label_245
	# 0x804b98e:	movl	0x806a310, %edx [MEM, REG]
	movl	argmatch_die,  %edx
	# 0x804b994:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804b999
	.globl sub_804b999
	.type sub_804b999, @function
sub_804b999:

	# 0x804b999:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804b99c:	pushl	%edx [REG]
	pushl	%edx
	# 0x804b99d:	pushl	$4 [IMM]
	pushl	$4
	# 0x804b99f:	pushl	$0x8060740 [IMM <DATAREF>]
	pushl	$when_types
	# 0x804b9a4:	pushl	$0x8060700 [IMM <DATAREF>]
	pushl	$when_args
	# 0x804b9a9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804b9aa:	pushl	$0x806094d [IMM <DATAREF>]
	pushl	$label_277
	# 0x804b9af:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804b9b4:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804b9b7:	movl	0x8060740(, %eax, 4), %eax [MEM, REG]
	movl	when_types(, %eax, 4),  %eax
	# 0x804b9be:	movl	%eax, -0x54(%ebp) [REG, MEM]
	movl	%eax, -0x54(%ebp)
	# 0x804b9c1:	jmp	0x804b9ca [IMM <CODEREF>]
	jmp	.label_278
	# 0x804b9c3:	movl	$1, -0x54(%ebp) [IMM, MEM]
.label_245:
	movl	$1, -0x54(%ebp)
	# 0x804b9ca:	cmpl	$1, -0x54(%ebp) [IMM, MEM]
.label_278:
	cmpl	$1, -0x54(%ebp)
	# 0x804b9ce:	je	0x804b9e7 [IMM <CODEREF>]
	je	.label_257
	# 0x804b9d0:	cmpl	$2, -0x54(%ebp) [IMM, MEM]
	cmpl	$2, -0x54(%ebp)
	# 0x804b9d4:	jne	0x804b9ee [IMM <CODEREF>]
	jne	.label_258
	# 0x804b9d6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804b9d9:	pushl	$1 [IMM]
	pushl	$1
	# 0x804b9db:	calll	0x8049b00 [IMM <CODEREF>]
	calll	isatty
	# 0x804b9e0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804b9e3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804b9e5:	je	0x804b9ee [IMM <CODEREF>]
	je	.label_258
	# 0x804b9e7:	movl	$1, %eax [IMM, REG]
.label_257:
	movl	$1, %eax
	# 0x804b9ec:	jmp	0x804b9f3 [IMM <CODEREF>]
	jmp	.label_261
	# 0x804b9ee:	movl	$0, %eax [IMM, REG]
.label_258:
	movl	$0, %eax
	# 0x804b9f3:	andl	$1, %eax [IMM, REG]
.label_261:
	andl	$1, %eax
	# 0x804b9f6:	movb	%al, 0x806a444 [REG, MEM]
	movb	%al, print_with_color
	# 0x804b9fb:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804ba02:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ba04:	je	0x804bc58 [IMM <CODEREF>]
	je	.label_180
	# 0x804ba0a:	movl	$0, 0x806a474 [IMM, MEM]
	movl	$0, tabsize
	# 0x804ba14:	jmp	0x804bc58 [IMM <CODEREF>]
	jmp	.label_180
	# 0x804ba19:	movl	0x806a3a0, %eax [MEM, REG]
.label_2612:
	movl	optarg,  %eax
	# 0x804ba1e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ba20:	je	0x804ba57 [IMM <CODEREF>]
	je	.label_182
	# 0x804ba22:	movl	0x806a310, %edx [MEM, REG]
	movl	argmatch_die,  %edx
	# 0x804ba28:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804ba2d
	.globl sub_804ba2d
	.type sub_804ba2d, @function
sub_804ba2d:

	# 0x804ba2d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ba30:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ba31:	pushl	$4 [IMM]
	pushl	$4
	# 0x804ba33:	pushl	$0x8060740 [IMM <DATAREF>]
	pushl	$when_types
	# 0x804ba38:	pushl	$0x8060700 [IMM <DATAREF>]
	pushl	$when_args
	# 0x804ba3d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ba3e:	pushl	$0x8060955 [IMM <DATAREF>]
	pushl	$label_280
	# 0x804ba43:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804ba48:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ba4b:	movl	0x8060740(, %eax, 4), %eax [MEM, REG]
	movl	when_types(, %eax, 4),  %eax
	# 0x804ba52:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x804ba55:	jmp	0x804ba5e [IMM <CODEREF>]
	jmp	.label_279
	# 0x804ba57:	movl	$1, -0x50(%ebp) [IMM, MEM]
.label_182:
	movl	$1, -0x50(%ebp)
	# 0x804ba5e:	cmpl	$1, -0x50(%ebp) [IMM, MEM]
.label_279:
	cmpl	$1, -0x50(%ebp)
	# 0x804ba62:	je	0x804ba7b [IMM <CODEREF>]
	je	.label_196
	# 0x804ba64:	cmpl	$2, -0x50(%ebp) [IMM, MEM]
	cmpl	$2, -0x50(%ebp)
	# 0x804ba68:	jne	0x804ba82 [IMM <CODEREF>]
	jne	.label_202
	# 0x804ba6a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ba6d:	pushl	$1 [IMM]
	pushl	$1
	# 0x804ba6f:	calll	0x8049b00 [IMM <CODEREF>]
	calll	isatty
	# 0x804ba74:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ba77:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ba79:	je	0x804ba82 [IMM <CODEREF>]
	je	.label_202
	# 0x804ba7b:	movl	$1, %eax [IMM, REG]
.label_196:
	movl	$1, %eax
	# 0x804ba80:	jmp	0x804ba87 [IMM <CODEREF>]
	jmp	.label_205
	# 0x804ba82:	movl	$0, %eax [IMM, REG]
.label_202:
	movl	$0, %eax
	# 0x804ba87:	andl	$1, %eax [IMM, REG]
.label_205:
	andl	$1, %eax
	# 0x804ba8a:	movb	%al, 0x806a445 [REG, MEM]
	movb	%al, print_hyperlink
	# 0x804ba8f:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804ba94:	movl	0x806a310, %edx [MEM, REG]
.label_2613:
	movl	argmatch_die,  %edx
	# 0x804ba9a:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804ba9f
	.globl sub_804ba9f
	.type sub_804ba9f, @function
sub_804ba9f:

	# 0x804ba9f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804baa2:	pushl	%edx [REG]
	pushl	%edx
	# 0x804baa3:	pushl	$4 [IMM]
	pushl	$4
	# 0x804baa5:	pushl	$0x8060004 [IMM <DATAREF>]
	pushl	$indicator_style_types
	# 0x804baaa:	pushl	$0x805fff0 [IMM <DATAREF>]
	pushl	$indicator_style_args
	# 0x804baaf:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bab0:	pushl	$0x8060961 [IMM <DATAREF>]
	pushl	$label_281
	# 0x804bab5:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804baba:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804babd:	movl	0x8060004(, %eax, 4), %eax [MEM, REG]
	movl	indicator_style_types(, %eax, 4),  %eax
	# 0x804bac4:	movl	%eax, 0x806a440 [REG, MEM]
	movl	%eax, indicator_style
	# 0x804bac9:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bace:	movl	0x806a310, %edx [MEM, REG]
.label_2614:
	movl	argmatch_die,  %edx
	# 0x804bad4:	movl	0x806a3a0, %eax [MEM, REG]
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804bad9
	.globl sub_804bad9
	.type sub_804bad9, @function
sub_804bad9:

	# 0x804bad9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804badc:	pushl	%edx [REG]
	pushl	%edx
	# 0x804badd:	pushl	$4 [IMM]
	pushl	$4
	# 0x804badf:	pushl	$0x8063860 [IMM <DATAREF>]
	pushl	$quoting_style_vals
	# 0x804bae4:	pushl	$0x8063820 [IMM <DATAREF>]
	pushl	$quoting_style_args
	# 0x804bae9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804baea:	pushl	$0x8060973 [IMM <DATAREF>]
	pushl	$label_282
	# 0x804baef:	calll	0x8052ca5 [IMM <CODEREF>]
	calll	__xargmatch_internal
	# 0x804baf4:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804baf7:	movl	0x8063860(, %eax, 4), %eax [MEM, REG]
	movl	quoting_style_vals(, %eax, 4),  %eax
	# 0x804bafe:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804bb01:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bb02:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bb04:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804bb09:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bb0c:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bb11:	movl	0x806a3a0, %eax [MEM, REG]
.label_2619:
	movl	optarg,  %eax
	# 0x804bb16:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x804bb19:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bb1e:	movb	$0, 0x806a468 [IMM, MEM]
.label_2615:
	movb	$0, qmark_funny_chars
	# 0x804bb25:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bb2a:	movl	0x806a3a0, %eax [MEM, REG]
.label_2605:
	movl	optarg,  %eax
	.section	.text
	.align	32
	#Procedure 0x804bb2f
	.globl sub_804bb2f
	.type sub_804bb2f, @function
sub_804bb2f:

	# 0x804bb2f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bb32:	pushl	$0x806a430 [IMM <DATAREF>]
	pushl	$output_block_size
	# 0x804bb37:	pushl	$0x806a42c [IMM <DATAREF>]
	pushl	$human_output_opts
	# 0x804bb3c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bb3d:	calll	0x8056b1d [IMM <CODEREF>]
	calll	human_options
	# 0x804bb42:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bb45:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x804bb48:	cmpl	$0, -0x28(%ebp) [IMM, MEM]
	cmpl	$0, -0x28(%ebp)
	# 0x804bb4c:	je	0x804bb6b [IMM <CODEREF>]
	je	.label_283
	# 0x804bb4e:	movl	0x806a3a0, %edx [MEM, REG]
	movl	optarg,  %edx
	# 0x804bb54:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804bb57:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bb5a:	pushl	%edx [REG]
	pushl	%edx
	# 0x804bb5b:	pushl	$0x8060300 [IMM <DATAREF>]
	pushl	$long_options
	# 0x804bb60:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bb62:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bb63:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x804bb66:	calll	0x805cf25 [IMM <CODEREF>]
	calll	xstrtol_fatal
	# 0x804bb6b:	movl	0x806a42c, %eax [MEM, REG]
.label_283:
	movl	human_output_opts,  %eax
	# 0x804bb70:	movl	%eax, 0x806a438 [REG, MEM]
	movl	%eax, file_human_output_opts
	# 0x804bb75:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804bb7a:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804bb80:	movl	%eax, 0x806a1e8 [REG, MEM]
	movl	%eax, file_output_block_size
	# 0x804bb85:	movl	%edx, 0x806a1ec [REG, MEM]
	movl	%edx, label_216
	# 0x804bb8b:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bb90:	movl	$0x90, 0x806a42c [IMM, MEM]
.label_2616:
	movl	$0x90, human_output_opts
	# 0x804bb9a:	movl	0x806a42c, %eax [MEM, REG]
	movl	human_output_opts,  %eax
	# 0x804bb9f:	movl	%eax, 0x806a438 [REG, MEM]
	movl	%eax, file_human_output_opts
	# 0x804bba4:	movl	$1, 0x806a430 [IMM, MEM]
	movl	$1, output_block_size
	# 0x804bbae:	movl	$0, 0x806a434 [IMM, MEM]
	movl	$0, label_215
	# 0x804bbb8:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804bbbd:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804bbc3:	movl	%eax, 0x806a1e8 [REG, MEM]
	movl	%eax, file_output_block_size
	# 0x804bbc8:	movl	%edx, 0x806a1ec [REG, MEM]
	movl	%edx, label_216
	# 0x804bbce:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	# 0x804bbd3:	movb	$1, 0x806a3f0 [IMM, MEM]
.label_2582:
	movb	$1, print_scontext
	# 0x804bbda:	jmp	0x804bc59 [IMM <CODEREF>]
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x804bbdc

	# 0x804bbdc:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804bbdc
	.type sub_804bbdc, @function
sub_804bbdc:
	subl	$0xc, %esp
	# 0x804bbdf:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bbe1:	calll	0x805247b [IMM <CODEREF>]
	calll	usage
	# 0x804bbe6:	movl	0x806a30c, %ecx [MEM, REG]
.label_2568:
	movl	Version,  %ecx
	# 0x804bbec:	movl	0x806a308, %eax [MEM, REG]
	movl	ls_mode,  %eax
	# 0x804bbf1:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804bbf4:	je	0x804bc0e [IMM <CODEREF>]
	je	.label_260
	# 0x804bbf6:	movl	0x806a308, %eax [MEM, REG]
	movl	ls_mode,  %eax
	# 0x804bbfb:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804bbfe:	jne	0x804bc07 [IMM <CODEREF>]
	jne	.label_262
	# 0x804bc00:	movl	$0x8060983, %eax [IMM <DATAREF>, REG]
	movl	$label_175,  %eax
	# 0x804bc05:	jmp	0x804bc13 [IMM <CODEREF>]
	jmp	.label_176
	# 0x804bc07:	movl	$0x8060987, %eax [IMM <DATAREF>, REG]
.label_262:
	movl	$label_179,  %eax
	# 0x804bc0c:	jmp	0x804bc13 [IMM <CODEREF>]
	jmp	.label_176
	# 0x804bc0e:	movl	$0x806098c, %eax [IMM <DATAREF>, REG]
.label_260:
	movl	$label_194,  %eax
	# 0x804bc13:	movl	0x806a398, %edx [MEM, REG]
.label_176:
	movl	stdout,  %edx
	.section	.text
	.align	32
	#Procedure 0x804bc19
	.globl sub_804bc19
	.type sub_804bc19, @function
sub_804bc19:

	# 0x804bc19:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bc1c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bc1e:	pushl	$0x806098f [IMM <DATAREF>]
	pushl	$label_284
	# 0x804bc23:	pushl	$0x806099f [IMM <DATAREF>]
	pushl	$label_285
	# 0x804bc28:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804bc29:	pushl	$0x805ee70 [IMM <DATAREF>]
	pushl	$label_18
	# 0x804bc2e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bc2f:	pushl	%edx [REG]
	pushl	%edx
	# 0x804bc30:	calll	0x805c31b [IMM <CODEREF>]
	calll	version_etc
	# 0x804bc35:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804bc38:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bc3b:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bc3d:	calll	0x80498a0 [IMM <CODEREF>]
	calll	exit
	# 0x804bc42:	subl	$0xc, %esp [IMM, REG]
.label_217:
	subl	$0xc, %esp
	# 0x804bc45:	pushl	$2 [IMM]
	pushl	$2
	# 0x804bc47:	calll	0x805247b [IMM <CODEREF>]
	calll	usage
	# 0x804bc4c:	nop	 []
.label_268:
	nop	
	# 0x804bc4d:	jmp	0x804b45d [IMM <CODEREF>]
	jmp	.label_184
	# 0x804bc52:	nop	 []
.label_191:
	nop	
	# 0x804bc53:	jmp	0x804b45d [IMM <CODEREF>]
	jmp	.label_184
	# 0x804bc58:	nop	 []
.label_180:
	nop	
	# 0x804bc59:	jmp	0x804b45d [IMM <CODEREF>]
.label_181:
	jmp	.label_184
	# 0x804bc5e:	subl	$0xc, %esp [IMM, REG]
.label_239:
	subl	$0xc, %esp
	# 0x804bc61:	pushl	$0x80609b3 [IMM <DATAREF>]
	pushl	$label_187
	# 0x804bc66:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804bc6b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bc6e:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x804bc71:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bc74:	pushl	$0x806a430 [IMM <DATAREF>]
	pushl	$output_block_size
	# 0x804bc79:	pushl	$0x806a42c [IMM <DATAREF>]
	pushl	$human_output_opts
	# 0x804bc7e:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x804bc81:	calll	0x8056b1d [IMM <CODEREF>]
	calll	human_options
	# 0x804bc86:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bc89:	cmpl	$0, -0x24(%ebp) [IMM, MEM]
	cmpl	$0, -0x24(%ebp)
	# 0x804bc8d:	jne	0x804bca3 [IMM <CODEREF>]
	jne	.label_235
	# 0x804bc8f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bc92:	pushl	$0x80609c1 [IMM <DATAREF>]
	pushl	$label_209
	# 0x804bc97:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804bc9c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bc9f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804bca1:	je	0x804bcc3 [IMM <CODEREF>]
	je	.label_213
	# 0x804bca3:	movl	0x806a42c, %eax [MEM, REG]
.label_235:
	movl	human_output_opts,  %eax
	# 0x804bca8:	movl	%eax, 0x806a438 [REG, MEM]
	movl	%eax, file_human_output_opts
	# 0x804bcad:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804bcb2:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804bcb8:	movl	%eax, 0x806a1e8 [REG, MEM]
	movl	%eax, file_output_block_size
	# 0x804bcbd:	movl	%edx, 0x806a1ec [REG, MEM]
	movl	%edx, label_216
	# 0x804bcc3:	cmpb	$0, -0x59(%ebp) [IMM, MEM]
.label_213:
	cmpb	$0, -0x59(%ebp)
	# 0x804bcc7:	je	0x804bce7 [IMM <CODEREF>]
	je	.label_214
	# 0x804bcc9:	movl	$0, 0x806a42c [IMM, MEM]
	movl	$0, human_output_opts
	# 0x804bcd3:	movl	$0x400, 0x806a430 [IMM, MEM]
	movl	$0x400, output_block_size
	# 0x804bcdd:	movl	$0, 0x806a434 [IMM, MEM]
	movl	$0, label_215
	# 0x804bce7:	movl	0x806a47c, %eax [MEM, REG]
.label_214:
	movl	line_length,  %eax
	# 0x804bcec:	movl	$0xaaaaaaab, %edx [IMM, REG]
	movl	$0xaaaaaaab, %edx
	# 0x804bcf1:	mull	%edx [REG]
	mull	%edx
	# 0x804bcf3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804bcf5:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x804bcf7:	movl	%eax, 0x806a530 [REG, MEM]
	movl	%eax, max_idx
	# 0x804bcfc:	movl	0x806a47c, %ecx [MEM, REG]
	movl	line_length,  %ecx
	# 0x804bd02:	movl	$0xaaaaaaab, %edx [IMM, REG]
	movl	$0xaaaaaaab, %edx
	# 0x804bd07:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x804bd09:	mull	%edx [REG]
	mull	%edx
	# 0x804bd0b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804bd0d:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x804bd0f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804bd11:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x804bd13:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804bd15:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x804bd17:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x804bd19:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804bd1b:	setne	%al [REG]
	setne	%al
	# 0x804bd1e:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x804bd21:	movl	0x806a530, %eax [MEM, REG]
	movl	max_idx,  %eax
	# 0x804bd26:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804bd28:	movl	%eax, 0x806a530 [REG, MEM]
	movl	%eax, max_idx
	# 0x804bd2d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bd30:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bd32:	calll	0x805a1bc [IMM <CODEREF>]
	calll	get_quoting_style
	# 0x804bd37:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bd3a:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804bd3d:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804bd42:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x804bd45:	je	0x804bd7c [IMM <CODEREF>]
	je	.label_237
	# 0x804bd47:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804bd4c:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804bd4f:	je	0x804bd7c [IMM <CODEREF>]
	je	.label_237
	# 0x804bd51:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x804bd56:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804bd58:	jne	0x804bd63 [IMM <CODEREF>]
	jne	.label_240
	# 0x804bd5a:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804bd5f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804bd61:	jne	0x804bd7c [IMM <CODEREF>]
	jne	.label_237
	# 0x804bd63:	cmpl	$1, -0x20(%ebp) [IMM, MEM]
.label_240:
	cmpl	$1, -0x20(%ebp)
	# 0x804bd67:	je	0x804bd75 [IMM <CODEREF>]
	je	.label_242
	# 0x804bd69:	cmpl	$3, -0x20(%ebp) [IMM, MEM]
	cmpl	$3, -0x20(%ebp)
	# 0x804bd6d:	je	0x804bd75 [IMM <CODEREF>]
	je	.label_242
	# 0x804bd6f:	cmpl	$6, -0x20(%ebp) [IMM, MEM]
	cmpl	$6, -0x20(%ebp)
	# 0x804bd73:	jne	0x804bd7c [IMM <CODEREF>]
	jne	.label_237
	# 0x804bd75:	movl	$1, %eax [IMM, REG]
.label_242:
	movl	$1, %eax
	# 0x804bd7a:	jmp	0x804bd81 [IMM <CODEREF>]
	jmp	.label_244
	# 0x804bd7c:	movl	$0, %eax [IMM, REG]
.label_237:
	movl	$0, %eax
	# 0x804bd81:	andl	$1, %eax [IMM, REG]
.label_244:
	andl	$1, %eax
	# 0x804bd84:	movb	%al, 0x806a3d1 [REG, MEM]
	movb	%al, align_variable_outer_quotes
	# 0x804bd89:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bd8c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bd8e:	calll	0x805a17a [IMM <CODEREF>]
	calll	clone_quoting_options
	# 0x804bd93:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bd96:	movl	%eax, 0x806a46c [REG, MEM]
	movl	%eax, filename_quoting_options
	# 0x804bd9b:	cmpl	$7, -0x20(%ebp) [IMM, MEM]
	cmpl	$7, -0x20(%ebp)
	# 0x804bd9f:	jne	0x804bdb6 [IMM <CODEREF>]
	jne	.label_247
	# 0x804bda1:	movl	0x806a46c, %eax [MEM, REG]
	movl	filename_quoting_options,  %eax
	# 0x804bda6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bda9:	pushl	$1 [IMM]
	pushl	$1
	# 0x804bdab:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x804bdad:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bdae:	calll	0x805a1ee [IMM <CODEREF>]
	calll	set_char_quoting
	# 0x804bdb3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bdb6:	movl	0x806a440, %eax [MEM, REG]
.label_247:
	movl	indicator_style,  %eax
	# 0x804bdbb:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804bdbe:	jbe	0x804bdfd [IMM <CODEREF>]
	jbe	.label_252
	# 0x804bdc0:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x804bdc5:	subl	$2, %eax [IMM, REG]
	subl	$2, %eax
	# 0x804bdc8:	addl	$0x80609cc, %eax [IMM <DATAREF>, REG]
	addl	$label_253,  %eax
	# 0x804bdcd:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x804bdd0:	jmp	0x804bdf3 [IMM <CODEREF>]
	jmp	.label_254
	# 0x804bdd2:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_251:
	movl	-0x4c(%ebp), %eax
	# 0x804bdd5:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804bdd8:	movsbl	%al, %edx [REG, REG]
	movsbl	%al, %edx
	# 0x804bddb:	movl	0x806a46c, %eax [MEM, REG]
	movl	filename_quoting_options,  %eax
	# 0x804bde0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bde3:	pushl	$1 [IMM]
	pushl	$1
	# 0x804bde5:	pushl	%edx [REG]
	pushl	%edx
	# 0x804bde6:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bde7:	calll	0x805a1ee [IMM <CODEREF>]
	calll	set_char_quoting
	# 0x804bdec:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bdef:	addl	$1, -0x4c(%ebp) [IMM, MEM]
	addl	$1, -0x4c(%ebp)
	# 0x804bdf3:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_254:
	movl	-0x4c(%ebp), %eax
	# 0x804bdf6:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804bdf9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804bdfb:	jne	0x804bdd2 [IMM <CODEREF>]
	jne	.label_251
	# 0x804bdfd:	subl	$0xc, %esp [IMM, REG]
.label_252:
	subl	$0xc, %esp
	# 0x804be00:	pushl	$0 [IMM]
	pushl	$0
	# 0x804be02:	calll	0x805a17a [IMM <CODEREF>]
	calll	clone_quoting_options
	# 0x804be07:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804be0a:	movl	%eax, 0x806a470 [REG, MEM]
	movl	%eax, dirname_quoting_options
	# 0x804be0f:	movl	0x806a470, %eax [MEM, REG]
	movl	dirname_quoting_options,  %eax
	# 0x804be14:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804be17:	pushl	$1 [IMM]
	pushl	$1
	# 0x804be19:	pushl	$0x3a [IMM]
	pushl	$0x3a
	# 0x804be1b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804be1c:	calll	0x805a1ee [IMM <CODEREF>]
	calll	set_char_quoting
	# 0x804be21:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804be24:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x804be2b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804be2d:	je	0x804be4a [IMM <CODEREF>]
	je	.label_185
	# 0x804be2f:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804be34:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804be36:	jne	0x804be43 [IMM <CODEREF>]
	jne	.label_234
	# 0x804be38:	movzbl	0x806a445, %eax [MEM, REG]
	movzbl	print_hyperlink,  %eax
	# 0x804be3f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804be41:	je	0x804be4a [IMM <CODEREF>]
	je	.label_185
	# 0x804be43:	movb	$0, 0x806a43c [IMM, MEM]
.label_234:
	movb	$0, dired
	# 0x804be4a:	movl	0x806a420, %eax [MEM, REG]
.label_185:
	movl	time_type,  %eax
	# 0x804be4f:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804be52:	je	0x804be5e [IMM <CODEREF>]
	je	.label_192
	# 0x804be54:	movl	0x806a420, %eax [MEM, REG]
	movl	time_type,  %eax
	# 0x804be59:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804be5c:	jne	0x804be7c [IMM <CODEREF>]
	jne	.label_193
	# 0x804be5e:	movzbl	-0x5a(%ebp), %eax [MEM, REG]
.label_192:
	movzbl	-0x5a(%ebp), %eax
	# 0x804be62:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804be65:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804be67:	je	0x804be7c [IMM <CODEREF>]
	je	.label_193
	# 0x804be69:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804be6e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804be70:	je	0x804be7c [IMM <CODEREF>]
	je	.label_193
	# 0x804be72:	movl	$4, 0x806a424 [IMM, MEM]
	movl	$4, sort_type
	# 0x804be7c:	movl	0x806a41c, %eax [MEM, REG]
.label_193:
	movl	format,  %eax
	# 0x804be81:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804be83:	jne	0x804c111 [IMM <CODEREF>]
	jne	.label_206
	# 0x804be89:	movl	-0x58(%ebp), %eax [MEM, REG]
	movl	-0x58(%ebp), %eax
	# 0x804be8c:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x804be8f:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
	cmpl	$0, -0x48(%ebp)
	# 0x804be93:	jne	0x804bee5 [IMM <CODEREF>]
	jne	.label_208
	# 0x804be95:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804be98:	pushl	$0x80609d2 [IMM <DATAREF>]
	pushl	$label_210
	# 0x804be9d:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804bea2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bea5:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x804bea8:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
	cmpl	$0, -0x48(%ebp)
	# 0x804beac:	jne	0x804bee5 [IMM <CODEREF>]
	jne	.label_208
	# 0x804beae:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804beb1:	pushl	$0x805ffa5 [IMM <DATAREF>]
	pushl	$label_221
	# 0x804beb6:	calll	0x8049f7a [IMM <CODEREF>]
	calll	bad_cast
	# 0x804bebb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bebe:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x804bec1:	jmp	0x804bee5 [IMM <CODEREF>]
	jmp	.label_208
	# 0x804bec3:	subl	$0xc, %esp [IMM, REG]
.label_228:
	subl	$0xc, %esp
	# 0x804bec6:	pushl	$2 [IMM]
	pushl	$2
	# 0x804bec8:	calll	0x8054656 [IMM <CODEREF>]
	calll	hard_locale
	# 0x804becd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bed0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804bed3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804bed5:	je	0x804bee1 [IMM <CODEREF>]
	je	.label_223
	# 0x804bed7:	movl	0x806a394, %eax [MEM, REG]
	movl	optind,  %eax
	# 0x804bedc:	jmp	0x804c116 [IMM <CODEREF>]
	jmp	.label_225
	# 0x804bee1:	addl	$6, -0x48(%ebp) [IMM, MEM]
.label_223:
	addl	$6, -0x48(%ebp)
	# 0x804bee5:	subl	$4, %esp [IMM, REG]
.label_208:
	subl	$4, %esp
	# 0x804bee8:	pushl	$6 [IMM]
	pushl	$6
	# 0x804beea:	pushl	$0x8063278 [IMM <DATAREF>]
	pushl	$posix_prefix.8331
	# 0x804beef:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x804bef2:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x804bef7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804befa:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804befc:	je	0x804bec3 [IMM <CODEREF>]
	je	.label_228
	# 0x804befe:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x804bf01:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804bf04:	cmpb	$0x2b, %al [IMM, REG]
	cmpb	$0x2b, %al
	# 0x804bf06:	jne	0x804bf9d [IMM <CODEREF>]
	jne	.label_229
	# 0x804bf0c:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x804bf0f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804bf12:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804bf15:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804bf18:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804bf1a:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804bf1d:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x804bf22:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bf25:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x804bf28:	cmpl	$0, -0x44(%ebp) [IMM, MEM]
	cmpl	$0, -0x44(%ebp)
	# 0x804bf2c:	jne	0x804bf36 [IMM <CODEREF>]
	jne	.label_264
	# 0x804bf2e:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804bf31:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x804bf34:	jmp	0x804bf88 [IMM <CODEREF>]
	jmp	.label_236
	# 0x804bf36:	movl	-0x44(%ebp), %eax [MEM, REG]
.label_264:
	movl	-0x44(%ebp), %eax
	# 0x804bf39:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804bf3c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804bf3f:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804bf41:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bf42:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x804bf47:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bf4a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804bf4c:	je	0x804bf7c [IMM <CODEREF>]
	je	.label_249
	# 0x804bf4e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bf51:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804bf54:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804bf59:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bf5c:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804bf5e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bf61:	pushl	$0x80609dd [IMM <DATAREF>]
	pushl	$label_241
	# 0x804bf66:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804bf6b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bf6e:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804bf6f:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bf70:	pushl	$0 [IMM]
	pushl	$0
	# 0x804bf72:	pushl	$2 [IMM]
	pushl	$2
	# 0x804bf74:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804bf79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bf7c:	movl	-0x44(%ebp), %eax [MEM, REG]
.label_249:
	movl	-0x44(%ebp), %eax
	# 0x804bf7f:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804bf82:	movl	%edx, -0x44(%ebp) [REG, MEM]
	movl	%edx, -0x44(%ebp)
	# 0x804bf85:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x804bf88:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_236:
	movl	-0x1c(%ebp), %eax
	# 0x804bf8b:	movl	%eax, 0x806a2c0 [REG, MEM]
	movl	%eax, long_time_format
	# 0x804bf90:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x804bf93:	movl	%eax, 0x806a2c4 [REG, MEM]
	movl	%eax, label_212
	# 0x804bf98:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804bf9d:	pushl	$4 [IMM]
.label_229:
	pushl	$4
	# 0x804bf9f:	pushl	$0x805ffc0 [IMM <DATAREF>]
	pushl	$time_style_types
	# 0x804bfa4:	pushl	$0x805ffac [IMM <DATAREF>]
	pushl	$time_style_args
	# 0x804bfa9:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x804bfac:	calll	0x8052a26 [IMM <CODEREF>]
	calll	argmatch
	# 0x804bfb1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bfb4:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x804bfb7:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x804bfbb:	jns	0x804c05b [IMM <CODEREF>]
	jns	.label_250
	# 0x804bfc1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804bfc4:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x804bfc7:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x804bfca:	pushl	$0x80609fa [IMM <DATAREF>]
	pushl	$label_255
	# 0x804bfcf:	calll	0x8052b19 [IMM <CODEREF>]
	calll	argmatch_invalid
	# 0x804bfd4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bfd7:	movl	0x806a388, %ebx [MEM, REG]
	movl	stderr,  %ebx
	# 0x804bfdd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804bfe0:	pushl	$0x8060a05 [IMM <DATAREF>]
	pushl	$label_259
	# 0x804bfe5:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804bfea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bfed:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804bff0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804bff1:	pushl	%eax [REG]
	pushl	%eax
	# 0x804bff2:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804bff7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804bffa:	movl	$0x805ffac, -0x40(%ebp) [IMM <DATAREF>, MEM]
	movl	$time_style_args, -64(%ebp)
	# 0x804c001:	jmp	0x804c025 [IMM <CODEREF>]
	jmp	.label_263
	# 0x804c003:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_227:
	movl	-0x40(%ebp), %eax
	# 0x804c006:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x804c009:	movl	%edx, -0x40(%ebp) [REG, MEM]
	movl	%edx, -0x40(%ebp)
	# 0x804c00c:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804c00e:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x804c013:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c016:	pushl	%edx [REG]
	pushl	%edx
	# 0x804c017:	pushl	$0x8060a1b [IMM <DATAREF>]
	pushl	$label_177
	# 0x804c01c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c01d:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x804c022:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c025:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_263:
	movl	-0x40(%ebp), %eax
	# 0x804c028:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c02a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c02c:	jne	0x804c003 [IMM <CODEREF>]
	jne	.label_227
	# 0x804c02e:	movl	0x806a388, %ebx [MEM, REG]
	movl	stderr,  %ebx
	# 0x804c034:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c037:	pushl	$0x8060a2c [IMM <DATAREF>]
	pushl	$label_186
	# 0x804c03c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804c041:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c044:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804c047:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c048:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c049:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804c04e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c051:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c054:	pushl	$2 [IMM]
	pushl	$2
	# 0x804c056:	calll	0x805247b [IMM <CODEREF>]
	calll	usage
	# 0x804c05b:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_250:
	movl	-0x18(%ebp), %eax
	# 0x804c05e:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804c061:	je	0x804c096 [IMM <CODEREF>]
	je	.label_218
	# 0x804c063:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804c066:	jg	0x804c071 [IMM <CODEREF>]
	jg	.label_198
	# 0x804c068:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c06a:	je	0x804c080 [IMM <CODEREF>]
	je	.label_199
	# 0x804c06c:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804c071:	cmpl	$2, %eax [IMM, REG]
.label_198:
	cmpl	$2, %eax
	# 0x804c074:	je	0x804c0ac [IMM <CODEREF>]
	je	.label_201
	# 0x804c076:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804c079:	je	0x804c0c2 [IMM <CODEREF>]
	je	.label_203
	# 0x804c07b:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804c080:	movl	$0x8060a62, 0x806a2c4 [IMM <DATAREF>, MEM]
.label_199:
	movl	$label_231, label_212
	# 0x804c08a:	movl	0x806a2c4, %eax [MEM, REG]
	movl	label_212,  %eax
	# 0x804c08f:	movl	%eax, 0x806a2c0 [REG, MEM]
	movl	%eax, long_time_format
	# 0x804c094:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804c096:	movl	$0x8060a7a, 0x806a2c4 [IMM <DATAREF>, MEM]
.label_218:
	movl	$label_211, label_212
	# 0x804c0a0:	movl	0x806a2c4, %eax [MEM, REG]
	movl	label_212,  %eax
	# 0x804c0a5:	movl	%eax, 0x806a2c0 [REG, MEM]
	movl	%eax, long_time_format
	# 0x804c0aa:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804c0ac:	movl	$0x8060a89, 0x806a2c0 [IMM <DATAREF>, MEM]
.label_201:
	movl	$label_219, long_time_format
	# 0x804c0b6:	movl	$0x8060a93, 0x806a2c4 [IMM <DATAREF>, MEM]
	movl	$label_220, label_212
	# 0x804c0c0:	jmp	0x804c10c [IMM <CODEREF>]
	jmp	.label_200
	# 0x804c0c2:	subl	$0xc, %esp [IMM, REG]
.label_203:
	subl	$0xc, %esp
	# 0x804c0c5:	pushl	$2 [IMM]
	pushl	$2
	# 0x804c0c7:	calll	0x8054656 [IMM <CODEREF>]
	calll	hard_locale
	# 0x804c0cc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c0cf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c0d1:	je	0x804c10c [IMM <CODEREF>]
	je	.label_200
	# 0x804c0d3:	movl	$0, -0x3c(%ebp) [IMM, MEM]
	movl	$0, -0x3c(%ebp)
	# 0x804c0da:	jmp	0x804c106 [IMM <CODEREF>]
	jmp	.label_224
	# 0x804c0dc:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_232:
	movl	-0x3c(%ebp), %eax
	# 0x804c0df:	movl	0x806a2c0(, %eax, 4), %eax [MEM, REG]
	movl	long_time_format(, %eax, 4),  %eax
	# 0x804c0e6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c0e9:	pushl	$2 [IMM]
	pushl	$2
	# 0x804c0eb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c0ec:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c0ee:	calll	0x80496b0 [IMM <CODEREF>]
	calll	dcgettext
	# 0x804c0f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c0f6:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804c0f8:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x804c0fb:	movl	%edx, 0x806a2c0(, %eax, 4) [REG, MEM]
	movl	%edx, long_time_format(, %eax, 4)
	# 0x804c102:	addl	$1, -0x3c(%ebp) [IMM, MEM]
	addl	$1, -0x3c(%ebp)
	# 0x804c106:	cmpl	$1, -0x3c(%ebp) [IMM, MEM]
.label_224:
	cmpl	$1, -0x3c(%ebp)
	# 0x804c10a:	jle	0x804c0dc [IMM <CODEREF>]
	jle	.label_232
	# 0x804c10c:	calll	0x804a377 [IMM <CODEREF>]
.label_200:
	calll	abformat_init
	# 0x804c111:	movl	0x806a394, %eax [MEM, REG]
.label_206:
	movl	optind,  %eax
	# 0x804c116:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_225:
	movl	-0xc(%ebp), %ecx
	# 0x804c119:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804c120:	je	0x804c127 [IMM <CODEREF>]
	je	.label_233
	# 0x804c122:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804c127:	movl	-4(%ebp), %ebx [MEM, REG]
.label_233:
	movl	-4(%ebp), %ebx
	# 0x804c12a:	leave	 []
	leave	
	# 0x804c12b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c12c

	# 0x804c12c:	pushl	%ebp [REG]
	.globl get_funky_string
	.type get_funky_string, @function
get_funky_string:
	pushl	%ebp
	# 0x804c12d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c12f:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804c132:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804c135:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x804c138:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804c13b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c13d:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804c140:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804c143:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c145:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c148:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x804c14f:	movb	$0, -0x19(%ebp) [IMM, MEM]
	movb	$0, -0x19(%ebp)
	# 0x804c153:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x804c15a:	jmp	0x804c3f3 [IMM <CODEREF>]
	jmp	.label_289
	# 0x804c15f:	cmpl	$4, -0x14(%ebp) [IMM, MEM]
.label_305:
	cmpl	$4, -0x14(%ebp)
	# 0x804c163:	ja	0x804c3ee [IMM <CODEREF>]
	ja	.label_303
	# 0x804c169:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804c16c:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x804c16f:	addl	$0x8060ef0, %eax [IMM <DATAREF>, REG]
	addl	$label_304,  %eax
	# 0x804c174:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c176:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804c178:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2681:
	movl	-0x10(%ebp), %eax
	# 0x804c17b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c17e:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x804c181:	cmpl	$0x3d, %eax [IMM, REG]
	cmpl	$0x3d, %eax
	# 0x804c184:	je	0x804c1c5 [IMM <CODEREF>]
	je	.label_307
	# 0x804c186:	cmpl	$0x3d, %eax [IMM, REG]
	cmpl	$0x3d, %eax
	# 0x804c189:	jg	0x804c196 [IMM <CODEREF>]
	jg	.label_287
	# 0x804c18b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c18d:	je	0x804c1a2 [IMM <CODEREF>]
	je	.label_291
	# 0x804c18f:	cmpl	$0x3a, %eax [IMM, REG]
	cmpl	$0x3a, %eax
	# 0x804c192:	je	0x804c1a2 [IMM <CODEREF>]
	je	.label_291
	# 0x804c194:	jmp	0x804c1d4 [IMM <CODEREF>]
	jmp	.label_295
	# 0x804c196:	cmpl	$0x5c, %eax [IMM, REG]
.label_287:
	cmpl	$0x5c, %eax
	# 0x804c199:	je	0x804c1ab [IMM <CODEREF>]
	je	.label_293
	# 0x804c19b:	cmpl	$0x5e, %eax [IMM, REG]
	cmpl	$0x5e, %eax
	# 0x804c19e:	je	0x804c1b8 [IMM <CODEREF>]
	je	.label_294
	# 0x804c1a0:	jmp	0x804c1d4 [IMM <CODEREF>]
	jmp	.label_295
	# 0x804c1a2:	movl	$5, -0x14(%ebp) [IMM, MEM]
.label_291:
	movl	$5, -0x14(%ebp)
	# 0x804c1a9:	jmp	0x804c1f0 [IMM <CODEREF>]
	jmp	.label_297
	# 0x804c1ab:	movl	$1, -0x14(%ebp) [IMM, MEM]
.label_293:
	movl	$1, -0x14(%ebp)
	# 0x804c1b2:	addl	$1, -0x10(%ebp) [IMM, MEM]
	addl	$1, -0x10(%ebp)
	# 0x804c1b6:	jmp	0x804c1f0 [IMM <CODEREF>]
	jmp	.label_297
	# 0x804c1b8:	movl	$4, -0x14(%ebp) [IMM, MEM]
.label_294:
	movl	$4, -0x14(%ebp)
	# 0x804c1bf:	addl	$1, -0x10(%ebp) [IMM, MEM]
	addl	$1, -0x10(%ebp)
	# 0x804c1c3:	jmp	0x804c1f0 [IMM <CODEREF>]
	jmp	.label_297
	# 0x804c1c5:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
.label_307:
	cmpb	$0, -0x2c(%ebp)
	# 0x804c1c9:	je	0x804c1d4 [IMM <CODEREF>]
	je	.label_295
	# 0x804c1cb:	movl	$5, -0x14(%ebp) [IMM, MEM]
	movl	$5, -0x14(%ebp)
	# 0x804c1d2:	jmp	0x804c1f0 [IMM <CODEREF>]
	jmp	.label_297
	# 0x804c1d4:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_295:
	movl	-0xc(%ebp), %eax
	# 0x804c1d7:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c1da:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c1dd:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x804c1e0:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x804c1e3:	movl	%ecx, -0x10(%ebp) [REG, MEM]
	movl	%ecx, -0x10(%ebp)
	# 0x804c1e6:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x804c1e9:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804c1eb:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c1ef:	nop	 []
	nop	
	# 0x804c1f0:	jmp	0x804c3f3 [IMM <CODEREF>]
.label_297:
	jmp	.label_289
	# 0x804c1f5:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2682:
	movl	-0x10(%ebp), %eax
	# 0x804c1f8:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c1fb:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x804c1fe:	cmpl	$0x78, %eax [IMM, REG]
	cmpl	$0x78, %eax
	# 0x804c201:	ja	0x804c273 [IMM <CODEREF>]
	ja	.label_306
	# 0x804c203:	movl	0x8060f04(, %eax, 4), %eax [MEM, REG]
	movl	label_286(, %eax, 4),  %eax
	# 0x804c20a:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804c20c:	movl	$2, -0x14(%ebp) [IMM, MEM]
.label_2687:
	movl	$2, -0x14(%ebp)
	# 0x804c213:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c216:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c219:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x804c21c:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c21f:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c221:	movl	$3, -0x14(%ebp) [IMM, MEM]
.label_2689:
	movl	$3, -0x14(%ebp)
	# 0x804c228:	movb	$0, -0x19(%ebp) [IMM, MEM]
	movb	$0, -0x19(%ebp)
	# 0x804c22c:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c22e:	movb	$7, -0x19(%ebp) [IMM, MEM]
.label_2691:
	movb	$7, -0x19(%ebp)
	# 0x804c232:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c234:	movb	$8, -0x19(%ebp) [IMM, MEM]
.label_2692:
	movb	$8, -0x19(%ebp)
	# 0x804c238:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c23a:	movb	$0x1b, -0x19(%ebp) [IMM, MEM]
.label_2693:
	movb	$0x1b, -0x19(%ebp)
	# 0x804c23e:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c240:	movb	$0xc, -0x19(%ebp) [IMM, MEM]
.label_2694:
	movb	$0xc, -0x19(%ebp)
	# 0x804c244:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c246:	movb	$0xa, -0x19(%ebp) [IMM, MEM]
.label_2695:
	movb	$0xa, -0x19(%ebp)
	# 0x804c24a:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c24c:	movb	$0xd, -0x19(%ebp) [IMM, MEM]
.label_2696:
	movb	$0xd, -0x19(%ebp)
	# 0x804c250:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c252:	movb	$9, -0x19(%ebp) [IMM, MEM]
.label_2697:
	movb	$9, -0x19(%ebp)
	# 0x804c256:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c258:	movb	$0xb, -0x19(%ebp) [IMM, MEM]
.label_2698:
	movb	$0xb, -0x19(%ebp)
	# 0x804c25c:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c25e:	movb	$0x7f, -0x19(%ebp) [IMM, MEM]
.label_2688:
	movb	$0x7f, -0x19(%ebp)
	# 0x804c262:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c264:	movb	$0x20, -0x19(%ebp) [IMM, MEM]
.label_2690:
	movb	$0x20, -0x19(%ebp)
	# 0x804c268:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c26a:	movl	$6, -0x14(%ebp) [IMM, MEM]
.label_2686:
	movl	$6, -0x14(%ebp)
	# 0x804c271:	jmp	0x804c27d [IMM <CODEREF>]
	jmp	.label_296
	# 0x804c273:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_306:
	movl	-0x10(%ebp), %eax
	# 0x804c276:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c279:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c27c:	nop	 []
	nop	
	# 0x804c27d:	cmpl	$1, -0x14(%ebp) [IMM, MEM]
.label_296:
	cmpl	$1, -0x14(%ebp)
	# 0x804c281:	jne	0x804c29d [IMM <CODEREF>]
	jne	.label_309
	# 0x804c283:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c286:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c289:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c28c:	movzbl	-0x19(%ebp), %edx [MEM, REG]
	movzbl	-0x19(%ebp), %edx
	# 0x804c290:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804c292:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c296:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x804c29d:	addl	$1, -0x10(%ebp) [IMM, MEM]
.label_309:
	addl	$1, -0x10(%ebp)
	# 0x804c2a1:	jmp	0x804c3f3 [IMM <CODEREF>]
	jmp	.label_289
	# 0x804c2a6:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2683:
	movl	-0x10(%ebp), %eax
	# 0x804c2a9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c2ac:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x804c2ae:	jle	0x804c2ba [IMM <CODEREF>]
	jle	.label_298
	# 0x804c2b0:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c2b3:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c2b6:	cmpb	$0x37, %al [IMM, REG]
	cmpb	$0x37, %al
	# 0x804c2b8:	jle	0x804c2d6 [IMM <CODEREF>]
	jle	.label_300
	# 0x804c2ba:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_298:
	movl	-0xc(%ebp), %eax
	# 0x804c2bd:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c2c0:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c2c3:	movzbl	-0x19(%ebp), %edx [MEM, REG]
	movzbl	-0x19(%ebp), %edx
	# 0x804c2c7:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804c2c9:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c2cd:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x804c2d4:	jmp	0x804c2f5 [IMM <CODEREF>]
	jmp	.label_302
	# 0x804c2d6:	movzbl	-0x19(%ebp), %eax [MEM, REG]
.label_300:
	movzbl	-0x19(%ebp), %eax
	# 0x804c2da:	leal	0(, %eax, 8), %ecx [MEM, REG]
	leal	0(, %eax, 8), %ecx
	# 0x804c2e1:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c2e4:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c2e7:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x804c2ea:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c2ed:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804c2ef:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x804c2f2:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c2f5:	jmp	0x804c3f3 [IMM <CODEREF>]
.label_302:
	jmp	.label_289
	# 0x804c2fa:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2684:
	movl	-0x10(%ebp), %eax
	# 0x804c2fd:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c300:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x804c303:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x804c306:	cmpl	$0x36, %eax [IMM, REG]
	cmpl	$0x36, %eax
	# 0x804c309:	ja	0x804c371 [IMM <CODEREF>]
	ja	.label_308
	# 0x804c30b:	movl	0x80610e8(, %eax, 4), %eax [MEM, REG]
	movl	label_288(, %eax, 4),  %eax
	# 0x804c312:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804c314:	movzbl	-0x19(%ebp), %eax [MEM, REG]
.label_2699:
	movzbl	-0x19(%ebp), %eax
	# 0x804c318:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x804c31b:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x804c31d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c320:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c323:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x804c326:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c329:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804c32b:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x804c32e:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c331:	jmp	0x804c38c [IMM <CODEREF>]
	jmp	.label_292
	# 0x804c333:	movzbl	-0x19(%ebp), %eax [MEM, REG]
.label_2701:
	movzbl	-0x19(%ebp), %eax
	# 0x804c337:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x804c33a:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x804c33c:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c33f:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c342:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x804c345:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c348:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804c34a:	subl	$0x57, %eax [IMM, REG]
	subl	$0x57, %eax
	# 0x804c34d:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c350:	jmp	0x804c38c [IMM <CODEREF>]
	jmp	.label_292
	# 0x804c352:	movzbl	-0x19(%ebp), %eax [MEM, REG]
.label_2700:
	movzbl	-0x19(%ebp), %eax
	# 0x804c356:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x804c359:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x804c35b:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c35e:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c361:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x804c364:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c367:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804c369:	subl	$0x37, %eax [IMM, REG]
	subl	$0x37, %eax
	# 0x804c36c:	movb	%al, -0x19(%ebp) [REG, MEM]
	movb	%al, -0x19(%ebp)
	# 0x804c36f:	jmp	0x804c38c [IMM <CODEREF>]
	jmp	.label_292
	# 0x804c371:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_308:
	movl	-0xc(%ebp), %eax
	# 0x804c374:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c377:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c37a:	movzbl	-0x19(%ebp), %edx [MEM, REG]
	movzbl	-0x19(%ebp), %edx
	# 0x804c37e:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804c380:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c384:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x804c38b:	nop	 []
	nop	
	# 0x804c38c:	jmp	0x804c3f3 [IMM <CODEREF>]
.label_292:
	jmp	.label_289
	# 0x804c38e:	movl	$0, -0x14(%ebp) [IMM, MEM]
.label_2685:
	movl	$0, -0x14(%ebp)
	# 0x804c395:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c398:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c39b:	cmpb	$0x3f, %al [IMM, REG]
	cmpb	$0x3f, %al
	# 0x804c39d:	jle	0x804c3c9 [IMM <CODEREF>]
	jle	.label_290
	# 0x804c39f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c3a2:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c3a5:	cmpb	$0x7f, %al [IMM, REG]
	cmpb	$0x7f, %al
	# 0x804c3a7:	je	0x804c3c9 [IMM <CODEREF>]
	je	.label_290
	# 0x804c3a9:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c3ac:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c3af:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c3b2:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x804c3b5:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x804c3b8:	movl	%ecx, -0x10(%ebp) [REG, MEM]
	movl	%ecx, -0x10(%ebp)
	# 0x804c3bb:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x804c3be:	andl	$0x1f, %edx [IMM, REG]
	andl	$0x1f, %edx
	# 0x804c3c1:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x804c3c3:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c3c7:	jmp	0x804c3ec [IMM <CODEREF>]
	jmp	.label_299
	# 0x804c3c9:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_290:
	movl	-0x10(%ebp), %eax
	# 0x804c3cc:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c3cf:	cmpb	$0x3f, %al [IMM, REG]
	cmpb	$0x3f, %al
	# 0x804c3d1:	jne	0x804c3e5 [IMM <CODEREF>]
	jne	.label_301
	# 0x804c3d3:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c3d6:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c3d9:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x804c3dc:	movb	$0x7f, 0(%eax) [IMM, MEM]
	movb	$0x7f, 0(%eax)
	# 0x804c3df:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x804c3e3:	jmp	0x804c3f3 [IMM <CODEREF>]
	jmp	.label_289
	# 0x804c3e5:	movl	$6, -0x14(%ebp) [IMM, MEM]
.label_301:
	movl	$6, -0x14(%ebp)
	# 0x804c3ec:	jmp	0x804c3f3 [IMM <CODEREF>]
.label_299:
	jmp	.label_289
	# 0x804c3ee:	calll	0x8049b10 [IMM <CODEREF>]
.label_303:
	calll	abort
	# 0x804c3f3:	cmpl	$4, -0x14(%ebp) [IMM, MEM]
.label_289:
	cmpl	$4, -0x14(%ebp)
	# 0x804c3f7:	jbe	0x804c15f [IMM <CODEREF>]
	jbe	.label_305
	# 0x804c3fd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804c400:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x804c403:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804c405:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804c408:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x804c40b:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804c40d:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x804c410:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x804c413:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804c415:	cmpl	$6, -0x14(%ebp) [IMM, MEM]
	cmpl	$6, -0x14(%ebp)
	# 0x804c419:	setne	%al [REG]
	setne	%al
	# 0x804c41c:	leave	 []
	leave	
	# 0x804c41d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c41e

	# 0x804c41e:	pushl	%ebp [REG]
	.globl known_term_type
	.type known_term_type, @function
known_term_type:
	pushl	%ebp
	# 0x804c41f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c421:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804c424:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c427:	pushl	$0x80611c4 [IMM <DATAREF>]
	pushl	$label_317
	# 0x804c42c:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804c431:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c434:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c437:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804c43b:	je	0x804c447 [IMM <CODEREF>]
	je	.label_315
	# 0x804c43d:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c440:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c443:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c445:	jne	0x804c44e [IMM <CODEREF>]
	jne	.label_316
	# 0x804c447:	movl	$0, %eax [IMM, REG]
.label_315:
	movl	$0, %eax
	# 0x804c44c:	jmp	0x804c4bc [IMM <CODEREF>]
	jmp	.label_310
	# 0x804c44e:	movl	$0x805ef40, -0x10(%ebp) [IMM <DATAREF>, MEM]
.label_316:
	movl	$G_line, -16(%ebp)
	# 0x804c455:	jmp	0x804c4a6 [IMM <CODEREF>]
	jmp	.label_314
	# 0x804c457:	subl	$4, %esp [IMM, REG]
.label_312:
	subl	$4, %esp
	# 0x804c45a:	pushl	$5 [IMM]
	pushl	$5
	# 0x804c45c:	pushl	$0x80611c9 [IMM <DATAREF>]
	pushl	$label_313
	# 0x804c461:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804c464:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x804c469:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c46c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c46e:	jne	0x804c492 [IMM <CODEREF>]
	jne	.label_311
	# 0x804c470:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804c473:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x804c476:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c479:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c47b:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804c47e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c47f:	calll	0x8049750 [IMM <CODEREF>]
	calll	fnmatch
	# 0x804c484:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c487:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c489:	jne	0x804c492 [IMM <CODEREF>]
	jne	.label_311
	# 0x804c48b:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804c490:	jmp	0x804c4bc [IMM <CODEREF>]
	jmp	.label_310
	# 0x804c492:	subl	$0xc, %esp [IMM, REG]
.label_311:
	subl	$0xc, %esp
	# 0x804c495:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804c498:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804c49d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c4a0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804c4a3:	addl	%eax, -0x10(%ebp) [REG, MEM]
	addl	%eax, -0x10(%ebp)
	# 0x804c4a6:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_314:
	movl	-0x10(%ebp), %eax
	# 0x804c4a9:	movl	$0x805ef40, %edx [IMM <DATAREF>, REG]
	movl	$G_line,  %edx
	# 0x804c4ae:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x804c4b0:	cmpl	$0x1043, %eax [IMM, REG]
	cmpl	$0x1043, %eax
	# 0x804c4b5:	jbe	0x804c457 [IMM <CODEREF>]
	jbe	.label_312
	# 0x804c4b7:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804c4bc:	leave	 []
.label_310:
	leave	
	# 0x804c4bd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c4be

	# 0x804c4be:	pushl	%ebp [REG]
	.globl parse_ls_color
	.type parse_ls_color, @function
parse_ls_color:
	pushl	%ebp
	# 0x804c4bf:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c4c1:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c4c2:	subl	$0x34, %esp [IMM, REG]
	subl	$0x34, %esp
	# 0x804c4c5:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804c4cb:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c4ce:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804c4d0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c4d3:	pushl	$0x80611cf [IMM <DATAREF>]
	pushl	$label_343
	# 0x804c4d8:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804c4dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c4e0:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804c4e3:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c4e6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c4e8:	je	0x804c4f4 [IMM <CODEREF>]
	je	.label_339
	# 0x804c4ea:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c4ed:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c4f0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c4f2:	jne	0x804c537 [IMM <CODEREF>]
	jne	.label_341
	# 0x804c4f4:	subl	$0xc, %esp [IMM, REG]
.label_339:
	subl	$0xc, %esp
	# 0x804c4f7:	pushl	$0x80611d9 [IMM <DATAREF>]
	pushl	$label_344
	# 0x804c4fc:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804c501:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c504:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804c507:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x804c50b:	je	0x804c51b [IMM <CODEREF>]
	je	.label_319
	# 0x804c50d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804c510:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c513:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c515:	jne	0x804c82a [IMM <CODEREF>]
	jne	.label_327
	# 0x804c51b:	calll	0x804c41e [IMM <CODEREF>]
.label_319:
	calll	known_term_type
	# 0x804c520:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804c523:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c525:	je	0x804c82a [IMM <CODEREF>]
	je	.label_327
	# 0x804c52b:	movb	$0, 0x806a444 [IMM, MEM]
	movb	$0, print_with_color
	# 0x804c532:	jmp	0x804c82a [IMM <CODEREF>]
	jmp	.label_327
	# 0x804c537:	movl	$0, -0x24(%ebp) [IMM, MEM]
.label_341:
	movl	$0, -0x24(%ebp)
	# 0x804c53e:	movw	$0x3f3f, -0xf(%ebp) [IMM, MEM]
	movw	$0x3f3f, -0xf(%ebp)
	# 0x804c544:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x804c548:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c54b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c54e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c54f:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804c554:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c557:	movl	%eax, 0x806a44c [REG, MEM]
	movl	%eax, color_buf
	# 0x804c55c:	movl	0x806a44c, %eax [MEM, REG]
	movl	color_buf,  %eax
	# 0x804c561:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804c564:	movl	$1, -0x20(%ebp) [IMM, MEM]
	movl	$1, -0x20(%ebp)
	# 0x804c56b:	cmpl	$6, -0x20(%ebp) [IMM, MEM]
.label_325:
	cmpl	$6, -0x20(%ebp)
	# 0x804c56f:	ja	0x804c784 [IMM <CODEREF>]
	ja	.label_336
	# 0x804c575:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x804c578:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x804c57b:	addl	$0x8061238, %eax [IMM <DATAREF>, REG]
	addl	$label_345,  %eax
	# 0x804c580:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c582:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804c584:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_2360:
	movl	-0x30(%ebp), %eax
	# 0x804c587:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c58a:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x804c58d:	cmpl	$0x2a, %eax [IMM, REG]
	cmpl	$0x2a, %eax
	# 0x804c590:	je	0x804c5ab [IMM <CODEREF>]
	je	sub_804c5ab
	# 0x804c592:	cmpl	$0x3a, %eax [IMM, REG]
	cmpl	$0x3a, %eax
	# 0x804c595:	je	0x804c59d [IMM <CODEREF>]
	je	.label_329
	# 0x804c597:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c599:	je	0x804c60c [IMM <CODEREF>]
	je	.label_330
	# 0x804c59b:	jmp	0x804c618 [IMM <CODEREF>]
	jmp	.label_332
	# 0x804c59d:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_329:
	movl	-0x30(%ebp), %eax
	# 0x804c5a0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804c5a3:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804c5a6:	jmp	0x804c62f [IMM <CODEREF>]
	jmp	.label_331
	.section	.text
	.align	32
	#Procedure 0x804c5ab

	# 0x804c5ab:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804c5ab
	.type sub_804c5ab, @function
sub_804c5ab:
	subl	$0xc, %esp
	# 0x804c5ae:	pushl	$0x14 [IMM]
	pushl	$0x14
	# 0x804c5b0:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804c5b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c5b8:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x804c5bb:	movl	0x806a448, %edx [MEM, REG]
	movl	color_ext_list,  %edx
	# 0x804c5c1:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c5c4:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x804c5c7:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c5ca:	movl	%eax, 0x806a448 [REG, MEM]
	movl	%eax, color_ext_list
	# 0x804c5cf:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c5d2:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804c5d5:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804c5d8:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x804c5db:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c5de:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x804c5e1:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c5e4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c5e5:	pushl	$1 [IMM]
	pushl	$1
	# 0x804c5e7:	leal	-0x30(%ebp), %eax [MEM, REG]
	leal	-0x30(%ebp), %eax
	# 0x804c5ea:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c5eb:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x804c5ee:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c5ef:	calll	0x804c12c [IMM <CODEREF>]
	calll	get_funky_string
	# 0x804c5f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c5f7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c5f9:	je	0x804c602 [IMM <CODEREF>]
	je	.label_348
	# 0x804c5fb:	movl	$4, %eax [IMM, REG]
	movl	$4, %eax
	# 0x804c600:	jmp	0x804c607 [IMM <CODEREF>]
	jmp	.label_347
	# 0x804c602:	movl	$6, %eax [IMM, REG]
.label_348:
	movl	$6, %eax
	# 0x804c607:	movl	%eax, -0x20(%ebp) [REG, MEM]
.label_347:
	movl	%eax, -0x20(%ebp)
	# 0x804c60a:	jmp	0x804c62f [IMM <CODEREF>]
	jmp	.label_331
	# 0x804c60c:	movl	$5, -0x20(%ebp) [IMM, MEM]
.label_330:
	movl	$5, -0x20(%ebp)
	# 0x804c613:	jmp	0x804c790 [IMM <CODEREF>]
	jmp	.label_326
	# 0x804c618:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_332:
	movl	-0x30(%ebp), %eax
	# 0x804c61b:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c61e:	movl	%edx, -0x30(%ebp) [REG, MEM]
	movl	%edx, -0x30(%ebp)
	# 0x804c621:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c624:	movb	%al, -0xf(%ebp) [REG, MEM]
	movb	%al, -0xf(%ebp)
	# 0x804c627:	movl	$2, -0x20(%ebp) [IMM, MEM]
	movl	$2, -0x20(%ebp)
	# 0x804c62e:	nop	 []
	nop	
	# 0x804c62f:	jmp	0x804c78a [IMM <CODEREF>]
.label_331:
	jmp	.label_333
	# 0x804c634:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_2361:
	movl	-0x30(%ebp), %eax
	# 0x804c637:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c63a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c63c:	je	0x804c659 [IMM <CODEREF>]
	je	.label_334
	# 0x804c63e:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c641:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c644:	movl	%edx, -0x30(%ebp) [REG, MEM]
	movl	%edx, -0x30(%ebp)
	# 0x804c647:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c64a:	movb	%al, -0xe(%ebp) [REG, MEM]
	movb	%al, -0xe(%ebp)
	# 0x804c64d:	movl	$3, -0x20(%ebp) [IMM, MEM]
	movl	$3, -0x20(%ebp)
	# 0x804c654:	jmp	0x804c78a [IMM <CODEREF>]
	jmp	.label_333
	# 0x804c659:	movl	$6, -0x20(%ebp) [IMM, MEM]
.label_334:
	movl	$6, -0x20(%ebp)
	# 0x804c660:	jmp	0x804c78a [IMM <CODEREF>]
	jmp	.label_333
	# 0x804c665:	movl	$6, -0x20(%ebp) [IMM, MEM]
.label_2362:
	movl	$6, -0x20(%ebp)
	# 0x804c66c:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804c66f:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c672:	movl	%edx, -0x30(%ebp) [REG, MEM]
	movl	%edx, -0x30(%ebp)
	# 0x804c675:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c678:	cmpb	$0x3d, %al [IMM, REG]
	cmpb	$0x3d, %al
	# 0x804c67a:	jne	0x804c789 [IMM <CODEREF>]
	jne	.label_337
	# 0x804c680:	movl	$0, -0x28(%ebp) [IMM, MEM]
	movl	$0, -0x28(%ebp)
	# 0x804c687:	jmp	0x804c6eb [IMM <CODEREF>]
	jmp	.label_318
	# 0x804c689:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_342:
	movl	-0x28(%ebp), %eax
	# 0x804c68c:	movl	0x8060060(, %eax, 4), %eax [MEM, REG]
	movl	indicator_name(, %eax, 4),  %eax
	.section	.text
	.align	32
	#Procedure 0x804c693
	.globl sub_804c693
	.type sub_804c693, @function
sub_804c693:

	# 0x804c693:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804c696:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c697:	leal	-0xf(%ebp), %eax [MEM, REG]
	leal	-0xf(%ebp), %eax
	# 0x804c69a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c69b:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x804c6a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c6a3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c6a5:	jne	0x804c6e7 [IMM <CODEREF>]
	jne	.label_349
	# 0x804c6a7:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x804c6aa:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x804c6ad:	movl	%edx, 0x806a204(, %eax, 8) [REG, MEM]
	movl	%edx, label_96(, %eax, 8)
	# 0x804c6b4:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x804c6b7:	shll	$3, %eax [IMM, REG]
	shll	$3, %eax
	# 0x804c6ba:	addl	$0x806a200, %eax [IMM <DATAREF>, REG]
	addl	$color_indicator,  %eax
	# 0x804c6bf:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c6c0:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c6c2:	leal	-0x30(%ebp), %eax [MEM, REG]
	leal	-0x30(%ebp), %eax
	# 0x804c6c5:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c6c6:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x804c6c9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c6ca:	calll	0x804c12c [IMM <CODEREF>]
	calll	get_funky_string
	# 0x804c6cf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c6d2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c6d4:	je	0x804c6dd [IMM <CODEREF>]
	je	.label_352
	# 0x804c6d6:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804c6db:	jmp	0x804c6e2 [IMM <CODEREF>]
	jmp	.label_351
	# 0x804c6dd:	movl	$6, %eax [IMM, REG]
.label_352:
	movl	$6, %eax
	# 0x804c6e2:	movl	%eax, -0x20(%ebp) [REG, MEM]
.label_351:
	movl	%eax, -0x20(%ebp)
	# 0x804c6e5:	jmp	0x804c6f9 [IMM <CODEREF>]
	jmp	.label_350
	# 0x804c6e7:	addl	$1, -0x28(%ebp) [IMM, MEM]
.label_349:
	addl	$1, -0x28(%ebp)
	# 0x804c6eb:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_318:
	movl	-0x28(%ebp), %eax
	# 0x804c6ee:	movl	0x8060060(, %eax, 4), %eax [MEM, REG]
	movl	indicator_name(, %eax, 4),  %eax
	# 0x804c6f5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c6f7:	jne	0x804c689 [IMM <CODEREF>]
	jne	.label_342
	# 0x804c6f9:	cmpl	$6, -0x20(%ebp) [IMM, MEM]
.label_350:
	cmpl	$6, -0x20(%ebp)
	# 0x804c6fd:	jne	0x804c789 [IMM <CODEREF>]
	jne	.label_337
	# 0x804c703:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c706:	leal	-0xf(%ebp), %eax [MEM, REG]
	leal	-0xf(%ebp), %eax
	# 0x804c709:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c70a:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804c70f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c712:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804c714:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c717:	pushl	$0x80611e3 [IMM <DATAREF>]
	pushl	$label_338
	# 0x804c71c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804c721:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c724:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c725:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c726:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c728:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c72a:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804c72f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c732:	jmp	0x804c789 [IMM <CODEREF>]
	jmp	.label_337
	# 0x804c734:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_2363:
	movl	-0x30(%ebp), %eax
	# 0x804c737:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x804c73a:	movl	%edx, -0x30(%ebp) [REG, MEM]
	movl	%edx, -0x30(%ebp)
	# 0x804c73d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804c740:	cmpb	$0x3d, %al [IMM, REG]
	cmpb	$0x3d, %al
	# 0x804c742:	jne	0x804c77b [IMM <CODEREF>]
	jne	.label_335
	# 0x804c744:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x804c747:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c74a:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804c74d:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x804c750:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x804c753:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c754:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c756:	leal	-0x30(%ebp), %eax [MEM, REG]
	leal	-0x30(%ebp), %eax
	# 0x804c759:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c75a:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x804c75d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c75e:	calll	0x804c12c [IMM <CODEREF>]
	calll	get_funky_string
	# 0x804c763:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c766:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804c768:	je	0x804c771 [IMM <CODEREF>]
	je	.label_340
	# 0x804c76a:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804c76f:	jmp	0x804c776 [IMM <CODEREF>]
	jmp	.label_346
	# 0x804c771:	movl	$6, %eax [IMM, REG]
.label_340:
	movl	$6, %eax
	# 0x804c776:	movl	%eax, -0x20(%ebp) [REG, MEM]
.label_346:
	movl	%eax, -0x20(%ebp)
	# 0x804c779:	jmp	0x804c78a [IMM <CODEREF>]
	jmp	.label_333
	# 0x804c77b:	movl	$6, -0x20(%ebp) [IMM, MEM]
.label_335:
	movl	$6, -0x20(%ebp)
	# 0x804c782:	jmp	0x804c78a [IMM <CODEREF>]
	jmp	.label_333
	# 0x804c784:	calll	0x8049b10 [IMM <CODEREF>]
.label_336:
	calll	abort
	# 0x804c789:	nop	 []
.label_337:
	nop	
	# 0x804c78a:	jmp	0x804c56b [IMM <CODEREF>]
.label_333:
	jmp	.label_325
	# 0x804c78f:	nop	 []
.label_2364:
	nop	
	# 0x804c790:	cmpl	$6, -0x20(%ebp) [IMM, MEM]
.label_326:
	cmpl	$6, -0x20(%ebp)
	# 0x804c794:	jne	0x804c7fb [IMM <CODEREF>]
	jne	.label_328
	.section	.text
	.align	32
	#Procedure 0x804c796
	.globl sub_804c796
	.type sub_804c796, @function
sub_804c796:

	# 0x804c796:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c799:	pushl	$0x80611fc [IMM <DATAREF>]
	pushl	$label_354
	# 0x804c79e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804c7a3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c7a6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c7a9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c7aa:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c7ac:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c7ae:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804c7b3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c7b6:	movl	0x806a44c, %eax [MEM, REG]
	movl	color_buf,  %eax
	# 0x804c7bb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c7be:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c7bf:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804c7c4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c7c7:	movl	0x806a448, %eax [MEM, REG]
	movl	color_ext_list,  %eax
	# 0x804c7cc:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804c7cf:	jmp	0x804c7ee [IMM <CODEREF>]
	jmp	.label_353
	# 0x804c7d1:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_355:
	movl	-0x1c(%ebp), %eax
	# 0x804c7d4:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x804c7d7:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804c7da:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x804c7dd:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804c7e0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c7e3:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x804c7e6:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804c7eb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c7ee:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
.label_353:
	cmpl	$0, -0x1c(%ebp)
	# 0x804c7f2:	jne	0x804c7d1 [IMM <CODEREF>]
	jne	.label_355
	# 0x804c7f4:	movb	$0, 0x806a444 [IMM, MEM]
	movb	$0, print_with_color
	# 0x804c7fb:	movl	0x806a238, %eax [MEM, REG]
.label_328:
	movl	label_323,  %eax
	# 0x804c800:	cmpl	$6, %eax [IMM, REG]
	cmpl	$6, %eax
	# 0x804c803:	jne	0x804c82b [IMM <CODEREF>]
	jne	.label_324
	# 0x804c805:	movl	0x806a23c, %eax [MEM, REG]
	movl	label_321,  %eax
	# 0x804c80a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c80d:	pushl	$6 [IMM]
	pushl	$6
	# 0x804c80f:	pushl	$0x8061230 [IMM <DATAREF>]
	pushl	$label_322
	# 0x804c814:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c815:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x804c81a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c81d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c81f:	jne	0x804c82b [IMM <CODEREF>]
	jne	.label_324
	# 0x804c821:	movb	$1, 0x806a3dc [IMM, MEM]
	movb	$1, color_symlink_as_referent
	# 0x804c828:	jmp	0x804c82b [IMM <CODEREF>]
	jmp	.label_324
	# 0x804c82a:	nop	 []
.label_327:
	nop	
	# 0x804c82b:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_324:
	movl	-0xc(%ebp), %eax
	# 0x804c82e:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x804c835:	je	0x804c83c [IMM <CODEREF>]
	je	.label_320
	# 0x804c837:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804c83c:	movl	-4(%ebp), %ebx [MEM, REG]
.label_320:
	movl	-4(%ebp), %ebx
	# 0x804c83f:	leave	 []
	leave	
	# 0x804c840:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c841

	# 0x804c841:	pushl	%ebp [REG]
	.globl getenv_quoting_style
	.type getenv_quoting_style, @function
getenv_quoting_style:
	pushl	%ebp
	# 0x804c842:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c844:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c845:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x804c848:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c84b:	pushl	$0x8061254 [IMM <DATAREF>]
	pushl	$label_356
	# 0x804c850:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x804c855:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c858:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804c85b:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x804c85f:	je	0x804c8c9 [IMM <CODEREF>]
	je	.label_357
	# 0x804c861:	pushl	$4 [IMM]
	pushl	$4
	# 0x804c863:	pushl	$0x8063860 [IMM <DATAREF>]
	pushl	$quoting_style_vals
	# 0x804c868:	pushl	$0x8063820 [IMM <DATAREF>]
	pushl	$quoting_style_args
	# 0x804c86d:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804c870:	calll	0x8052a26 [IMM <CODEREF>]
	calll	argmatch
	# 0x804c875:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c878:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c87b:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804c87f:	js	0x804c89b [IMM <CODEREF>]
	js	.label_359
	# 0x804c881:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c884:	movl	0x8063860(, %eax, 4), %eax [MEM, REG]
	movl	quoting_style_vals(, %eax, 4),  %eax
	# 0x804c88b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804c88e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c88f:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c891:	calll	0x805a1d3 [IMM <CODEREF>]
	calll	set_quoting_style
	# 0x804c896:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c899:	jmp	0x804c8c9 [IMM <CODEREF>]
	jmp	.label_357
	# 0x804c89b:	subl	$0xc, %esp [IMM, REG]
.label_359:
	subl	$0xc, %esp
	# 0x804c89e:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804c8a1:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x804c8a6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c8a9:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804c8ab:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c8ae:	pushl	$0x8061264 [IMM <DATAREF>]
	pushl	$label_358
	# 0x804c8b3:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804c8b8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c8bb:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c8bc:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c8bd:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c8bf:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c8c1:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804c8c6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c8c9:	nop	 []
.label_357:
	nop	
	# 0x804c8ca:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x804c8cd:	leave	 []
	leave	
	# 0x804c8ce:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c8cf

	# 0x804c8cf:	pushl	%ebp [REG]
	.globl set_exit_status
	.type set_exit_status, @function
set_exit_status:
	pushl	%ebp
	# 0x804c8d0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c8d2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804c8d5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804c8d8:	movb	%al, -4(%ebp) [REG, MEM]
	movb	%al, -4(%ebp)
	# 0x804c8db:	cmpb	$0, -4(%ebp) [IMM, MEM]
	cmpb	$0, -4(%ebp)
	# 0x804c8df:	je	0x804c8ed [IMM <CODEREF>]
	je	.label_361
	# 0x804c8e1:	movl	$2, 0x806a528 [IMM, MEM]
	movl	$2, exit_status
	# 0x804c8eb:	jmp	0x804c900 [IMM <CODEREF>]
	jmp	.label_360
	# 0x804c8ed:	movl	0x806a528, %eax [MEM, REG]
.label_361:
	movl	exit_status,  %eax
	# 0x804c8f2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804c8f4:	jne	0x804c900 [IMM <CODEREF>]
	jne	.label_360
	# 0x804c8f6:	movl	$1, 0x806a528 [IMM, MEM]
	movl	$1, exit_status
	# 0x804c900:	nop	 []
.label_360:
	nop	
	# 0x804c901:	leave	 []
	leave	
	# 0x804c902:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c903

	# 0x804c903:	pushl	%ebp [REG]
	.globl file_failure
	.type file_failure, @function
file_failure:
	pushl	%ebp
	# 0x804c904:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c906:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c907:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x804c90a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804c90d:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x804c910:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804c913:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x804c916:	pushl	$4 [IMM]
	pushl	$4
	# 0x804c918:	calll	0x805b512 [IMM <CODEREF>]
	calll	quotearg_style
	# 0x804c91d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c920:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804c922:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804c927:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804c929:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c92a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804c92d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c92e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804c930:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804c935:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c938:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x804c93c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c93f:	pushl	%eax [REG]
	pushl	%eax
	# 0x804c940:	calll	0x804c8cf [IMM <CODEREF>]
	calll	set_exit_status
	# 0x804c945:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c948:	nop	 []
	nop	
	# 0x804c949:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x804c94c:	leave	 []
	leave	
	# 0x804c94d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c94e

	# 0x804c94e:	pushl	%ebp [REG]
	.globl queue_directory
	.type queue_directory, @function
queue_directory:
	pushl	%ebp
	# 0x804c94f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c951:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804c954:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804c957:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x804c95a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c95d:	pushl	$0x10 [IMM]
	pushl	$0x10
	# 0x804c95f:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804c964:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c967:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c96a:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x804c96e:	je	0x804c982 [IMM <CODEREF>]
	je	.label_362
	# 0x804c970:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c973:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804c976:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804c97b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c97e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804c980:	jmp	0x804c987 [IMM <CODEREF>]
	jmp	.label_365
	# 0x804c982:	movl	$0, %edx [IMM, REG]
.label_362:
	movl	$0, %edx
	# 0x804c987:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_365:
	movl	-0xc(%ebp), %eax
	# 0x804c98a:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x804c98d:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x804c991:	je	0x804c9a5 [IMM <CODEREF>]
	je	.label_364
	# 0x804c993:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804c996:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804c999:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804c99e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804c9a1:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804c9a3:	jmp	0x804c9aa [IMM <CODEREF>]
	jmp	.label_363
	# 0x804c9a5:	movl	$0, %edx [IMM, REG]
.label_364:
	movl	$0, %edx
	# 0x804c9aa:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_363:
	movl	-0xc(%ebp), %eax
	# 0x804c9ad:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804c9af:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c9b2:	movzbl	-0x1c(%ebp), %edx [MEM, REG]
	movzbl	-0x1c(%ebp), %edx
	# 0x804c9b6:	movb	%dl, 8(%eax) [REG, MEM]
	movb	%dl, 8(%eax)
	# 0x804c9b9:	movl	0x806a3e4, %edx [MEM, REG]
	movl	pending_dirs,  %edx
	# 0x804c9bf:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c9c2:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x804c9c5:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804c9c8:	movl	%eax, 0x806a3e4 [REG, MEM]
	movl	%eax, pending_dirs
	# 0x804c9cd:	nop	 []
	nop	
	# 0x804c9ce:	leave	 []
	leave	
	# 0x804c9cf:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804c9d0

	# 0x804c9d0:	pushl	%ebp [REG]
	.globl print_dir
	.type print_dir, @function
print_dir:
	pushl	%ebp
	# 0x804c9d1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804c9d3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804c9d4:	subl	$0x324, %esp [IMM, REG]
	subl	$0x324, %esp
	# 0x804c9da:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804c9dd:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x804c9e0:	movl	%edx, -0x31c(%ebp) [REG, MEM]
	movl	%edx, -0x31c(%ebp)
	# 0x804c9e6:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x804c9e9:	movl	%edx, -0x320(%ebp) [REG, MEM]
	movl	%edx, -0x320(%ebp)
	# 0x804c9ef:	movb	%al, -0x324(%ebp) [REG, MEM]
	movb	%al, -0x324(%ebp)
	# 0x804c9f5:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804c9fb:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804c9fe:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804ca00:	movl	$0, -0x300(%ebp) [IMM, MEM]
	movl	$0, -0x300(%ebp)
	# 0x804ca0a:	movl	$0, -0x2fc(%ebp) [IMM, MEM]
	movl	$0, -0x2fc(%ebp)
	# 0x804ca14:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804ca19:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x804ca1f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ca22:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804ca28:	calll	0x8049b70 [IMM <CODEREF>]
	calll	opendir
	# 0x804ca2d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ca30:	movl	%eax, -0x310(%ebp) [REG, MEM]
	movl	%eax, -0x310(%ebp)
	# 0x804ca36:	cmpl	$0, -0x310(%ebp) [IMM, MEM]
	cmpl	$0, -0x310(%ebp)
	# 0x804ca3d:	jne	0x804ca70 [IMM <CODEREF>]
	jne	.label_368
	# 0x804ca3f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ca42:	pushl	$0x80612a5 [IMM <DATAREF>]
	pushl	$label_395
	# 0x804ca47:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804ca4c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ca4f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804ca51:	movzbl	-0x324(%ebp), %eax [MEM, REG]
	movzbl	-0x324(%ebp), %eax
	# 0x804ca58:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ca5b:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804ca61:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ca62:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ca63:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804ca68:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ca6b:	jmp	0x804d053 [IMM <CODEREF>]
	jmp	.label_369
	# 0x804ca70:	movl	0x806a3c0, %eax [MEM, REG]
.label_368:
	movl	active_dir_set,  %eax
	# 0x804ca75:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ca77:	je	0x804cbc0 [IMM <CODEREF>]
	je	.label_382
	# 0x804ca7d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ca80:	pushl	-0x310(%ebp) [MEM]
	pushl	-0x310(%ebp)
	# 0x804ca86:	calll	0x80495c0 [IMM <CODEREF>]
	calll	dirfd
	# 0x804ca8b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ca8e:	movl	%eax, -0x30c(%ebp) [REG, MEM]
	movl	%eax, -0x30c(%ebp)
	# 0x804ca94:	cmpl	$0, -0x30c(%ebp) [IMM, MEM]
	cmpl	$0, -0x30c(%ebp)
	# 0x804ca9b:	js	0x804caba [IMM <CODEREF>]
	js	.label_376
	# 0x804ca9d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804caa0:	leal	-0x2f8(%ebp), %eax [MEM, REG]
	leal	-0x2f8(%ebp), %eax
	# 0x804caa6:	pushl	%eax [REG]
	pushl	%eax
	# 0x804caa7:	pushl	-0x30c(%ebp) [MEM]
	pushl	-0x30c(%ebp)
	# 0x804caad:	calll	0x805ec20 [IMM <CODEREF>]
	calll	fstat64
	# 0x804cab2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cab5:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x804cab8:	jmp	0x804cad5 [IMM <CODEREF>]
	jmp	.label_392
	# 0x804caba:	subl	$8, %esp [IMM, REG]
.label_376:
	subl	$8, %esp
	# 0x804cabd:	leal	-0x2f8(%ebp), %eax [MEM, REG]
	leal	-0x2f8(%ebp), %eax
	# 0x804cac3:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cac4:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804caca:	calll	0x805ebf0 [IMM <CODEREF>]
	calll	stat64
	# 0x804cacf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cad2:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x804cad5:	testb	%al, %al [REG, REG]
.label_392:
	testb	%al, %al
	# 0x804cad7:	je	0x804cb1b [IMM <CODEREF>]
	je	.label_397
	# 0x804cad9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cadc:	pushl	$0x80612c0 [IMM <DATAREF>]
	pushl	$label_398
	# 0x804cae1:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804cae6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cae9:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804caeb:	movzbl	-0x324(%ebp), %eax [MEM, REG]
	movzbl	-0x324(%ebp), %eax
	# 0x804caf2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804caf5:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cafb:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cafc:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cafd:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804cb02:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb05:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cb08:	pushl	-0x310(%ebp) [MEM]
	pushl	-0x310(%ebp)
	# 0x804cb0e:	calll	0x8049b50 [IMM <CODEREF>]
	calll	closedir
	# 0x804cb13:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb16:	jmp	0x804d053 [IMM <CODEREF>]
	jmp	.label_369
	# 0x804cb1b:	movl	-0x2a0(%ebp), %ecx [MEM, REG]
.label_397:
	movl	-0x2a0(%ebp), %ecx
	# 0x804cb21:	movl	-0x29c(%ebp), %ebx [MEM, REG]
	movl	-0x29c(%ebp), %ebx
	# 0x804cb27:	movl	-0x2f8(%ebp), %eax [MEM, REG]
	movl	-0x2f8(%ebp), %eax
	# 0x804cb2d:	movl	-0x2f4(%ebp), %edx [MEM, REG]
	movl	-0x2f4(%ebp), %edx
	# 0x804cb33:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804cb34:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804cb35:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cb36:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cb37:	calll	0x804a62d [IMM <CODEREF>]
	calll	visit_dir
	# 0x804cb3c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb3f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cb41:	je	0x804cb9c [IMM <CODEREF>]
	je	.label_374
	# 0x804cb43:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804cb46:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cb4c:	pushl	$3 [IMM]
	pushl	$3
	# 0x804cb4e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cb50:	calll	0x805b655 [IMM <CODEREF>]
	calll	quotearg_n_style_colon
	# 0x804cb55:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb58:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804cb5a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cb5d:	pushl	$0x80612e8 [IMM <DATAREF>]
	pushl	$label_378
	# 0x804cb62:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804cb67:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb6a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804cb6b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cb6c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cb6e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cb70:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804cb75:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb78:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cb7b:	pushl	-0x310(%ebp) [MEM]
	pushl	-0x310(%ebp)
	# 0x804cb81:	calll	0x8049b50 [IMM <CODEREF>]
	calll	closedir
	# 0x804cb86:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb89:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cb8c:	pushl	$1 [IMM]
	pushl	$1
	# 0x804cb8e:	calll	0x804c8cf [IMM <CODEREF>]
	calll	set_exit_status
	# 0x804cb93:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cb96:	nop	 []
	nop	
	# 0x804cb97:	jmp	0x804d053 [IMM <CODEREF>]
	jmp	.label_369
	# 0x804cb9c:	movl	-0x2a0(%ebp), %ecx [MEM, REG]
.label_374:
	movl	-0x2a0(%ebp), %ecx
	# 0x804cba2:	movl	-0x29c(%ebp), %ebx [MEM, REG]
	movl	-0x29c(%ebp), %ebx
	# 0x804cba8:	movl	-0x2f8(%ebp), %eax [MEM, REG]
	movl	-0x2f8(%ebp), %eax
	# 0x804cbae:	movl	-0x2f4(%ebp), %edx [MEM, REG]
	movl	-0x2f4(%ebp), %edx
	# 0x804cbb4:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804cbb5:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804cbb6:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cbb7:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cbb8:	calll	0x8049f98 [IMM <CODEREF>]
	calll	dev_ino_push
	# 0x804cbbd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cbc0:	calll	0x804d221 [IMM <CODEREF>]
.label_382:
	calll	clear_files
	# 0x804cbc5:	movzbl	0x806a458, %eax [MEM, REG]
	movzbl	recursive,  %eax
	# 0x804cbcc:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cbce:	jne	0x804cbdf [IMM <CODEREF>]
	jne	.label_396
	# 0x804cbd0:	movzbl	0x806a478, %eax [MEM, REG]
	movzbl	print_dir_name,  %eax
	# 0x804cbd7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cbd9:	je	0x804cd10 [IMM <CODEREF>]
	je	.label_387
	# 0x804cbdf:	movzbl	0x806a2c8, %eax [MEM, REG]
.label_396:
	movzbl	first.8510,  %eax
	# 0x804cbe6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804cbe9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cbeb:	je	0x804cc07 [IMM <CODEREF>]
	je	.label_399
	# 0x804cbed:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cbf0:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804cbf2:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804cbf7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cbfa:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cbff:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804cc02:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cc07:	movb	$0, 0x806a2c8 [IMM, MEM]
.label_399:
	movb	$0, first.8510
	# 0x804cc0e:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x804cc15:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cc17:	je	0x804cc3d [IMM <CODEREF>]
	je	.label_366
	# 0x804cc19:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804cc1e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cc1f:	pushl	$2 [IMM]
	pushl	$2
	# 0x804cc21:	pushl	$1 [IMM]
	pushl	$1
	# 0x804cc23:	pushl	$0x8061311 [IMM <DATAREF>]
	pushl	$label_373
	# 0x804cc28:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x804cc2d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cc30:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cc35:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x804cc38:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cc3d:	movl	$0, -0x318(%ebp) [IMM, MEM]
.label_366:
	movl	$0, -0x318(%ebp)
	# 0x804cc47:	movzbl	0x806a445, %eax [MEM, REG]
	movzbl	print_hyperlink,  %eax
	# 0x804cc4e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cc50:	je	0x804cca0 [IMM <CODEREF>]
	je	.label_375
	# 0x804cc52:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804cc55:	pushl	$2 [IMM]
	pushl	$2
	# 0x804cc57:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cc5d:	calll	0x8053064 [IMM <CODEREF>]
	calll	canonicalize_filename_mode
	# 0x804cc62:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cc65:	movl	%eax, -0x318(%ebp) [REG, MEM]
	movl	%eax, -0x318(%ebp)
	# 0x804cc6b:	cmpl	$0, -0x318(%ebp) [IMM, MEM]
	cmpl	$0, -0x318(%ebp)
	# 0x804cc72:	jne	0x804cca0 [IMM <CODEREF>]
	jne	.label_375
	# 0x804cc74:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cc77:	pushl	$0x8061314 [IMM <DATAREF>]
	pushl	$label_383
	# 0x804cc7c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804cc81:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cc84:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804cc86:	movzbl	-0x324(%ebp), %eax [MEM, REG]
	movzbl	-0x324(%ebp), %eax
	# 0x804cc8d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804cc90:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cc96:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cc97:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cc98:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804cc9d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cca0:	movl	0x806a470, %edx [MEM, REG]
.label_375:
	movl	dirname_quoting_options,  %edx
	# 0x804cca6:	cmpl	$0, -0x320(%ebp) [IMM, MEM]
	cmpl	$0, -0x320(%ebp)
	# 0x804ccad:	je	0x804ccb7 [IMM <CODEREF>]
	je	.label_388
	# 0x804ccaf:	movl	-0x320(%ebp), %eax [MEM, REG]
	movl	-0x320(%ebp), %eax
	# 0x804ccb5:	jmp	0x804ccbd [IMM <CODEREF>]
	jmp	.label_391
	# 0x804ccb7:	movl	-0x31c(%ebp), %eax [MEM, REG]
.label_388:
	movl	-0x31c(%ebp), %eax
	# 0x804ccbd:	subl	$4, %esp [IMM, REG]
.label_391:
	subl	$4, %esp
	# 0x804ccc0:	pushl	-0x318(%ebp) [MEM]
	pushl	-0x318(%ebp)
	# 0x804ccc6:	pushl	$0x806a580 [IMM <DATAREF>]
	pushl	$subdired_obstack
	# 0x804cccb:	pushl	$1 [IMM]
	pushl	$1
	# 0x804cccd:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cccf:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x804ccd1:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ccd2:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ccd3:	calll	0x8050d90 [IMM <CODEREF>]
	calll	quote_name
	# 0x804ccd8:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ccdb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ccde:	pushl	-0x318(%ebp) [MEM]
	pushl	-0x318(%ebp)
	# 0x804cce4:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804cce9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ccec:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804ccf1:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ccf2:	pushl	$2 [IMM]
	pushl	$2
	# 0x804ccf4:	pushl	$1 [IMM]
	pushl	$1
	# 0x804ccf6:	pushl	$0x806132c [IMM <DATAREF>]
	pushl	$label_384
	# 0x804ccfb:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x804cd00:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cd03:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cd08:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x804cd0b:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cd10:	calll	0x8049990 [IMM <CODEREF>]
.label_387:
	calll	__errno_location
	# 0x804cd15:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x804cd1b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cd1e:	pushl	-0x310(%ebp) [MEM]
	pushl	-0x310(%ebp)
	# 0x804cd24:	calll	0x8049ac0 [IMM <CODEREF>]
	calll	readdir64
	# 0x804cd29:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cd2c:	movl	%eax, -0x308(%ebp) [REG, MEM]
	movl	%eax, -0x308(%ebp)
	# 0x804cd32:	cmpl	$0, -0x308(%ebp) [IMM, MEM]
	cmpl	$0, -0x308(%ebp)
	# 0x804cd39:	je	0x804ce57 [IMM <CODEREF>]
	je	.label_372
	# 0x804cd3f:	movl	-0x308(%ebp), %eax [MEM, REG]
	movl	-0x308(%ebp), %eax
	# 0x804cd45:	addl	$0x13, %eax [IMM, REG]
	addl	$0x13, %eax
	# 0x804cd48:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cd4b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cd4c:	calll	0x804d0e3 [IMM <CODEREF>]
	calll	file_ignored
	# 0x804cd51:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cd54:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804cd57:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cd59:	je	0x804ce9a [IMM <CODEREF>]
	je	.label_370
	# 0x804cd5f:	movl	$0, -0x314(%ebp) [IMM, MEM]
	movl	$0, -0x314(%ebp)
	# 0x804cd69:	movl	-0x308(%ebp), %eax [MEM, REG]
	movl	-0x308(%ebp), %eax
	# 0x804cd6f:	movzbl	0x12(%eax), %eax [MEM, REG]
	movzbl	0x12(%eax), %eax
	# 0x804cd73:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804cd76:	cmpl	$0xe, %eax [IMM, REG]
	cmpl	$0xe, %eax
	# 0x804cd79:	ja	0x804cde3 [IMM <CODEREF>]
	ja	.label_380
	# 0x804cd7b:	movl	0x8061360(, %eax, 4), %eax [MEM, REG]
	movl	label_385(, %eax, 4),  %eax
	# 0x804cd82:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804cd84:	movl	$4, -0x314(%ebp) [IMM, MEM]
.label_2499:
	movl	$4, -0x314(%ebp)
	# 0x804cd8e:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cd90:	movl	$2, -0x314(%ebp) [IMM, MEM]
.label_2497:
	movl	$2, -0x314(%ebp)
	# 0x804cd9a:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cd9c:	movl	$3, -0x314(%ebp) [IMM, MEM]
.label_2498:
	movl	$3, -0x314(%ebp)
	# 0x804cda6:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cda8:	movl	$1, -0x314(%ebp) [IMM, MEM]
.label_2496:
	movl	$1, -0x314(%ebp)
	# 0x804cdb2:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cdb4:	movl	$6, -0x314(%ebp) [IMM, MEM]
.label_2501:
	movl	$6, -0x314(%ebp)
	# 0x804cdbe:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cdc0:	movl	$5, -0x314(%ebp) [IMM, MEM]
.label_2500:
	movl	$5, -0x314(%ebp)
	# 0x804cdca:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cdcc:	movl	$7, -0x314(%ebp) [IMM, MEM]
.label_2502:
	movl	$7, -0x314(%ebp)
	# 0x804cdd6:	jmp	0x804cde3 [IMM <CODEREF>]
	jmp	.label_380
	# 0x804cdd8:	movl	$8, -0x314(%ebp) [IMM, MEM]
.label_2503:
	movl	$8, -0x314(%ebp)
	# 0x804cde2:	nop	 []
	nop	
	# 0x804cde3:	movl	-0x308(%ebp), %eax [MEM, REG]
.label_380:
	movl	-0x308(%ebp), %eax
	# 0x804cde9:	addl	$0x13, %eax [IMM, REG]
	addl	$0x13, %eax
	# 0x804cdec:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804cdef:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cdf5:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cdf7:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cdf9:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cdfb:	pushl	-0x314(%ebp) [MEM]
	pushl	-0x314(%ebp)
	# 0x804ce01:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ce02:	calll	0x804d560 [IMM <CODEREF>]
	calll	gobble_file
	# 0x804ce07:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804ce0a:	addl	%eax, -0x300(%ebp) [REG, MEM]
	addl	%eax, -0x300(%ebp)
	# 0x804ce10:	adcl	%edx, -0x2fc(%ebp) [REG, MEM]
	adcl	%edx, -0x2fc(%ebp)
	# 0x804ce16:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804ce1b:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804ce1e:	jne	0x804ce9a [IMM <CODEREF>]
	jne	.label_370
	# 0x804ce20:	movl	0x806a424, %eax [MEM, REG]
	movl	sort_type,  %eax
	# 0x804ce25:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x804ce28:	jne	0x804ce9a [IMM <CODEREF>]
	jne	.label_370
	# 0x804ce2a:	movzbl	0x806a42b, %eax [MEM, REG]
	movzbl	print_block_size,  %eax
	# 0x804ce31:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ce34:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ce36:	je	0x804ce9a [IMM <CODEREF>]
	je	.label_370
	# 0x804ce38:	movzbl	0x806a458, %eax [MEM, REG]
	movzbl	recursive,  %eax
	# 0x804ce3f:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ce42:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ce44:	je	0x804ce9a [IMM <CODEREF>]
	je	.label_370
	# 0x804ce46:	calll	0x804f7c0 [IMM <CODEREF>]
	calll	sort_files
	# 0x804ce4b:	calll	0x804f8de [IMM <CODEREF>]
	calll	print_current_files
	# 0x804ce50:	calll	0x804d221 [IMM <CODEREF>]
	calll	clear_files
	# 0x804ce55:	jmp	0x804ce9a [IMM <CODEREF>]
	jmp	.label_370
	# 0x804ce57:	calll	0x8049990 [IMM <CODEREF>]
.label_372:
	calll	__errno_location
	# 0x804ce5c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804ce5e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804ce60:	je	0x804cea4 [IMM <CODEREF>]
	je	.label_379
	# 0x804ce62:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ce65:	pushl	$0x806132f [IMM <DATAREF>]
	pushl	$label_381
	# 0x804ce6a:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804ce6f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ce72:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804ce74:	movzbl	-0x324(%ebp), %eax [MEM, REG]
	movzbl	-0x324(%ebp), %eax
	# 0x804ce7b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ce7e:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804ce84:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ce85:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ce86:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804ce8b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ce8e:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804ce93:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804ce95:	cmpl	$0x4b, %eax [IMM, REG]
	cmpl	$0x4b, %eax
	# 0x804ce98:	jne	0x804cea7 [IMM <CODEREF>]
	jne	.label_394
	# 0x804ce9a:	calll	0x804a819 [IMM <CODEREF>]
.label_370:
	calll	process_signals
	# 0x804ce9f:	jmp	0x804cd10 [IMM <CODEREF>]
	jmp	.label_387
	# 0x804cea4:	nop	 []
.label_379:
	nop	
	# 0x804cea5:	jmp	0x804cea8 [IMM <CODEREF>]
	jmp	.label_390
	# 0x804cea7:	nop	 []
.label_394:
	nop	
	# 0x804cea8:	subl	$0xc, %esp [IMM, REG]
.label_390:
	subl	$0xc, %esp
	# 0x804ceab:	pushl	-0x310(%ebp) [MEM]
	pushl	-0x310(%ebp)
	# 0x804ceb1:	calll	0x8049b50 [IMM <CODEREF>]
	calll	closedir
	# 0x804ceb6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ceb9:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804cebb:	je	0x804cee9 [IMM <CODEREF>]
	je	.label_393
	# 0x804cebd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cec0:	pushl	$0x8061344 [IMM <DATAREF>]
	pushl	$label_389
	# 0x804cec5:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804ceca:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cecd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804cecf:	movzbl	-0x324(%ebp), %eax [MEM, REG]
	movzbl	-0x324(%ebp), %eax
	# 0x804ced6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ced9:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cedf:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cee0:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cee1:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804cee6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cee9:	calll	0x804f7c0 [IMM <CODEREF>]
.label_393:
	calll	sort_files
	# 0x804ceee:	movzbl	0x806a458, %eax [MEM, REG]
	movzbl	recursive,  %eax
	# 0x804cef5:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cef7:	je	0x804cf0c [IMM <CODEREF>]
	je	.label_400
	# 0x804cef9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804cefc:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cefe:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804cf04:	calll	0x804e470 [IMM <CODEREF>]
	calll	extract_dirs_from_files
	# 0x804cf09:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cf0c:	movl	0x806a41c, %eax [MEM, REG]
.label_400:
	movl	format,  %eax
	# 0x804cf11:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804cf13:	je	0x804cf24 [IMM <CODEREF>]
	je	.label_367
	# 0x804cf15:	movzbl	0x806a42b, %eax [MEM, REG]
	movzbl	print_block_size,  %eax
	# 0x804cf1c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cf1e:	je	0x804d045 [IMM <CODEREF>]
	je	.label_386
	# 0x804cf24:	movzbl	0x806a43c, %eax [MEM, REG]
.label_367:
	movzbl	dired,  %eax
	# 0x804cf2b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804cf2d:	je	0x804cf53 [IMM <CODEREF>]
	je	.label_371
	# 0x804cf2f:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804cf34:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cf35:	pushl	$2 [IMM]
	pushl	$2
	# 0x804cf37:	pushl	$1 [IMM]
	pushl	$1
	# 0x804cf39:	pushl	$0x8061311 [IMM <DATAREF>]
	pushl	$label_373
	# 0x804cf3e:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x804cf43:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cf46:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cf4b:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x804cf4e:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cf53:	subl	$0xc, %esp [IMM, REG]
.label_371:
	subl	$0xc, %esp
	# 0x804cf56:	pushl	$0x8061359 [IMM <DATAREF>]
	pushl	$label_401
	# 0x804cf5b:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804cf60:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cf63:	movl	%eax, -0x304(%ebp) [REG, MEM]
	movl	%eax, -0x304(%ebp)
	# 0x804cf69:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804cf6e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804cf71:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cf72:	pushl	-0x304(%ebp) [MEM]
	pushl	-0x304(%ebp)
	# 0x804cf78:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804cf7d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cf80:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cf83:	pushl	-0x304(%ebp) [MEM]
	pushl	-0x304(%ebp)
	# 0x804cf89:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804cf8e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cf91:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804cf93:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cf98:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804cf9a:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cf9f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804cfa2:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x804cfa4:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804cfa9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804cfac:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804cfb1:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804cfb4:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804cfb9:	movl	0x806a430, %eax [MEM, REG]
	movl	output_block_size,  %eax
	# 0x804cfbe:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804cfc4:	movl	0x806a42c, %ecx [MEM, REG]
	movl	human_output_opts,  %ecx
	# 0x804cfca:	pushl	%edx [REG]
	pushl	%edx
	# 0x804cfcb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cfcc:	pushl	$0 [IMM]
	pushl	$0
	# 0x804cfce:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x804cfd3:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804cfd4:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x804cfda:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cfdb:	pushl	-0x2fc(%ebp) [MEM]
	pushl	-0x2fc(%ebp)
	# 0x804cfe1:	pushl	-0x300(%ebp) [MEM]
	pushl	-0x300(%ebp)
	# 0x804cfe7:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x804cfec:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804cfef:	movl	%eax, -0x304(%ebp) [REG, MEM]
	movl	%eax, -0x304(%ebp)
	# 0x804cff5:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804cffa:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804cffd:	pushl	%eax [REG]
	pushl	%eax
	# 0x804cffe:	pushl	-0x304(%ebp) [MEM]
	pushl	-0x304(%ebp)
	# 0x804d004:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804d009:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d00c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d00f:	pushl	-0x304(%ebp) [MEM]
	pushl	-0x304(%ebp)
	# 0x804d015:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804d01a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d01d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804d01f:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804d024:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804d026:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804d02b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d02e:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804d030:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804d035:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d038:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804d03d:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804d040:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804d045:	movl	0x806a3cc, %eax [MEM, REG]
.label_386:
	movl	cwd_n_used,  %eax
	# 0x804d04a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d04c:	je	0x804d053 [IMM <CODEREF>]
	je	.label_369
	# 0x804d04e:	calll	0x804f8de [IMM <CODEREF>]
	calll	print_current_files
	# 0x804d053:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_369:
	movl	-0xc(%ebp), %eax
	# 0x804d056:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x804d05d:	je	0x804d064 [IMM <CODEREF>]
	je	.label_377
	# 0x804d05f:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804d064:	movl	-4(%ebp), %ebx [MEM, REG]
.label_377:
	movl	-4(%ebp), %ebx
	# 0x804d067:	leave	 []
	leave	
	# 0x804d068:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d069

	# 0x804d069:	pushl	%ebp [REG]
	.globl add_ignore_pattern
	.type add_ignore_pattern, @function
add_ignore_pattern:
	pushl	%ebp
	# 0x804d06a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d06c:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804d06f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d072:	pushl	$8 [IMM]
	pushl	$8
	# 0x804d074:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804d079:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d07c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d07f:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804d082:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x804d085:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804d087:	movl	0x806a460, %edx [MEM, REG]
	movl	ignore_patterns,  %edx
	# 0x804d08d:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804d090:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x804d093:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804d096:	movl	%eax, 0x806a460 [REG, MEM]
	movl	%eax, ignore_patterns
	# 0x804d09b:	nop	 []
	nop	
	# 0x804d09c:	leave	 []
	leave	
	# 0x804d09d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d09e

	# 0x804d09e:	pushl	%ebp [REG]
	.globl patterns_match
	.type patterns_match, @function
patterns_match:
	pushl	%ebp
	# 0x804d09f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d0a1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804d0a4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d0a7:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d0aa:	jmp	0x804d0d6 [IMM <CODEREF>]
	jmp	.label_404
	# 0x804d0ac:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_403:
	movl	-0xc(%ebp), %eax
	# 0x804d0af:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d0b1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804d0b4:	pushl	$4 [IMM]
	pushl	$4
	# 0x804d0b6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804d0b9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d0ba:	calll	0x8049750 [IMM <CODEREF>]
	calll	fnmatch
	# 0x804d0bf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d0c2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d0c4:	jne	0x804d0cd [IMM <CODEREF>]
	jne	.label_405
	# 0x804d0c6:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804d0cb:	jmp	0x804d0e1 [IMM <CODEREF>]
	jmp	.label_402
	# 0x804d0cd:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_405:
	movl	-0xc(%ebp), %eax
	# 0x804d0d0:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804d0d3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d0d6:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
.label_404:
	cmpl	$0, -0xc(%ebp)
	# 0x804d0da:	jne	0x804d0ac [IMM <CODEREF>]
	jne	.label_403
	# 0x804d0dc:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804d0e1:	leave	 []
.label_402:
	leave	
	# 0x804d0e2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d0e3

	# 0x804d0e3:	pushl	%ebp [REG]
	.globl file_ignored
	.type file_ignored, @function
file_ignored:
	pushl	%ebp
	# 0x804d0e4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d0e6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d0e9:	movl	0x806a45c, %eax [MEM, REG]
	movl	ignore_mode,  %eax
	# 0x804d0ee:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804d0f1:	je	0x804d12b [IMM <CODEREF>]
	je	.label_406
	# 0x804d0f3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d0f6:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804d0f9:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x804d0fb:	jne	0x804d12b [IMM <CODEREF>]
	jne	.label_406
	# 0x804d0fd:	movl	0x806a45c, %eax [MEM, REG]
	movl	ignore_mode,  %eax
	# 0x804d102:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d104:	je	0x804d164 [IMM <CODEREF>]
	je	.label_408
	# 0x804d106:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d109:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804d10c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804d10f:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x804d111:	jne	0x804d11a [IMM <CODEREF>]
	jne	.label_409
	# 0x804d113:	movl	$2, %edx [IMM, REG]
	movl	$2, %edx
	# 0x804d118:	jmp	0x804d11f [IMM <CODEREF>]
	jmp	.label_410
	# 0x804d11a:	movl	$1, %edx [IMM, REG]
.label_409:
	movl	$1, %edx
	# 0x804d11f:	movl	8(%ebp), %eax [MEM, REG]
.label_410:
	movl	8(%ebp), %eax
	# 0x804d122:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804d124:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804d127:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d129:	je	0x804d164 [IMM <CODEREF>]
	je	.label_408
	# 0x804d12b:	movl	0x806a45c, %eax [MEM, REG]
.label_406:
	movl	ignore_mode,  %eax
	# 0x804d130:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d132:	jne	0x804d14c [IMM <CODEREF>]
	jne	.label_411
	# 0x804d134:	movl	0x806a464, %eax [MEM, REG]
	movl	hide_patterns,  %eax
	# 0x804d139:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d13c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d13f:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d140:	calll	0x804d09e [IMM <CODEREF>]
	calll	patterns_match
	# 0x804d145:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d148:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d14a:	jne	0x804d164 [IMM <CODEREF>]
	jne	.label_408
	# 0x804d14c:	movl	0x806a460, %eax [MEM, REG]
.label_411:
	movl	ignore_patterns,  %eax
	# 0x804d151:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d154:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d157:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d158:	calll	0x804d09e [IMM <CODEREF>]
	calll	patterns_match
	# 0x804d15d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d160:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d162:	je	0x804d16b [IMM <CODEREF>]
	je	.label_412
	# 0x804d164:	movl	$1, %eax [IMM, REG]
.label_408:
	movl	$1, %eax
	# 0x804d169:	jmp	0x804d170 [IMM <CODEREF>]
	jmp	.label_407
	# 0x804d16b:	movl	$0, %eax [IMM, REG]
.label_412:
	movl	$0, %eax
	# 0x804d170:	andl	$1, %eax [IMM, REG]
.label_407:
	andl	$1, %eax
	# 0x804d173:	leave	 []
	leave	
	# 0x804d174:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d175

	# 0x804d175:	pushl	%ebp [REG]
	.globl unsigned_file_size
	.type unsigned_file_size, @function
unsigned_file_size:
	pushl	%ebp
	# 0x804d176:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d178:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d17b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d17e:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x804d181:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d184:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x804d187:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x804d18a:	movl	-4(%ebp), %edx [MEM, REG]
	movl	-4(%ebp), %edx
	# 0x804d18d:	leave	 []
	leave	
	# 0x804d18e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d18f

	# 0x804d18f:	pushl	%ebp [REG]
	.globl has_capability
	.type has_capability, @function
has_capability:
	pushl	%ebp
	# 0x804d190:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d192:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d195:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d19a:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x804d1a0:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804d1a5:	leave	 []
	leave	
	# 0x804d1a6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d1a7

	# 0x804d1a7:	pushl	%ebp [REG]
	.globl free_ent
	.type free_ent, @function
free_ent:
	pushl	%ebp
	# 0x804d1a8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d1aa:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d1ad:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d1b0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d1b2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d1b5:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d1b6:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804d1bb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d1be:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d1c1:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804d1c4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d1c7:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d1c8:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804d1cd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d1d0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d1d3:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804d1d6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d1d9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d1da:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804d1df:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d1e2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d1e5:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804d1e8:	cmpl	$0x806a1e0, %eax [IMM <DATAREF>, REG]
	cmpl	$UNKNOWN_SECURITY_CONTEXT,  %eax
	# 0x804d1ed:	je	0x804d21e [IMM <CODEREF>]
	je	.label_413
	# 0x804d1ef:	calll	0x8049f8e [IMM <CODEREF>]
	calll	is_smack_enabled
	# 0x804d1f4:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d1f6:	je	0x804d20c [IMM <CODEREF>]
	je	.label_414
	# 0x804d1f8:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d1fb:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804d1fe:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d201:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d202:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804d207:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d20a:	jmp	0x804d21e [IMM <CODEREF>]
	jmp	.label_413
	# 0x804d20c:	movl	8(%ebp), %eax [MEM, REG]
.label_414:
	movl	8(%ebp), %eax
	# 0x804d20f:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804d212:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d215:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d216:	calll	0x805baf7 [IMM <CODEREF>]
	calll	freecon
	# 0x804d21b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d21e:	nop	 []
.label_413:
	nop	
	# 0x804d21f:	leave	 []
	leave	
	# 0x804d220:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d221

	# 0x804d221:	pushl	%ebp [REG]
	.globl clear_files
	.type clear_files, @function
clear_files:
	pushl	%ebp
	# 0x804d222:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d224:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804d227:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x804d22e:	jmp	0x804d254 [IMM <CODEREF>]
	jmp	.label_415
	# 0x804d230:	movl	0x806a3d4, %eax [MEM, REG]
.label_416:
	movl	sorted_file,  %eax
	# 0x804d235:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x804d238:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804d23b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804d23d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d23f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d242:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d245:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804d248:	calll	0x804d1a7 [IMM <CODEREF>]
	calll	free_ent
	# 0x804d24d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d250:	addl	$1, -0x10(%ebp) [IMM, MEM]
	addl	$1, -0x10(%ebp)
	# 0x804d254:	movl	0x806a3cc, %eax [MEM, REG]
.label_415:
	movl	cwd_n_used,  %eax
	# 0x804d259:	cmpl	%eax, -0x10(%ebp) [REG, MEM]
	cmpl	%eax, -0x10(%ebp)
	# 0x804d25c:	jb	0x804d230 [IMM <CODEREF>]
	jb	.label_416
	# 0x804d25e:	movl	$0, 0x806a3cc [IMM, MEM]
	movl	$0, cwd_n_used
	# 0x804d268:	movb	$0, 0x806a3d0 [IMM, MEM]
	movb	$0, cwd_some_quoted
	# 0x804d26f:	movb	$0, 0x806a3f1 [IMM, MEM]
	movb	$0, any_has_acl
	# 0x804d276:	movl	$0, 0x806a3f4 [IMM, MEM]
	movl	$0, inode_number_width
	# 0x804d280:	movl	$0, 0x806a3f8 [IMM, MEM]
	movl	$0, block_size_width
	# 0x804d28a:	movl	$0, 0x806a3fc [IMM, MEM]
	movl	$0, nlink_width
	# 0x804d294:	movl	$0, 0x806a404 [IMM, MEM]
	movl	$0, owner_width
	# 0x804d29e:	movl	$0, 0x806a408 [IMM, MEM]
	movl	$0, group_width
	# 0x804d2a8:	movl	$0, 0x806a40c [IMM, MEM]
	movl	$0, author_width
	# 0x804d2b2:	movl	$0, 0x806a400 [IMM, MEM]
	movl	$0, scontext_width
	# 0x804d2bc:	movl	$0, 0x806a410 [IMM, MEM]
	movl	$0, major_device_number_width
	# 0x804d2c6:	movl	$0, 0x806a414 [IMM, MEM]
	movl	$0, minor_device_number_width
	# 0x804d2d0:	movl	$0, 0x806a418 [IMM, MEM]
	movl	$0, file_size_width
	# 0x804d2da:	nop	 []
	nop	
	# 0x804d2db:	leave	 []
	leave	
	# 0x804d2dc:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d2dd

	# 0x804d2dd:	pushl	%ebp [REG]
	.globl errno_unsupported
	.type errno_unsupported, @function
errno_unsupported:
	pushl	%ebp
	# 0x804d2de:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d2e0:	cmpl	$0x16, 8(%ebp) [IMM, MEM]
	cmpl	$0x16, 8(%ebp)
	# 0x804d2e4:	je	0x804d2fb [IMM <CODEREF>]
	je	.label_418
	# 0x804d2e6:	cmpl	$0x26, 8(%ebp) [IMM, MEM]
	cmpl	$0x26, 8(%ebp)
	# 0x804d2ea:	je	0x804d2fb [IMM <CODEREF>]
	je	.label_418
	# 0x804d2ec:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d2ef:	calll	0x8049f82 [IMM <CODEREF>]
	calll	is_ENOTSUP
	# 0x804d2f4:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804d2f7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d2f9:	je	0x804d302 [IMM <CODEREF>]
	je	.label_417
	# 0x804d2fb:	movl	$1, %eax [IMM, REG]
.label_418:
	movl	$1, %eax
	# 0x804d300:	jmp	0x804d307 [IMM <CODEREF>]
	jmp	.label_419
	# 0x804d302:	movl	$0, %eax [IMM, REG]
.label_417:
	movl	$0, %eax
	# 0x804d307:	andl	$1, %eax [IMM, REG]
.label_419:
	andl	$1, %eax
	# 0x804d30a:	leave	 []
	leave	
	# 0x804d30b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d30c

	# 0x804d30c:	pushl	%ebp [REG]
	.globl getfilecon_cache
	.type getfilecon_cache, @function
getfilecon_cache:
	pushl	%ebp
	# 0x804d30d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d30f:	pushl	%esi [REG]
	pushl	%esi
	# 0x804d310:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804d311:	subl	$0x20, %esp [IMM, REG]
	subl	$0x20, %esp
	# 0x804d314:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804d317:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x804d31a:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d31d:	movl	0xc(%eax), %ecx [MEM, REG]
	movl	0xc(%eax), %ecx
	# 0x804d320:	movl	0x10(%eax), %ebx [MEM, REG]
	movl	0x10(%eax), %ebx
	# 0x804d323:	movl	0x806b3c0, %eax [MEM, REG]
	movl	unsupported_device.8568,  %eax
	# 0x804d328:	movl	0x806b3c4, %edx [MEM, REG]
	movl	label_423,  %edx
	# 0x804d32e:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804d330:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x804d332:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x804d334:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x804d336:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d338:	jne	0x804d34c [IMM <CODEREF>]
	jne	.label_424
	# 0x804d33a:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d33f:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x804d345:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804d34a:	jmp	0x804d3bc [IMM <CODEREF>]
	jmp	.label_425
	# 0x804d34c:	movl	$0, -0xc(%ebp) [IMM, MEM]
.label_424:
	movl	$0, -0xc(%ebp)
	# 0x804d353:	cmpb	$0, -0x1c(%ebp) [IMM, MEM]
	cmpb	$0, -0x1c(%ebp)
	# 0x804d357:	je	0x804d370 [IMM <CODEREF>]
	je	.label_421
	# 0x804d359:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d35c:	addl	$0x74, %eax [IMM, REG]
	addl	$0x74, %eax
	# 0x804d35f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d362:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d363:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d366:	calll	0x805bb45 [IMM <CODEREF>]
	calll	getfilecon
	# 0x804d36b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d36e:	jmp	0x804d385 [IMM <CODEREF>]
	jmp	.label_422
	# 0x804d370:	movl	0xc(%ebp), %eax [MEM, REG]
.label_421:
	movl	0xc(%ebp), %eax
	# 0x804d373:	addl	$0x74, %eax [IMM, REG]
	addl	$0x74, %eax
	# 0x804d376:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d379:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d37a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d37d:	calll	0x805bb5d [IMM <CODEREF>]
	calll	lgetfilecon
	# 0x804d382:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d385:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_422:
	movl	%eax, -0xc(%ebp)
	# 0x804d388:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804d38c:	jns	0x804d3b9 [IMM <CODEREF>]
	jns	.label_420
	# 0x804d38e:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d393:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d395:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d398:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d399:	calll	0x804d2dd [IMM <CODEREF>]
	calll	errno_unsupported
	# 0x804d39e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d3a1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d3a3:	je	0x804d3b9 [IMM <CODEREF>]
	je	.label_420
	# 0x804d3a5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d3a8:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x804d3ab:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804d3ae:	movl	%eax, 0x806b3c0 [REG, MEM]
	movl	%eax, unsupported_device.8568
	# 0x804d3b3:	movl	%edx, 0x806b3c4 [REG, MEM]
	movl	%edx, label_423
	# 0x804d3b9:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_420:
	movl	-0xc(%ebp), %eax
	# 0x804d3bc:	leal	-8(%ebp), %esp [MEM, REG]
.label_425:
	leal	-8(%ebp), %esp
	# 0x804d3bf:	popl	%ebx [REG]
	popl	%ebx
	# 0x804d3c0:	popl	%esi [REG]
	popl	%esi
	# 0x804d3c1:	popl	%ebp [REG]
	popl	%ebp
	# 0x804d3c2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d3c3

	# 0x804d3c3:	pushl	%ebp [REG]
	.globl file_has_acl_cache
	.type file_has_acl_cache, @function
file_has_acl_cache:
	pushl	%ebp
	# 0x804d3c4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d3c6:	pushl	%esi [REG]
	pushl	%esi
	# 0x804d3c7:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804d3c8:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x804d3cb:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d3ce:	movl	0xc(%eax), %ecx [MEM, REG]
	movl	0xc(%eax), %ecx
	# 0x804d3d1:	movl	0x10(%eax), %ebx [MEM, REG]
	movl	0x10(%eax), %ebx
	# 0x804d3d4:	movl	0x806b3c8, %eax [MEM, REG]
	movl	unsupported_device.8574,  %eax
	# 0x804d3d9:	movl	0x806b3cc, %edx [MEM, REG]
	movl	label_426,  %edx
	# 0x804d3df:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804d3e1:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x804d3e3:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x804d3e5:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x804d3e7:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d3e9:	jne	0x804d3fd [IMM <CODEREF>]
	jne	.label_427
	# 0x804d3eb:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d3f0:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x804d3f6:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804d3fb:	jmp	0x804d454 [IMM <CODEREF>]
	jmp	.label_428
	# 0x804d3fd:	calll	0x8049990 [IMM <CODEREF>]
.label_427:
	calll	__errno_location
	# 0x804d402:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x804d408:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d40b:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x804d40e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d411:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d412:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d415:	calll	0x8053be4 [IMM <CODEREF>]
	calll	file_has_acl
	# 0x804d41a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d41d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d420:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804d424:	jg	0x804d451 [IMM <CODEREF>]
	jg	.label_429
	# 0x804d426:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d42b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d42d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d430:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d431:	calll	0x804d2dd [IMM <CODEREF>]
	calll	errno_unsupported
	# 0x804d436:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d439:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d43b:	je	0x804d451 [IMM <CODEREF>]
	je	.label_429
	# 0x804d43d:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d440:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x804d443:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804d446:	movl	%eax, 0x806b3c8 [REG, MEM]
	movl	%eax, unsupported_device.8574
	# 0x804d44b:	movl	%edx, 0x806b3cc [REG, MEM]
	movl	%edx, label_426
	# 0x804d451:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_429:
	movl	-0xc(%ebp), %eax
	# 0x804d454:	leal	-8(%ebp), %esp [MEM, REG]
.label_428:
	leal	-8(%ebp), %esp
	# 0x804d457:	popl	%ebx [REG]
	popl	%ebx
	# 0x804d458:	popl	%esi [REG]
	popl	%esi
	# 0x804d459:	popl	%ebp [REG]
	popl	%ebp
	# 0x804d45a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d45b

	# 0x804d45b:	pushl	%ebp [REG]
	.globl has_capability_cache
	.type has_capability_cache, @function
has_capability_cache:
	pushl	%ebp
	# 0x804d45c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d45e:	pushl	%esi [REG]
	pushl	%esi
	# 0x804d45f:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804d460:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x804d463:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d466:	movl	0xc(%eax), %ecx [MEM, REG]
	movl	0xc(%eax), %ecx
	# 0x804d469:	movl	0x10(%eax), %ebx [MEM, REG]
	movl	0x10(%eax), %ebx
	# 0x804d46c:	movl	0x806b3d0, %eax [MEM, REG]
	movl	unsupported_device.8580,  %eax
	# 0x804d471:	movl	0x806b3d4, %edx [MEM, REG]
	movl	label_431,  %edx
	# 0x804d477:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x804d479:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x804d47b:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x804d47d:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x804d47f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d481:	jne	0x804d495 [IMM <CODEREF>]
	jne	.label_433
	# 0x804d483:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d488:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x804d48e:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804d493:	jmp	0x804d4e0 [IMM <CODEREF>]
	jmp	.label_432
	# 0x804d495:	subl	$0xc, %esp [IMM, REG]
.label_433:
	subl	$0xc, %esp
	# 0x804d498:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804d49b:	calll	0x804d18f [IMM <CODEREF>]
	calll	has_capability
	# 0x804d4a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d4a3:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804d4a6:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804d4aa:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804d4ad:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d4af:	je	0x804d4dc [IMM <CODEREF>]
	je	.label_430
	# 0x804d4b1:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d4b6:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d4b8:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d4bb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d4bc:	calll	0x804d2dd [IMM <CODEREF>]
	calll	errno_unsupported
	# 0x804d4c1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d4c4:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d4c6:	je	0x804d4dc [IMM <CODEREF>]
	je	.label_430
	# 0x804d4c8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804d4cb:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x804d4ce:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x804d4d1:	movl	%eax, 0x806b3d0 [REG, MEM]
	movl	%eax, unsupported_device.8580
	# 0x804d4d6:	movl	%edx, 0x806b3d4 [REG, MEM]
	movl	%edx, label_431
	# 0x804d4dc:	movzbl	-9(%ebp), %eax [MEM, REG]
.label_430:
	movzbl	-9(%ebp), %eax
	# 0x804d4e0:	leal	-8(%ebp), %esp [MEM, REG]
.label_432:
	leal	-8(%ebp), %esp
	# 0x804d4e3:	popl	%ebx [REG]
	popl	%ebx
	# 0x804d4e4:	popl	%esi [REG]
	popl	%esi
	# 0x804d4e5:	popl	%ebp [REG]
	popl	%ebp
	# 0x804d4e6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d4e7

	# 0x804d4e7:	pushl	%ebp [REG]
	.globl needs_quoting
	.type needs_quoting, @function
needs_quoting:
	pushl	%ebp
	# 0x804d4e8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d4ea:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804d4ed:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804d4f0:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804d4f3:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804d4f9:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d4fc:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804d4fe:	movl	0x806a46c, %eax [MEM, REG]
	movl	filename_quoting_options,  %eax
	# 0x804d503:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d506:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d507:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x804d509:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804d50c:	pushl	$2 [IMM]
	pushl	$2
	# 0x804d50e:	leal	-0xe(%ebp), %eax [MEM, REG]
	leal	-0xe(%ebp), %eax
	# 0x804d511:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d512:	calll	0x805aff1 [IMM <CODEREF>]
	calll	quotearg_buffer
	# 0x804d517:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804d51a:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804d51d:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x804d520:	movzbl	0(%eax), %edx [MEM, REG]
	movzbl	0(%eax), %edx
	# 0x804d523:	movzbl	-0xe(%ebp), %eax [MEM, REG]
	movzbl	-0xe(%ebp), %eax
	# 0x804d527:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x804d529:	jne	0x804d53e [IMM <CODEREF>]
	jne	.label_435
	# 0x804d52b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d52e:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804d531:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804d536:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d539:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x804d53c:	je	0x804d545 [IMM <CODEREF>]
	je	.label_434
	# 0x804d53e:	movl	$1, %eax [IMM, REG]
.label_435:
	movl	$1, %eax
	# 0x804d543:	jmp	0x804d54a [IMM <CODEREF>]
	jmp	.label_437
	# 0x804d545:	movl	$0, %eax [IMM, REG]
.label_434:
	movl	$0, %eax
	# 0x804d54a:	andl	$1, %eax [IMM, REG]
.label_437:
	andl	$1, %eax
	# 0x804d54d:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x804d550:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804d557:	je	0x804d55e [IMM <CODEREF>]
	je	.label_436
	# 0x804d559:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804d55e:	leave	 []
.label_436:
	leave	
	# 0x804d55f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804d560

	# 0x804d560:	pushl	%ebp [REG]
	.globl gobble_file
	.type gobble_file, @function
gobble_file:
	pushl	%ebp
	# 0x804d561:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804d563:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804d564:	subl	$0x384, %esp [IMM, REG]
	subl	$0x384, %esp
	# 0x804d56a:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x804d56d:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x804d570:	movl	%edx, -0x36c(%ebp) [REG, MEM]
	movl	%edx, -0x36c(%ebp)
	# 0x804d576:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x804d579:	movl	%edx, -0x378(%ebp) [REG, MEM]
	movl	%edx, -0x378(%ebp)
	# 0x804d57f:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x804d582:	movl	%edx, -0x374(%ebp) [REG, MEM]
	movl	%edx, -0x374(%ebp)
	# 0x804d588:	movb	%al, -0x370(%ebp) [REG, MEM]
	movb	%al, -0x370(%ebp)
	# 0x804d58e:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x804d591:	movl	%eax, -0x37c(%ebp) [REG, MEM]
	movl	%eax, -0x37c(%ebp)
	# 0x804d597:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804d59d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804d5a0:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804d5a2:	movl	$0, -0x320(%ebp) [IMM, MEM]
	movl	$0, -0x320(%ebp)
	# 0x804d5ac:	movl	$0, -0x31c(%ebp) [IMM, MEM]
	movl	$0, -0x31c(%ebp)
	# 0x804d5b6:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
	cmpb	$0, -0x370(%ebp)
	# 0x804d5bd:	je	0x804d5e8 [IMM <CODEREF>]
	je	.label_485
	# 0x804d5bf:	movl	-0x374(%ebp), %eax [MEM, REG]
	movl	-0x374(%ebp), %eax
	# 0x804d5c5:	orl	-0x378(%ebp), %eax [MEM, REG]
	orl	-0x378(%ebp), %eax
	# 0x804d5cb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d5cd:	je	0x804d5e8 [IMM <CODEREF>]
	je	.label_485
	# 0x804d5cf:	pushl	$0x8063280 [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.8596
	# 0x804d5d4:	pushl	$0xc2b [IMM]
	pushl	$0xc2b
	# 0x804d5d9:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804d5de:	pushl	$0x806139c [IMM <DATAREF>]
	pushl	$label_498
	# 0x804d5e3:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804d5e8:	movl	0x806a3cc, %edx [MEM, REG]
.label_485:
	movl	cwd_n_used,  %edx
	# 0x804d5ee:	movl	0x806a3c8, %eax [MEM, REG]
	movl	cwd_n_alloc,  %eax
	# 0x804d5f3:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x804d5f5:	jne	0x804d625 [IMM <CODEREF>]
	jne	.label_502
	# 0x804d5f7:	movl	0x806a3c8, %edx [MEM, REG]
	movl	cwd_n_alloc,  %edx
	# 0x804d5fd:	movl	0x806a3c4, %eax [MEM, REG]
	movl	cwd_file,  %eax
	# 0x804d602:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804d605:	pushl	$0x110 [IMM]
	pushl	$0x110
	# 0x804d60a:	pushl	%edx [REG]
	pushl	%edx
	# 0x804d60b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d60c:	calll	0x805c453 [IMM <CODEREF>]
	calll	xnrealloc
	# 0x804d611:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d614:	movl	%eax, 0x806a3c4 [REG, MEM]
	movl	%eax, cwd_file
	# 0x804d619:	movl	0x806a3c8, %eax [MEM, REG]
	movl	cwd_n_alloc,  %eax
	# 0x804d61e:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x804d620:	movl	%eax, 0x806a3c8 [REG, MEM]
	movl	%eax, cwd_n_alloc
	# 0x804d625:	movl	0x806a3c4, %edx [MEM, REG]
.label_502:
	movl	cwd_file,  %edx
	# 0x804d62b:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804d630:	shll	$3, %eax [IMM, REG]
	shll	$3, %eax
	# 0x804d633:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x804d635:	shll	$4, %ecx [IMM, REG]
	shll	$4, %ecx
	# 0x804d638:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804d63a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804d63c:	movl	%eax, -0x354(%ebp) [REG, MEM]
	movl	%eax, -0x354(%ebp)
	# 0x804d642:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804d645:	pushl	$0x88 [IMM]
	pushl	$0x88
	# 0x804d64a:	pushl	$0 [IMM]
	pushl	$0
	# 0x804d64c:	pushl	-0x354(%ebp) [MEM]
	pushl	-0x354(%ebp)
	# 0x804d652:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x804d657:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d65a:	movl	-0x354(%ebp), %ecx [MEM, REG]
	movl	-0x354(%ebp), %ecx
	# 0x804d660:	movl	-0x378(%ebp), %eax [MEM, REG]
	movl	-0x378(%ebp), %eax
	# 0x804d666:	movl	-0x374(%ebp), %edx [MEM, REG]
	movl	-0x374(%ebp), %edx
	# 0x804d66c:	movl	%eax, 0x64(%ecx) [REG, MEM]
	movl	%eax, 0x64(%ecx)
	# 0x804d66f:	movl	%edx, 0x68(%ecx) [REG, MEM]
	movl	%edx, 0x68(%ecx)
	# 0x804d672:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d678:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x804d67b:	movl	%edx, 0x6c(%eax) [REG, MEM]
	movl	%edx, 0x6c(%eax)
	# 0x804d67e:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d684:	movl	$0xffffffff, 0x84(%eax) [IMM, MEM]
	movl	$0xffffffff, 0x84(%eax)
	# 0x804d68e:	movzbl	0x806a3d0, %eax [MEM, REG]
	movzbl	cwd_some_quoted,  %eax
	# 0x804d695:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804d698:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d69a:	je	0x804d6de [IMM <CODEREF>]
	je	.label_452
	# 0x804d69c:	movzbl	0x806a3d1, %eax [MEM, REG]
	movzbl	align_variable_outer_quotes,  %eax
	# 0x804d6a3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d6a5:	je	0x804d6de [IMM <CODEREF>]
	je	.label_452
	# 0x804d6a7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d6aa:	pushl	-0x36c(%ebp) [MEM]
	pushl	-0x36c(%ebp)
	# 0x804d6b0:	calll	0x804d4e7 [IMM <CODEREF>]
	calll	needs_quoting
	# 0x804d6b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d6b8:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x804d6bb:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d6c1:	movl	%edx, 0x84(%eax) [REG, MEM]
	movl	%edx, 0x84(%eax)
	# 0x804d6c7:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d6cd:	movl	0x84(%eax), %eax [MEM, REG]
	movl	0x84(%eax), %eax
	# 0x804d6d3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d6d5:	je	0x804d6de [IMM <CODEREF>]
	je	.label_452
	# 0x804d6d7:	movb	$1, 0x806a3d0 [IMM, MEM]
	movb	$1, cwd_some_quoted
	# 0x804d6de:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
.label_452:
	cmpb	$0, -0x370(%ebp)
	# 0x804d6e5:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d6eb:	movzbl	0x806a445, %eax [MEM, REG]
	movzbl	print_hyperlink,  %eax
	# 0x804d6f2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d6f4:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d6fa:	movzbl	0x806a484, %eax [MEM, REG]
	movzbl	format_needs_stat,  %eax
	# 0x804d701:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d703:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d709:	cmpl	$3, 0xc(%ebp) [IMM, MEM]
	cmpl	$3, 0xc(%ebp)
	# 0x804d70d:	jne	0x804d759 [IMM <CODEREF>]
	jne	.label_479
	# 0x804d70f:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804d716:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d718:	je	0x804d759 [IMM <CODEREF>]
	je	.label_479
	# 0x804d71a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d71d:	pushl	$0x13 [IMM]
	pushl	$0x13
	# 0x804d71f:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d724:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d727:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d729:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d72f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d732:	pushl	$0x12 [IMM]
	pushl	$0x12
	# 0x804d734:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d739:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d73c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d73e:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d744:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d747:	pushl	$0x14 [IMM]
	pushl	$0x14
	# 0x804d749:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d74e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d751:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d753:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d759:	movzbl	0x806a451, %eax [MEM, REG]
.label_479:
	movzbl	print_inode,  %eax
	# 0x804d760:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d762:	jne	0x804d76f [IMM <CODEREF>]
	jne	.label_483
	# 0x804d764:	movzbl	0x806a485, %eax [MEM, REG]
	movzbl	format_needs_type,  %eax
	# 0x804d76b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d76d:	je	0x804d7a7 [IMM <CODEREF>]
	je	.label_487
	# 0x804d76f:	cmpl	$6, 0xc(%ebp) [IMM, MEM]
.label_483:
	cmpl	$6, 0xc(%ebp)
	# 0x804d773:	je	0x804d77b [IMM <CODEREF>]
	je	.label_489
	# 0x804d775:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x804d779:	jne	0x804d7a7 [IMM <CODEREF>]
	jne	.label_487
	# 0x804d77b:	movl	0x806a454, %eax [MEM, REG]
.label_489:
	movl	dereference,  %eax
	# 0x804d780:	cmpl	$5, %eax [IMM, REG]
	cmpl	$5, %eax
	# 0x804d783:	je	0x804d84f [IMM <CODEREF>]
	je	.label_443
	# 0x804d789:	movzbl	0x806a3dc, %eax [MEM, REG]
	movzbl	color_symlink_as_referent,  %eax
	# 0x804d790:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d792:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d798:	movzbl	0x806a450, %eax [MEM, REG]
	movzbl	check_symlink_color,  %eax
	# 0x804d79f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d7a1:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d7a7:	movzbl	0x806a451, %eax [MEM, REG]
.label_487:
	movzbl	print_inode,  %eax
	# 0x804d7ae:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d7b0:	je	0x804d7c6 [IMM <CODEREF>]
	je	.label_494
	# 0x804d7b2:	movl	-0x374(%ebp), %eax [MEM, REG]
	movl	-0x374(%ebp), %eax
	# 0x804d7b8:	orl	-0x378(%ebp), %eax [MEM, REG]
	orl	-0x378(%ebp), %eax
	# 0x804d7be:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d7c0:	je	0x804d84f [IMM <CODEREF>]
	je	.label_443
	# 0x804d7c6:	movzbl	0x806a485, %eax [MEM, REG]
.label_494:
	movzbl	format_needs_type,  %eax
	# 0x804d7cd:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d7cf:	je	0x804e262 [IMM <CODEREF>]
	je	.label_448
	# 0x804d7d5:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x804d7d9:	je	0x804d84f [IMM <CODEREF>]
	je	.label_443
	# 0x804d7db:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
	cmpb	$0, -0x370(%ebp)
	# 0x804d7e2:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d7e4:	cmpl	$5, 0xc(%ebp) [IMM, MEM]
	cmpl	$5, 0xc(%ebp)
	# 0x804d7e8:	jne	0x804e262 [IMM <CODEREF>]
	jne	.label_448
	# 0x804d7ee:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x804d7f3:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804d7f6:	je	0x804d84f [IMM <CODEREF>]
	je	.label_443
	# 0x804d7f8:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x804d7ff:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d801:	je	0x804e262 [IMM <CODEREF>]
	je	.label_448
	# 0x804d807:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d80a:	pushl	$0xe [IMM]
	pushl	$0xe
	# 0x804d80c:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d811:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d814:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d816:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d818:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d81b:	pushl	$0x10 [IMM]
	pushl	$0x10
	# 0x804d81d:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d822:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d825:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d827:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d829:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d82c:	pushl	$0x11 [IMM]
	pushl	$0x11
	# 0x804d82e:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d833:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d836:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d838:	jne	0x804d84f [IMM <CODEREF>]
	jne	.label_443
	# 0x804d83a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d83d:	pushl	$0x15 [IMM]
	pushl	$0x15
	# 0x804d83f:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804d844:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d847:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d849:	je	0x804e262 [IMM <CODEREF>]
	je	.label_448
	# 0x804d84f:	movl	-0x36c(%ebp), %eax [MEM, REG]
.label_443:
	movl	-0x36c(%ebp), %eax
	# 0x804d855:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804d858:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x804d85a:	je	0x804d869 [IMM <CODEREF>]
	je	.label_451
	# 0x804d85c:	movl	-0x37c(%ebp), %eax [MEM, REG]
	movl	-0x37c(%ebp), %eax
	# 0x804d862:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804d865:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d867:	jne	0x804d877 [IMM <CODEREF>]
	jne	.label_454
	# 0x804d869:	movl	-0x36c(%ebp), %eax [MEM, REG]
.label_451:
	movl	-0x36c(%ebp), %eax
	# 0x804d86f:	movl	%eax, -0x35c(%ebp) [REG, MEM]
	movl	%eax, -0x35c(%ebp)
	# 0x804d875:	jmp	0x804d8ec [IMM <CODEREF>]
	jmp	.label_456
	# 0x804d877:	subl	$0xc, %esp [IMM, REG]
.label_454:
	subl	$0xc, %esp
	# 0x804d87a:	pushl	-0x36c(%ebp) [MEM]
	pushl	-0x36c(%ebp)
	# 0x804d880:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804d885:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d888:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804d88a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d88d:	pushl	-0x37c(%ebp) [MEM]
	pushl	-0x37c(%ebp)
	# 0x804d893:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804d898:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d89b:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x804d89d:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x804d8a0:	leal	0xf(%eax), %edx [MEM, REG]
	leal	0xf(%eax), %edx
	# 0x804d8a3:	movl	$0x10, %eax [IMM, REG]
	movl	$0x10, %eax
	# 0x804d8a8:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x804d8ab:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804d8ad:	movl	$0x10, %ebx [IMM, REG]
	movl	$0x10, %ebx
	# 0x804d8b2:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804d8b7:	divl	%ebx [REG]
	divl	%ebx
	# 0x804d8b9:	imull	$0x10, %eax, %eax [IMM, REG, REG]
	imull	$0x10, %eax, %eax
	# 0x804d8bc:	subl	%eax, %esp [REG, REG]
	subl	%eax, %esp
	# 0x804d8be:	movl	%esp, %eax [REG, REG]
	movl	%esp, %eax
	# 0x804d8c0:	addl	$0xf, %eax [IMM, REG]
	addl	$0xf, %eax
	# 0x804d8c3:	shrl	$4, %eax [IMM, REG]
	shrl	$4, %eax
	# 0x804d8c6:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x804d8c9:	movl	%eax, -0x35c(%ebp) [REG, MEM]
	movl	%eax, -0x35c(%ebp)
	# 0x804d8cf:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804d8d2:	pushl	-0x36c(%ebp) [MEM]
	pushl	-0x36c(%ebp)
	# 0x804d8d8:	pushl	-0x37c(%ebp) [MEM]
	pushl	-0x37c(%ebp)
	# 0x804d8de:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804d8e4:	calll	0x8052022 [IMM <CODEREF>]
	calll	attach
	# 0x804d8e9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d8ec:	movzbl	0x806a445, %eax [MEM, REG]
.label_456:
	movzbl	print_hyperlink,  %eax
	# 0x804d8f3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804d8f5:	je	0x804d94e [IMM <CODEREF>]
	je	.label_476
	# 0x804d8f7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d8fa:	pushl	$2 [IMM]
	pushl	$2
	# 0x804d8fc:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804d902:	calll	0x8053064 [IMM <CODEREF>]
	calll	canonicalize_filename_mode
	# 0x804d907:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d90a:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804d90c:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d912:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x804d915:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d91b:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x804d91e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804d920:	jne	0x804d94e [IMM <CODEREF>]
	jne	.label_476
	# 0x804d922:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804d925:	pushl	$0x8061314 [IMM <DATAREF>]
	pushl	$label_383
	# 0x804d92a:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804d92f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d932:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804d934:	movzbl	-0x370(%ebp), %eax [MEM, REG]
	movzbl	-0x370(%ebp), %eax
	# 0x804d93b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804d93e:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804d944:	pushl	%edx [REG]
	pushl	%edx
	# 0x804d945:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d946:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804d94b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d94e:	movl	0x806a454, %eax [MEM, REG]
.label_476:
	movl	dereference,  %eax
	# 0x804d953:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804d956:	jb	0x804da14 [IMM <CODEREF>]
	jb	.label_449
	# 0x804d95c:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x804d95f:	jbe	0x804d997 [IMM <CODEREF>]
	jbe	.label_484
	# 0x804d961:	cmpl	$5, %eax [IMM, REG]
	cmpl	$5, %eax
	# 0x804d964:	jne	0x804da14 [IMM <CODEREF>]
	jne	.label_449
	# 0x804d96a:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d970:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x804d973:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d976:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d977:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804d97d:	calll	0x805ebf0 [IMM <CODEREF>]
	calll	stat64
	# 0x804d982:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d985:	movl	%eax, -0x358(%ebp) [REG, MEM]
	movl	%eax, -0x358(%ebp)
	# 0x804d98b:	movb	$1, -0x360(%ebp) [IMM, MEM]
	movb	$1, -0x360(%ebp)
	# 0x804d992:	jmp	0x804da42 [IMM <CODEREF>]
	jmp	.label_446
	# 0x804d997:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
.label_484:
	cmpb	$0, -0x370(%ebp)
	# 0x804d99e:	je	0x804da14 [IMM <CODEREF>]
	je	.label_449
	# 0x804d9a0:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804d9a6:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x804d9a9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804d9ac:	pushl	%eax [REG]
	pushl	%eax
	# 0x804d9ad:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804d9b3:	calll	0x805ebf0 [IMM <CODEREF>]
	calll	stat64
	# 0x804d9b8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804d9bb:	movl	%eax, -0x358(%ebp) [REG, MEM]
	movl	%eax, -0x358(%ebp)
	# 0x804d9c1:	movb	$1, -0x360(%ebp) [IMM, MEM]
	movb	$1, -0x360(%ebp)
	# 0x804d9c8:	movl	0x806a454, %eax [MEM, REG]
	movl	dereference,  %eax
	# 0x804d9cd:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804d9d0:	je	0x804da3e [IMM <CODEREF>]
	je	.label_496
	# 0x804d9d2:	cmpl	$0, -0x358(%ebp) [IMM, MEM]
	cmpl	$0, -0x358(%ebp)
	# 0x804d9d9:	jns	0x804d9ea [IMM <CODEREF>]
	jns	.label_499
	# 0x804d9db:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804d9e0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804d9e2:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804d9e5:	sete	%al [REG]
	sete	%al
	# 0x804d9e8:	jmp	0x804da00 [IMM <CODEREF>]
	jmp	.label_501
	# 0x804d9ea:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_499:
	movl	-0x354(%ebp), %eax
	# 0x804d9f0:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804d9f3:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804d9f8:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x804d9fd:	setne	%al [REG]
	setne	%al
	# 0x804da00:	movb	%al, -0x35d(%ebp) [REG, MEM]
.label_501:
	movb	%al, -0x35d(%ebp)
	# 0x804da06:	movzbl	-0x35d(%ebp), %eax [MEM, REG]
	movzbl	-0x35d(%ebp), %eax
	# 0x804da0d:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804da10:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804da12:	jne	0x804da41 [IMM <CODEREF>]
	jne	.label_438
	# 0x804da14:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_449:
	movl	-0x354(%ebp), %eax
	# 0x804da1a:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x804da1d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804da20:	pushl	%eax [REG]
	pushl	%eax
	# 0x804da21:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804da27:	calll	0x805ec50 [IMM <CODEREF>]
	calll	lstat64
	# 0x804da2c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804da2f:	movl	%eax, -0x358(%ebp) [REG, MEM]
	movl	%eax, -0x358(%ebp)
	# 0x804da35:	movb	$0, -0x360(%ebp) [IMM, MEM]
	movb	$0, -0x360(%ebp)
	# 0x804da3c:	jmp	0x804da42 [IMM <CODEREF>]
	jmp	.label_446
	# 0x804da3e:	nop	 []
.label_496:
	nop	
	# 0x804da3f:	jmp	0x804da42 [IMM <CODEREF>]
	jmp	.label_446
	# 0x804da41:	nop	 []
.label_438:
	nop	
	# 0x804da42:	cmpl	$0, -0x358(%ebp) [IMM, MEM]
.label_446:
	cmpl	$0, -0x358(%ebp)
	# 0x804da49:	je	0x804dac6 [IMM <CODEREF>]
	je	.label_447
	# 0x804da4b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804da4e:	pushl	$0x80613cf [IMM <DATAREF>]
	pushl	$label_450
	# 0x804da53:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804da58:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804da5b:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804da5d:	movzbl	-0x370(%ebp), %eax [MEM, REG]
	movzbl	-0x370(%ebp), %eax
	# 0x804da64:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804da67:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804da6d:	pushl	%edx [REG]
	pushl	%edx
	# 0x804da6e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804da6f:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804da74:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804da77:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
	cmpb	$0, -0x370(%ebp)
	# 0x804da7e:	je	0x804da8f [IMM <CODEREF>]
	je	.label_457
	# 0x804da80:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804da85:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804da8a:	jmp	0x804e2eb [IMM <CODEREF>]
	jmp	.label_460
	# 0x804da8f:	subl	$0xc, %esp [IMM, REG]
.label_457:
	subl	$0xc, %esp
	# 0x804da92:	pushl	-0x36c(%ebp) [MEM]
	pushl	-0x36c(%ebp)
	# 0x804da98:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804da9d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804daa0:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804daa2:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804daa8:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804daaa:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804daaf:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804dab2:	movl	%eax, 0x806a3cc [REG, MEM]
	movl	%eax, cwd_n_used
	# 0x804dab7:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804dabc:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804dac1:	jmp	0x804e2eb [IMM <CODEREF>]
	jmp	.label_460
	# 0x804dac6:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_447:
	movl	-0x354(%ebp), %eax
	# 0x804dacc:	movb	$1, 0x78(%eax) [IMM, MEM]
	movb	$1, 0x78(%eax)
	# 0x804dad0:	cmpl	$5, 0xc(%ebp) [IMM, MEM]
	cmpl	$5, 0xc(%ebp)
	# 0x804dad4:	je	0x804daeb [IMM <CODEREF>]
	je	.label_466
	# 0x804dad6:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dadc:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804dadf:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804dae4:	cmpl	$0x8000, %eax [IMM, REG]
	cmpl	$0x8000, %eax
	# 0x804dae9:	jne	0x804db2c [IMM <CODEREF>]
	jne	.label_474
	# 0x804daeb:	movzbl	0x806a444, %eax [MEM, REG]
.label_466:
	movzbl	print_with_color,  %eax
	# 0x804daf2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804daf4:	je	0x804db2c [IMM <CODEREF>]
	je	.label_474
	# 0x804daf6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804daf9:	pushl	$0x15 [IMM]
	pushl	$0x15
	# 0x804dafb:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x804db00:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804db03:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804db05:	je	0x804db2c [IMM <CODEREF>]
	je	.label_474
	# 0x804db07:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804db0a:	pushl	-0x354(%ebp) [MEM]
	pushl	-0x354(%ebp)
	# 0x804db10:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804db16:	calll	0x804d45b [IMM <CODEREF>]
	calll	has_capability_cache
	# 0x804db1b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804db1e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804db20:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804db26:	movb	%dl, 0x80(%eax) [REG, MEM]
	movb	%dl, 0x80(%eax)
	# 0x804db2c:	movl	0x806a41c, %eax [MEM, REG]
.label_474:
	movl	format,  %eax
	# 0x804db31:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804db33:	je	0x804db44 [IMM <CODEREF>]
	je	.label_481
	# 0x804db35:	movzbl	0x806a3f0, %eax [MEM, REG]
	movzbl	print_scontext,  %eax
	# 0x804db3c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804db3e:	je	0x804dd18 [IMM <CODEREF>]
	je	.label_468
	# 0x804db44:	movb	$0, -0x35f(%ebp) [IMM, MEM]
.label_481:
	movb	$0, -0x35f(%ebp)
	# 0x804db4b:	movb	$0, -0x35e(%ebp) [IMM, MEM]
	movb	$0, -0x35e(%ebp)
	# 0x804db52:	movzbl	-0x360(%ebp), %eax [MEM, REG]
	movzbl	-0x360(%ebp), %eax
	# 0x804db59:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804db5c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804db5d:	pushl	-0x354(%ebp) [MEM]
	pushl	-0x354(%ebp)
	# 0x804db63:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804db69:	calll	0x804d30c [IMM <CODEREF>]
	calll	getfilecon_cache
	# 0x804db6e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804db71:	movl	%eax, -0x350(%ebp) [REG, MEM]
	movl	%eax, -0x350(%ebp)
	# 0x804db77:	movl	-0x350(%ebp), %eax [MEM, REG]
	movl	-0x350(%ebp), %eax
	# 0x804db7d:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x804db80:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804db83:	movl	%eax, -0x358(%ebp) [REG, MEM]
	movl	%eax, -0x358(%ebp)
	# 0x804db89:	cmpl	$0, -0x358(%ebp) [IMM, MEM]
	cmpl	$0, -0x358(%ebp)
	# 0x804db90:	jne	0x804dbe9 [IMM <CODEREF>]
	jne	.label_488
	# 0x804db92:	calll	0x8049f8e [IMM <CODEREF>]
	calll	is_smack_enabled
	# 0x804db97:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804db99:	je	0x804dbc2 [IMM <CODEREF>]
	je	.label_492
	# 0x804db9b:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dba1:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804dba4:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804dba7:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dba8:	pushl	$0x80613e0 [IMM <DATAREF>]
	pushl	$label_493
	# 0x804dbad:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x804dbb2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dbb5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dbb7:	setne	%al [REG]
	setne	%al
	# 0x804dbba:	movb	%al, -0x35f(%ebp) [REG, MEM]
	movb	%al, -0x35f(%ebp)
	# 0x804dbc0:	jmp	0x804dc23 [IMM <CODEREF>]
	jmp	.label_442
	# 0x804dbc2:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_492:
	movl	-0x354(%ebp), %eax
	# 0x804dbc8:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804dbcb:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804dbce:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dbcf:	pushl	$0x80613e2 [IMM <DATAREF>]
	pushl	$label_497
	# 0x804dbd4:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x804dbd9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dbdc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dbde:	setne	%al [REG]
	setne	%al
	# 0x804dbe1:	movb	%al, -0x35f(%ebp) [REG, MEM]
	movb	%al, -0x35f(%ebp)
	# 0x804dbe7:	jmp	0x804dc23 [IMM <CODEREF>]
	jmp	.label_442
	# 0x804dbe9:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_488:
	movl	-0x354(%ebp), %eax
	# 0x804dbef:	movl	$0x806a1e0, 0x74(%eax) [IMM <DATAREF>, MEM]
	movl	$UNKNOWN_SECURITY_CONTEXT, 116(%eax)
	# 0x804dbf6:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804dbfb:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804dbfd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804dc00:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dc01:	calll	0x8049f82 [IMM <CODEREF>]
	calll	is_ENOTSUP
	# 0x804dc06:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dc09:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dc0b:	jne	0x804dc19 [IMM <CODEREF>]
	jne	.label_440
	# 0x804dc0d:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804dc12:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804dc14:	cmpl	$0x3d, %eax [IMM, REG]
	cmpl	$0x3d, %eax
	# 0x804dc17:	jne	0x804dc23 [IMM <CODEREF>]
	jne	.label_442
	# 0x804dc19:	movl	$0, -0x358(%ebp) [IMM, MEM]
.label_440:
	movl	$0, -0x358(%ebp)
	# 0x804dc23:	cmpl	$0, -0x358(%ebp) [IMM, MEM]
.label_442:
	cmpl	$0, -0x358(%ebp)
	# 0x804dc2a:	jne	0x804dc74 [IMM <CODEREF>]
	jne	.label_441
	# 0x804dc2c:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804dc31:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dc33:	jne	0x804dc74 [IMM <CODEREF>]
	jne	.label_441
	# 0x804dc35:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804dc38:	pushl	-0x354(%ebp) [MEM]
	pushl	-0x354(%ebp)
	# 0x804dc3e:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804dc44:	calll	0x804d3c3 [IMM <CODEREF>]
	calll	file_has_acl_cache
	# 0x804dc49:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dc4c:	movl	%eax, -0x34c(%ebp) [REG, MEM]
	movl	%eax, -0x34c(%ebp)
	# 0x804dc52:	movl	-0x34c(%ebp), %eax [MEM, REG]
	movl	-0x34c(%ebp), %eax
	# 0x804dc58:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x804dc5b:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804dc5e:	movl	%eax, -0x358(%ebp) [REG, MEM]
	movl	%eax, -0x358(%ebp)
	# 0x804dc64:	cmpl	$0, -0x34c(%ebp) [IMM, MEM]
	cmpl	$0, -0x34c(%ebp)
	# 0x804dc6b:	setg	%al [REG]
	setg	%al
	# 0x804dc6e:	movb	%al, -0x35e(%ebp) [REG, MEM]
	movb	%al, -0x35e(%ebp)
	# 0x804dc74:	cmpb	$0, -0x35f(%ebp) [IMM, MEM]
.label_441:
	cmpb	$0, -0x35f(%ebp)
	# 0x804dc7b:	jne	0x804dc86 [IMM <CODEREF>]
	jne	.label_469
	# 0x804dc7d:	cmpb	$0, -0x35e(%ebp) [IMM, MEM]
	cmpb	$0, -0x35e(%ebp)
	# 0x804dc84:	je	0x804dcab [IMM <CODEREF>]
	je	.label_459
	# 0x804dc86:	cmpb	$0, -0x35f(%ebp) [IMM, MEM]
.label_469:
	cmpb	$0, -0x35f(%ebp)
	# 0x804dc8d:	je	0x804dca4 [IMM <CODEREF>]
	je	.label_461
	# 0x804dc8f:	movzbl	-0x35e(%ebp), %eax [MEM, REG]
	movzbl	-0x35e(%ebp), %eax
	# 0x804dc96:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804dc99:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dc9b:	je	0x804dca4 [IMM <CODEREF>]
	je	.label_461
	# 0x804dc9d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804dca2:	jmp	0x804dcb0 [IMM <CODEREF>]
	jmp	.label_465
	# 0x804dca4:	movl	$2, %eax [IMM, REG]
.label_461:
	movl	$2, %eax
	# 0x804dca9:	jmp	0x804dcb0 [IMM <CODEREF>]
	jmp	.label_465
	# 0x804dcab:	movl	$0, %eax [IMM, REG]
.label_459:
	movl	$0, %eax
	# 0x804dcb0:	movl	-0x354(%ebp), %edx [MEM, REG]
.label_465:
	movl	-0x354(%ebp), %edx
	# 0x804dcb6:	movl	%eax, 0x7c(%edx) [REG, MEM]
	movl	%eax, 0x7c(%edx)
	# 0x804dcb9:	movzbl	0x806a3f1, %eax [MEM, REG]
	movzbl	any_has_acl,  %eax
	# 0x804dcc0:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x804dcc3:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dcc9:	movl	0x7c(%eax), %eax [MEM, REG]
	movl	0x7c(%eax), %eax
	# 0x804dccc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dcce:	setne	%al [REG]
	setne	%al
	# 0x804dcd1:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804dcd4:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x804dcd6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dcd8:	setne	%al [REG]
	setne	%al
	# 0x804dcdb:	movb	%al, 0x806a3f1 [REG, MEM]
	movb	%al, any_has_acl
	# 0x804dce0:	cmpl	$0, -0x358(%ebp) [IMM, MEM]
	cmpl	$0, -0x358(%ebp)
	# 0x804dce7:	je	0x804dd18 [IMM <CODEREF>]
	je	.label_468
	# 0x804dce9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804dcec:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804dcf2:	pushl	$3 [IMM]
	pushl	$3
	# 0x804dcf4:	pushl	$0 [IMM]
	pushl	$0
	# 0x804dcf6:	calll	0x805b655 [IMM <CODEREF>]
	calll	quotearg_n_style_colon
	# 0x804dcfb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dcfe:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804dd00:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804dd05:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804dd07:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804dd08:	pushl	$0x80607ac [IMM <DATAREF>]
	pushl	$label_79
	# 0x804dd0d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dd0e:	pushl	$0 [IMM]
	pushl	$0
	# 0x804dd10:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804dd15:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dd18:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_468:
	movl	-0x354(%ebp), %eax
	# 0x804dd1e:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804dd21:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804dd26:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x804dd2b:	jne	0x804de58 [IMM <CODEREF>]
	jne	.label_480
	# 0x804dd31:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804dd36:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dd38:	je	0x804dd49 [IMM <CODEREF>]
	je	.label_482
	# 0x804dd3a:	movzbl	0x806a450, %eax [MEM, REG]
	movzbl	check_symlink_color,  %eax
	# 0x804dd41:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dd43:	je	0x804de58 [IMM <CODEREF>]
	je	.label_480
	# 0x804dd49:	movzbl	-0x370(%ebp), %eax [MEM, REG]
.label_482:
	movzbl	-0x370(%ebp), %eax
	# 0x804dd50:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804dd53:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dd54:	pushl	-0x354(%ebp) [MEM]
	pushl	-0x354(%ebp)
	# 0x804dd5a:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804dd60:	calll	0x804e32b [IMM <CODEREF>]
	calll	get_link_name
	# 0x804dd65:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dd68:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dd6e:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804dd71:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804dd74:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dd75:	pushl	-0x35c(%ebp) [MEM]
	pushl	-0x35c(%ebp)
	# 0x804dd7b:	calll	0x804e38a [IMM <CODEREF>]
	calll	make_link_name
	# 0x804dd80:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dd83:	movl	%eax, -0x348(%ebp) [REG, MEM]
	movl	%eax, -0x348(%ebp)
	# 0x804dd89:	cmpl	$0, -0x348(%ebp) [IMM, MEM]
	cmpl	$0, -0x348(%ebp)
	# 0x804dd90:	je	0x804ddcb [IMM <CODEREF>]
	je	.label_490
	# 0x804dd92:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dd98:	movl	0x84(%eax), %eax [MEM, REG]
	movl	0x84(%eax), %eax
	# 0x804dd9e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804dda0:	jne	0x804ddcb [IMM <CODEREF>]
	jne	.label_490
	# 0x804dda2:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dda8:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804ddab:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ddae:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ddaf:	calll	0x804d4e7 [IMM <CODEREF>]
	calll	needs_quoting
	# 0x804ddb4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ddb7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ddb9:	je	0x804ddcb [IMM <CODEREF>]
	je	.label_490
	# 0x804ddbb:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804ddc1:	movl	$0xffffffff, 0x84(%eax) [IMM, MEM]
	movl	$0xffffffff, 0x84(%eax)
	# 0x804ddcb:	cmpl	$0, -0x348(%ebp) [IMM, MEM]
.label_490:
	cmpl	$0, -0x348(%ebp)
	# 0x804ddd2:	je	0x804de47 [IMM <CODEREF>]
	je	.label_444
	# 0x804ddd4:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x804ddd9:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804dddc:	ja	0x804dde9 [IMM <CODEREF>]
	ja	.label_500
	# 0x804ddde:	movzbl	0x806a450, %eax [MEM, REG]
	movzbl	check_symlink_color,  %eax
	# 0x804dde5:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dde7:	je	0x804de47 [IMM <CODEREF>]
	je	.label_444
	# 0x804dde9:	subl	$8, %esp [IMM, REG]
.label_500:
	subl	$8, %esp
	# 0x804ddec:	leal	-0x310(%ebp), %eax [MEM, REG]
	leal	-0x310(%ebp), %eax
	# 0x804ddf2:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ddf3:	pushl	-0x348(%ebp) [MEM]
	pushl	-0x348(%ebp)
	# 0x804ddf9:	calll	0x805ebf0 [IMM <CODEREF>]
	calll	stat64
	# 0x804ddfe:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804de01:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804de03:	jne	0x804de47 [IMM <CODEREF>]
	jne	.label_444
	# 0x804de05:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804de0b:	movb	$1, 0x79(%eax) [IMM, MEM]
	movb	$1, 0x79(%eax)
	# 0x804de0f:	movzbl	-0x370(%ebp), %eax [MEM, REG]
	movzbl	-0x370(%ebp), %eax
	# 0x804de16:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804de19:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804de1b:	jne	0x804de38 [IMM <CODEREF>]
	jne	.label_439
	# 0x804de1d:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804de22:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804de24:	je	0x804de38 [IMM <CODEREF>]
	je	.label_439
	# 0x804de26:	movl	-0x300(%ebp), %eax [MEM, REG]
	movl	-0x300(%ebp), %eax
	# 0x804de2c:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804de31:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x804de36:	je	0x804de47 [IMM <CODEREF>]
	je	.label_444
	# 0x804de38:	movl	-0x300(%ebp), %edx [MEM, REG]
.label_439:
	movl	-0x300(%ebp), %edx
	# 0x804de3e:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804de44:	movl	%edx, 0x70(%eax) [REG, MEM]
	movl	%edx, 0x70(%eax)
	# 0x804de47:	subl	$0xc, %esp [IMM, REG]
.label_444:
	subl	$0xc, %esp
	# 0x804de4a:	pushl	-0x348(%ebp) [MEM]
	pushl	-0x348(%ebp)
	# 0x804de50:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804de55:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804de58:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_480:
	movl	-0x354(%ebp), %eax
	# 0x804de5e:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804de61:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804de66:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x804de6b:	jne	0x804de7c [IMM <CODEREF>]
	jne	.label_453
	# 0x804de6d:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804de73:	movl	$6, 0x6c(%eax) [IMM, MEM]
	movl	$6, 0x6c(%eax)
	# 0x804de7a:	jmp	0x804ded3 [IMM <CODEREF>]
	jmp	.label_467
	# 0x804de7c:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_453:
	movl	-0x354(%ebp), %eax
	# 0x804de82:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804de85:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804de8a:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x804de8f:	jne	0x804dec6 [IMM <CODEREF>]
	jne	.label_458
	# 0x804de91:	cmpb	$0, -0x370(%ebp) [IMM, MEM]
	cmpb	$0, -0x370(%ebp)
	# 0x804de98:	je	0x804deb7 [IMM <CODEREF>]
	je	.label_462
	# 0x804de9a:	movzbl	0x806a459, %eax [MEM, REG]
	movzbl	immediate_dirs,  %eax
	# 0x804dea1:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804dea4:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dea6:	je	0x804deb7 [IMM <CODEREF>]
	je	.label_462
	# 0x804dea8:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804deae:	movl	$9, 0x6c(%eax) [IMM, MEM]
	movl	$9, 0x6c(%eax)
	# 0x804deb5:	jmp	0x804ded3 [IMM <CODEREF>]
	jmp	.label_467
	# 0x804deb7:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_462:
	movl	-0x354(%ebp), %eax
	# 0x804debd:	movl	$3, 0x6c(%eax) [IMM, MEM]
	movl	$3, 0x6c(%eax)
	# 0x804dec4:	jmp	0x804ded3 [IMM <CODEREF>]
	jmp	.label_467
	# 0x804dec6:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_458:
	movl	-0x354(%ebp), %eax
	# 0x804decc:	movl	$5, 0x6c(%eax) [IMM, MEM]
	movl	$5, 0x6c(%eax)
	# 0x804ded3:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_467:
	movl	-0x354(%ebp), %eax
	# 0x804ded9:	movl	0x48(%eax), %edx [MEM, REG]
	movl	0x48(%eax), %edx
	# 0x804dedc:	movl	0x44(%eax), %eax [MEM, REG]
	movl	0x44(%eax), %eax
	# 0x804dedf:	movl	%eax, -0x320(%ebp) [REG, MEM]
	movl	%eax, -0x320(%ebp)
	# 0x804dee5:	movl	%edx, -0x31c(%ebp) [REG, MEM]
	movl	%edx, -0x31c(%ebp)
	# 0x804deeb:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804def0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804def2:	je	0x804deff [IMM <CODEREF>]
	je	.label_472
	# 0x804def4:	movzbl	0x806a42b, %eax [MEM, REG]
	movzbl	print_block_size,  %eax
	# 0x804defb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804defd:	je	0x804df61 [IMM <CODEREF>]
	je	.label_478
	# 0x804deff:	movl	0x806a430, %eax [MEM, REG]
.label_472:
	movl	output_block_size,  %eax
	# 0x804df04:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804df0a:	movl	0x806a42c, %ecx [MEM, REG]
	movl	human_output_opts,  %ecx
	# 0x804df10:	pushl	%edx [REG]
	pushl	%edx
	# 0x804df11:	pushl	%eax [REG]
	pushl	%eax
	# 0x804df12:	pushl	$0 [IMM]
	pushl	$0
	# 0x804df14:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x804df19:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804df1a:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x804df20:	pushl	%eax [REG]
	pushl	%eax
	# 0x804df21:	pushl	-0x31c(%ebp) [MEM]
	pushl	-0x31c(%ebp)
	# 0x804df27:	pushl	-0x320(%ebp) [MEM]
	pushl	-0x320(%ebp)
	# 0x804df2d:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x804df32:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804df35:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804df38:	pushl	$0 [IMM]
	pushl	$0
	# 0x804df3a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804df3b:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x804df40:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804df43:	movl	%eax, -0x344(%ebp) [REG, MEM]
	movl	%eax, -0x344(%ebp)
	# 0x804df49:	movl	0x806a3f8, %eax [MEM, REG]
	movl	block_size_width,  %eax
	# 0x804df4e:	cmpl	-0x344(%ebp), %eax [MEM, REG]
	cmpl	-0x344(%ebp), %eax
	# 0x804df54:	jge	0x804df61 [IMM <CODEREF>]
	jge	.label_478
	# 0x804df56:	movl	-0x344(%ebp), %eax [MEM, REG]
	movl	-0x344(%ebp), %eax
	# 0x804df5c:	movl	%eax, 0x806a3f8 [REG, MEM]
	movl	%eax, block_size_width
	# 0x804df61:	movl	0x806a41c, %eax [MEM, REG]
.label_478:
	movl	format,  %eax
	# 0x804df66:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804df68:	jne	0x804e028 [IMM <CODEREF>]
	jne	.label_486
	# 0x804df6e:	movzbl	0x806a1e2, %eax [MEM, REG]
	movzbl	print_owner,  %eax
	# 0x804df75:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804df77:	je	0x804dfac [IMM <CODEREF>]
	je	.label_463
	# 0x804df79:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804df7f:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x804df82:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804df85:	pushl	%eax [REG]
	pushl	%eax
	# 0x804df86:	calll	0x804fce9 [IMM <CODEREF>]
	calll	format_user_width
	# 0x804df8b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804df8e:	movl	%eax, -0x340(%ebp) [REG, MEM]
	movl	%eax, -0x340(%ebp)
	# 0x804df94:	movl	0x806a404, %eax [MEM, REG]
	movl	owner_width,  %eax
	# 0x804df99:	cmpl	-0x340(%ebp), %eax [MEM, REG]
	cmpl	-0x340(%ebp), %eax
	# 0x804df9f:	jge	0x804dfac [IMM <CODEREF>]
	jge	.label_463
	# 0x804dfa1:	movl	-0x340(%ebp), %eax [MEM, REG]
	movl	-0x340(%ebp), %eax
	# 0x804dfa7:	movl	%eax, 0x806a404 [REG, MEM]
	movl	%eax, owner_width
	# 0x804dfac:	movzbl	0x806a1e3, %eax [MEM, REG]
.label_463:
	movzbl	print_group,  %eax
	# 0x804dfb3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dfb5:	je	0x804dfea [IMM <CODEREF>]
	je	.label_495
	# 0x804dfb7:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dfbd:	movl	0x28(%eax), %eax [MEM, REG]
	movl	0x28(%eax), %eax
	# 0x804dfc0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804dfc3:	pushl	%eax [REG]
	pushl	%eax
	# 0x804dfc4:	calll	0x804fd20 [IMM <CODEREF>]
	calll	format_group_width
	# 0x804dfc9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804dfcc:	movl	%eax, -0x33c(%ebp) [REG, MEM]
	movl	%eax, -0x33c(%ebp)
	# 0x804dfd2:	movl	0x806a408, %eax [MEM, REG]
	movl	group_width,  %eax
	# 0x804dfd7:	cmpl	-0x33c(%ebp), %eax [MEM, REG]
	cmpl	-0x33c(%ebp), %eax
	# 0x804dfdd:	jge	0x804dfea [IMM <CODEREF>]
	jge	.label_495
	# 0x804dfdf:	movl	-0x33c(%ebp), %eax [MEM, REG]
	movl	-0x33c(%ebp), %eax
	# 0x804dfe5:	movl	%eax, 0x806a408 [REG, MEM]
	movl	%eax, group_width
	# 0x804dfea:	movzbl	0x806a429, %eax [MEM, REG]
.label_495:
	movzbl	print_author,  %eax
	# 0x804dff1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804dff3:	je	0x804e028 [IMM <CODEREF>]
	je	.label_486
	# 0x804dff5:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804dffb:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x804dffe:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e001:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e002:	calll	0x804fce9 [IMM <CODEREF>]
	calll	format_user_width
	# 0x804e007:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e00a:	movl	%eax, -0x338(%ebp) [REG, MEM]
	movl	%eax, -0x338(%ebp)
	# 0x804e010:	movl	0x806a40c, %eax [MEM, REG]
	movl	author_width,  %eax
	# 0x804e015:	cmpl	-0x338(%ebp), %eax [MEM, REG]
	cmpl	-0x338(%ebp), %eax
	# 0x804e01b:	jge	0x804e028 [IMM <CODEREF>]
	jge	.label_486
	# 0x804e01d:	movl	-0x338(%ebp), %eax [MEM, REG]
	movl	-0x338(%ebp), %eax
	# 0x804e023:	movl	%eax, 0x806a40c [REG, MEM]
	movl	%eax, author_width
	# 0x804e028:	movzbl	0x806a3f0, %eax [MEM, REG]
.label_486:
	movzbl	print_scontext,  %eax
	# 0x804e02f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804e031:	je	0x804e066 [IMM <CODEREF>]
	je	.label_445
	# 0x804e033:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804e039:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x804e03c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e03f:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e040:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e045:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e048:	movl	%eax, -0x334(%ebp) [REG, MEM]
	movl	%eax, -0x334(%ebp)
	# 0x804e04e:	movl	0x806a400, %eax [MEM, REG]
	movl	scontext_width,  %eax
	# 0x804e053:	cmpl	-0x334(%ebp), %eax [MEM, REG]
	cmpl	-0x334(%ebp), %eax
	# 0x804e059:	jge	0x804e066 [IMM <CODEREF>]
	jge	.label_445
	# 0x804e05b:	movl	-0x334(%ebp), %eax [MEM, REG]
	movl	-0x334(%ebp), %eax
	# 0x804e061:	movl	%eax, 0x806a400 [REG, MEM]
	movl	%eax, scontext_width
	# 0x804e066:	movl	0x806a41c, %eax [MEM, REG]
.label_445:
	movl	format,  %eax
	# 0x804e06b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804e06d:	jne	0x804e262 [IMM <CODEREF>]
	jne	.label_448
	# 0x804e073:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804e079:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x804e07c:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804e081:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e084:	leal	-0x2ad(%ebp), %ecx [MEM, REG]
	leal	-0x2ad(%ebp), %ecx
	# 0x804e08a:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e08b:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e08c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e08d:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x804e092:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e095:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e098:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e099:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e09e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e0a1:	movl	%eax, -0x330(%ebp) [REG, MEM]
	movl	%eax, -0x330(%ebp)
	# 0x804e0a7:	movl	0x806a3fc, %eax [MEM, REG]
	movl	nlink_width,  %eax
	# 0x804e0ac:	cmpl	-0x330(%ebp), %eax [MEM, REG]
	cmpl	-0x330(%ebp), %eax
	# 0x804e0b2:	jge	0x804e0bf [IMM <CODEREF>]
	jge	.label_464
	# 0x804e0b4:	movl	-0x330(%ebp), %eax [MEM, REG]
	movl	-0x330(%ebp), %eax
	# 0x804e0ba:	movl	%eax, 0x806a3fc [REG, MEM]
	movl	%eax, nlink_width
	# 0x804e0bf:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_464:
	movl	-0x354(%ebp), %eax
	# 0x804e0c5:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804e0c8:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804e0cd:	cmpl	$0x2000, %eax [IMM, REG]
	cmpl	$0x2000, %eax
	# 0x804e0d2:	je	0x804e0ed [IMM <CODEREF>]
	je	.label_470
	# 0x804e0d4:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804e0da:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x804e0dd:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x804e0e2:	cmpl	$0x6000, %eax [IMM, REG]
	cmpl	$0x6000, %eax
	# 0x804e0e7:	jne	0x804e1db [IMM <CODEREF>]
	jne	.label_473
	# 0x804e0ed:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_470:
	movl	-0x354(%ebp), %eax
	# 0x804e0f3:	movl	0x30(%eax), %edx [MEM, REG]
	movl	0x30(%eax), %edx
	# 0x804e0f6:	movl	0x2c(%eax), %eax [MEM, REG]
	movl	0x2c(%eax), %eax
	# 0x804e0f9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e0fc:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e0fd:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e0fe:	calll	0x80499d0 [IMM <CODEREF>]
	calll	gnu_dev_major
	# 0x804e103:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e106:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804e10b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e10e:	leal	-0x298(%ebp), %ecx [MEM, REG]
	leal	-0x298(%ebp), %ecx
	# 0x804e114:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e115:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e116:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e117:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x804e11c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e11f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e122:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e123:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e128:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e12b:	movl	%eax, -0x328(%ebp) [REG, MEM]
	movl	%eax, -0x328(%ebp)
	# 0x804e131:	movl	0x806a410, %eax [MEM, REG]
	movl	major_device_number_width,  %eax
	# 0x804e136:	cmpl	-0x328(%ebp), %eax [MEM, REG]
	cmpl	-0x328(%ebp), %eax
	# 0x804e13c:	jge	0x804e149 [IMM <CODEREF>]
	jge	.label_477
	# 0x804e13e:	movl	-0x328(%ebp), %eax [MEM, REG]
	movl	-0x328(%ebp), %eax
	# 0x804e144:	movl	%eax, 0x806a410 [REG, MEM]
	movl	%eax, major_device_number_width
	# 0x804e149:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_477:
	movl	-0x354(%ebp), %eax
	# 0x804e14f:	movl	0x30(%eax), %edx [MEM, REG]
	movl	0x30(%eax), %edx
	# 0x804e152:	movl	0x2c(%eax), %eax [MEM, REG]
	movl	0x2c(%eax), %eax
	# 0x804e155:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e158:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e159:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e15a:	calll	0x8049a80 [IMM <CODEREF>]
	calll	gnu_dev_minor
	# 0x804e15f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e162:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x804e167:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e16a:	leal	-0x298(%ebp), %ecx [MEM, REG]
	leal	-0x298(%ebp), %ecx
	# 0x804e170:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e171:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e172:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e173:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x804e178:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e17b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e17e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e17f:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e184:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e187:	movl	%eax, -0x328(%ebp) [REG, MEM]
	movl	%eax, -0x328(%ebp)
	# 0x804e18d:	movl	0x806a414, %eax [MEM, REG]
	movl	minor_device_number_width,  %eax
	# 0x804e192:	cmpl	-0x328(%ebp), %eax [MEM, REG]
	cmpl	-0x328(%ebp), %eax
	# 0x804e198:	jge	0x804e1a5 [IMM <CODEREF>]
	jge	.label_491
	# 0x804e19a:	movl	-0x328(%ebp), %eax [MEM, REG]
	movl	-0x328(%ebp), %eax
	# 0x804e1a0:	movl	%eax, 0x806a414 [REG, MEM]
	movl	%eax, minor_device_number_width
	# 0x804e1a5:	movl	0x806a410, %eax [MEM, REG]
.label_491:
	movl	major_device_number_width,  %eax
	# 0x804e1aa:	leal	2(%eax), %edx [MEM, REG]
	leal	2(%eax), %edx
	# 0x804e1ad:	movl	0x806a414, %eax [MEM, REG]
	movl	minor_device_number_width,  %eax
	# 0x804e1b2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804e1b4:	movl	%eax, -0x328(%ebp) [REG, MEM]
	movl	%eax, -0x328(%ebp)
	# 0x804e1ba:	movl	0x806a418, %eax [MEM, REG]
	movl	file_size_width,  %eax
	# 0x804e1bf:	cmpl	-0x328(%ebp), %eax [MEM, REG]
	cmpl	-0x328(%ebp), %eax
	# 0x804e1c5:	jge	0x804e261 [IMM <CODEREF>]
	jge	.label_471
	# 0x804e1cb:	movl	-0x328(%ebp), %eax [MEM, REG]
	movl	-0x328(%ebp), %eax
	# 0x804e1d1:	movl	%eax, 0x806a418 [REG, MEM]
	movl	%eax, file_size_width
	# 0x804e1d6:	jmp	0x804e261 [IMM <CODEREF>]
	jmp	.label_471
	# 0x804e1db:	movl	-0x354(%ebp), %eax [MEM, REG]
.label_473:
	movl	-0x354(%ebp), %eax
	# 0x804e1e1:	movl	0x3c(%eax), %edx [MEM, REG]
	movl	0x3c(%eax), %edx
	# 0x804e1e4:	movl	0x38(%eax), %eax [MEM, REG]
	movl	0x38(%eax), %eax
	# 0x804e1e7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e1ea:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e1eb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e1ec:	calll	0x804d175 [IMM <CODEREF>]
	calll	unsigned_file_size
	# 0x804e1f1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e1f4:	movl	%eax, -0x318(%ebp) [REG, MEM]
	movl	%eax, -0x318(%ebp)
	# 0x804e1fa:	movl	%edx, -0x314(%ebp) [REG, MEM]
	movl	%edx, -0x314(%ebp)
	# 0x804e200:	movl	0x806a1e8, %eax [MEM, REG]
	movl	file_output_block_size,  %eax
	# 0x804e205:	movl	0x806a1ec, %edx [MEM, REG]
	movl	label_216,  %edx
	# 0x804e20b:	movl	0x806a438, %ecx [MEM, REG]
	movl	file_human_output_opts,  %ecx
	# 0x804e211:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e212:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e213:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e215:	pushl	$1 [IMM]
	pushl	$1
	# 0x804e217:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e218:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x804e21e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e21f:	pushl	-0x314(%ebp) [MEM]
	pushl	-0x314(%ebp)
	# 0x804e225:	pushl	-0x318(%ebp) [MEM]
	pushl	-0x318(%ebp)
	# 0x804e22b:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x804e230:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804e233:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e236:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e238:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e239:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x804e23e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e241:	movl	%eax, -0x32c(%ebp) [REG, MEM]
	movl	%eax, -0x32c(%ebp)
	# 0x804e247:	movl	0x806a418, %eax [MEM, REG]
	movl	file_size_width,  %eax
	# 0x804e24c:	cmpl	-0x32c(%ebp), %eax [MEM, REG]
	cmpl	-0x32c(%ebp), %eax
	# 0x804e252:	jge	0x804e262 [IMM <CODEREF>]
	jge	.label_448
	# 0x804e254:	movl	-0x32c(%ebp), %eax [MEM, REG]
	movl	-0x32c(%ebp), %eax
	# 0x804e25a:	movl	%eax, 0x806a418 [REG, MEM]
	movl	%eax, file_size_width
	# 0x804e25f:	jmp	0x804e262 [IMM <CODEREF>]
	jmp	.label_448
	# 0x804e261:	nop	 []
.label_471:
	nop	
	# 0x804e262:	movzbl	0x806a451, %eax [MEM, REG]
.label_448:
	movzbl	print_inode,  %eax
	# 0x804e269:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804e26b:	je	0x804e2b7 [IMM <CODEREF>]
	je	.label_455
	# 0x804e26d:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804e273:	movl	0x68(%eax), %edx [MEM, REG]
	movl	0x68(%eax), %edx
	# 0x804e276:	movl	0x64(%eax), %eax [MEM, REG]
	movl	0x64(%eax), %eax
	# 0x804e279:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e27c:	leal	-0x298(%ebp), %ecx [MEM, REG]
	leal	-0x298(%ebp), %ecx
	# 0x804e282:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e283:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e284:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e285:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x804e28a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e28d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e290:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e291:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e296:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e299:	movl	%eax, -0x324(%ebp) [REG, MEM]
	movl	%eax, -0x324(%ebp)
	# 0x804e29f:	movl	0x806a3f4, %eax [MEM, REG]
	movl	inode_number_width,  %eax
	# 0x804e2a4:	cmpl	-0x324(%ebp), %eax [MEM, REG]
	cmpl	-0x324(%ebp), %eax
	# 0x804e2aa:	jge	0x804e2b7 [IMM <CODEREF>]
	jge	.label_455
	# 0x804e2ac:	movl	-0x324(%ebp), %eax [MEM, REG]
	movl	-0x324(%ebp), %eax
	# 0x804e2b2:	movl	%eax, 0x806a3f4 [REG, MEM]
	movl	%eax, inode_number_width
	# 0x804e2b7:	subl	$0xc, %esp [IMM, REG]
.label_455:
	subl	$0xc, %esp
	# 0x804e2ba:	pushl	-0x36c(%ebp) [MEM]
	pushl	-0x36c(%ebp)
	# 0x804e2c0:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804e2c5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e2c8:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804e2ca:	movl	-0x354(%ebp), %eax [MEM, REG]
	movl	-0x354(%ebp), %eax
	# 0x804e2d0:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x804e2d2:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804e2d7:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804e2da:	movl	%eax, 0x806a3cc [REG, MEM]
	movl	%eax, cwd_n_used
	# 0x804e2df:	movl	-0x320(%ebp), %eax [MEM, REG]
	movl	-0x320(%ebp), %eax
	# 0x804e2e5:	movl	-0x31c(%ebp), %edx [MEM, REG]
	movl	-0x31c(%ebp), %edx
	# 0x804e2eb:	movl	-0xc(%ebp), %ebx [MEM, REG]
.label_460:
	movl	-0xc(%ebp), %ebx
	# 0x804e2ee:	xorl	%gs:0x14, %ebx [MEM, REG]
	xorl	%gs:0x14, %ebx
	# 0x804e2f5:	je	0x804e2fc [IMM <CODEREF>]
	je	.label_475
	# 0x804e2f7:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804e2fc:	movl	-4(%ebp), %ebx [MEM, REG]
.label_475:
	movl	-4(%ebp), %ebx
	# 0x804e2ff:	leave	 []
	leave	
	# 0x804e300:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e301

	# 0x804e301:	pushl	%ebp [REG]
	.globl is_directory
	.type is_directory, @function
is_directory:
	pushl	%ebp
	# 0x804e302:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e304:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e307:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x804e30a:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804e30d:	je	0x804e31a [IMM <CODEREF>]
	je	.label_503
	# 0x804e30f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e312:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x804e315:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x804e318:	jne	0x804e321 [IMM <CODEREF>]
	jne	.label_505
	# 0x804e31a:	movl	$1, %eax [IMM, REG]
.label_503:
	movl	$1, %eax
	# 0x804e31f:	jmp	0x804e326 [IMM <CODEREF>]
	jmp	.label_504
	# 0x804e321:	movl	$0, %eax [IMM, REG]
.label_505:
	movl	$0, %eax
	# 0x804e326:	andl	$1, %eax [IMM, REG]
.label_504:
	andl	$1, %eax
	# 0x804e329:	popl	%ebp [REG]
	popl	%ebp
	# 0x804e32a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e32b

	# 0x804e32b:	pushl	%ebp [REG]
	.globl get_link_name
	.type get_link_name, @function
get_link_name:
	pushl	%ebp
	# 0x804e32c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e32e:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804e331:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e334:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x804e337:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e33a:	movl	0x3c(%eax), %edx [MEM, REG]
	movl	0x3c(%eax), %edx
	# 0x804e33d:	movl	0x38(%eax), %eax [MEM, REG]
	movl	0x38(%eax), %eax
	# 0x804e340:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e343:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e344:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e347:	calll	0x80528f7 [IMM <CODEREF>]
	calll	areadlink_with_size
	# 0x804e34c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e34f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804e351:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e354:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x804e357:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e35a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804e35d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804e35f:	jne	0x804e387 [IMM <CODEREF>]
	jne	.label_507
	# 0x804e361:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e364:	pushl	$0x80613ec [IMM <DATAREF>]
	pushl	$label_506
	# 0x804e369:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804e36e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e371:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804e373:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x804e377:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e37a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e37d:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e37e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e37f:	calll	0x804c903 [IMM <CODEREF>]
	calll	file_failure
	# 0x804e384:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e387:	nop	 []
.label_507:
	nop	
	# 0x804e388:	leave	 []
	leave	
	# 0x804e389:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e38a

	# 0x804e38a:	pushl	%ebp [REG]
	.globl make_link_name
	.type make_link_name, @function
make_link_name:
	pushl	%ebp
	# 0x804e38b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e38d:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804e390:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x804e394:	jne	0x804e3a0 [IMM <CODEREF>]
	jne	.label_511
	# 0x804e396:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804e39b:	jmp	0x804e447 [IMM <CODEREF>]
	jmp	.label_512
	# 0x804e3a0:	movl	0xc(%ebp), %eax [MEM, REG]
.label_511:
	movl	0xc(%ebp), %eax
	# 0x804e3a3:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804e3a6:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x804e3a8:	jne	0x804e3bd [IMM <CODEREF>]
	jne	.label_508
	# 0x804e3aa:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e3ad:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e3b0:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804e3b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e3b8:	jmp	0x804e447 [IMM <CODEREF>]
	jmp	.label_512
	# 0x804e3bd:	subl	$0xc, %esp [IMM, REG]
.label_508:
	subl	$0xc, %esp
	# 0x804e3c0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e3c3:	calll	0x8053a4f [IMM <CODEREF>]
	calll	dir_len
	# 0x804e3c8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e3cb:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804e3ce:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x804e3d2:	jne	0x804e3e4 [IMM <CODEREF>]
	jne	.label_510
	# 0x804e3d4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e3d7:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e3da:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x804e3df:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e3e2:	jmp	0x804e447 [IMM <CODEREF>]
	jmp	.label_512
	# 0x804e3e4:	subl	$0xc, %esp [IMM, REG]
.label_510:
	subl	$0xc, %esp
	# 0x804e3e7:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e3ea:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804e3ef:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e3f2:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804e3f4:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804e3f7:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804e3f9:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x804e3fc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e3ff:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e400:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x804e405:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e408:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e40b:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804e40e:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x804e411:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e414:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804e416:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804e419:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x804e41b:	je	0x804e421 [IMM <CODEREF>]
	je	.label_509
	# 0x804e41d:	addl	$1, -0x10(%ebp) [IMM, MEM]
	addl	$1, -0x10(%ebp)
	# 0x804e421:	subl	$4, %esp [IMM, REG]
.label_509:
	subl	$4, %esp
	# 0x804e424:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e427:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e42a:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804e42d:	calll	0x80499c0 [IMM <CODEREF>]
	calll	stpncpy
	# 0x804e432:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e435:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e438:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e43b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e43c:	calll	0x80497d0 [IMM <CODEREF>]
	calll	strcpy
	# 0x804e441:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e444:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804e447:	leave	 []
.label_512:
	leave	
	# 0x804e448:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e449

	# 0x804e449:	pushl	%ebp [REG]
	.globl basename_is_dot_or_dotdot
	.type basename_is_dot_or_dotdot, @function
basename_is_dot_or_dotdot:
	pushl	%ebp
	# 0x804e44a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e44c:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804e44f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e452:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e455:	calll	0x8053b48 [IMM <CODEREF>]
	calll	last_component
	# 0x804e45a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e45d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e460:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e463:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804e466:	calll	0x8049d01 [IMM <CODEREF>]
	calll	dot_or_dotdot
	# 0x804e46b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e46e:	leave	 []
	leave	
	# 0x804e46f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e470

	# 0x804e470:	pushl	%ebp [REG]
	.globl extract_dirs_from_files
	.type extract_dirs_from_files, @function
extract_dirs_from_files:
	pushl	%ebp
	# 0x804e471:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e473:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804e476:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e479:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x804e47c:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x804e480:	setne	%al [REG]
	setne	%al
	# 0x804e483:	movb	%al, -0x1d(%ebp) [REG, MEM]
	movb	%al, -0x1d(%ebp)
	# 0x804e486:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x804e48a:	je	0x804e4a7 [IMM <CODEREF>]
	je	.label_515
	# 0x804e48c:	movl	0x806a3c0, %eax [MEM, REG]
	movl	active_dir_set,  %eax
	# 0x804e491:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804e493:	je	0x804e4a7 [IMM <CODEREF>]
	je	.label_515
	# 0x804e495:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e498:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e49a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e49d:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e49f:	calll	0x804c94e [IMM <CODEREF>]
	calll	queue_directory
	# 0x804e4a4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e4a7:	movl	0x806a3cc, %eax [MEM, REG]
.label_515:
	movl	cwd_n_used,  %eax
	# 0x804e4ac:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804e4af:	jmp	0x804e58e [IMM <CODEREF>]
	jmp	.label_517
	# 0x804e4b4:	movl	0x806a3d4, %eax [MEM, REG]
.label_516:
	movl	sorted_file,  %eax
	# 0x804e4b9:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x804e4bc:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804e4bf:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804e4c1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e4c3:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804e4c6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e4c9:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804e4cc:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804e4d1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e4d4:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804e4d6:	je	0x804e58e [IMM <CODEREF>]
	je	.label_517
	# 0x804e4dc:	movzbl	-0x1d(%ebp), %eax [MEM, REG]
	movzbl	-0x1d(%ebp), %eax
	# 0x804e4e0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804e4e3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804e4e5:	jne	0x804e503 [IMM <CODEREF>]
	jne	.label_519
	# 0x804e4e7:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e4ea:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e4ec:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e4ef:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e4f0:	calll	0x804e449 [IMM <CODEREF>]
	calll	basename_is_dot_or_dotdot
	# 0x804e4f5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e4f8:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804e4fb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804e4fd:	je	0x804e58e [IMM <CODEREF>]
	je	.label_517
	# 0x804e503:	cmpl	$0, 8(%ebp) [IMM, MEM]
.label_519:
	cmpl	$0, 8(%ebp)
	# 0x804e507:	je	0x804e515 [IMM <CODEREF>]
	je	.label_513
	# 0x804e509:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e50c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e50e:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x804e511:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x804e513:	jne	0x804e534 [IMM <CODEREF>]
	jne	.label_514
	# 0x804e515:	movzbl	-0x2c(%ebp), %ecx [MEM, REG]
.label_513:
	movzbl	-0x2c(%ebp), %ecx
	# 0x804e519:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e51c:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x804e51f:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e522:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e524:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e527:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804e528:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e529:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e52a:	calll	0x804c94e [IMM <CODEREF>]
	calll	queue_directory
	# 0x804e52f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e532:	jmp	0x804e575 [IMM <CODEREF>]
	jmp	.label_518
	# 0x804e534:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_514:
	movl	-0x14(%ebp), %eax
	# 0x804e537:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e539:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e53c:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e53e:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e53f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e542:	calll	0x8053f62 [IMM <CODEREF>]
	calll	file_name_concat
	# 0x804e547:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e54a:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804e54d:	movzbl	-0x2c(%ebp), %edx [MEM, REG]
	movzbl	-0x2c(%ebp), %edx
	# 0x804e551:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e554:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x804e557:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e55a:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e55b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e55c:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e55f:	calll	0x804c94e [IMM <CODEREF>]
	calll	queue_directory
	# 0x804e564:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e567:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e56a:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e56d:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804e572:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e575:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_518:
	movl	-0x14(%ebp), %eax
	# 0x804e578:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x804e57b:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x804e57e:	jne	0x804e58e [IMM <CODEREF>]
	jne	.label_517
	# 0x804e580:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e583:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804e586:	calll	0x804d1a7 [IMM <CODEREF>]
	calll	free_ent
	# 0x804e58b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e58e:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_517:
	movl	-0x1c(%ebp), %eax
	# 0x804e591:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x804e594:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x804e597:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804e599:	jne	0x804e4b4 [IMM <CODEREF>]
	jne	.label_516
	# 0x804e59f:	movl	$0, -0x1c(%ebp) [IMM, MEM]
	movl	$0, -0x1c(%ebp)
	# 0x804e5a6:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x804e5ad:	jmp	0x804e5e9 [IMM <CODEREF>]
	jmp	.label_520
	# 0x804e5af:	movl	0x806a3d4, %eax [MEM, REG]
.label_521:
	movl	sorted_file,  %eax
	# 0x804e5b4:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x804e5b7:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804e5ba:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804e5bc:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e5be:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e5c1:	movl	0x806a3d4, %eax [MEM, REG]
	movl	sorted_file,  %eax
	# 0x804e5c6:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x804e5c9:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804e5cc:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804e5ce:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804e5d1:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x804e5d3:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x804e5d6:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x804e5d9:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x804e5dc:	setne	%al [REG]
	setne	%al
	# 0x804e5df:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804e5e2:	addl	%eax, -0x18(%ebp) [REG, MEM]
	addl	%eax, -0x18(%ebp)
	# 0x804e5e5:	addl	$1, -0x1c(%ebp) [IMM, MEM]
	addl	$1, -0x1c(%ebp)
	# 0x804e5e9:	movl	0x806a3cc, %eax [MEM, REG]
.label_520:
	movl	cwd_n_used,  %eax
	# 0x804e5ee:	cmpl	%eax, -0x1c(%ebp) [REG, MEM]
	cmpl	%eax, -0x1c(%ebp)
	# 0x804e5f1:	jb	0x804e5af [IMM <CODEREF>]
	jb	.label_521
	# 0x804e5f3:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x804e5f6:	movl	%eax, 0x806a3cc [REG, MEM]
	movl	%eax, cwd_n_used
	# 0x804e5fb:	nop	 []
	nop	
	# 0x804e5fc:	leave	 []
	leave	
	# 0x804e5fd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e5fe

	# 0x804e5fe:	pushl	%ebp [REG]
	.globl xstrcoll
	.type xstrcoll, @function
xstrcoll:
	pushl	%ebp
	# 0x804e5ff:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e601:	pushl	%edi [REG]
	pushl	%edi
	# 0x804e602:	pushl	%esi [REG]
	pushl	%esi
	# 0x804e603:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804e604:	subl	$0x1c, %esp [IMM, REG]
	subl	$0x1c, %esp
	# 0x804e607:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804e60c:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x804e612:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e615:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e618:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e61b:	calll	0x8049840 [IMM <CODEREF>]
	calll	strcoll
	# 0x804e620:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e623:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804e626:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804e62b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e62d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804e62f:	je	0x804e69b [IMM <CODEREF>]
	je	.label_522
	# 0x804e631:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e634:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e637:	pushl	$1 [IMM]
	pushl	$1
	# 0x804e639:	calll	0x805b862 [IMM <CODEREF>]
	calll	quote_n
	# 0x804e63e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e641:	movl	%eax, %edi [REG, REG]
	movl	%eax, %edi
	# 0x804e643:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e646:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e649:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e64b:	calll	0x805b862 [IMM <CODEREF>]
	calll	quote_n
	# 0x804e650:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e653:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x804e655:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e658:	pushl	$0x806140c [IMM <DATAREF>]
	pushl	$label_523
	# 0x804e65d:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x804e662:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e665:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804e667:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x804e66c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e66e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e671:	pushl	%edi [REG]
	pushl	%edi
	# 0x804e672:	pushl	%esi [REG]
	pushl	%esi
	# 0x804e673:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804e674:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e675:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e677:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x804e67c:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804e67f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804e682:	pushl	$0 [IMM]
	pushl	$0
	# 0x804e684:	calll	0x804c8cf [IMM <CODEREF>]
	calll	set_exit_status
	# 0x804e689:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e68c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e68f:	pushl	$1 [IMM]
	pushl	$1
	# 0x804e691:	pushl	$0x806b320 [IMM <DATAREF>]
	pushl	$failed_strcoll
	# 0x804e696:	calll	0x8049580 [IMM <CODEREF>]
	calll	longjmp
	# 0x804e69b:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_522:
	movl	-0x1c(%ebp), %eax
	# 0x804e69e:	leal	-0xc(%ebp), %esp [MEM, REG]
	leal	-0xc(%ebp), %esp
	# 0x804e6a1:	popl	%ebx [REG]
	popl	%ebx
	# 0x804e6a2:	popl	%esi [REG]
	popl	%esi
	# 0x804e6a3:	popl	%edi [REG]
	popl	%edi
	# 0x804e6a4:	popl	%ebp [REG]
	popl	%ebp
	# 0x804e6a5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e6a6

	# 0x804e6a6:	pushl	%ebp [REG]
	.globl cmp_ctime
	.type cmp_ctime, @function
cmp_ctime:
	pushl	%ebp
	# 0x804e6a7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e6a9:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804e6ac:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e6af:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804e6b2:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e6b5:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804e6b8:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e6bb:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x804e6be:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804e6c4:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e6c7:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804e6c9:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e6cc:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e6cf:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x804e6d2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e6d5:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e6d6:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e6d7:	calll	0x805bcb2 [IMM <CODEREF>]
	calll	get_stat_ctime
	# 0x804e6dc:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e6df:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e6e2:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e6e5:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804e6e8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e6eb:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e6ec:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e6ed:	calll	0x805bcb2 [IMM <CODEREF>]
	calll	get_stat_ctime
	# 0x804e6f2:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e6f5:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x804e6f8:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804e6fb:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e6fe:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804e701:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x804e706:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e709:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804e70c:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
	cmpl	$0, -0x20(%ebp)
	# 0x804e710:	jne	0x804e72b [IMM <CODEREF>]
	jne	.label_525
	# 0x804e712:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e715:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e717:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e71a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e71c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e71f:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e720:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e721:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x804e724:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e726:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e729:	jmp	0x804e72e [IMM <CODEREF>]
	jmp	.label_524
	# 0x804e72b:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_525:
	movl	-0x20(%ebp), %eax
	# 0x804e72e:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_524:
	movl	-0xc(%ebp), %ecx
	# 0x804e731:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804e738:	je	0x804e73f [IMM <CODEREF>]
	je	.label_526
	# 0x804e73a:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804e73f:	leave	 []
.label_526:
	leave	
	# 0x804e740:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e741

	# 0x804e741:	pushl	%ebp [REG]
	.globl cmp_mtime
	.type cmp_mtime, @function
cmp_mtime:
	pushl	%ebp
	# 0x804e742:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e744:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804e747:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e74a:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804e74d:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e750:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804e753:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e756:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x804e759:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804e75f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e762:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804e764:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e767:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e76a:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x804e76d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e770:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e771:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e772:	calll	0x805bccd [IMM <CODEREF>]
	calll	get_stat_mtime
	# 0x804e777:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e77a:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e77d:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e780:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804e783:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e786:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e787:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e788:	calll	0x805bccd [IMM <CODEREF>]
	calll	get_stat_mtime
	# 0x804e78d:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e790:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x804e793:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804e796:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e799:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804e79c:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x804e7a1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e7a4:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804e7a7:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
	cmpl	$0, -0x20(%ebp)
	# 0x804e7ab:	jne	0x804e7c6 [IMM <CODEREF>]
	jne	.label_528
	# 0x804e7ad:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e7b0:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e7b2:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e7b5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e7b7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e7ba:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e7bb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e7bc:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x804e7bf:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e7c1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e7c4:	jmp	0x804e7c9 [IMM <CODEREF>]
	jmp	.label_527
	# 0x804e7c6:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_528:
	movl	-0x20(%ebp), %eax
	# 0x804e7c9:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_527:
	movl	-0xc(%ebp), %ecx
	# 0x804e7cc:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804e7d3:	je	0x804e7da [IMM <CODEREF>]
	je	.label_529
	# 0x804e7d5:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804e7da:	leave	 []
.label_529:
	leave	
	# 0x804e7db:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e7dc

	# 0x804e7dc:	pushl	%ebp [REG]
	.globl cmp_atime
	.type cmp_atime, @function
cmp_atime:
	pushl	%ebp
	# 0x804e7dd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e7df:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804e7e2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e7e5:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804e7e8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e7eb:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x804e7ee:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e7f1:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x804e7f4:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804e7fa:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e7fd:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804e7ff:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e802:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e805:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x804e808:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e80b:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e80c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e80d:	calll	0x805bc97 [IMM <CODEREF>]
	calll	get_stat_atime
	# 0x804e812:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e815:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e818:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804e81b:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x804e81e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e821:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e822:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e823:	calll	0x805bc97 [IMM <CODEREF>]
	calll	get_stat_atime
	# 0x804e828:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804e82b:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x804e82e:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x804e831:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x804e834:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x804e837:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x804e83c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e83f:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x804e842:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
	cmpl	$0, -0x20(%ebp)
	# 0x804e846:	jne	0x804e861 [IMM <CODEREF>]
	jne	.label_532
	# 0x804e848:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x804e84b:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e84d:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x804e850:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e852:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e855:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e856:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e857:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x804e85a:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e85c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e85f:	jmp	0x804e864 [IMM <CODEREF>]
	jmp	.label_530
	# 0x804e861:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_532:
	movl	-0x20(%ebp), %eax
	# 0x804e864:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_530:
	movl	-0xc(%ebp), %ecx
	# 0x804e867:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804e86e:	je	0x804e875 [IMM <CODEREF>]
	je	.label_531
	# 0x804e870:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804e875:	leave	 []
.label_531:
	leave	
	# 0x804e876:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e877

	# 0x804e877:	pushl	%ebp [REG]
	.globl cmp_size
	.type cmp_size, @function
cmp_size:
	pushl	%ebp
	# 0x804e878:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e87a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804e87b:	subl	$0x24, %esp [IMM, REG]
	subl	$0x24, %esp
	# 0x804e87e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e881:	movl	0x38(%eax), %ecx [MEM, REG]
	movl	0x38(%eax), %ecx
	# 0x804e884:	movl	0x3c(%eax), %ebx [MEM, REG]
	movl	0x3c(%eax), %ebx
	# 0x804e887:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e88a:	movl	0x3c(%eax), %edx [MEM, REG]
	movl	0x3c(%eax), %edx
	# 0x804e88d:	movl	0x38(%eax), %eax [MEM, REG]
	movl	0x38(%eax), %eax
	# 0x804e890:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x804e892:	jl	0x804e8c8 [IMM <CODEREF>]
	jl	.label_538
	# 0x804e894:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x804e896:	jg	0x804e89c [IMM <CODEREF>]
	jg	.label_536
	# 0x804e898:	cmpl	%eax, %ecx [REG, REG]
	cmpl	%eax, %ecx
	# 0x804e89a:	jb	0x804e8c8 [IMM <CODEREF>]
	jb	.label_538
	# 0x804e89c:	movl	0xc(%ebp), %eax [MEM, REG]
.label_536:
	movl	0xc(%ebp), %eax
	# 0x804e89f:	movl	0x38(%eax), %ecx [MEM, REG]
	movl	0x38(%eax), %ecx
	# 0x804e8a2:	movl	0x3c(%eax), %ebx [MEM, REG]
	movl	0x3c(%eax), %ebx
	# 0x804e8a5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e8a8:	movl	0x3c(%eax), %edx [MEM, REG]
	movl	0x3c(%eax), %edx
	# 0x804e8ab:	movl	0x38(%eax), %eax [MEM, REG]
	movl	0x38(%eax), %eax
	# 0x804e8ae:	movb	$1, -0x19(%ebp) [IMM, MEM]
	movb	$1, -0x19(%ebp)
	# 0x804e8b2:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x804e8b4:	jg	0x804e8c2 [IMM <CODEREF>]
	jg	.label_539
	# 0x804e8b6:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x804e8b8:	jl	0x804e8be [IMM <CODEREF>]
	jl	.label_537
	# 0x804e8ba:	cmpl	%eax, %ecx [REG, REG]
	cmpl	%eax, %ecx
	# 0x804e8bc:	ja	0x804e8c2 [IMM <CODEREF>]
	ja	.label_539
	# 0x804e8be:	movb	$0, -0x19(%ebp) [IMM, MEM]
.label_537:
	movb	$0, -0x19(%ebp)
	# 0x804e8c2:	movzbl	-0x19(%ebp), %eax [MEM, REG]
.label_539:
	movzbl	-0x19(%ebp), %eax
	# 0x804e8c6:	jmp	0x804e8cd [IMM <CODEREF>]
	jmp	.label_533
	# 0x804e8c8:	movl	$0xffffffff, %eax [IMM, REG]
.label_538:
	movl	$0xffffffff, %eax
	# 0x804e8cd:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_533:
	movl	%eax, -0xc(%ebp)
	# 0x804e8d0:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804e8d4:	jne	0x804e8ef [IMM <CODEREF>]
	jne	.label_535
	# 0x804e8d6:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e8d9:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e8db:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e8de:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e8e0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e8e3:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e8e4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e8e5:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e8e8:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e8ea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e8ed:	jmp	0x804e8f2 [IMM <CODEREF>]
	jmp	.label_534
	# 0x804e8ef:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_535:
	movl	-0xc(%ebp), %eax
	# 0x804e8f2:	movl	-4(%ebp), %ebx [MEM, REG]
.label_534:
	movl	-4(%ebp), %ebx
	# 0x804e8f5:	leave	 []
	leave	
	# 0x804e8f6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e8f7

	# 0x804e8f7:	pushl	%ebp [REG]
	.globl cmp_name
	.type cmp_name, @function
cmp_name:
	pushl	%ebp
	# 0x804e8f8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e8fa:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e8fd:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e900:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e902:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e905:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e907:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e90a:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e90b:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e90c:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e90f:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e911:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e914:	leave	 []
	leave	
	# 0x804e915:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e916

	# 0x804e916:	pushl	%ebp [REG]
	.globl cmp_extension
	.type cmp_extension, @function
cmp_extension:
	pushl	%ebp
	# 0x804e917:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e919:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804e91c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e91f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e921:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e924:	pushl	$0x2e [IMM]
	pushl	$0x2e
	# 0x804e926:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e927:	calll	0x8049a50 [IMM <CODEREF>]
	calll	strrchr
	# 0x804e92c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e92f:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804e932:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e935:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e937:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e93a:	pushl	$0x2e [IMM]
	pushl	$0x2e
	# 0x804e93c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e93d:	calll	0x8049a50 [IMM <CODEREF>]
	calll	strrchr
	# 0x804e942:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e945:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804e948:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x804e94c:	je	0x804e953 [IMM <CODEREF>]
	je	.label_540
	# 0x804e94e:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x804e951:	jmp	0x804e958 [IMM <CODEREF>]
	jmp	.label_542
	# 0x804e953:	movl	$0x805eef7, %edx [IMM <DATAREF>, REG]
.label_540:
	movl	$label_26,  %edx
	# 0x804e958:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
.label_542:
	cmpl	$0, -0x14(%ebp)
	# 0x804e95c:	je	0x804e963 [IMM <CODEREF>]
	je	.label_544
	# 0x804e95e:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804e961:	jmp	0x804e968 [IMM <CODEREF>]
	jmp	.label_545
	# 0x804e963:	movl	$0x805eef7, %eax [IMM <DATAREF>, REG]
.label_544:
	movl	$label_26,  %eax
	# 0x804e968:	subl	$8, %esp [IMM, REG]
.label_545:
	subl	$8, %esp
	# 0x804e96b:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e96c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e96d:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e970:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e972:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e975:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804e978:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804e97c:	jne	0x804e997 [IMM <CODEREF>]
	jne	.label_543
	# 0x804e97e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804e981:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804e983:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804e986:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804e988:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e98b:	pushl	%edx [REG]
	pushl	%edx
	# 0x804e98c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804e98d:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804e990:	calll	*%eax [REG]
	calll	*%eax
	# 0x804e992:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e995:	jmp	0x804e99a [IMM <CODEREF>]
	jmp	.label_541
	# 0x804e997:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_543:
	movl	-0xc(%ebp), %eax
	# 0x804e99a:	leave	 []
.label_541:
	leave	
	# 0x804e99b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e99c

	# 0x804e99c:	pushl	%ebp [REG]
	.globl xstrcoll_ctime
	.type xstrcoll_ctime, @function
xstrcoll_ctime:
	pushl	%ebp
	# 0x804e99d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e99f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e9a2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e9a5:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804e9aa:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e9ad:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e9b0:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804e9b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e9b8:	leave	 []
	leave	
	# 0x804e9b9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e9ba

	# 0x804e9ba:	pushl	%ebp [REG]
	.globl strcmp_ctime
	.type strcmp_ctime, @function
strcmp_ctime:
	pushl	%ebp
	# 0x804e9bb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e9bd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e9c0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e9c3:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804e9c8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e9cb:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e9ce:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804e9d3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e9d6:	leave	 []
	leave	
	# 0x804e9d7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e9d8

	# 0x804e9d8:	pushl	%ebp [REG]
	.globl rev_xstrcoll_ctime
	.type rev_xstrcoll_ctime, @function
rev_xstrcoll_ctime:
	pushl	%ebp
	# 0x804e9d9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e9db:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e9de:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e9e1:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804e9e6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804e9e9:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804e9ec:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804e9f1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804e9f4:	leave	 []
	leave	
	# 0x804e9f5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804e9f6

	# 0x804e9f6:	pushl	%ebp [REG]
	.globl rev_strcmp_ctime
	.type rev_strcmp_ctime, @function
rev_strcmp_ctime:
	pushl	%ebp
	# 0x804e9f7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804e9f9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804e9fc:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804e9ff:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ea04:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ea07:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ea0a:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804ea0f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ea12:	leave	 []
	leave	
	# 0x804ea13:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ea14

	# 0x804ea14:	pushl	%ebp [REG]
	.globl xstrcoll_df_ctime
	.type xstrcoll_df_ctime, @function
xstrcoll_df_ctime:
	pushl	%ebp
	# 0x804ea15:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ea17:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ea1a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ea1d:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ea22:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ea25:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ea28:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ea2b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ea30:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ea33:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ea36:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ea3a:	je	0x804ea4e [IMM <CODEREF>]
	je	.label_546
	# 0x804ea3c:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ea40:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ea43:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ea45:	je	0x804ea4e [IMM <CODEREF>]
	je	.label_546
	# 0x804ea47:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ea4c:	jmp	0x804ea7c [IMM <CODEREF>]
	jmp	.label_547
	# 0x804ea4e:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_546:
	movzbl	-0xa(%ebp), %eax
	# 0x804ea52:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ea55:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ea57:	je	0x804ea66 [IMM <CODEREF>]
	je	.label_548
	# 0x804ea59:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ea5d:	je	0x804ea66 [IMM <CODEREF>]
	je	.label_548
	# 0x804ea5f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ea64:	jmp	0x804ea7c [IMM <CODEREF>]
	jmp	.label_547
	# 0x804ea66:	subl	$4, %esp [IMM, REG]
.label_548:
	subl	$4, %esp
	# 0x804ea69:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ea6e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ea71:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ea74:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804ea79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ea7c:	leave	 []
.label_547:
	leave	
	# 0x804ea7d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ea7e

	# 0x804ea7e:	pushl	%ebp [REG]
	.globl strcmp_df_ctime
	.type strcmp_df_ctime, @function
strcmp_df_ctime:
	pushl	%ebp
	# 0x804ea7f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ea81:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ea84:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ea87:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ea8c:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ea8f:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ea92:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ea95:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ea9a:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ea9d:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804eaa0:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804eaa4:	je	0x804eab8 [IMM <CODEREF>]
	je	.label_551
	# 0x804eaa6:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804eaaa:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eaad:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eaaf:	je	0x804eab8 [IMM <CODEREF>]
	je	.label_551
	# 0x804eab1:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804eab6:	jmp	0x804eae6 [IMM <CODEREF>]
	jmp	.label_549
	# 0x804eab8:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_551:
	movzbl	-0xa(%ebp), %eax
	# 0x804eabc:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eabf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eac1:	je	0x804ead0 [IMM <CODEREF>]
	je	.label_550
	# 0x804eac3:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804eac7:	je	0x804ead0 [IMM <CODEREF>]
	je	.label_550
	# 0x804eac9:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804eace:	jmp	0x804eae6 [IMM <CODEREF>]
	jmp	.label_549
	# 0x804ead0:	subl	$4, %esp [IMM, REG]
.label_550:
	subl	$4, %esp
	# 0x804ead3:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ead8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eadb:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eade:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804eae3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804eae6:	leave	 []
.label_549:
	leave	
	# 0x804eae7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804eae8

	# 0x804eae8:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_ctime
	.type rev_xstrcoll_df_ctime, @function
rev_xstrcoll_df_ctime:
	pushl	%ebp
	# 0x804eae9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804eaeb:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804eaee:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eaf1:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eaf6:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eaf9:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804eafc:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eaff:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eb04:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eb07:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804eb0a:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804eb0e:	je	0x804eb22 [IMM <CODEREF>]
	je	.label_552
	# 0x804eb10:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804eb14:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eb17:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eb19:	je	0x804eb22 [IMM <CODEREF>]
	je	.label_552
	# 0x804eb1b:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804eb20:	jmp	0x804eb50 [IMM <CODEREF>]
	jmp	.label_554
	# 0x804eb22:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_552:
	movzbl	-0xa(%ebp), %eax
	# 0x804eb26:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eb29:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eb2b:	je	0x804eb3a [IMM <CODEREF>]
	je	.label_553
	# 0x804eb2d:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804eb31:	je	0x804eb3a [IMM <CODEREF>]
	je	.label_553
	# 0x804eb33:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804eb38:	jmp	0x804eb50 [IMM <CODEREF>]
	jmp	.label_554
	# 0x804eb3a:	subl	$4, %esp [IMM, REG]
.label_553:
	subl	$4, %esp
	# 0x804eb3d:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804eb42:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eb45:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eb48:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804eb4d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804eb50:	leave	 []
.label_554:
	leave	
	# 0x804eb51:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804eb52

	# 0x804eb52:	pushl	%ebp [REG]
	.globl rev_strcmp_df_ctime
	.type rev_strcmp_df_ctime, @function
rev_strcmp_df_ctime:
	pushl	%ebp
	# 0x804eb53:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804eb55:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804eb58:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eb5b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eb60:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eb63:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804eb66:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eb69:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eb6e:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eb71:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804eb74:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804eb78:	je	0x804eb8c [IMM <CODEREF>]
	je	.label_557
	# 0x804eb7a:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804eb7e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eb81:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eb83:	je	0x804eb8c [IMM <CODEREF>]
	je	.label_557
	# 0x804eb85:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804eb8a:	jmp	0x804ebba [IMM <CODEREF>]
	jmp	.label_555
	# 0x804eb8c:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_557:
	movzbl	-0xa(%ebp), %eax
	# 0x804eb90:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eb93:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eb95:	je	0x804eba4 [IMM <CODEREF>]
	je	.label_556
	# 0x804eb97:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804eb9b:	je	0x804eba4 [IMM <CODEREF>]
	je	.label_556
	# 0x804eb9d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804eba2:	jmp	0x804ebba [IMM <CODEREF>]
	jmp	.label_555
	# 0x804eba4:	subl	$4, %esp [IMM, REG]
.label_556:
	subl	$4, %esp
	# 0x804eba7:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ebac:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ebaf:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ebb2:	calll	0x804e6a6 [IMM <CODEREF>]
	calll	cmp_ctime
	# 0x804ebb7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ebba:	leave	 []
.label_555:
	leave	
	# 0x804ebbb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ebbc

	# 0x804ebbc:	pushl	%ebp [REG]
	.globl xstrcoll_mtime
	.type xstrcoll_mtime, @function
xstrcoll_mtime:
	pushl	%ebp
	# 0x804ebbd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ebbf:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ebc2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ebc5:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ebca:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ebcd:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ebd0:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ebd5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ebd8:	leave	 []
	leave	
	# 0x804ebd9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ebda

	# 0x804ebda:	pushl	%ebp [REG]
	.globl strcmp_mtime
	.type strcmp_mtime, @function
strcmp_mtime:
	pushl	%ebp
	# 0x804ebdb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ebdd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ebe0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ebe3:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ebe8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ebeb:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ebee:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ebf3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ebf6:	leave	 []
	leave	
	# 0x804ebf7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ebf8

	# 0x804ebf8:	pushl	%ebp [REG]
	.globl rev_xstrcoll_mtime
	.type rev_xstrcoll_mtime, @function
rev_xstrcoll_mtime:
	pushl	%ebp
	# 0x804ebf9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ebfb:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ebfe:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ec01:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ec06:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ec09:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ec0c:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ec11:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ec14:	leave	 []
	leave	
	# 0x804ec15:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ec16

	# 0x804ec16:	pushl	%ebp [REG]
	.globl rev_strcmp_mtime
	.type rev_strcmp_mtime, @function
rev_strcmp_mtime:
	pushl	%ebp
	# 0x804ec17:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ec19:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ec1c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ec1f:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ec24:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ec27:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ec2a:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ec2f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ec32:	leave	 []
	leave	
	# 0x804ec33:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ec34

	# 0x804ec34:	pushl	%ebp [REG]
	.globl xstrcoll_df_mtime
	.type xstrcoll_df_mtime, @function
xstrcoll_df_mtime:
	pushl	%ebp
	# 0x804ec35:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ec37:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ec3a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ec3d:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ec42:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ec45:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ec48:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ec4b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ec50:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ec53:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ec56:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ec5a:	je	0x804ec6e [IMM <CODEREF>]
	je	.label_558
	# 0x804ec5c:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ec60:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ec63:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ec65:	je	0x804ec6e [IMM <CODEREF>]
	je	.label_558
	# 0x804ec67:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ec6c:	jmp	0x804ec9c [IMM <CODEREF>]
	jmp	.label_559
	# 0x804ec6e:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_558:
	movzbl	-0xa(%ebp), %eax
	# 0x804ec72:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ec75:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ec77:	je	0x804ec86 [IMM <CODEREF>]
	je	.label_560
	# 0x804ec79:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ec7d:	je	0x804ec86 [IMM <CODEREF>]
	je	.label_560
	# 0x804ec7f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ec84:	jmp	0x804ec9c [IMM <CODEREF>]
	jmp	.label_559
	# 0x804ec86:	subl	$4, %esp [IMM, REG]
.label_560:
	subl	$4, %esp
	# 0x804ec89:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ec8e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ec91:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ec94:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ec99:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ec9c:	leave	 []
.label_559:
	leave	
	# 0x804ec9d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ec9e

	# 0x804ec9e:	pushl	%ebp [REG]
	.globl strcmp_df_mtime
	.type strcmp_df_mtime, @function
strcmp_df_mtime:
	pushl	%ebp
	# 0x804ec9f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804eca1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804eca4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eca7:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ecac:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ecaf:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ecb2:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ecb5:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ecba:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ecbd:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ecc0:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ecc4:	je	0x804ecd8 [IMM <CODEREF>]
	je	.label_563
	# 0x804ecc6:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ecca:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eccd:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eccf:	je	0x804ecd8 [IMM <CODEREF>]
	je	.label_563
	# 0x804ecd1:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ecd6:	jmp	0x804ed06 [IMM <CODEREF>]
	jmp	.label_561
	# 0x804ecd8:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_563:
	movzbl	-0xa(%ebp), %eax
	# 0x804ecdc:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ecdf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ece1:	je	0x804ecf0 [IMM <CODEREF>]
	je	.label_562
	# 0x804ece3:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ece7:	je	0x804ecf0 [IMM <CODEREF>]
	je	.label_562
	# 0x804ece9:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ecee:	jmp	0x804ed06 [IMM <CODEREF>]
	jmp	.label_561
	# 0x804ecf0:	subl	$4, %esp [IMM, REG]
.label_562:
	subl	$4, %esp
	# 0x804ecf3:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ecf8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ecfb:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ecfe:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ed03:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ed06:	leave	 []
.label_561:
	leave	
	# 0x804ed07:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ed08

	# 0x804ed08:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_mtime
	.type rev_xstrcoll_df_mtime, @function
rev_xstrcoll_df_mtime:
	pushl	%ebp
	# 0x804ed09:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ed0b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ed0e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ed11:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ed16:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ed19:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ed1c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ed1f:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ed24:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ed27:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ed2a:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ed2e:	je	0x804ed42 [IMM <CODEREF>]
	je	.label_564
	# 0x804ed30:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ed34:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ed37:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ed39:	je	0x804ed42 [IMM <CODEREF>]
	je	.label_564
	# 0x804ed3b:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ed40:	jmp	0x804ed70 [IMM <CODEREF>]
	jmp	.label_566
	# 0x804ed42:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_564:
	movzbl	-0xa(%ebp), %eax
	# 0x804ed46:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ed49:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ed4b:	je	0x804ed5a [IMM <CODEREF>]
	je	.label_565
	# 0x804ed4d:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ed51:	je	0x804ed5a [IMM <CODEREF>]
	je	.label_565
	# 0x804ed53:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ed58:	jmp	0x804ed70 [IMM <CODEREF>]
	jmp	.label_566
	# 0x804ed5a:	subl	$4, %esp [IMM, REG]
.label_565:
	subl	$4, %esp
	# 0x804ed5d:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ed62:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ed65:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ed68:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804ed6d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ed70:	leave	 []
.label_566:
	leave	
	# 0x804ed71:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ed72

	# 0x804ed72:	pushl	%ebp [REG]
	.globl rev_strcmp_df_mtime
	.type rev_strcmp_df_mtime, @function
rev_strcmp_df_mtime:
	pushl	%ebp
	# 0x804ed73:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ed75:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ed78:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ed7b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ed80:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ed83:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ed86:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ed89:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ed8e:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ed91:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ed94:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ed98:	je	0x804edac [IMM <CODEREF>]
	je	.label_569
	# 0x804ed9a:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ed9e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eda1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eda3:	je	0x804edac [IMM <CODEREF>]
	je	.label_569
	# 0x804eda5:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804edaa:	jmp	0x804edda [IMM <CODEREF>]
	jmp	.label_567
	# 0x804edac:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_569:
	movzbl	-0xa(%ebp), %eax
	# 0x804edb0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804edb3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804edb5:	je	0x804edc4 [IMM <CODEREF>]
	je	.label_568
	# 0x804edb7:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804edbb:	je	0x804edc4 [IMM <CODEREF>]
	je	.label_568
	# 0x804edbd:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804edc2:	jmp	0x804edda [IMM <CODEREF>]
	jmp	.label_567
	# 0x804edc4:	subl	$4, %esp [IMM, REG]
.label_568:
	subl	$4, %esp
	# 0x804edc7:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804edcc:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804edcf:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804edd2:	calll	0x804e741 [IMM <CODEREF>]
	calll	cmp_mtime
	# 0x804edd7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804edda:	leave	 []
.label_567:
	leave	
	# 0x804eddb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804eddc

	# 0x804eddc:	pushl	%ebp [REG]
	.globl xstrcoll_atime
	.type xstrcoll_atime, @function
xstrcoll_atime:
	pushl	%ebp
	# 0x804eddd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804eddf:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ede2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ede5:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804edea:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eded:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804edf0:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804edf5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804edf8:	leave	 []
	leave	
	# 0x804edf9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804edfa

	# 0x804edfa:	pushl	%ebp [REG]
	.globl strcmp_atime
	.type strcmp_atime, @function
strcmp_atime:
	pushl	%ebp
	# 0x804edfb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804edfd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ee00:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ee03:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ee08:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ee0b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ee0e:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804ee13:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ee16:	leave	 []
	leave	
	# 0x804ee17:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ee18

	# 0x804ee18:	pushl	%ebp [REG]
	.globl rev_xstrcoll_atime
	.type rev_xstrcoll_atime, @function
rev_xstrcoll_atime:
	pushl	%ebp
	# 0x804ee19:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ee1b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ee1e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ee21:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ee26:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ee29:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ee2c:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804ee31:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ee34:	leave	 []
	leave	
	# 0x804ee35:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ee36

	# 0x804ee36:	pushl	%ebp [REG]
	.globl rev_strcmp_atime
	.type rev_strcmp_atime, @function
rev_strcmp_atime:
	pushl	%ebp
	# 0x804ee37:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ee39:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ee3c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ee3f:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ee44:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ee47:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ee4a:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804ee4f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ee52:	leave	 []
	leave	
	# 0x804ee53:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ee54

	# 0x804ee54:	pushl	%ebp [REG]
	.globl xstrcoll_df_atime
	.type xstrcoll_df_atime, @function
xstrcoll_df_atime:
	pushl	%ebp
	# 0x804ee55:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ee57:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ee5a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ee5d:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ee62:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ee65:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ee68:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ee6b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ee70:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ee73:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ee76:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ee7a:	je	0x804ee8e [IMM <CODEREF>]
	je	.label_570
	# 0x804ee7c:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ee80:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ee83:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ee85:	je	0x804ee8e [IMM <CODEREF>]
	je	.label_570
	# 0x804ee87:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ee8c:	jmp	0x804eebc [IMM <CODEREF>]
	jmp	.label_571
	# 0x804ee8e:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_570:
	movzbl	-0xa(%ebp), %eax
	# 0x804ee92:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ee95:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ee97:	je	0x804eea6 [IMM <CODEREF>]
	je	.label_572
	# 0x804ee99:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ee9d:	je	0x804eea6 [IMM <CODEREF>]
	je	.label_572
	# 0x804ee9f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804eea4:	jmp	0x804eebc [IMM <CODEREF>]
	jmp	.label_571
	# 0x804eea6:	subl	$4, %esp [IMM, REG]
.label_572:
	subl	$4, %esp
	# 0x804eea9:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804eeae:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eeb1:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eeb4:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804eeb9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804eebc:	leave	 []
.label_571:
	leave	
	# 0x804eebd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804eebe

	# 0x804eebe:	pushl	%ebp [REG]
	.globl strcmp_df_atime
	.type strcmp_df_atime, @function
strcmp_df_atime:
	pushl	%ebp
	# 0x804eebf:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804eec1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804eec4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804eec7:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eecc:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eecf:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804eed2:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eed5:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804eeda:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804eedd:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804eee0:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804eee4:	je	0x804eef8 [IMM <CODEREF>]
	je	.label_575
	# 0x804eee6:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804eeea:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eeed:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804eeef:	je	0x804eef8 [IMM <CODEREF>]
	je	.label_575
	# 0x804eef1:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804eef6:	jmp	0x804ef26 [IMM <CODEREF>]
	jmp	.label_573
	# 0x804eef8:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_575:
	movzbl	-0xa(%ebp), %eax
	# 0x804eefc:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804eeff:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ef01:	je	0x804ef10 [IMM <CODEREF>]
	je	.label_574
	# 0x804ef03:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ef07:	je	0x804ef10 [IMM <CODEREF>]
	je	.label_574
	# 0x804ef09:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ef0e:	jmp	0x804ef26 [IMM <CODEREF>]
	jmp	.label_573
	# 0x804ef10:	subl	$4, %esp [IMM, REG]
.label_574:
	subl	$4, %esp
	# 0x804ef13:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804ef18:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ef1b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ef1e:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804ef23:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ef26:	leave	 []
.label_573:
	leave	
	# 0x804ef27:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ef28

	# 0x804ef28:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_atime
	.type rev_xstrcoll_df_atime, @function
rev_xstrcoll_df_atime:
	pushl	%ebp
	# 0x804ef29:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ef2b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ef2e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ef31:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ef36:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ef39:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804ef3c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ef3f:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804ef44:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804ef47:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804ef4a:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804ef4e:	je	0x804ef62 [IMM <CODEREF>]
	je	.label_576
	# 0x804ef50:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804ef54:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ef57:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ef59:	je	0x804ef62 [IMM <CODEREF>]
	je	.label_576
	# 0x804ef5b:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804ef60:	jmp	0x804ef90 [IMM <CODEREF>]
	jmp	.label_578
	# 0x804ef62:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_576:
	movzbl	-0xa(%ebp), %eax
	# 0x804ef66:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ef69:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ef6b:	je	0x804ef7a [IMM <CODEREF>]
	je	.label_577
	# 0x804ef6d:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804ef71:	je	0x804ef7a [IMM <CODEREF>]
	je	.label_577
	# 0x804ef73:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804ef78:	jmp	0x804ef90 [IMM <CODEREF>]
	jmp	.label_578
	# 0x804ef7a:	subl	$4, %esp [IMM, REG]
.label_577:
	subl	$4, %esp
	# 0x804ef7d:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804ef82:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ef85:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804ef88:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804ef8d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ef90:	leave	 []
.label_578:
	leave	
	# 0x804ef91:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804ef92

	# 0x804ef92:	pushl	%ebp [REG]
	.globl rev_strcmp_df_atime
	.type rev_strcmp_df_atime, @function
rev_strcmp_df_atime:
	pushl	%ebp
	# 0x804ef93:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804ef95:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804ef98:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804ef9b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804efa0:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804efa3:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804efa6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804efa9:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804efae:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804efb1:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804efb4:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804efb8:	je	0x804efcc [IMM <CODEREF>]
	je	.label_581
	# 0x804efba:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804efbe:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804efc1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804efc3:	je	0x804efcc [IMM <CODEREF>]
	je	.label_581
	# 0x804efc5:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804efca:	jmp	0x804effa [IMM <CODEREF>]
	jmp	.label_579
	# 0x804efcc:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_581:
	movzbl	-0xa(%ebp), %eax
	# 0x804efd0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804efd3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804efd5:	je	0x804efe4 [IMM <CODEREF>]
	je	.label_580
	# 0x804efd7:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804efdb:	je	0x804efe4 [IMM <CODEREF>]
	je	.label_580
	# 0x804efdd:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804efe2:	jmp	0x804effa [IMM <CODEREF>]
	jmp	.label_579
	# 0x804efe4:	subl	$4, %esp [IMM, REG]
.label_580:
	subl	$4, %esp
	# 0x804efe7:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804efec:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804efef:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804eff2:	calll	0x804e7dc [IMM <CODEREF>]
	calll	cmp_atime
	# 0x804eff7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804effa:	leave	 []
.label_579:
	leave	
	# 0x804effb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804effc

	# 0x804effc:	pushl	%ebp [REG]
	.globl xstrcoll_size
	.type xstrcoll_size, @function
xstrcoll_size:
	pushl	%ebp
	# 0x804effd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804efff:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f002:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f005:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f00a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f00d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f010:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f015:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f018:	leave	 []
	leave	
	# 0x804f019:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f01a

	# 0x804f01a:	pushl	%ebp [REG]
	.globl strcmp_size
	.type strcmp_size, @function
strcmp_size:
	pushl	%ebp
	# 0x804f01b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f01d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f020:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f023:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f028:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f02b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f02e:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f033:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f036:	leave	 []
	leave	
	# 0x804f037:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f038

	# 0x804f038:	pushl	%ebp [REG]
	.globl rev_xstrcoll_size
	.type rev_xstrcoll_size, @function
rev_xstrcoll_size:
	pushl	%ebp
	# 0x804f039:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f03b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f03e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f041:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f046:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f049:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f04c:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f051:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f054:	leave	 []
	leave	
	# 0x804f055:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f056

	# 0x804f056:	pushl	%ebp [REG]
	.globl rev_strcmp_size
	.type rev_strcmp_size, @function
rev_strcmp_size:
	pushl	%ebp
	# 0x804f057:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f059:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f05c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f05f:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f064:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f067:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f06a:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f06f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f072:	leave	 []
	leave	
	# 0x804f073:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f074

	# 0x804f074:	pushl	%ebp [REG]
	.globl xstrcoll_df_size
	.type xstrcoll_df_size, @function
xstrcoll_df_size:
	pushl	%ebp
	# 0x804f075:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f077:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f07a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f07d:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f082:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f085:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f088:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f08b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f090:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f093:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f096:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f09a:	je	0x804f0ae [IMM <CODEREF>]
	je	.label_582
	# 0x804f09c:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f0a0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f0a3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f0a5:	je	0x804f0ae [IMM <CODEREF>]
	je	.label_582
	# 0x804f0a7:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f0ac:	jmp	0x804f0dc [IMM <CODEREF>]
	jmp	.label_583
	# 0x804f0ae:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_582:
	movzbl	-0xa(%ebp), %eax
	# 0x804f0b2:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f0b5:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f0b7:	je	0x804f0c6 [IMM <CODEREF>]
	je	.label_584
	# 0x804f0b9:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f0bd:	je	0x804f0c6 [IMM <CODEREF>]
	je	.label_584
	# 0x804f0bf:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f0c4:	jmp	0x804f0dc [IMM <CODEREF>]
	jmp	.label_583
	# 0x804f0c6:	subl	$4, %esp [IMM, REG]
.label_584:
	subl	$4, %esp
	# 0x804f0c9:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f0ce:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f0d1:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f0d4:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f0d9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f0dc:	leave	 []
.label_583:
	leave	
	# 0x804f0dd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f0de

	# 0x804f0de:	pushl	%ebp [REG]
	.globl strcmp_df_size
	.type strcmp_df_size, @function
strcmp_df_size:
	pushl	%ebp
	# 0x804f0df:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f0e1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f0e4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f0e7:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f0ec:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f0ef:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f0f2:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f0f5:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f0fa:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f0fd:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f100:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f104:	je	0x804f118 [IMM <CODEREF>]
	je	.label_587
	# 0x804f106:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f10a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f10d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f10f:	je	0x804f118 [IMM <CODEREF>]
	je	.label_587
	# 0x804f111:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f116:	jmp	0x804f146 [IMM <CODEREF>]
	jmp	.label_585
	# 0x804f118:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_587:
	movzbl	-0xa(%ebp), %eax
	# 0x804f11c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f11f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f121:	je	0x804f130 [IMM <CODEREF>]
	je	.label_586
	# 0x804f123:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f127:	je	0x804f130 [IMM <CODEREF>]
	je	.label_586
	# 0x804f129:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f12e:	jmp	0x804f146 [IMM <CODEREF>]
	jmp	.label_585
	# 0x804f130:	subl	$4, %esp [IMM, REG]
.label_586:
	subl	$4, %esp
	# 0x804f133:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f138:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f13b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f13e:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f143:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f146:	leave	 []
.label_585:
	leave	
	# 0x804f147:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f148

	# 0x804f148:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_size
	.type rev_xstrcoll_df_size, @function
rev_xstrcoll_df_size:
	pushl	%ebp
	# 0x804f149:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f14b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f14e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f151:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f156:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f159:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f15c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f15f:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f164:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f167:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f16a:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f16e:	je	0x804f182 [IMM <CODEREF>]
	je	.label_588
	# 0x804f170:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f174:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f177:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f179:	je	0x804f182 [IMM <CODEREF>]
	je	.label_588
	# 0x804f17b:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f180:	jmp	0x804f1b0 [IMM <CODEREF>]
	jmp	.label_590
	# 0x804f182:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_588:
	movzbl	-0xa(%ebp), %eax
	# 0x804f186:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f189:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f18b:	je	0x804f19a [IMM <CODEREF>]
	je	.label_589
	# 0x804f18d:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f191:	je	0x804f19a [IMM <CODEREF>]
	je	.label_589
	# 0x804f193:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f198:	jmp	0x804f1b0 [IMM <CODEREF>]
	jmp	.label_590
	# 0x804f19a:	subl	$4, %esp [IMM, REG]
.label_589:
	subl	$4, %esp
	# 0x804f19d:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f1a2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f1a5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f1a8:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f1ad:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f1b0:	leave	 []
.label_590:
	leave	
	# 0x804f1b1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f1b2

	# 0x804f1b2:	pushl	%ebp [REG]
	.globl rev_strcmp_df_size
	.type rev_strcmp_df_size, @function
rev_strcmp_df_size:
	pushl	%ebp
	# 0x804f1b3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f1b5:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f1b8:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f1bb:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f1c0:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f1c3:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f1c6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f1c9:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f1ce:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f1d1:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f1d4:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f1d8:	je	0x804f1ec [IMM <CODEREF>]
	je	.label_593
	# 0x804f1da:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f1de:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f1e1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f1e3:	je	0x804f1ec [IMM <CODEREF>]
	je	.label_593
	# 0x804f1e5:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f1ea:	jmp	0x804f21a [IMM <CODEREF>]
	jmp	.label_591
	# 0x804f1ec:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_593:
	movzbl	-0xa(%ebp), %eax
	# 0x804f1f0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f1f3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f1f5:	je	0x804f204 [IMM <CODEREF>]
	je	.label_592
	# 0x804f1f7:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f1fb:	je	0x804f204 [IMM <CODEREF>]
	je	.label_592
	# 0x804f1fd:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f202:	jmp	0x804f21a [IMM <CODEREF>]
	jmp	.label_591
	# 0x804f204:	subl	$4, %esp [IMM, REG]
.label_592:
	subl	$4, %esp
	# 0x804f207:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f20c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f20f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f212:	calll	0x804e877 [IMM <CODEREF>]
	calll	cmp_size
	# 0x804f217:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f21a:	leave	 []
.label_591:
	leave	
	# 0x804f21b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f21c

	# 0x804f21c:	pushl	%ebp [REG]
	.globl xstrcoll_name
	.type xstrcoll_name, @function
xstrcoll_name:
	pushl	%ebp
	# 0x804f21d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f21f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f222:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f225:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f22a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f22d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f230:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f235:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f238:	leave	 []
	leave	
	# 0x804f239:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f23a

	# 0x804f23a:	pushl	%ebp [REG]
	.globl strcmp_name
	.type strcmp_name, @function
strcmp_name:
	pushl	%ebp
	# 0x804f23b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f23d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f240:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f243:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f248:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f24b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f24e:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f253:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f256:	leave	 []
	leave	
	# 0x804f257:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f258

	# 0x804f258:	pushl	%ebp [REG]
	.globl rev_xstrcoll_name
	.type rev_xstrcoll_name, @function
rev_xstrcoll_name:
	pushl	%ebp
	# 0x804f259:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f25b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f25e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f261:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f266:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f269:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f26c:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f271:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f274:	leave	 []
	leave	
	# 0x804f275:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f276

	# 0x804f276:	pushl	%ebp [REG]
	.globl rev_strcmp_name
	.type rev_strcmp_name, @function
rev_strcmp_name:
	pushl	%ebp
	# 0x804f277:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f279:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f27c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f27f:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f284:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f287:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f28a:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f28f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f292:	leave	 []
	leave	
	# 0x804f293:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f294

	# 0x804f294:	pushl	%ebp [REG]
	.globl xstrcoll_df_name
	.type xstrcoll_df_name, @function
xstrcoll_df_name:
	pushl	%ebp
	# 0x804f295:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f297:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f29a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f29d:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f2a2:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f2a5:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f2a8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f2ab:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f2b0:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f2b3:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f2b6:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f2ba:	je	0x804f2ce [IMM <CODEREF>]
	je	.label_594
	# 0x804f2bc:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f2c0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f2c3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f2c5:	je	0x804f2ce [IMM <CODEREF>]
	je	.label_594
	# 0x804f2c7:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f2cc:	jmp	0x804f2fc [IMM <CODEREF>]
	jmp	.label_595
	# 0x804f2ce:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_594:
	movzbl	-0xa(%ebp), %eax
	# 0x804f2d2:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f2d5:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f2d7:	je	0x804f2e6 [IMM <CODEREF>]
	je	.label_596
	# 0x804f2d9:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f2dd:	je	0x804f2e6 [IMM <CODEREF>]
	je	.label_596
	# 0x804f2df:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f2e4:	jmp	0x804f2fc [IMM <CODEREF>]
	jmp	.label_595
	# 0x804f2e6:	subl	$4, %esp [IMM, REG]
.label_596:
	subl	$4, %esp
	# 0x804f2e9:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f2ee:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f2f1:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f2f4:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f2f9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f2fc:	leave	 []
.label_595:
	leave	
	# 0x804f2fd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f2fe

	# 0x804f2fe:	pushl	%ebp [REG]
	.globl strcmp_df_name
	.type strcmp_df_name, @function
strcmp_df_name:
	pushl	%ebp
	# 0x804f2ff:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f301:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f304:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f307:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f30c:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f30f:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f312:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f315:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f31a:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f31d:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f320:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f324:	je	0x804f338 [IMM <CODEREF>]
	je	.label_599
	# 0x804f326:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f32a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f32d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f32f:	je	0x804f338 [IMM <CODEREF>]
	je	.label_599
	# 0x804f331:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f336:	jmp	0x804f366 [IMM <CODEREF>]
	jmp	.label_597
	# 0x804f338:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_599:
	movzbl	-0xa(%ebp), %eax
	# 0x804f33c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f33f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f341:	je	0x804f350 [IMM <CODEREF>]
	je	.label_598
	# 0x804f343:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f347:	je	0x804f350 [IMM <CODEREF>]
	je	.label_598
	# 0x804f349:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f34e:	jmp	0x804f366 [IMM <CODEREF>]
	jmp	.label_597
	# 0x804f350:	subl	$4, %esp [IMM, REG]
.label_598:
	subl	$4, %esp
	# 0x804f353:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f358:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f35b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f35e:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f363:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f366:	leave	 []
.label_597:
	leave	
	# 0x804f367:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f368

	# 0x804f368:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_name
	.type rev_xstrcoll_df_name, @function
rev_xstrcoll_df_name:
	pushl	%ebp
	# 0x804f369:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f36b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f36e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f371:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f376:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f379:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f37c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f37f:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f384:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f387:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f38a:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f38e:	je	0x804f3a2 [IMM <CODEREF>]
	je	.label_600
	# 0x804f390:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f394:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f397:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f399:	je	0x804f3a2 [IMM <CODEREF>]
	je	.label_600
	# 0x804f39b:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f3a0:	jmp	0x804f3d0 [IMM <CODEREF>]
	jmp	.label_602
	# 0x804f3a2:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_600:
	movzbl	-0xa(%ebp), %eax
	# 0x804f3a6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f3a9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f3ab:	je	0x804f3ba [IMM <CODEREF>]
	je	.label_601
	# 0x804f3ad:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f3b1:	je	0x804f3ba [IMM <CODEREF>]
	je	.label_601
	# 0x804f3b3:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f3b8:	jmp	0x804f3d0 [IMM <CODEREF>]
	jmp	.label_602
	# 0x804f3ba:	subl	$4, %esp [IMM, REG]
.label_601:
	subl	$4, %esp
	# 0x804f3bd:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f3c2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f3c5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f3c8:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f3cd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f3d0:	leave	 []
.label_602:
	leave	
	# 0x804f3d1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f3d2

	# 0x804f3d2:	pushl	%ebp [REG]
	.globl rev_strcmp_df_name
	.type rev_strcmp_df_name, @function
rev_strcmp_df_name:
	pushl	%ebp
	# 0x804f3d3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f3d5:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f3d8:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f3db:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f3e0:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f3e3:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f3e6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f3e9:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f3ee:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f3f1:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f3f4:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f3f8:	je	0x804f40c [IMM <CODEREF>]
	je	.label_605
	# 0x804f3fa:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f3fe:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f401:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f403:	je	0x804f40c [IMM <CODEREF>]
	je	.label_605
	# 0x804f405:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f40a:	jmp	0x804f43a [IMM <CODEREF>]
	jmp	.label_603
	# 0x804f40c:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_605:
	movzbl	-0xa(%ebp), %eax
	# 0x804f410:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f413:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f415:	je	0x804f424 [IMM <CODEREF>]
	je	.label_604
	# 0x804f417:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f41b:	je	0x804f424 [IMM <CODEREF>]
	je	.label_604
	# 0x804f41d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f422:	jmp	0x804f43a [IMM <CODEREF>]
	jmp	.label_603
	# 0x804f424:	subl	$4, %esp [IMM, REG]
.label_604:
	subl	$4, %esp
	# 0x804f427:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f42c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f42f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f432:	calll	0x804e8f7 [IMM <CODEREF>]
	calll	cmp_name
	# 0x804f437:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f43a:	leave	 []
.label_603:
	leave	
	# 0x804f43b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f43c

	# 0x804f43c:	pushl	%ebp [REG]
	.globl xstrcoll_extension
	.type xstrcoll_extension, @function
xstrcoll_extension:
	pushl	%ebp
	# 0x804f43d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f43f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f442:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f445:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f44a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f44d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f450:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f455:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f458:	leave	 []
	leave	
	# 0x804f459:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f45a

	# 0x804f45a:	pushl	%ebp [REG]
	.globl strcmp_extension
	.type strcmp_extension, @function
strcmp_extension:
	pushl	%ebp
	# 0x804f45b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f45d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f460:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f463:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f468:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f46b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f46e:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f473:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f476:	leave	 []
	leave	
	# 0x804f477:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f478

	# 0x804f478:	pushl	%ebp [REG]
	.globl rev_xstrcoll_extension
	.type rev_xstrcoll_extension, @function
rev_xstrcoll_extension:
	pushl	%ebp
	# 0x804f479:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f47b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f47e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f481:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f486:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f489:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f48c:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f491:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f494:	leave	 []
	leave	
	# 0x804f495:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f496

	# 0x804f496:	pushl	%ebp [REG]
	.globl rev_strcmp_extension
	.type rev_strcmp_extension, @function
rev_strcmp_extension:
	pushl	%ebp
	# 0x804f497:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f499:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f49c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f49f:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f4a4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f4a7:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f4aa:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f4af:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f4b2:	leave	 []
	leave	
	# 0x804f4b3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f4b4

	# 0x804f4b4:	pushl	%ebp [REG]
	.globl xstrcoll_df_extension
	.type xstrcoll_df_extension, @function
xstrcoll_df_extension:
	pushl	%ebp
	# 0x804f4b5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f4b7:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f4ba:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f4bd:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f4c2:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f4c5:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f4c8:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f4cb:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f4d0:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f4d3:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f4d6:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f4da:	je	0x804f4ee [IMM <CODEREF>]
	je	.label_606
	# 0x804f4dc:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f4e0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f4e3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f4e5:	je	0x804f4ee [IMM <CODEREF>]
	je	.label_606
	# 0x804f4e7:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f4ec:	jmp	0x804f51c [IMM <CODEREF>]
	jmp	.label_607
	# 0x804f4ee:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_606:
	movzbl	-0xa(%ebp), %eax
	# 0x804f4f2:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f4f5:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f4f7:	je	0x804f506 [IMM <CODEREF>]
	je	.label_608
	# 0x804f4f9:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f4fd:	je	0x804f506 [IMM <CODEREF>]
	je	.label_608
	# 0x804f4ff:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f504:	jmp	0x804f51c [IMM <CODEREF>]
	jmp	.label_607
	# 0x804f506:	subl	$4, %esp [IMM, REG]
.label_608:
	subl	$4, %esp
	# 0x804f509:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f50e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f511:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f514:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f519:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f51c:	leave	 []
.label_607:
	leave	
	# 0x804f51d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f51e

	# 0x804f51e:	pushl	%ebp [REG]
	.globl strcmp_df_extension
	.type strcmp_df_extension, @function
strcmp_df_extension:
	pushl	%ebp
	# 0x804f51f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f521:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f524:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f527:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f52c:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f52f:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f532:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f535:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f53a:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f53d:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f540:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f544:	je	0x804f558 [IMM <CODEREF>]
	je	.label_611
	# 0x804f546:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f54a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f54d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f54f:	je	0x804f558 [IMM <CODEREF>]
	je	.label_611
	# 0x804f551:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f556:	jmp	0x804f586 [IMM <CODEREF>]
	jmp	.label_609
	# 0x804f558:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_611:
	movzbl	-0xa(%ebp), %eax
	# 0x804f55c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f55f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f561:	je	0x804f570 [IMM <CODEREF>]
	je	.label_610
	# 0x804f563:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f567:	je	0x804f570 [IMM <CODEREF>]
	je	.label_610
	# 0x804f569:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f56e:	jmp	0x804f586 [IMM <CODEREF>]
	jmp	.label_609
	# 0x804f570:	subl	$4, %esp [IMM, REG]
.label_610:
	subl	$4, %esp
	# 0x804f573:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f578:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f57b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f57e:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f583:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f586:	leave	 []
.label_609:
	leave	
	# 0x804f587:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f588

	# 0x804f588:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_extension
	.type rev_xstrcoll_df_extension, @function
rev_xstrcoll_df_extension:
	pushl	%ebp
	# 0x804f589:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f58b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f58e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f591:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f596:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f599:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f59c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f59f:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f5a4:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f5a7:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f5aa:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f5ae:	je	0x804f5c2 [IMM <CODEREF>]
	je	.label_612
	# 0x804f5b0:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f5b4:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f5b7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f5b9:	je	0x804f5c2 [IMM <CODEREF>]
	je	.label_612
	# 0x804f5bb:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f5c0:	jmp	0x804f5f0 [IMM <CODEREF>]
	jmp	.label_614
	# 0x804f5c2:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_612:
	movzbl	-0xa(%ebp), %eax
	# 0x804f5c6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f5c9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f5cb:	je	0x804f5da [IMM <CODEREF>]
	je	.label_613
	# 0x804f5cd:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f5d1:	je	0x804f5da [IMM <CODEREF>]
	je	.label_613
	# 0x804f5d3:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f5d8:	jmp	0x804f5f0 [IMM <CODEREF>]
	jmp	.label_614
	# 0x804f5da:	subl	$4, %esp [IMM, REG]
.label_613:
	subl	$4, %esp
	# 0x804f5dd:	pushl	$0x804e5fe [IMM <CODEREF>]
	pushl	$xstrcoll
	# 0x804f5e2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f5e5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f5e8:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f5ed:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f5f0:	leave	 []
.label_614:
	leave	
	# 0x804f5f1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f5f2

	# 0x804f5f2:	pushl	%ebp [REG]
	.globl rev_strcmp_df_extension
	.type rev_strcmp_df_extension, @function
rev_strcmp_df_extension:
	pushl	%ebp
	# 0x804f5f3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f5f5:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f5f8:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f5fb:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f600:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f603:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f606:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f609:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f60e:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f611:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f614:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f618:	je	0x804f62c [IMM <CODEREF>]
	je	.label_617
	# 0x804f61a:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f61e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f621:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f623:	je	0x804f62c [IMM <CODEREF>]
	je	.label_617
	# 0x804f625:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f62a:	jmp	0x804f65a [IMM <CODEREF>]
	jmp	.label_615
	# 0x804f62c:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_617:
	movzbl	-0xa(%ebp), %eax
	# 0x804f630:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f633:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f635:	je	0x804f644 [IMM <CODEREF>]
	je	.label_616
	# 0x804f637:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f63b:	je	0x804f644 [IMM <CODEREF>]
	je	.label_616
	# 0x804f63d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f642:	jmp	0x804f65a [IMM <CODEREF>]
	jmp	.label_615
	# 0x804f644:	subl	$4, %esp [IMM, REG]
.label_616:
	subl	$4, %esp
	# 0x804f647:	pushl	$0x8049540 [IMM <CODEREF>]
	pushl	$strcmp
	# 0x804f64c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f64f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f652:	calll	0x804e916 [IMM <CODEREF>]
	calll	cmp_extension
	# 0x804f657:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f65a:	leave	 []
.label_615:
	leave	
	# 0x804f65b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f65c

	# 0x804f65c:	pushl	%ebp [REG]
	.globl cmp_version
	.type cmp_version, @function
cmp_version:
	pushl	%ebp
	# 0x804f65d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f65f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f662:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x804f665:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x804f667:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804f66a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x804f66c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f66f:	pushl	%edx [REG]
	pushl	%edx
	# 0x804f670:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f671:	calll	0x80543c1 [IMM <CODEREF>]
	calll	filevercmp
	# 0x804f676:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f679:	leave	 []
	leave	
	# 0x804f67a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f67b

	# 0x804f67b:	pushl	%ebp [REG]
	.globl xstrcoll_version
	.type xstrcoll_version, @function
xstrcoll_version:
	pushl	%ebp
	# 0x804f67c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f67e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f681:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f684:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f687:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f68a:	calll	0x804f65c [IMM <CODEREF>]
	calll	cmp_version
	# 0x804f68f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f692:	leave	 []
	leave	
	# 0x804f693:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f694

	# 0x804f694:	pushl	%ebp [REG]
	.globl rev_xstrcoll_version
	.type rev_xstrcoll_version, @function
rev_xstrcoll_version:
	pushl	%ebp
	# 0x804f695:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f697:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f69a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f69d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f6a0:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f6a3:	calll	0x804f65c [IMM <CODEREF>]
	calll	cmp_version
	# 0x804f6a8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f6ab:	leave	 []
	leave	
	# 0x804f6ac:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f6ad

	# 0x804f6ad:	pushl	%ebp [REG]
	.globl xstrcoll_df_version
	.type xstrcoll_df_version, @function
xstrcoll_df_version:
	pushl	%ebp
	# 0x804f6ae:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f6b0:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f6b3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f6b6:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f6bb:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f6be:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f6c1:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f6c4:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f6c9:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f6cc:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f6cf:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f6d3:	je	0x804f6e7 [IMM <CODEREF>]
	je	.label_620
	# 0x804f6d5:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f6d9:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f6dc:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f6de:	je	0x804f6e7 [IMM <CODEREF>]
	je	.label_620
	# 0x804f6e0:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f6e5:	jmp	0x804f710 [IMM <CODEREF>]
	jmp	.label_618
	# 0x804f6e7:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_620:
	movzbl	-0xa(%ebp), %eax
	# 0x804f6eb:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f6ee:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f6f0:	je	0x804f6ff [IMM <CODEREF>]
	je	.label_619
	# 0x804f6f2:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f6f6:	je	0x804f6ff [IMM <CODEREF>]
	je	.label_619
	# 0x804f6f8:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f6fd:	jmp	0x804f710 [IMM <CODEREF>]
	jmp	.label_618
	# 0x804f6ff:	subl	$8, %esp [IMM, REG]
.label_619:
	subl	$8, %esp
	# 0x804f702:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f705:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f708:	calll	0x804f65c [IMM <CODEREF>]
	calll	cmp_version
	# 0x804f70d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f710:	leave	 []
.label_618:
	leave	
	# 0x804f711:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f712

	# 0x804f712:	pushl	%ebp [REG]
	.globl rev_xstrcoll_df_version
	.type rev_xstrcoll_df_version, @function
rev_xstrcoll_df_version:
	pushl	%ebp
	# 0x804f713:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f715:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f718:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f71b:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f720:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f723:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x804f726:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f729:	calll	0x804e301 [IMM <CODEREF>]
	calll	is_directory
	# 0x804f72e:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x804f731:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x804f734:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x804f738:	je	0x804f74c [IMM <CODEREF>]
	je	.label_623
	# 0x804f73a:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x804f73e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f741:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f743:	je	0x804f74c [IMM <CODEREF>]
	je	.label_623
	# 0x804f745:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x804f74a:	jmp	0x804f775 [IMM <CODEREF>]
	jmp	.label_621
	# 0x804f74c:	movzbl	-0xa(%ebp), %eax [MEM, REG]
.label_623:
	movzbl	-0xa(%ebp), %eax
	# 0x804f750:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804f753:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f755:	je	0x804f764 [IMM <CODEREF>]
	je	.label_622
	# 0x804f757:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x804f75b:	je	0x804f764 [IMM <CODEREF>]
	je	.label_622
	# 0x804f75d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x804f762:	jmp	0x804f775 [IMM <CODEREF>]
	jmp	.label_621
	# 0x804f764:	subl	$8, %esp [IMM, REG]
.label_622:
	subl	$8, %esp
	# 0x804f767:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804f76a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804f76d:	calll	0x804f65c [IMM <CODEREF>]
	calll	cmp_version
	# 0x804f772:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f775:	leave	 []
.label_621:
	leave	
	# 0x804f776:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f777

	# 0x804f777:	pushl	%ebp [REG]
	.globl initialize_ordering_vector
	.type initialize_ordering_vector, @function
initialize_ordering_vector:
	pushl	%ebp
	# 0x804f778:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f77a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804f77b:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x804f77e:	movl	$0, -8(%ebp) [IMM, MEM]
	movl	$0, -8(%ebp)
	# 0x804f785:	jmp	0x804f7af [IMM <CODEREF>]
	jmp	.label_625
	# 0x804f787:	movl	0x806a3d4, %eax [MEM, REG]
.label_624:
	movl	sorted_file,  %eax
	# 0x804f78c:	movl	-8(%ebp), %edx [MEM, REG]
	movl	-8(%ebp), %edx
	# 0x804f78f:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804f792:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804f794:	movl	0x806a3c4, %ecx [MEM, REG]
	movl	cwd_file,  %ecx
	# 0x804f79a:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x804f79d:	shll	$3, %eax [IMM, REG]
	shll	$3, %eax
	# 0x804f7a0:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x804f7a2:	shll	$4, %ebx [IMM, REG]
	shll	$4, %ebx
	# 0x804f7a5:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x804f7a7:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804f7a9:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x804f7ab:	addl	$1, -8(%ebp) [IMM, MEM]
	addl	$1, -8(%ebp)
	# 0x804f7af:	movl	0x806a3cc, %eax [MEM, REG]
.label_625:
	movl	cwd_n_used,  %eax
	# 0x804f7b4:	cmpl	%eax, -8(%ebp) [REG, MEM]
	cmpl	%eax, -8(%ebp)
	# 0x804f7b7:	jb	0x804f787 [IMM <CODEREF>]
	jb	.label_624
	# 0x804f7b9:	nop	 []
	nop	
	# 0x804f7ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f7bd:	popl	%ebx [REG]
	popl	%ebx
	# 0x804f7be:	popl	%ebp [REG]
	popl	%ebp
	# 0x804f7bf:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f7c0

	# 0x804f7c0:	pushl	%ebp [REG]
	.globl sort_files
	.type sort_files, @function
sort_files:
	pushl	%ebp
	# 0x804f7c1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f7c3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804f7c4:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x804f7c7:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804f7cc:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x804f7ce:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804f7d0:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804f7d5:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x804f7d7:	movl	0x806a3d8, %eax [MEM, REG]
	movl	sorted_file_alloc,  %eax
	# 0x804f7dc:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x804f7de:	jbe	0x804f81a [IMM <CODEREF>]
	jbe	.label_626
	# 0x804f7e0:	movl	0x806a3d4, %eax [MEM, REG]
	movl	sorted_file,  %eax
	# 0x804f7e5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f7e8:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f7e9:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x804f7ee:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f7f1:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x804f7f6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f7f9:	pushl	$0xc [IMM]
	pushl	$0xc
	# 0x804f7fb:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f7fc:	calll	0x805c3f0 [IMM <CODEREF>]
	calll	xnmalloc
	# 0x804f801:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f804:	movl	%eax, 0x806a3d4 [REG, MEM]
	movl	%eax, sorted_file
	# 0x804f809:	movl	0x806a3cc, %edx [MEM, REG]
	movl	cwd_n_used,  %edx
	# 0x804f80f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804f811:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x804f813:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804f815:	movl	%eax, 0x806a3d8 [REG, MEM]
	movl	%eax, sorted_file_alloc
	# 0x804f81a:	calll	0x804f777 [IMM <CODEREF>]
.label_626:
	calll	initialize_ordering_vector
	# 0x804f81f:	movl	0x806a424, %eax [MEM, REG]
	movl	sort_type,  %eax
	# 0x804f824:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x804f827:	je	0x804f8d8 [IMM <CODEREF>]
	je	.label_634
	# 0x804f82d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f830:	pushl	$0x806b320 [IMM <DATAREF>]
	pushl	$failed_strcoll
	# 0x804f835:	calll	0x80495f0 [IMM <CODEREF>]
	calll	_setjmp
	# 0x804f83a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f83d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804f83f:	jne	0x804f847 [IMM <CODEREF>]
	jne	.label_632
	# 0x804f841:	movb	$0, -9(%ebp) [IMM, MEM]
	movb	$0, -9(%ebp)
	# 0x804f845:	jmp	0x804f873 [IMM <CODEREF>]
	jmp	.label_627
	# 0x804f847:	movb	$1, -9(%ebp) [IMM, MEM]
.label_632:
	movb	$1, -9(%ebp)
	# 0x804f84b:	movl	0x806a424, %eax [MEM, REG]
	movl	sort_type,  %eax
	# 0x804f850:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x804f853:	jne	0x804f86e [IMM <CODEREF>]
	jne	.label_628
	# 0x804f855:	pushl	$0x806328c [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.8996
	# 0x804f85a:	pushl	$0xee8 [IMM]
	pushl	$0xee8
	# 0x804f85f:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804f864:	pushl	$0x8061520 [IMM <DATAREF>]
	pushl	$label_631
	# 0x804f869:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804f86e:	calll	0x804f777 [IMM <CODEREF>]
.label_628:
	calll	initialize_ordering_vector
	# 0x804f873:	movl	0x806a424, %eax [MEM, REG]
.label_627:
	movl	sort_type,  %eax
	# 0x804f878:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x804f87b:	jne	0x804f884 [IMM <CODEREF>]
	jne	.label_630
	# 0x804f87d:	movl	0x806a420, %eax [MEM, REG]
	movl	time_type,  %eax
	# 0x804f882:	jmp	0x804f889 [IMM <CODEREF>]
	jmp	.label_629
	# 0x804f884:	movl	$0, %eax [IMM, REG]
.label_630:
	movl	$0, %eax
	# 0x804f889:	movl	0x806a424, %edx [MEM, REG]
.label_629:
	movl	sort_type,  %edx
	# 0x804f88f:	leal	0(%eax, %edx), %ebx [MEM, REG]
	leal	0(%eax, %edx), %ebx
	# 0x804f892:	movzbl	-9(%ebp), %ecx [MEM, REG]
	movzbl	-9(%ebp), %ecx
	# 0x804f896:	movzbl	0x806a428, %eax [MEM, REG]
	movzbl	sort_reverse,  %eax
	# 0x804f89d:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x804f8a0:	movzbl	0x806a45a, %eax [MEM, REG]
	movzbl	directories_first,  %eax
	# 0x804f8a7:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x804f8aa:	addl	%ebx, %ebx [REG, REG]
	addl	%ebx, %ebx
	# 0x804f8ac:	addl	%ebx, %ecx [REG, REG]
	addl	%ebx, %ecx
	# 0x804f8ae:	addl	%ecx, %ecx [REG, REG]
	addl	%ecx, %ecx
	# 0x804f8b0:	addl	%ecx, %edx [REG, REG]
	addl	%ecx, %edx
	# 0x804f8b2:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x804f8b4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804f8b6:	movl	0x8061440(, %eax, 4), %ecx [MEM, REG]
	movl	sort_functions(, %eax, 4),  %ecx
	# 0x804f8bd:	movl	0x806a3cc, %edx [MEM, REG]
	movl	cwd_n_used,  %edx
	# 0x804f8c3:	movl	0x806a3d4, %eax [MEM, REG]
	movl	sorted_file,  %eax
	# 0x804f8c8:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804f8cb:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804f8cc:	pushl	%edx [REG]
	pushl	%edx
	# 0x804f8cd:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f8ce:	calll	0x8057ac9 [IMM <CODEREF>]
	calll	mpsort
	# 0x804f8d3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f8d6:	jmp	0x804f8d9 [IMM <CODEREF>]
	jmp	.label_633
	# 0x804f8d8:	nop	 []
.label_634:
	nop	
	# 0x804f8d9:	movl	-4(%ebp), %ebx [MEM, REG]
.label_633:
	movl	-4(%ebp), %ebx
	# 0x804f8dc:	leave	 []
	leave	
	# 0x804f8dd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f8de

	# 0x804f8de:	pushl	%ebp [REG]
	.globl print_current_files
	.type print_current_files, @function
print_current_files:
	pushl	%ebp
	# 0x804f8df:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f8e1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804f8e4:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x804f8e9:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x804f8ec:	ja	0x804f9e6 [IMM <CODEREF>]
	ja	.label_638
	# 0x804f8f2:	movl	0x806153c(, %eax, 4), %eax [MEM, REG]
	movl	label_640(, %eax, 4),  %eax
	# 0x804f8f9:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x804f8fb:	movl	$0, -0xc(%ebp) [IMM, MEM]
.label_2710:
	movl	$0, -0xc(%ebp)
	# 0x804f902:	jmp	0x804f932 [IMM <CODEREF>]
	jmp	.label_636
	# 0x804f904:	movl	0x806a3d4, %eax [MEM, REG]
.label_639:
	movl	sorted_file,  %eax
	# 0x804f909:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x804f90c:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804f90f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804f911:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	.section	.text
	.align	32
	#Procedure 0x804f913
	.globl sub_804f913
	.type sub_804f913, @function
sub_804f913:

	# 0x804f913:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804f916:	pushl	$0 [IMM]
	pushl	$0
	# 0x804f918:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f919:	calll	0x80512f9 [IMM <CODEREF>]
	calll	print_file_name_and_frills
	# 0x804f91e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f921:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f924:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804f926:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804f92b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f92e:	addl	$1, -0xc(%ebp) [IMM, MEM]
	addl	$1, -0xc(%ebp)
	# 0x804f932:	movl	0x806a3cc, %eax [MEM, REG]
.label_636:
	movl	cwd_n_used,  %eax
	# 0x804f937:	cmpl	%eax, -0xc(%ebp) [REG, MEM]
	cmpl	%eax, -0xc(%ebp)
	# 0x804f93a:	jb	0x804f904 [IMM <CODEREF>]
	jb	.label_639
	# 0x804f93c:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	# 0x804f941:	movl	0x806a47c, %eax [MEM, REG]
.label_2711:
	movl	line_length,  %eax
	# 0x804f946:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804f948:	jne	0x804f95c [IMM <CODEREF>]
	jne	.label_635
	.section	.text
	.align	32
	#Procedure 0x804f94a
	.globl sub_804f94a
	.type sub_804f94a, @function
sub_804f94a:

	# 0x804f94a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f94d:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x804f94f:	calll	0x8051eaa [IMM <CODEREF>]
	calll	print_with_separator
	# 0x804f954:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f957:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	# 0x804f95c:	calll	0x8051c5a [IMM <CODEREF>]
.label_635:
	calll	print_many_per_line
	# 0x804f961:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	# 0x804f966:	movl	0x806a47c, %eax [MEM, REG]
.label_2712:
	movl	line_length,  %eax
	# 0x804f96b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804f96d:	jne	0x804f97e [IMM <CODEREF>]
	jne	.label_637
	.section	.text
	.align	32
	#Procedure 0x804f96f
	.globl sub_804f96f
	.type sub_804f96f, @function
sub_804f96f:

	# 0x804f96f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f972:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x804f974:	calll	0x8051eaa [IMM <CODEREF>]
	calll	print_with_separator
	# 0x804f979:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f97c:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	# 0x804f97e:	calll	0x8051d7b [IMM <CODEREF>]
.label_637:
	calll	print_horizontal
	# 0x804f983:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	.section	.text
	.align	32
	#Procedure 0x804f985

	# 0x804f985:	subl	$0xc, %esp [IMM, REG]
	.globl sub_804f985
	.type sub_804f985, @function
sub_804f985:
	subl	$0xc, %esp
	# 0x804f988:	pushl	$0x2c [IMM]
	pushl	$0x2c
	# 0x804f98a:	calll	0x8051eaa [IMM <CODEREF>]
	calll	print_with_separator
	# 0x804f98f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f992:	jmp	0x804f9e6 [IMM <CODEREF>]
	jmp	.label_638
	# 0x804f994:	movl	$0, -0xc(%ebp) [IMM, MEM]
.label_2709:
	movl	$0, -0xc(%ebp)
	# 0x804f99b:	jmp	0x804f9db [IMM <CODEREF>]
	jmp	.label_641
	# 0x804f99d:	calll	0x804a791 [IMM <CODEREF>]
.label_642:
	calll	set_normal_color
	# 0x804f9a2:	movl	0x806a3d4, %eax [MEM, REG]
	movl	sorted_file,  %eax
	# 0x804f9a7:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x804f9aa:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x804f9ad:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804f9af:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	.section	.text
	.align	32
	#Procedure 0x804f9b1
	.globl sub_804f9b1
	.type sub_804f9b1, @function
sub_804f9b1:

	# 0x804f9b1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f9b4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804f9b5:	calll	0x804fdb8 [IMM <CODEREF>]
	calll	print_long_format
	# 0x804f9ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f9bd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804f9c0:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804f9c2:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804f9c7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804f9ca:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x804f9cf:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804f9d2:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804f9d7:	addl	$1, -0xc(%ebp) [IMM, MEM]
	addl	$1, -0xc(%ebp)
	# 0x804f9db:	movl	0x806a3cc, %eax [MEM, REG]
.label_641:
	movl	cwd_n_used,  %eax
	# 0x804f9e0:	cmpl	%eax, -0xc(%ebp) [REG, MEM]
	cmpl	%eax, -0xc(%ebp)
	# 0x804f9e3:	jb	0x804f99d [IMM <CODEREF>]
	jb	.label_642
	# 0x804f9e5:	nop	 []
	nop	
	# 0x804f9e6:	nop	 []
.label_638:
	nop	
	# 0x804f9e7:	leave	 []
	leave	
	# 0x804f9e8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804f9e9

	# 0x804f9e9:	pushl	%ebp [REG]
	.globl align_nstrftime
	.type align_nstrftime, @function
align_nstrftime:
	pushl	%ebp
	# 0x804f9ea:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804f9ec:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x804f9ef:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804f9f2:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x804f9f5:	movzbl	0x806b300, %eax [MEM, REG]
	movzbl	use_abformat,  %eax
	# 0x804f9fc:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804f9fe:	je	0x804fa1f [IMM <CODEREF>]
	je	.label_644
	# 0x804fa00:	movzbl	-0x1c(%ebp), %edx [MEM, REG]
	movzbl	-0x1c(%ebp), %edx
	# 0x804fa04:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x804fa07:	movl	0x10(%eax), %ecx [MEM, REG]
	movl	0x10(%eax), %ecx
	# 0x804fa0a:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x804fa0c:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x804fa0e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804fa10:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x804fa13:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x804fa15:	shll	$7, %eax [IMM, REG]
	shll	$7, %eax
	# 0x804fa18:	addl	$0x806a700, %eax [IMM <DATAREF>, REG]
	addl	$abformat,  %eax
	# 0x804fa1d:	jmp	0x804fa2a [IMM <CODEREF>]
	jmp	.label_643
	# 0x804fa1f:	movzbl	-0x1c(%ebp), %eax [MEM, REG]
.label_644:
	movzbl	-0x1c(%ebp), %eax
	# 0x804fa23:	movl	0x806a2c0(, %eax, 4), %eax [MEM, REG]
	movl	long_time_format(, %eax, 4),  %eax
	# 0x804fa2a:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_643:
	movl	%eax, -0xc(%ebp)
	# 0x804fa2d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fa30:	pushl	0x1c(%ebp) [MEM]
	pushl	0x1c(%ebp)
	# 0x804fa33:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x804fa36:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x804fa39:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x804fa3c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804fa3f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fa42:	calll	0x8057bc6 [IMM <CODEREF>]
	calll	nstrftime
	# 0x804fa47:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804fa4a:	leave	 []
	leave	
	# 0x804fa4b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fa4c

	# 0x804fa4c:	pushl	%ebp [REG]
	.globl long_time_expected_width
	.type long_time_expected_width, @function
long_time_expected_width:
	pushl	%ebp
	# 0x804fa4d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fa4f:	subl	$0x438, %esp [IMM, REG]
	subl	$0x438, %esp
	# 0x804fa55:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804fa5b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804fa5e:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804fa60:	movl	0x806a2cc, %eax [MEM, REG]
	movl	width.9025,  %eax
	# 0x804fa65:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804fa67:	jns	0x804fb03 [IMM <CODEREF>]
	jns	.label_646
	# 0x804fa6d:	movl	$0, -0x42c(%ebp) [IMM, MEM]
	movl	$0, -0x42c(%ebp)
	# 0x804fa77:	movl	0x806a480, %eax [MEM, REG]
	movl	localtz,  %eax
	# 0x804fa7c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804fa7f:	leal	-0x424(%ebp), %edx [MEM, REG]
	leal	-0x424(%ebp), %edx
	# 0x804fa85:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fa86:	leal	-0x42c(%ebp), %edx [MEM, REG]
	leal	-0x42c(%ebp), %edx
	# 0x804fa8c:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fa8d:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fa8e:	calll	0x805de5f [IMM <CODEREF>]
	calll	localtime_rz
	# 0x804fa93:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fa96:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804fa98:	je	0x804faf0 [IMM <CODEREF>]
	je	.label_647
	# 0x804fa9a:	movl	0x806a480, %eax [MEM, REG]
	movl	localtz,  %eax
	# 0x804fa9f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804faa2:	pushl	$0 [IMM]
	pushl	$0
	# 0x804faa4:	pushl	%eax [REG]
	pushl	%eax
	# 0x804faa5:	leal	-0x424(%ebp), %eax [MEM, REG]
	leal	-0x424(%ebp), %eax
	# 0x804faab:	pushl	%eax [REG]
	pushl	%eax
	# 0x804faac:	pushl	$0 [IMM]
	pushl	$0
	# 0x804faae:	pushl	$0x3e9 [IMM]
	pushl	$0x3e9
	# 0x804fab3:	leal	-0x3f5(%ebp), %eax [MEM, REG]
	leal	-0x3f5(%ebp), %eax
	# 0x804fab9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804faba:	calll	0x804f9e9 [IMM <CODEREF>]
	calll	align_nstrftime
	# 0x804fabf:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x804fac2:	movl	%eax, -0x428(%ebp) [REG, MEM]
	movl	%eax, -0x428(%ebp)
	# 0x804fac8:	cmpl	$0, -0x428(%ebp) [IMM, MEM]
	cmpl	$0, -0x428(%ebp)
	# 0x804facf:	je	0x804faf0 [IMM <CODEREF>]
	je	.label_647
	# 0x804fad1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804fad4:	pushl	$0 [IMM]
	pushl	$0
	# 0x804fad6:	pushl	-0x428(%ebp) [MEM]
	pushl	-0x428(%ebp)
	# 0x804fadc:	leal	-0x3f5(%ebp), %eax [MEM, REG]
	leal	-0x3f5(%ebp), %eax
	# 0x804fae2:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fae3:	calll	0x8057562 [IMM <CODEREF>]
	calll	mbsnwidth
	# 0x804fae8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804faeb:	movl	%eax, 0x806a2cc [REG, MEM]
	movl	%eax, width.9025
	# 0x804faf0:	movl	0x806a2cc, %eax [MEM, REG]
.label_647:
	movl	width.9025,  %eax
	# 0x804faf5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804faf7:	jns	0x804fb03 [IMM <CODEREF>]
	jns	.label_646
	# 0x804faf9:	movl	$0, 0x806a2cc [IMM, MEM]
	movl	$0, width.9025
	# 0x804fb03:	movl	0x806a2cc, %eax [MEM, REG]
.label_646:
	movl	width.9025,  %eax
	# 0x804fb08:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x804fb0b:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x804fb12:	je	0x804fb19 [IMM <CODEREF>]
	je	.label_645
	# 0x804fb14:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804fb19:	leave	 []
.label_645:
	leave	
	# 0x804fb1a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fb1b

	# 0x804fb1b:	pushl	%ebp [REG]
	.globl format_user_or_group
	.type format_user_or_group, @function
format_user_or_group:
	pushl	%ebp
	# 0x804fb1c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fb1e:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804fb21:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x804fb25:	je	0x804fb99 [IMM <CODEREF>]
	je	.label_650
	# 0x804fb27:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fb2a:	pushl	$0 [IMM]
	pushl	$0
	# 0x804fb2c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fb2f:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x804fb34:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fb37:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804fb39:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fb3c:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x804fb3e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804fb41:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fb46:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x804fb4a:	cmovnsl	-0xc(%ebp), %eax [MEM, REG]
	cmovnsl	-0xc(%ebp), %eax
	# 0x804fb4e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x804fb51:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x804fb56:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fb59:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fb5a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fb5d:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x804fb62:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fb65:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804fb68:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fb6b:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804fb70:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fb73:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804fb75:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804fb78:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804fb7a:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804fb7d:	subl	$0xc, %esp [IMM, REG]
.label_648:
	subl	$0xc, %esp
	# 0x804fb80:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x804fb82:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x804fb87:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fb8a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x804fb8d:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x804fb90:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x804fb93:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804fb95:	jne	0x804fb7d [IMM <CODEREF>]
	jne	.label_648
	# 0x804fb97:	jmp	0x804fbb5 [IMM <CODEREF>]
	jmp	.label_651
	# 0x804fb99:	subl	$4, %esp [IMM, REG]
.label_650:
	subl	$4, %esp
	# 0x804fb9c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804fb9f:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x804fba2:	pushl	$0x8061550 [IMM <DATAREF>]
	pushl	$label_649
	# 0x804fba7:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x804fbac:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fbaf:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fbb2:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x804fbb5:	movl	0x806a534, %edx [MEM, REG]
.label_651:
	movl	dired_pos,  %edx
	# 0x804fbbb:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x804fbbe:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x804fbc0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804fbc3:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x804fbc8:	nop	 []
	nop	
	# 0x804fbc9:	leave	 []
	leave	
	# 0x804fbca:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fbcb

	# 0x804fbcb:	pushl	%ebp [REG]
	.globl format_user
	.type format_user, @function
format_user:
	pushl	%ebp
	# 0x804fbcc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fbce:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804fbd1:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fbd4:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x804fbd7:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x804fbdb:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804fbde:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fbe0:	je	0x804fbe9 [IMM <CODEREF>]
	je	.label_655
	# 0x804fbe2:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
	movl	$label_652,  %eax
	# 0x804fbe7:	jmp	0x804fc09 [IMM <CODEREF>]
	jmp	.label_653
	# 0x804fbe9:	movzbl	0x806a42a, %eax [MEM, REG]
.label_655:
	movzbl	numeric_ids,  %eax
	# 0x804fbf0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fbf2:	je	0x804fbfb [IMM <CODEREF>]
	je	.label_654
	# 0x804fbf4:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fbf9:	jmp	0x804fc09 [IMM <CODEREF>]
	jmp	.label_653
	# 0x804fbfb:	subl	$0xc, %esp [IMM, REG]
.label_654:
	subl	$0xc, %esp
	# 0x804fbfe:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fc01:	calll	0x8056b61 [IMM <CODEREF>]
	calll	getuser
	# 0x804fc06:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fc09:	subl	$4, %esp [IMM, REG]
.label_653:
	subl	$4, %esp
	# 0x804fc0c:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804fc0f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fc12:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fc13:	calll	0x804fb1b [IMM <CODEREF>]
	calll	format_user_or_group
	# 0x804fc18:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fc1b:	nop	 []
	nop	
	# 0x804fc1c:	leave	 []
	leave	
	# 0x804fc1d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fc1e

	# 0x804fc1e:	pushl	%ebp [REG]
	.globl format_group
	.type format_group, @function
format_group:
	pushl	%ebp
	# 0x804fc1f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fc21:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x804fc24:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fc27:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x804fc2a:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x804fc2e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804fc31:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fc33:	je	0x804fc3c [IMM <CODEREF>]
	je	.label_658
	# 0x804fc35:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
	movl	$label_652,  %eax
	# 0x804fc3a:	jmp	0x804fc5c [IMM <CODEREF>]
	jmp	.label_656
	# 0x804fc3c:	movzbl	0x806a42a, %eax [MEM, REG]
.label_658:
	movzbl	numeric_ids,  %eax
	# 0x804fc43:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fc45:	je	0x804fc4e [IMM <CODEREF>]
	je	.label_657
	# 0x804fc47:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fc4c:	jmp	0x804fc5c [IMM <CODEREF>]
	jmp	.label_656
	# 0x804fc4e:	subl	$0xc, %esp [IMM, REG]
.label_657:
	subl	$0xc, %esp
	# 0x804fc51:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fc54:	calll	0x8056d5f [IMM <CODEREF>]
	calll	getgroup
	# 0x804fc59:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fc5c:	subl	$4, %esp [IMM, REG]
.label_656:
	subl	$4, %esp
	# 0x804fc5f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804fc62:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fc65:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fc66:	calll	0x804fb1b [IMM <CODEREF>]
	calll	format_user_or_group
	# 0x804fc6b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fc6e:	nop	 []
	nop	
	# 0x804fc6f:	leave	 []
	leave	
	# 0x804fc70:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fc71

	# 0x804fc71:	pushl	%ebp [REG]
	.globl format_user_or_group_width
	.type format_user_or_group_width, @function
format_user_or_group_width:
	pushl	%ebp
	# 0x804fc72:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fc74:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x804fc77:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804fc7a:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x804fc7d:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804fc83:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x804fc86:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804fc88:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x804fc8c:	je	0x804fcb0 [IMM <CODEREF>]
	je	.label_660
	# 0x804fc8e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fc91:	pushl	$0 [IMM]
	pushl	$0
	# 0x804fc93:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x804fc96:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x804fc9b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fc9e:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804fca1:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fca6:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x804fcaa:	cmovnsl	-0x1c(%ebp), %eax [MEM, REG]
	cmovnsl	-0x1c(%ebp), %eax
	# 0x804fcae:	jmp	0x804fcd6 [IMM <CODEREF>]
	jmp	.label_662
	# 0x804fcb0:	subl	$4, %esp [IMM, REG]
.label_660:
	subl	$4, %esp
	# 0x804fcb3:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x804fcb6:	pushl	$0x8061558 [IMM <DATAREF>]
	pushl	$label_659
	# 0x804fcbb:	leal	-0x17(%ebp), %eax [MEM, REG]
	leal	-0x17(%ebp), %eax
	# 0x804fcbe:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fcbf:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x804fcc4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fcc7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804fcca:	leal	-0x17(%ebp), %eax [MEM, REG]
	leal	-0x17(%ebp), %eax
	# 0x804fccd:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fcce:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804fcd3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fcd6:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_662:
	movl	-0xc(%ebp), %edx
	# 0x804fcd9:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x804fce0:	je	0x804fce7 [IMM <CODEREF>]
	je	.label_661
	# 0x804fce2:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x804fce7:	leave	 []
.label_661:
	leave	
	# 0x804fce8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fce9

	# 0x804fce9:	pushl	%ebp [REG]
	.globl format_user_width
	.type format_user_width, @function
format_user_width:
	pushl	%ebp
	# 0x804fcea:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fcec:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fcef:	movzbl	0x806a42a, %eax [MEM, REG]
	movzbl	numeric_ids,  %eax
	# 0x804fcf6:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fcf8:	je	0x804fd01 [IMM <CODEREF>]
	je	.label_663
	# 0x804fcfa:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fcff:	jmp	0x804fd0f [IMM <CODEREF>]
	jmp	.label_664
	# 0x804fd01:	subl	$0xc, %esp [IMM, REG]
.label_663:
	subl	$0xc, %esp
	# 0x804fd04:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fd07:	calll	0x8056b61 [IMM <CODEREF>]
	calll	getuser
	# 0x804fd0c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fd0f:	subl	$8, %esp [IMM, REG]
.label_664:
	subl	$8, %esp
	# 0x804fd12:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fd15:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fd16:	calll	0x804fc71 [IMM <CODEREF>]
	calll	format_user_or_group_width
	# 0x804fd1b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fd1e:	leave	 []
	leave	
	# 0x804fd1f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fd20

	# 0x804fd20:	pushl	%ebp [REG]
	.globl format_group_width
	.type format_group_width, @function
format_group_width:
	pushl	%ebp
	# 0x804fd21:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fd23:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fd26:	movzbl	0x806a42a, %eax [MEM, REG]
	movzbl	numeric_ids,  %eax
	# 0x804fd2d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fd2f:	je	0x804fd38 [IMM <CODEREF>]
	je	.label_665
	# 0x804fd31:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x804fd36:	jmp	0x804fd46 [IMM <CODEREF>]
	jmp	.label_666
	# 0x804fd38:	subl	$0xc, %esp [IMM, REG]
.label_665:
	subl	$0xc, %esp
	# 0x804fd3b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fd3e:	calll	0x8056d5f [IMM <CODEREF>]
	calll	getgroup
	# 0x804fd43:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fd46:	subl	$8, %esp [IMM, REG]
.label_666:
	subl	$8, %esp
	# 0x804fd49:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fd4c:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fd4d:	calll	0x804fc71 [IMM <CODEREF>]
	calll	format_user_or_group_width
	# 0x804fd52:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fd55:	leave	 []
	leave	
	# 0x804fd56:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fd57

	# 0x804fd57:	pushl	%ebp [REG]
	.globl format_inode
	.type format_inode, @function
format_inode:
	pushl	%ebp
	# 0x804fd58:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fd5a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fd5d:	cmpl	$0x14, 0xc(%ebp) [IMM, MEM]
	cmpl	$0x14, 0xc(%ebp)
	# 0x804fd61:	ja	0x804fd7c [IMM <CODEREF>]
	ja	.label_670
	# 0x804fd63:	pushl	$0x8063298 [IMM <DATAREF>]
	pushl	$__PRETTY_FUNCTION__.9067
	# 0x804fd68:	pushl	$0xfaa [IMM]
	pushl	$0xfaa
	# 0x804fd6d:	pushl	$0x8060764 [IMM <DATAREF>]
	pushl	$label_43
	# 0x804fd72:	pushl	$0x806155c [IMM <DATAREF>]
	pushl	$label_667
	# 0x804fd77:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x804fd7c:	movl	0x10(%ebp), %eax [MEM, REG]
.label_670:
	movl	0x10(%ebp), %eax
	# 0x804fd7f:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x804fd83:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fd85:	je	0x804fdb1 [IMM <CODEREF>]
	je	.label_668
	# 0x804fd87:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fd8a:	movl	0x68(%eax), %edx [MEM, REG]
	movl	0x68(%eax), %edx
	# 0x804fd8d:	movl	0x64(%eax), %eax [MEM, REG]
	movl	0x64(%eax), %eax
	# 0x804fd90:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x804fd92:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x804fd94:	je	0x804fdb1 [IMM <CODEREF>]
	je	.label_668
	# 0x804fd96:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x804fd99:	movl	0x68(%eax), %edx [MEM, REG]
	movl	0x68(%eax), %edx
	# 0x804fd9c:	movl	0x64(%eax), %eax [MEM, REG]
	movl	0x64(%eax), %eax
	# 0x804fd9f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804fda2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x804fda5:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fda6:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fda7:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x804fdac:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fdaf:	jmp	0x804fdb6 [IMM <CODEREF>]
	jmp	.label_669
	# 0x804fdb1:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
.label_668:
	movl	$label_652,  %eax
	# 0x804fdb6:	leave	 []
.label_669:
	leave	
	# 0x804fdb7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x804fdb8

	# 0x804fdb8:	pushl	%ebp [REG]
	.globl print_long_format
	.type print_long_format, @function
print_long_format:
	pushl	%ebp
	# 0x804fdb9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x804fdbb:	pushl	%edi [REG]
	pushl	%edi
	# 0x804fdbc:	pushl	%esi [REG]
	pushl	%esi
	# 0x804fdbd:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804fdbe:	subl	$0x116c, %esp [IMM, REG]
	subl	$0x116c, %esp
	# 0x804fdc4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x804fdc7:	movl	%eax, -0x116c(%ebp) [REG, MEM]
	movl	%eax, -0x116c(%ebp)
	# 0x804fdcd:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x804fdd3:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x804fdd6:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x804fdd8:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x804fdde:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x804fde2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fde4:	je	0x804fe04 [IMM <CODEREF>]
	je	.label_710
	# 0x804fde6:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x804fdec:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804fdef:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fdf2:	leal	-0x1104(%ebp), %eax [MEM, REG]
	leal	-0x1104(%ebp), %eax
	# 0x804fdf8:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fdf9:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fdfa:	calll	0x8053f4a [IMM <CODEREF>]
	calll	filemodestring
	# 0x804fdff:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fe02:	jmp	0x804fe3a [IMM <CODEREF>]
	jmp	.label_722
	# 0x804fe04:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_710:
	movl	-0x116c(%ebp), %eax
	# 0x804fe0a:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x804fe0d:	movzbl	0x805ff84(%eax), %eax [MEM, REG]
	movzbl	filetype_letter(%eax),  %eax
	# 0x804fe14:	movb	%al, -0x1104(%ebp) [REG, MEM]
	movb	%al, -0x1104(%ebp)
	# 0x804fe1a:	leal	-0x1104(%ebp), %eax [MEM, REG]
	leal	-0x1104(%ebp), %eax
	# 0x804fe20:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x804fe23:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804fe26:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x804fe28:	pushl	$0x3f [IMM]
	pushl	$0x3f
	# 0x804fe2a:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fe2b:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x804fe30:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804fe33:	movb	$0, -0x10f9(%ebp) [IMM, MEM]
	movb	$0, -0x10f9(%ebp)
	# 0x804fe3a:	movzbl	0x806a3f1, %eax [MEM, REG]
.label_722:
	movzbl	any_has_acl,  %eax
	# 0x804fe41:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804fe44:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804fe46:	je	0x804fe51 [IMM <CODEREF>]
	je	.label_682
	# 0x804fe48:	movb	$0, -0x10fa(%ebp) [IMM, MEM]
	movb	$0, -0x10fa(%ebp)
	# 0x804fe4f:	jmp	0x804fe7d [IMM <CODEREF>]
	jmp	.label_687
	# 0x804fe51:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_682:
	movl	-0x116c(%ebp), %eax
	# 0x804fe57:	movl	0x7c(%eax), %eax [MEM, REG]
	movl	0x7c(%eax), %eax
	# 0x804fe5a:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804fe5d:	jne	0x804fe68 [IMM <CODEREF>]
	jne	.label_691
	# 0x804fe5f:	movb	$0x2e, -0x10fa(%ebp) [IMM, MEM]
	movb	$0x2e, -0x10fa(%ebp)
	# 0x804fe66:	jmp	0x804fe7d [IMM <CODEREF>]
	jmp	.label_687
	# 0x804fe68:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_691:
	movl	-0x116c(%ebp), %eax
	# 0x804fe6e:	movl	0x7c(%eax), %eax [MEM, REG]
	movl	0x7c(%eax), %eax
	# 0x804fe71:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804fe74:	jne	0x804fe7d [IMM <CODEREF>]
	jne	.label_687
	# 0x804fe76:	movb	$0x2b, -0x10fa(%ebp) [IMM, MEM]
	movb	$0x2b, -0x10fa(%ebp)
	# 0x804fe7d:	movl	0x806a420, %eax [MEM, REG]
.label_687:
	movl	time_type,  %eax
	# 0x804fe82:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804fe85:	je	0x804fe96 [IMM <CODEREF>]
	je	.label_700
	# 0x804fe87:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x804fe8a:	jb	0x804fecc [IMM <CODEREF>]
	jb	.label_702
	# 0x804fe8c:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x804fe8f:	je	0x804ff02 [IMM <CODEREF>]
	je	.label_688
	# 0x804fe91:	jmp	0x804ff38 [IMM <CODEREF>]
	jmp	.label_704
	# 0x804fe96:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_700:
	movl	-0x116c(%ebp), %eax
	# 0x804fe9c:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804fe9f:	leal	-0x1178(%ebp), %eax [MEM, REG]
	leal	-0x1178(%ebp), %eax
	# 0x804fea5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fea8:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fea9:	pushl	%eax [REG]
	pushl	%eax
	# 0x804feaa:	calll	0x805bcb2 [IMM <CODEREF>]
	calll	get_stat_ctime
	# 0x804feaf:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804feb2:	movl	-0x1178(%ebp), %eax [MEM, REG]
	movl	-0x1178(%ebp), %eax
	# 0x804feb8:	movl	-0x1174(%ebp), %edx [MEM, REG]
	movl	-0x1174(%ebp), %edx
	# 0x804febe:	movl	%eax, -0x1140(%ebp) [REG, MEM]
	movl	%eax, -0x1140(%ebp)
	# 0x804fec4:	movl	%edx, -0x113c(%ebp) [REG, MEM]
	movl	%edx, -0x113c(%ebp)
	# 0x804feca:	jmp	0x804ff3d [IMM <CODEREF>]
	jmp	.label_674
	# 0x804fecc:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_702:
	movl	-0x116c(%ebp), %eax
	# 0x804fed2:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804fed5:	leal	-0x1178(%ebp), %eax [MEM, REG]
	leal	-0x1178(%ebp), %eax
	# 0x804fedb:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804fede:	pushl	%edx [REG]
	pushl	%edx
	# 0x804fedf:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fee0:	calll	0x805bccd [IMM <CODEREF>]
	calll	get_stat_mtime
	# 0x804fee5:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804fee8:	movl	-0x1178(%ebp), %eax [MEM, REG]
	movl	-0x1178(%ebp), %eax
	# 0x804feee:	movl	-0x1174(%ebp), %edx [MEM, REG]
	movl	-0x1174(%ebp), %edx
	# 0x804fef4:	movl	%eax, -0x1140(%ebp) [REG, MEM]
	movl	%eax, -0x1140(%ebp)
	# 0x804fefa:	movl	%edx, -0x113c(%ebp) [REG, MEM]
	movl	%edx, -0x113c(%ebp)
	# 0x804ff00:	jmp	0x804ff3d [IMM <CODEREF>]
	jmp	.label_674
	# 0x804ff02:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_688:
	movl	-0x116c(%ebp), %eax
	# 0x804ff08:	leal	0xc(%eax), %edx [MEM, REG]
	leal	0xc(%eax), %edx
	# 0x804ff0b:	leal	-0x1178(%ebp), %eax [MEM, REG]
	leal	-0x1178(%ebp), %eax
	# 0x804ff11:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x804ff14:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ff15:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ff16:	calll	0x805bc97 [IMM <CODEREF>]
	calll	get_stat_atime
	# 0x804ff1b:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x804ff1e:	movl	-0x1178(%ebp), %eax [MEM, REG]
	movl	-0x1178(%ebp), %eax
	# 0x804ff24:	movl	-0x1174(%ebp), %edx [MEM, REG]
	movl	-0x1174(%ebp), %edx
	# 0x804ff2a:	movl	%eax, -0x1140(%ebp) [REG, MEM]
	movl	%eax, -0x1140(%ebp)
	# 0x804ff30:	movl	%edx, -0x113c(%ebp) [REG, MEM]
	movl	%edx, -0x113c(%ebp)
	# 0x804ff36:	jmp	0x804ff3d [IMM <CODEREF>]
	jmp	.label_674
	# 0x804ff38:	calll	0x8049b10 [IMM <CODEREF>]
.label_704:
	calll	abort
	# 0x804ff3d:	leal	-0xe57(%ebp), %eax [MEM, REG]
.label_674:
	leal	-0xe57(%ebp), %eax
	# 0x804ff43:	movl	%eax, -0x115c(%ebp) [REG, MEM]
	movl	%eax, -0x115c(%ebp)
	# 0x804ff49:	movzbl	0x806a451, %eax [MEM, REG]
	movzbl	print_inode,  %eax
	# 0x804ff50:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ff52:	je	0x804ffa1 [IMM <CODEREF>]
	je	.label_683
	# 0x804ff54:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x804ff57:	pushl	-0x116c(%ebp) [MEM]
	pushl	-0x116c(%ebp)
	# 0x804ff5d:	pushl	$0x15 [IMM]
	pushl	$0x15
	# 0x804ff5f:	leal	-0x10e3(%ebp), %eax [MEM, REG]
	leal	-0x10e3(%ebp), %eax
	# 0x804ff65:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ff66:	calll	0x804fd57 [IMM <CODEREF>]
	calll	format_inode
	# 0x804ff6b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ff6e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x804ff70:	movl	0x806a3f4, %eax [MEM, REG]
	movl	inode_number_width,  %eax
	# 0x804ff75:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ff76:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ff77:	pushl	$0x8061584 [IMM <DATAREF>]
	pushl	$label_672
	# 0x804ff7c:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x804ff82:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x804ff87:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ff8a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x804ff8d:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x804ff93:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x804ff98:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x804ff9b:	addl	%eax, -0x115c(%ebp) [REG, MEM]
	addl	%eax, -0x115c(%ebp)
	# 0x804ffa1:	movzbl	0x806a42b, %eax [MEM, REG]
.label_683:
	movzbl	print_block_size,  %eax
	# 0x804ffa8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ffaa:	je	0x8050086 [IMM <CODEREF>]
	je	.label_707
	# 0x804ffb0:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x804ffb6:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x804ffba:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x804ffbd:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x804ffbf:	je	0x804ffc8 [IMM <CODEREF>]
	je	.label_709
	# 0x804ffc1:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
	movl	$label_652,  %eax
	# 0x804ffc6:	jmp	0x8050000 [IMM <CODEREF>]
	jmp	.label_713
	# 0x804ffc8:	movl	0x806a430, %eax [MEM, REG]
.label_709:
	movl	output_block_size,  %eax
	# 0x804ffcd:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x804ffd3:	movl	0x806a42c, %esi [MEM, REG]
	movl	human_output_opts,  %esi
	# 0x804ffd9:	movl	-0x116c(%ebp), %ecx [MEM, REG]
	movl	-0x116c(%ebp), %ecx
	# 0x804ffdf:	movl	0x48(%ecx), %ebx [MEM, REG]
	movl	0x48(%ecx), %ebx
	# 0x804ffe2:	movl	0x44(%ecx), %ecx [MEM, REG]
	movl	0x44(%ecx), %ecx
	# 0x804ffe5:	pushl	%edx [REG]
	pushl	%edx
	# 0x804ffe6:	pushl	%eax [REG]
	pushl	%eax
	# 0x804ffe7:	pushl	$0 [IMM]
	pushl	$0
	# 0x804ffe9:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x804ffee:	pushl	%esi [REG]
	pushl	%esi
	# 0x804ffef:	leal	-0x10e3(%ebp), %eax [MEM, REG]
	leal	-0x10e3(%ebp), %eax
	# 0x804fff5:	pushl	%eax [REG]
	pushl	%eax
	# 0x804fff6:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x804fff7:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x804fff8:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x804fffd:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050000:	movl	%eax, -0x1158(%ebp) [REG, MEM]
.label_713:
	movl	%eax, -0x1158(%ebp)
	# 0x8050006:	movl	0x806a3f8, %ebx [MEM, REG]
	movl	block_size_width,  %ebx
	# 0x805000c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805000f:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050011:	pushl	-0x1158(%ebp) [MEM]
	pushl	-0x1158(%ebp)
	# 0x8050017:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x805001c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805001f:	subl	%eax, %ebx [REG, REG]
	subl	%eax, %ebx
	# 0x8050021:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x8050023:	movl	%eax, -0x1154(%ebp) [REG, MEM]
	movl	%eax, -0x1154(%ebp)
	# 0x8050029:	jmp	0x8050044 [IMM <CODEREF>]
	jmp	.label_675
	# 0x805002b:	movl	-0x115c(%ebp), %eax [MEM, REG]
.label_685:
	movl	-0x115c(%ebp), %eax
	# 0x8050031:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050034:	movl	%edx, -0x115c(%ebp) [REG, MEM]
	movl	%edx, -0x115c(%ebp)
	# 0x805003a:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x805003d:	subl	$1, -0x1154(%ebp) [IMM, MEM]
	subl	$1, -0x1154(%ebp)
	# 0x8050044:	cmpl	$0, -0x1154(%ebp) [IMM, MEM]
.label_675:
	cmpl	$0, -0x1154(%ebp)
	# 0x805004b:	jg	0x805002b [IMM <CODEREF>]
	jg	.label_685
	# 0x805004d:	jmp	0x8050050 [IMM <CODEREF>]
	jmp	.label_717
	# 0x805004f:	nop	 []
.label_690:
	nop	
	# 0x8050050:	movl	-0x115c(%ebp), %eax [MEM, REG]
.label_717:
	movl	-0x115c(%ebp), %eax
	# 0x8050056:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050059:	movl	%edx, -0x115c(%ebp) [REG, MEM]
	movl	%edx, -0x115c(%ebp)
	# 0x805005f:	movl	-0x1158(%ebp), %edx [MEM, REG]
	movl	-0x1158(%ebp), %edx
	# 0x8050065:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x8050068:	movl	%ecx, -0x1158(%ebp) [REG, MEM]
	movl	%ecx, -0x1158(%ebp)
	# 0x805006e:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x8050071:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8050073:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050076:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050078:	jne	0x805004f [IMM <CODEREF>]
	jne	.label_690
	# 0x805007a:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x8050080:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8050083:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x8050086:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_707:
	movl	-0x116c(%ebp), %eax
	# 0x805008c:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050090:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8050093:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050095:	je	0x805009e [IMM <CODEREF>]
	je	.label_701
	# 0x8050097:	movl	$0x8061556, %edx [IMM <DATAREF>, REG]
	movl	$label_652,  %edx
	# 0x805009c:	jmp	0x80500c2 [IMM <CODEREF>]
	jmp	.label_705
	# 0x805009e:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_701:
	movl	-0x116c(%ebp), %eax
	# 0x80500a4:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x80500a7:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80500ac:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80500af:	leal	-0x10e3(%ebp), %ecx [MEM, REG]
	leal	-0x10e3(%ebp), %ecx
	# 0x80500b5:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80500b6:	pushl	%edx [REG]
	pushl	%edx
	# 0x80500b7:	pushl	%eax [REG]
	pushl	%eax
	# 0x80500b8:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x80500bd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80500c0:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80500c2:	movl	0x806a3fc, %eax [MEM, REG]
.label_705:
	movl	nlink_width,  %eax
	# 0x80500c7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80500ca:	pushl	%edx [REG]
	pushl	%edx
	# 0x80500cb:	pushl	%eax [REG]
	pushl	%eax
	# 0x80500cc:	leal	-0x1104(%ebp), %eax [MEM, REG]
	leal	-0x1104(%ebp), %eax
	# 0x80500d2:	pushl	%eax [REG]
	pushl	%eax
	# 0x80500d3:	pushl	$0x8061589 [IMM <DATAREF>]
	pushl	$label_714
	# 0x80500d8:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x80500de:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x80500e3:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80500e6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80500e9:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x80500ef:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x80500f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80500f7:	addl	%eax, -0x115c(%ebp) [REG, MEM]
	addl	%eax, -0x115c(%ebp)
	# 0x80500fd:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x8050104:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050106:	je	0x805012c [IMM <CODEREF>]
	je	.label_720
	# 0x8050108:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x805010d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805010e:	pushl	$2 [IMM]
	pushl	$2
	# 0x8050110:	pushl	$1 [IMM]
	pushl	$1
	# 0x8050112:	pushl	$0x8061311 [IMM <DATAREF>]
	pushl	$label_373
	# 0x8050117:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x805011c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805011f:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x8050124:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x8050127:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x805012c:	movzbl	0x806a1e2, %eax [MEM, REG]
.label_720:
	movzbl	print_owner,  %eax
	# 0x8050133:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050135:	jne	0x805015c [IMM <CODEREF>]
	jne	.label_679
	# 0x8050137:	movzbl	0x806a1e3, %eax [MEM, REG]
	movzbl	print_group,  %eax
	# 0x805013e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050140:	jne	0x805015c [IMM <CODEREF>]
	jne	.label_679
	# 0x8050142:	movzbl	0x806a429, %eax [MEM, REG]
	movzbl	print_author,  %eax
	# 0x8050149:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805014b:	jne	0x805015c [IMM <CODEREF>]
	jne	.label_679
	# 0x805014d:	movzbl	0x806a3f0, %eax [MEM, REG]
	movzbl	print_scontext,  %eax
	# 0x8050154:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050156:	je	0x8050266 [IMM <CODEREF>]
	je	.label_689
	# 0x805015c:	movl	0x806a398, %eax [MEM, REG]
.label_679:
	movl	stdout,  %eax
	# 0x8050161:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050164:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050165:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x805016b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805016c:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8050171:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050174:	movl	-0x115c(%ebp), %edx [MEM, REG]
	movl	-0x115c(%ebp), %edx
	# 0x805017a:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x8050180:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8050182:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8050184:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8050186:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x805018b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805018d:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x8050192:	movzbl	0x806a1e2, %eax [MEM, REG]
	movzbl	print_owner,  %eax
	# 0x8050199:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805019b:	je	0x80501c7 [IMM <CODEREF>]
	je	.label_696
	# 0x805019d:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80501a3:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x80501a7:	movzbl	%al, %ecx [REG, REG]
	movzbl	%al, %ecx
	# 0x80501aa:	movl	0x806a404, %edx [MEM, REG]
	movl	owner_width,  %edx
	# 0x80501b0:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80501b6:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x80501b9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80501bc:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80501bd:	pushl	%edx [REG]
	pushl	%edx
	# 0x80501be:	pushl	%eax [REG]
	pushl	%eax
	# 0x80501bf:	calll	0x804fbcb [IMM <CODEREF>]
	calll	format_user
	# 0x80501c4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80501c7:	movzbl	0x806a1e3, %eax [MEM, REG]
.label_696:
	movzbl	print_group,  %eax
	# 0x80501ce:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80501d0:	je	0x80501fc [IMM <CODEREF>]
	je	.label_716
	# 0x80501d2:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80501d8:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x80501dc:	movzbl	%al, %ecx [REG, REG]
	movzbl	%al, %ecx
	# 0x80501df:	movl	0x806a408, %edx [MEM, REG]
	movl	group_width,  %edx
	# 0x80501e5:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80501eb:	movl	0x28(%eax), %eax [MEM, REG]
	movl	0x28(%eax), %eax
	# 0x80501ee:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80501f1:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80501f2:	pushl	%edx [REG]
	pushl	%edx
	# 0x80501f3:	pushl	%eax [REG]
	pushl	%eax
	# 0x80501f4:	calll	0x804fc1e [IMM <CODEREF>]
	calll	format_group
	# 0x80501f9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80501fc:	movzbl	0x806a429, %eax [MEM, REG]
.label_716:
	movzbl	print_author,  %eax
	# 0x8050203:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050205:	je	0x8050231 [IMM <CODEREF>]
	je	.label_721
	# 0x8050207:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x805020d:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050211:	movzbl	%al, %ecx [REG, REG]
	movzbl	%al, %ecx
	# 0x8050214:	movl	0x806a40c, %edx [MEM, REG]
	movl	author_width,  %edx
	# 0x805021a:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050220:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x8050223:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050226:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8050227:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050228:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050229:	calll	0x804fbcb [IMM <CODEREF>]
	calll	format_user
	# 0x805022e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050231:	movzbl	0x806a3f0, %eax [MEM, REG]
.label_721:
	movzbl	print_scontext,  %eax
	# 0x8050238:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805023a:	je	0x805025a [IMM <CODEREF>]
	je	.label_681
	# 0x805023c:	movl	0x806a400, %edx [MEM, REG]
	movl	scontext_width,  %edx
	# 0x8050242:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050248:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x805024b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805024e:	pushl	%edx [REG]
	pushl	%edx
	# 0x805024f:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050251:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050252:	calll	0x804fb1b [IMM <CODEREF>]
	calll	format_user_or_group
	# 0x8050257:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805025a:	leal	-0xe57(%ebp), %eax [MEM, REG]
.label_681:
	leal	-0xe57(%ebp), %eax
	# 0x8050260:	movl	%eax, -0x115c(%ebp) [REG, MEM]
	movl	%eax, -0x115c(%ebp)
	# 0x8050266:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_689:
	movl	-0x116c(%ebp), %eax
	# 0x805026c:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050270:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050272:	je	0x805037b [IMM <CODEREF>]
	je	.label_694
	# 0x8050278:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x805027e:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x8050281:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8050286:	cmpl	$0x2000, %eax [IMM, REG]
	cmpl	$0x2000, %eax
	# 0x805028b:	je	0x80502a6 [IMM <CODEREF>]
	je	.label_697
	# 0x805028d:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050293:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x8050296:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x805029b:	cmpl	$0x6000, %eax [IMM, REG]
	cmpl	$0x6000, %eax
	# 0x80502a0:	jne	0x805037b [IMM <CODEREF>]
	jne	.label_694
	# 0x80502a6:	movl	0x806a418, %eax [MEM, REG]
.label_697:
	movl	file_size_width,  %eax
	# 0x80502ab:	movl	0x806a410, %edx [MEM, REG]
	movl	major_device_number_width,  %edx
	# 0x80502b1:	leal	2(%edx), %ecx [MEM, REG]
	leal	2(%edx), %ecx
	# 0x80502b4:	movl	0x806a414, %edx [MEM, REG]
	movl	minor_device_number_width,  %edx
	# 0x80502ba:	addl	%ecx, %edx [REG, REG]
	addl	%ecx, %edx
	# 0x80502bc:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x80502be:	movl	%eax, -0x1148(%ebp) [REG, MEM]
	movl	%eax, -0x1148(%ebp)
	# 0x80502c4:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80502ca:	movl	0x30(%eax), %edx [MEM, REG]
	movl	0x30(%eax), %edx
	# 0x80502cd:	movl	0x2c(%eax), %eax [MEM, REG]
	movl	0x2c(%eax), %eax
	# 0x80502d0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80502d3:	pushl	%edx [REG]
	pushl	%edx
	# 0x80502d4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80502d5:	calll	0x8049a80 [IMM <CODEREF>]
	calll	gnu_dev_minor
	# 0x80502da:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80502dd:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80502e2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80502e5:	leal	-0x10e3(%ebp), %ecx [MEM, REG]
	leal	-0x10e3(%ebp), %ecx
	# 0x80502eb:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80502ec:	pushl	%edx [REG]
	pushl	%edx
	# 0x80502ed:	pushl	%eax [REG]
	pushl	%eax
	# 0x80502ee:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x80502f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80502f6:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x80502f8:	movl	0x806a414, %ebx [MEM, REG]
	movl	minor_device_number_width,  %ebx
	# 0x80502fe:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050304:	movl	0x30(%eax), %edx [MEM, REG]
	movl	0x30(%eax), %edx
	# 0x8050307:	movl	0x2c(%eax), %eax [MEM, REG]
	movl	0x2c(%eax), %eax
	# 0x805030a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805030d:	pushl	%edx [REG]
	pushl	%edx
	# 0x805030e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805030f:	calll	0x80499d0 [IMM <CODEREF>]
	calll	gnu_dev_major
	# 0x8050314:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050317:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805031c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805031f:	leal	-0x10f8(%ebp), %ecx [MEM, REG]
	leal	-0x10f8(%ebp), %ecx
	# 0x8050325:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8050326:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050327:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050328:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x805032d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050330:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x8050332:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8050337:	cmpl	$0, -0x1148(%ebp) [IMM, MEM]
	cmpl	$0, -0x1148(%ebp)
	# 0x805033e:	cmovnsl	-0x1148(%ebp), %eax [MEM, REG]
	cmovnsl	-0x1148(%ebp), %eax
	# 0x8050345:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8050347:	movl	0x806a410, %eax [MEM, REG]
	movl	major_device_number_width,  %eax
	# 0x805034c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805034e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050351:	pushl	%esi [REG]
	pushl	%esi
	# 0x8050352:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8050353:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8050354:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050355:	pushl	$0x8061591 [IMM <DATAREF>]
	pushl	$label_680
	# 0x805035a:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x8050360:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x8050365:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050368:	movl	0x806a418, %eax [MEM, REG]
	movl	file_size_width,  %eax
	# 0x805036d:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8050370:	addl	%eax, -0x115c(%ebp) [REG, MEM]
	addl	%eax, -0x115c(%ebp)
	# 0x8050376:	jmp	0x805045c [IMM <CODEREF>]
	jmp	.label_693
	# 0x805037b:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_694:
	movl	-0x116c(%ebp), %eax
	# 0x8050381:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050385:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8050388:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805038a:	je	0x8050393 [IMM <CODEREF>]
	je	.label_699
	# 0x805038c:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
	movl	$label_652,  %eax
	# 0x8050391:	jmp	0x80503d6 [IMM <CODEREF>]
	jmp	.label_703
	# 0x8050393:	movl	0x806a1e8, %ebx [MEM, REG]
.label_699:
	movl	file_output_block_size,  %ebx
	# 0x8050399:	movl	0x806a1ec, %esi [MEM, REG]
	movl	label_216,  %esi
	# 0x805039f:	movl	0x806a438, %edi [MEM, REG]
	movl	file_human_output_opts,  %edi
	# 0x80503a5:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80503ab:	movl	0x3c(%eax), %edx [MEM, REG]
	movl	0x3c(%eax), %edx
	# 0x80503ae:	movl	0x38(%eax), %eax [MEM, REG]
	movl	0x38(%eax), %eax
	# 0x80503b1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80503b4:	pushl	%edx [REG]
	pushl	%edx
	# 0x80503b5:	pushl	%eax [REG]
	pushl	%eax
	# 0x80503b6:	calll	0x804d175 [IMM <CODEREF>]
	calll	unsigned_file_size
	# 0x80503bb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80503be:	pushl	%esi [REG]
	pushl	%esi
	# 0x80503bf:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80503c0:	pushl	$0 [IMM]
	pushl	$0
	# 0x80503c2:	pushl	$1 [IMM]
	pushl	$1
	# 0x80503c4:	pushl	%edi [REG]
	pushl	%edi
	# 0x80503c5:	leal	-0x10e3(%ebp), %ecx [MEM, REG]
	leal	-0x10e3(%ebp), %ecx
	# 0x80503cb:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80503cc:	pushl	%edx [REG]
	pushl	%edx
	# 0x80503cd:	pushl	%eax [REG]
	pushl	%eax
	# 0x80503ce:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x80503d3:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80503d6:	movl	%eax, -0x1150(%ebp) [REG, MEM]
.label_703:
	movl	%eax, -0x1150(%ebp)
	# 0x80503dc:	movl	0x806a418, %ebx [MEM, REG]
	movl	file_size_width,  %ebx
	# 0x80503e2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80503e5:	pushl	$0 [IMM]
	pushl	$0
	# 0x80503e7:	pushl	-0x1150(%ebp) [MEM]
	pushl	-0x1150(%ebp)
	# 0x80503ed:	calll	0x805753a [IMM <CODEREF>]
	calll	gnu_mbswidth
	# 0x80503f2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80503f5:	subl	%eax, %ebx [REG, REG]
	subl	%eax, %ebx
	# 0x80503f7:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x80503f9:	movl	%eax, -0x114c(%ebp) [REG, MEM]
	movl	%eax, -0x114c(%ebp)
	# 0x80503ff:	jmp	0x805041a [IMM <CODEREF>]
	jmp	.label_719
	# 0x8050401:	movl	-0x115c(%ebp), %eax [MEM, REG]
.label_673:
	movl	-0x115c(%ebp), %eax
	# 0x8050407:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805040a:	movl	%edx, -0x115c(%ebp) [REG, MEM]
	movl	%edx, -0x115c(%ebp)
	# 0x8050410:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x8050413:	subl	$1, -0x114c(%ebp) [IMM, MEM]
	subl	$1, -0x114c(%ebp)
	# 0x805041a:	cmpl	$0, -0x114c(%ebp) [IMM, MEM]
.label_719:
	cmpl	$0, -0x114c(%ebp)
	# 0x8050421:	jg	0x8050401 [IMM <CODEREF>]
	jg	.label_673
	# 0x8050423:	jmp	0x8050426 [IMM <CODEREF>]
	jmp	.label_676
	# 0x8050425:	nop	 []
.label_677:
	nop	
	# 0x8050426:	movl	-0x115c(%ebp), %eax [MEM, REG]
.label_676:
	movl	-0x115c(%ebp), %eax
	# 0x805042c:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805042f:	movl	%edx, -0x115c(%ebp) [REG, MEM]
	movl	%edx, -0x115c(%ebp)
	# 0x8050435:	movl	-0x1150(%ebp), %edx [MEM, REG]
	movl	-0x1150(%ebp), %edx
	# 0x805043b:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x805043e:	movl	%ecx, -0x1150(%ebp) [REG, MEM]
	movl	%ecx, -0x1150(%ebp)
	# 0x8050444:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x8050447:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8050449:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805044c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805044e:	jne	0x8050425 [IMM <CODEREF>]
	jne	.label_677
	# 0x8050450:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x8050456:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8050459:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x805045c:	movl	$0, -0x1160(%ebp) [IMM, MEM]
.label_693:
	movl	$0, -0x1160(%ebp)
	# 0x8050466:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x805046c:	movb	$1, 0(%eax) [IMM, MEM]
	movb	$1, 0(%eax)
	# 0x805046f:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050475:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050479:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805047b:	je	0x8050591 [IMM <CODEREF>]
	je	.label_678
	# 0x8050481:	movl	0x806a480, %eax [MEM, REG]
	movl	localtz,  %eax
	# 0x8050486:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050489:	leal	-0x1130(%ebp), %edx [MEM, REG]
	leal	-0x1130(%ebp), %edx
	# 0x805048f:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050490:	leal	-0x1140(%ebp), %edx [MEM, REG]
	leal	-0x1140(%ebp), %edx
	# 0x8050496:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050497:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050498:	calll	0x805de5f [IMM <CODEREF>]
	calll	localtime_rz
	# 0x805049d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80504a0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80504a2:	je	0x8050591 [IMM <CODEREF>]
	je	.label_678
	# 0x80504a8:	pushl	-0x113c(%ebp) [MEM]
	pushl	-0x113c(%ebp)
	# 0x80504ae:	pushl	-0x1140(%ebp) [MEM]
	pushl	-0x1140(%ebp)
	# 0x80504b4:	pushl	0x806a3ec [MEM]
	pushl	label_165
	# 0x80504ba:	pushl	0x806a3e8 [MEM]
	pushl	current_time
	# 0x80504c0:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x80504c5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80504c8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80504ca:	jns	0x80504dc [IMM <CODEREF>]
	jns	.label_715
	# 0x80504cc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80504cf:	pushl	$0x806a3e8 [IMM <DATAREF>]
	pushl	$current_time
	# 0x80504d4:	calll	0x80545ed [IMM <CODEREF>]
	calll	gettime
	# 0x80504d9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80504dc:	movl	0x806a3e8, %eax [MEM, REG]
.label_715:
	movl	current_time,  %eax
	# 0x80504e1:	subl	$0xf0c2ac, %eax [IMM, REG]
	subl	$0xf0c2ac, %eax
	# 0x80504e6:	movl	%eax, -0x1138(%ebp) [REG, MEM]
	movl	%eax, -0x1138(%ebp)
	# 0x80504ec:	movl	0x806a3ec, %eax [MEM, REG]
	movl	label_165,  %eax
	# 0x80504f1:	movl	%eax, -0x1134(%ebp) [REG, MEM]
	movl	%eax, -0x1134(%ebp)
	# 0x80504f7:	pushl	-0x113c(%ebp) [MEM]
	pushl	-0x113c(%ebp)
	# 0x80504fd:	pushl	-0x1140(%ebp) [MEM]
	pushl	-0x1140(%ebp)
	# 0x8050503:	pushl	-0x1134(%ebp) [MEM]
	pushl	-0x1134(%ebp)
	# 0x8050509:	pushl	-0x1138(%ebp) [MEM]
	pushl	-0x1138(%ebp)
	# 0x805050f:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x8050514:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050517:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050519:	jns	0x8050546 [IMM <CODEREF>]
	jns	.label_698
	# 0x805051b:	pushl	0x806a3ec [MEM]
	pushl	label_165
	# 0x8050521:	pushl	0x806a3e8 [MEM]
	pushl	current_time
	# 0x8050527:	pushl	-0x113c(%ebp) [MEM]
	pushl	-0x113c(%ebp)
	# 0x805052d:	pushl	-0x1140(%ebp) [MEM]
	pushl	-0x1140(%ebp)
	# 0x8050533:	calll	0x805bd40 [IMM <CODEREF>]
	calll	timespec_cmp
	# 0x8050538:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805053b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805053d:	jns	0x8050546 [IMM <CODEREF>]
	jns	.label_698
	# 0x805053f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8050544:	jmp	0x805054b [IMM <CODEREF>]
	jmp	.label_684
	# 0x8050546:	movl	$0, %eax [IMM, REG]
.label_698:
	movl	$0, %eax
	# 0x805054b:	movb	%al, -0x1161(%ebp) [REG, MEM]
.label_684:
	movb	%al, -0x1161(%ebp)
	# 0x8050551:	andb	$1, -0x1161(%ebp) [IMM, MEM]
	andb	$1, -0x1161(%ebp)
	# 0x8050558:	movl	-0x113c(%ebp), %ecx [MEM, REG]
	movl	-0x113c(%ebp), %ecx
	# 0x805055e:	movl	0x806a480, %edx [MEM, REG]
	movl	localtz,  %edx
	# 0x8050564:	movzbl	-0x1161(%ebp), %eax [MEM, REG]
	movzbl	-0x1161(%ebp), %eax
	# 0x805056b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805056e:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805056f:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050570:	leal	-0x1130(%ebp), %edx [MEM, REG]
	leal	-0x1130(%ebp), %edx
	# 0x8050576:	pushl	%edx [REG]
	pushl	%edx
	# 0x8050577:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050578:	pushl	$0x3e9 [IMM]
	pushl	$0x3e9
	# 0x805057d:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x8050583:	calll	0x804f9e9 [IMM <CODEREF>]
	calll	align_nstrftime
	# 0x8050588:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805058b:	movl	%eax, -0x1160(%ebp) [REG, MEM]
	movl	%eax, -0x1160(%ebp)
	# 0x8050591:	cmpl	$0, -0x1160(%ebp) [IMM, MEM]
.label_678:
	cmpl	$0, -0x1160(%ebp)
	# 0x8050598:	jne	0x80505a7 [IMM <CODEREF>]
	jne	.label_695
	# 0x805059a:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x80505a0:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80505a3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80505a5:	jne	0x80505d0 [IMM <CODEREF>]
	jne	.label_706
	# 0x80505a7:	movl	-0x1160(%ebp), %eax [MEM, REG]
.label_695:
	movl	-0x1160(%ebp), %eax
	# 0x80505ad:	addl	%eax, -0x115c(%ebp) [REG, MEM]
	addl	%eax, -0x115c(%ebp)
	# 0x80505b3:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x80505b9:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80505bc:	movl	%edx, -0x115c(%ebp) [REG, MEM]
	movl	%edx, -0x115c(%ebp)
	# 0x80505c2:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x80505c5:	movl	-0x115c(%ebp), %eax [MEM, REG]
	movl	-0x115c(%ebp), %eax
	# 0x80505cb:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80505ce:	jmp	0x8050634 [IMM <CODEREF>]
	jmp	.label_708
	# 0x80505d0:	movl	-0x116c(%ebp), %eax [MEM, REG]
.label_706:
	movl	-0x116c(%ebp), %eax
	# 0x80505d6:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x80505da:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x80505dd:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80505df:	je	0x80505e8 [IMM <CODEREF>]
	je	.label_718
	# 0x80505e1:	movl	$0x8061556, %ebx [IMM <DATAREF>, REG]
	movl	$label_652,  %ebx
	# 0x80505e6:	jmp	0x8050603 [IMM <CODEREF>]
	jmp	.label_686
	# 0x80505e8:	movl	-0x1140(%ebp), %eax [MEM, REG]
.label_718:
	movl	-0x1140(%ebp), %eax
	# 0x80505ee:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80505f1:	leal	-0x10e3(%ebp), %edx [MEM, REG]
	leal	-0x10e3(%ebp), %edx
	# 0x80505f7:	pushl	%edx [REG]
	pushl	%edx
	# 0x80505f8:	pushl	%eax [REG]
	pushl	%eax
	# 0x80505f9:	calll	0x8049f5e [IMM <CODEREF>]
	calll	timetostr
	# 0x80505fe:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050601:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x8050603:	calll	0x804fa4c [IMM <CODEREF>]
.label_686:
	calll	long_time_expected_width
	# 0x8050608:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8050609:	pushl	%eax [REG]
	pushl	%eax
	# 0x805060a:	pushl	$0x8061584 [IMM <DATAREF>]
	pushl	$label_672
	# 0x805060f:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x8050615:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x805061a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805061d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050620:	pushl	-0x115c(%ebp) [MEM]
	pushl	-0x115c(%ebp)
	# 0x8050626:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805062b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805062e:	addl	%eax, -0x115c(%ebp) [REG, MEM]
	addl	%eax, -0x115c(%ebp)
	# 0x8050634:	movl	0x806a398, %eax [MEM, REG]
.label_708:
	movl	stdout,  %eax
	# 0x8050639:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805063c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805063d:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x8050643:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050644:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8050649:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805064c:	movl	-0x115c(%ebp), %edx [MEM, REG]
	movl	-0x115c(%ebp), %edx
	# 0x8050652:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x8050658:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805065a:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805065c:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805065e:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x8050663:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8050665:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x805066a:	movl	-0x115c(%ebp), %edx [MEM, REG]
	movl	-0x115c(%ebp), %edx
	# 0x8050670:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x8050676:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8050678:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805067a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805067b:	pushl	$0x806a540 [IMM <DATAREF>]
	pushl	$dired_obstack
	# 0x8050680:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050682:	pushl	-0x116c(%ebp) [MEM]
	pushl	-0x116c(%ebp)
	# 0x8050688:	calll	0x805118d [IMM <CODEREF>]
	calll	print_name_with_quoting
	# 0x805068d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050690:	movl	%eax, -0x1144(%ebp) [REG, MEM]
	movl	%eax, -0x1144(%ebp)
	# 0x8050696:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x805069c:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x805069f:	cmpl	$6, %eax [IMM, REG]
	cmpl	$6, %eax
	# 0x80506a2:	jne	0x8050731 [IMM <CODEREF>]
	jne	.label_712
	# 0x80506a8:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x80506ae:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80506b1:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80506b3:	je	0x8050767 [IMM <CODEREF>]
	je	.label_671
	# 0x80506b9:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x80506be:	pushl	%eax [REG]
	pushl	%eax
	# 0x80506bf:	pushl	$4 [IMM]
	pushl	$4
	# 0x80506c1:	pushl	$1 [IMM]
	pushl	$1
	# 0x80506c3:	pushl	$0x806159b [IMM <DATAREF>]
	pushl	$label_711
	# 0x80506c8:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x80506cd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80506d0:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x80506d5:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x80506d8:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x80506dd:	movl	-0x115c(%ebp), %edx [MEM, REG]
	movl	-0x115c(%ebp), %edx
	# 0x80506e3:	leal	-0xe57(%ebp), %eax [MEM, REG]
	leal	-0xe57(%ebp), %eax
	# 0x80506e9:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80506eb:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80506ed:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80506ef:	movl	-0x1144(%ebp), %eax [MEM, REG]
	movl	-0x1144(%ebp), %eax
	# 0x80506f5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80506f7:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x80506fa:	pushl	%eax [REG]
	pushl	%eax
	# 0x80506fb:	pushl	$0 [IMM]
	pushl	$0
	# 0x80506fd:	pushl	$1 [IMM]
	pushl	$1
	# 0x80506ff:	pushl	-0x116c(%ebp) [MEM]
	pushl	-0x116c(%ebp)
	# 0x8050705:	calll	0x805118d [IMM <CODEREF>]
	calll	print_name_with_quoting
	# 0x805070a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805070d:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x8050712:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050714:	je	0x8050767 [IMM <CODEREF>]
	je	.label_671
	# 0x8050716:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x805071c:	movl	0x70(%eax), %eax [MEM, REG]
	movl	0x70(%eax), %eax
	# 0x805071f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050722:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050724:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050725:	pushl	$1 [IMM]
	pushl	$1
	# 0x8050727:	calll	0x80515d8 [IMM <CODEREF>]
	calll	print_type_indicator
	# 0x805072c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805072f:	jmp	0x8050767 [IMM <CODEREF>]
	jmp	.label_671
	# 0x8050731:	movl	0x806a440, %eax [MEM, REG]
.label_712:
	movl	indicator_style,  %eax
	# 0x8050736:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050738:	je	0x8050767 [IMM <CODEREF>]
	je	.label_671
	# 0x805073a:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050740:	movl	0x6c(%eax), %ecx [MEM, REG]
	movl	0x6c(%eax), %ecx
	# 0x8050743:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050749:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x805074c:	movl	-0x116c(%ebp), %eax [MEM, REG]
	movl	-0x116c(%ebp), %eax
	# 0x8050752:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8050756:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8050759:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805075c:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805075d:	pushl	%edx [REG]
	pushl	%edx
	# 0x805075e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805075f:	calll	0x80515d8 [IMM <CODEREF>]
	calll	print_type_indicator
	# 0x8050764:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050767:	nop	 []
.label_671:
	nop	
	# 0x8050768:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805076b:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x8050772:	je	0x8050779 [IMM <CODEREF>]
	je	.label_692
	# 0x8050774:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8050779:	leal	-0xc(%ebp), %esp [MEM, REG]
.label_692:
	leal	-0xc(%ebp), %esp
	# 0x805077c:	popl	%ebx [REG]
	popl	%ebx
	# 0x805077d:	popl	%esi [REG]
	popl	%esi
	# 0x805077e:	popl	%edi [REG]
	popl	%edi
	# 0x805077f:	popl	%ebp [REG]
	popl	%ebp
	# 0x8050780:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8050781

	# 0x8050781:	pushl	%ebp [REG]
	.globl quote_name_buf
	.type quote_name_buf, @function
quote_name_buf:
	pushl	%ebp
	# 0x8050782:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8050784:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8050785:	subl	$0x74, %esp [IMM, REG]
	subl	$0x74, %esp
	# 0x8050788:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805078b:	movl	%eax, -0x5c(%ebp) [REG, MEM]
	movl	%eax, -0x5c(%ebp)
	# 0x805078e:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8050791:	movl	%eax, -0x60(%ebp) [REG, MEM]
	movl	%eax, -0x60(%ebp)
	# 0x8050794:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8050797:	movl	%eax, -0x64(%ebp) [REG, MEM]
	movl	%eax, -0x64(%ebp)
	# 0x805079a:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x805079d:	movl	%eax, -0x68(%ebp) [REG, MEM]
	movl	%eax, -0x68(%ebp)
	# 0x80507a0:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x80507a3:	movl	%eax, -0x6c(%ebp) [REG, MEM]
	movl	%eax, -0x6c(%ebp)
	# 0x80507a6:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x80507ac:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80507af:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x80507b1:	movl	-0x5c(%ebp), %eax [MEM, REG]
	movl	-0x5c(%ebp), %eax
	# 0x80507b4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80507b6:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x80507b9:	movl	$0, -0x40(%ebp) [IMM, MEM]
	movl	$0, -0x40(%ebp)
	# 0x80507c0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80507c3:	pushl	-0x64(%ebp) [MEM]
	pushl	-0x64(%ebp)
	# 0x80507c6:	calll	0x805a1bc [IMM <CODEREF>]
	calll	get_quoting_style
	# 0x80507cb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80507ce:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x80507d1:	movzbl	0x806a468, %eax [MEM, REG]
	movzbl	qmark_funny_chars,  %eax
	# 0x80507d8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80507da:	je	0x80507f5 [IMM <CODEREF>]
	je	.label_754
	# 0x80507dc:	cmpl	$1, -0x28(%ebp) [IMM, MEM]
	cmpl	$1, -0x28(%ebp)
	# 0x80507e0:	je	0x80507ee [IMM <CODEREF>]
	je	.label_755
	# 0x80507e2:	cmpl	$2, -0x28(%ebp) [IMM, MEM]
	cmpl	$2, -0x28(%ebp)
	# 0x80507e6:	je	0x80507ee [IMM <CODEREF>]
	je	.label_755
	# 0x80507e8:	cmpl	$0, -0x28(%ebp) [IMM, MEM]
	cmpl	$0, -0x28(%ebp)
	# 0x80507ec:	jne	0x80507f5 [IMM <CODEREF>]
	jne	.label_754
	# 0x80507ee:	movl	$1, %eax [IMM, REG]
.label_755:
	movl	$1, %eax
	# 0x80507f3:	jmp	0x80507fa [IMM <CODEREF>]
	jmp	.label_759
	# 0x80507f5:	movl	$0, %eax [IMM, REG]
.label_754:
	movl	$0, %eax
	# 0x80507fa:	movb	%al, -0x4d(%ebp) [REG, MEM]
.label_759:
	movb	%al, -0x4d(%ebp)
	# 0x80507fd:	andb	$1, -0x4d(%ebp) [IMM, MEM]
	andb	$1, -0x4d(%ebp)
	# 0x8050801:	cmpl	$0, 0x18(%ebp) [IMM, MEM]
	cmpl	$0, 0x18(%ebp)
	# 0x8050805:	je	0x8050899 [IMM <CODEREF>]
	je	.label_760
	# 0x805080b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805080e:	pushl	-0x64(%ebp) [MEM]
	pushl	-0x64(%ebp)
	# 0x8050811:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x8050813:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8050816:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8050819:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805081c:	calll	0x805aff1 [IMM <CODEREF>]
	calll	quotearg_buffer
	# 0x8050821:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050824:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x8050827:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805082a:	cmpl	-0x40(%ebp), %eax [MEM, REG]
	cmpl	-0x40(%ebp), %eax
	# 0x805082d:	ja	0x8050861 [IMM <CODEREF>]
	ja	.label_730
	# 0x805082f:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050832:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8050835:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050838:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050839:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805083e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050841:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x8050844:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050847:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805084a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805084d:	pushl	-0x64(%ebp) [MEM]
	pushl	-0x64(%ebp)
	# 0x8050850:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x8050852:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8050855:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050856:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x8050859:	calll	0x805aff1 [IMM <CODEREF>]
	calll	quotearg_buffer
	# 0x805085e:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050861:	movl	-0x60(%ebp), %eax [MEM, REG]
.label_730:
	movl	-0x60(%ebp), %eax
	# 0x8050864:	movzbl	0(%eax), %edx [MEM, REG]
	movzbl	0(%eax), %edx
	# 0x8050867:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x805086a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805086d:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x805086f:	jne	0x8050884 [IMM <CODEREF>]
	jne	.label_741
	# 0x8050871:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050874:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8050877:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805087c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805087f:	cmpl	-0x40(%ebp), %eax [MEM, REG]
	cmpl	-0x40(%ebp), %eax
	# 0x8050882:	je	0x805088b [IMM <CODEREF>]
	je	.label_744
	# 0x8050884:	movl	$1, %eax [IMM, REG]
.label_741:
	movl	$1, %eax
	# 0x8050889:	jmp	0x8050890 [IMM <CODEREF>]
	jmp	.label_746
	# 0x805088b:	movl	$0, %eax [IMM, REG]
.label_744:
	movl	$0, %eax
	# 0x8050890:	movb	%al, -0x4e(%ebp) [REG, MEM]
.label_746:
	movb	%al, -0x4e(%ebp)
	# 0x8050893:	andb	$1, -0x4e(%ebp) [IMM, MEM]
	andb	$1, -0x4e(%ebp)
	# 0x8050897:	jmp	0x8050906 [IMM <CODEREF>]
	jmp	.label_733
	# 0x8050899:	cmpb	$0, -0x4d(%ebp) [IMM, MEM]
.label_760:
	cmpb	$0, -0x4d(%ebp)
	# 0x805089d:	je	0x80508eb [IMM <CODEREF>]
	je	.label_747
	# 0x805089f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80508a2:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x80508a5:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x80508aa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80508ad:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x80508b0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80508b3:	cmpl	-0x40(%ebp), %eax [MEM, REG]
	cmpl	-0x40(%ebp), %eax
	# 0x80508b6:	ja	0x80508cd [IMM <CODEREF>]
	ja	.label_750
	# 0x80508b8:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80508bb:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80508be:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80508c1:	pushl	%eax [REG]
	pushl	%eax
	# 0x80508c2:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x80508c7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80508ca:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x80508cd:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_750:
	movl	-0x40(%ebp), %eax
	# 0x80508d0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80508d3:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80508d6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80508d7:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x80508da:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x80508dd:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x80508e2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80508e5:	movb	$0, -0x4e(%ebp) [IMM, MEM]
	movb	$0, -0x4e(%ebp)
	# 0x80508e9:	jmp	0x8050906 [IMM <CODEREF>]
	jmp	.label_733
	# 0x80508eb:	subl	$0xc, %esp [IMM, REG]
.label_747:
	subl	$0xc, %esp
	# 0x80508ee:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x80508f1:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x80508f6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80508f9:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x80508fc:	movl	-0x60(%ebp), %eax [MEM, REG]
	movl	-0x60(%ebp), %eax
	# 0x80508ff:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x8050902:	movb	$0, -0x4e(%ebp) [IMM, MEM]
	movb	$0, -0x4e(%ebp)
	# 0x8050906:	cmpb	$0, -0x4d(%ebp) [IMM, MEM]
.label_733:
	cmpb	$0, -0x4d(%ebp)
	# 0x805090a:	je	0x8050afc [IMM <CODEREF>]
	je	.label_723
	# 0x8050910:	calll	0x80497c0 [IMM <CODEREF>]
	calll	__ctype_get_mb_cur_max
	# 0x8050915:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8050918:	jbe	0x8050a9a [IMM <CODEREF>]
	jbe	.label_726
	# 0x805091e:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x8050921:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x8050924:	movl	-0x48(%ebp), %edx [MEM, REG]
	movl	-0x48(%ebp), %edx
	# 0x8050927:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x805092a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805092c:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805092f:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x8050932:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x8050935:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x805093c:	jmp	0x8050a7c [IMM <CODEREF>]
	jmp	.label_729
	# 0x8050941:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_757:
	movl	-0x3c(%ebp), %eax
	# 0x8050944:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050947:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805094a:	cmpl	$0x3f, %eax [IMM, REG]
	cmpl	$0x3f, %eax
	# 0x805094d:	jg	0x805095e [IMM <CODEREF>]
	jg	.label_736
	# 0x805094f:	cmpl	$0x25, %eax [IMM, REG]
	cmpl	$0x25, %eax
	# 0x8050952:	jge	0x8050970 [IMM <CODEREF>]
	jge	.label_738
	# 0x8050954:	subl	$0x20, %eax [IMM, REG]
	subl	$0x20, %eax
	# 0x8050957:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x805095a:	ja	0x8050990 [IMM <CODEREF>]
	ja	.label_739
	# 0x805095c:	jmp	0x8050970 [IMM <CODEREF>]
	jmp	.label_738
	# 0x805095e:	cmpl	$0x41, %eax [IMM, REG]
.label_736:
	cmpl	$0x41, %eax
	# 0x8050961:	jl	0x8050990 [IMM <CODEREF>]
	jl	.label_739
	# 0x8050963:	cmpl	$0x5f, %eax [IMM, REG]
	cmpl	$0x5f, %eax
	# 0x8050966:	jle	0x8050970 [IMM <CODEREF>]
	jle	.label_738
	# 0x8050968:	subl	$0x61, %eax [IMM, REG]
	subl	$0x61, %eax
	# 0x805096b:	cmpl	$0x1d, %eax [IMM, REG]
	cmpl	$0x1d, %eax
	# 0x805096e:	ja	0x8050990 [IMM <CODEREF>]
	ja	.label_739
	# 0x8050970:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_738:
	movl	-0x38(%ebp), %eax
	# 0x8050973:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050976:	movl	%edx, -0x38(%ebp) [REG, MEM]
	movl	%edx, -0x38(%ebp)
	# 0x8050979:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x805097c:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x805097f:	movl	%ecx, -0x3c(%ebp) [REG, MEM]
	movl	%ecx, -0x3c(%ebp)
	# 0x8050982:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x8050985:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8050987:	addl	$1, -0x44(%ebp) [IMM, MEM]
	addl	$1, -0x44(%ebp)
	# 0x805098b:	jmp	0x8050a7c [IMM <CODEREF>]
	jmp	.label_729
	# 0x8050990:	movl	$0, -0x14(%ebp) [IMM, MEM]
.label_739:
	movl	$0, -0x14(%ebp)
	# 0x8050997:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x805099e:	movl	-0x24(%ebp), %edx [MEM, REG]
.label_743:
	movl	-0x24(%ebp), %edx
	# 0x80509a1:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x80509a4:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80509a6:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80509a8:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80509aa:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x80509ad:	pushl	%eax [REG]
	pushl	%eax
	# 0x80509ae:	pushl	%edx [REG]
	pushl	%edx
	# 0x80509af:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x80509b2:	leal	-0x4c(%ebp), %eax [MEM, REG]
	leal	-0x4c(%ebp), %eax
	# 0x80509b5:	pushl	%eax [REG]
	pushl	%eax
	# 0x80509b6:	calll	0x805d3ec [IMM <CODEREF>]
	calll	rpl_mbrtowc
	# 0x80509bb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80509be:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x80509c1:	cmpl	$-1, -0x34(%ebp) [IMM, MEM]
	cmpl	$-1, -0x34(%ebp)
	# 0x80509c5:	jne	0x80509e0 [IMM <CODEREF>]
	jne	.label_734
	# 0x80509c7:	addl	$1, -0x3c(%ebp) [IMM, MEM]
	addl	$1, -0x3c(%ebp)
	# 0x80509cb:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80509ce:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80509d1:	movl	%edx, -0x38(%ebp) [REG, MEM]
	movl	%edx, -0x38(%ebp)
	# 0x80509d4:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x80509d7:	addl	$1, -0x44(%ebp) [IMM, MEM]
	addl	$1, -0x44(%ebp)
	# 0x80509db:	jmp	0x8050a7b [IMM <CODEREF>]
	jmp	.label_753
	# 0x80509e0:	cmpl	$-2, -0x34(%ebp) [IMM, MEM]
.label_734:
	cmpl	$-2, -0x34(%ebp)
	# 0x80509e4:	jne	0x80509fe [IMM <CODEREF>]
	jne	.label_756
	# 0x80509e6:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x80509e9:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x80509ec:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80509ef:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80509f2:	movl	%edx, -0x38(%ebp) [REG, MEM]
	movl	%edx, -0x38(%ebp)
	# 0x80509f5:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x80509f8:	addl	$1, -0x44(%ebp) [IMM, MEM]
	addl	$1, -0x44(%ebp)
	# 0x80509fc:	jmp	0x8050a7b [IMM <CODEREF>]
	jmp	.label_753
	# 0x80509fe:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
.label_756:
	cmpl	$0, -0x34(%ebp)
	# 0x8050a02:	jne	0x8050a0b [IMM <CODEREF>]
	jne	.label_761
	# 0x8050a04:	movl	$1, -0x34(%ebp) [IMM, MEM]
	movl	$1, -0x34(%ebp)
	# 0x8050a0b:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_761:
	movl	-0x4c(%ebp), %eax
	# 0x8050a0e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050a11:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050a12:	calll	0x80495d0 [IMM <CODEREF>]
	calll	wcwidth
	# 0x8050a17:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050a1a:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8050a1d:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
	cmpl	$0, -0x20(%ebp)
	# 0x8050a21:	js	0x8050a4e [IMM <CODEREF>]
	js	.label_727
	# 0x8050a23:	jmp	0x8050a40 [IMM <CODEREF>]
	jmp	.label_731
	# 0x8050a25:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_735:
	movl	-0x38(%ebp), %eax
	# 0x8050a28:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050a2b:	movl	%edx, -0x38(%ebp) [REG, MEM]
	movl	%edx, -0x38(%ebp)
	# 0x8050a2e:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x8050a31:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x8050a34:	movl	%ecx, -0x3c(%ebp) [REG, MEM]
	movl	%ecx, -0x3c(%ebp)
	# 0x8050a37:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x8050a3a:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8050a3c:	subl	$1, -0x34(%ebp) [IMM, MEM]
	subl	$1, -0x34(%ebp)
	# 0x8050a40:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
.label_731:
	cmpl	$0, -0x34(%ebp)
	# 0x8050a44:	jne	0x8050a25 [IMM <CODEREF>]
	jne	.label_735
	# 0x8050a46:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8050a49:	addl	%eax, -0x44(%ebp) [REG, MEM]
	addl	%eax, -0x44(%ebp)
	# 0x8050a4c:	jmp	0x8050a64 [IMM <CODEREF>]
	jmp	.label_737
	# 0x8050a4e:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_727:
	movl	-0x34(%ebp), %eax
	# 0x8050a51:	addl	%eax, -0x3c(%ebp) [REG, MEM]
	addl	%eax, -0x3c(%ebp)
	# 0x8050a54:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8050a57:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050a5a:	movl	%edx, -0x38(%ebp) [REG, MEM]
	movl	%edx, -0x38(%ebp)
	# 0x8050a5d:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x8050a60:	addl	$1, -0x44(%ebp) [IMM, MEM]
	addl	$1, -0x44(%ebp)
	# 0x8050a64:	subl	$0xc, %esp [IMM, REG]
.label_737:
	subl	$0xc, %esp
	# 0x8050a67:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x8050a6a:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050a6b:	calll	0x8049630 [IMM <CODEREF>]
	calll	mbsinit
	# 0x8050a70:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050a73:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050a75:	je	0x805099e [IMM <CODEREF>]
	je	.label_743
	# 0x8050a7b:	nop	 []
.label_753:
	nop	
	# 0x8050a7c:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_729:
	movl	-0x3c(%ebp), %eax
	# 0x8050a7f:	cmpl	-0x24(%ebp), %eax [MEM, REG]
	cmpl	-0x24(%ebp), %eax
	# 0x8050a82:	jb	0x8050941 [IMM <CODEREF>]
	jb	.label_757
	# 0x8050a88:	movl	-0x38(%ebp), %edx [MEM, REG]
	movl	-0x38(%ebp), %edx
	# 0x8050a8b:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x8050a8e:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8050a90:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8050a92:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x8050a95:	jmp	0x8050b80 [IMM <CODEREF>]
	jmp	.label_728
	# 0x8050a9a:	movl	-0x48(%ebp), %eax [MEM, REG]
.label_726:
	movl	-0x48(%ebp), %eax
	# 0x8050a9d:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x8050aa0:	movl	-0x48(%ebp), %edx [MEM, REG]
	movl	-0x48(%ebp), %edx
	# 0x8050aa3:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050aa6:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8050aa8:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8050aab:	jmp	0x8050ae9 [IMM <CODEREF>]
	jmp	.label_748
	# 0x8050aad:	calll	0x8049ba0 [IMM <CODEREF>]
.label_758:
	calll	__ctype_b_loc
	# 0x8050ab2:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x8050ab4:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8050ab7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050aba:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8050abd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050ac0:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050ac1:	calll	0x8049cef [IMM <CODEREF>]
	calll	to_uchar
	# 0x8050ac6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050ac9:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8050acc:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8050ace:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x8050ad0:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x8050ad3:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x8050ad6:	andl	$0x4000, %eax [IMM, REG]
	andl	$0x4000, %eax
	# 0x8050adb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050add:	jne	0x8050ae5 [IMM <CODEREF>]
	jne	.label_752
	# 0x8050adf:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8050ae2:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x8050ae5:	addl	$1, -0x30(%ebp) [IMM, MEM]
.label_752:
	addl	$1, -0x30(%ebp)
	# 0x8050ae9:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_748:
	movl	-0x30(%ebp), %eax
	# 0x8050aec:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x8050aef:	jb	0x8050aad [IMM <CODEREF>]
	jb	.label_758
	# 0x8050af1:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050af4:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x8050af7:	jmp	0x8050b80 [IMM <CODEREF>]
	jmp	.label_728
	# 0x8050afc:	cmpl	$0, -0x68(%ebp) [IMM, MEM]
.label_723:
	cmpl	$0, -0x68(%ebp)
	# 0x8050b00:	je	0x8050b80 [IMM <CODEREF>]
	je	.label_728
	# 0x8050b02:	calll	0x80497c0 [IMM <CODEREF>]
	calll	__ctype_get_mb_cur_max
	# 0x8050b07:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8050b0a:	jbe	0x8050b24 [IMM <CODEREF>]
	jbe	.label_724
	# 0x8050b0c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050b0f:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050b11:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x8050b14:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x8050b17:	calll	0x8057562 [IMM <CODEREF>]
	calll	mbsnwidth
	# 0x8050b1c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050b1f:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x8050b22:	jmp	0x8050b80 [IMM <CODEREF>]
	jmp	.label_728
	# 0x8050b24:	movl	-0x48(%ebp), %eax [MEM, REG]
.label_724:
	movl	-0x48(%ebp), %eax
	# 0x8050b27:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8050b2a:	movl	-0x48(%ebp), %edx [MEM, REG]
	movl	-0x48(%ebp), %edx
	# 0x8050b2d:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050b30:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8050b32:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8050b35:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x8050b3c:	jmp	0x8050b78 [IMM <CODEREF>]
	jmp	.label_732
	# 0x8050b3e:	calll	0x8049ba0 [IMM <CODEREF>]
.label_742:
	calll	__ctype_b_loc
	# 0x8050b43:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x8050b45:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8050b48:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050b4b:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8050b4e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050b51:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050b52:	calll	0x8049cef [IMM <CODEREF>]
	calll	to_uchar
	# 0x8050b57:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050b5a:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8050b5d:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8050b5f:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x8050b61:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x8050b64:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x8050b67:	andl	$0x4000, %eax [IMM, REG]
	andl	$0x4000, %eax
	# 0x8050b6c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8050b6e:	je	0x8050b74 [IMM <CODEREF>]
	je	.label_740
	# 0x8050b70:	addl	$1, -0x44(%ebp) [IMM, MEM]
	addl	$1, -0x44(%ebp)
	# 0x8050b74:	addl	$1, -0x2c(%ebp) [IMM, MEM]
.label_740:
	addl	$1, -0x2c(%ebp)
	# 0x8050b78:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_732:
	movl	-0x2c(%ebp), %eax
	# 0x8050b7b:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x8050b7e:	jb	0x8050b3e [IMM <CODEREF>]
	jb	.label_742
	# 0x8050b80:	movzbl	0x806a3d1, %eax [MEM, REG]
.label_728:
	movzbl	align_variable_outer_quotes,  %eax
	# 0x8050b87:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050b89:	je	0x8050ba8 [IMM <CODEREF>]
	je	.label_745
	# 0x8050b8b:	movzbl	0x806a3d0, %eax [MEM, REG]
	movzbl	cwd_some_quoted,  %eax
	# 0x8050b92:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050b94:	je	0x8050ba8 [IMM <CODEREF>]
	je	.label_745
	# 0x8050b96:	movzbl	-0x4e(%ebp), %eax [MEM, REG]
	movzbl	-0x4e(%ebp), %eax
	# 0x8050b9a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8050b9d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050b9f:	je	0x8050ba8 [IMM <CODEREF>]
	je	.label_745
	# 0x8050ba1:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8050ba6:	jmp	0x8050bad [IMM <CODEREF>]
	jmp	.label_749
	# 0x8050ba8:	movl	$0, %eax [IMM, REG]
.label_745:
	movl	$0, %eax
	# 0x8050bad:	andl	$1, %eax [IMM, REG]
.label_749:
	andl	$1, %eax
	# 0x8050bb0:	movl	-0x6c(%ebp), %edx [MEM, REG]
	movl	-0x6c(%ebp), %edx
	# 0x8050bb3:	movb	%al, 0(%edx) [REG, MEM]
	movb	%al, 0(%edx)
	# 0x8050bb5:	cmpl	$0, -0x68(%ebp) [IMM, MEM]
	cmpl	$0, -0x68(%ebp)
	# 0x8050bb9:	je	0x8050bc3 [IMM <CODEREF>]
	je	.label_725
	# 0x8050bbb:	movl	-0x68(%ebp), %eax [MEM, REG]
	movl	-0x68(%ebp), %eax
	# 0x8050bbe:	movl	-0x44(%ebp), %edx [MEM, REG]
	movl	-0x44(%ebp), %edx
	# 0x8050bc1:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8050bc3:	movl	-0x5c(%ebp), %eax [MEM, REG]
.label_725:
	movl	-0x5c(%ebp), %eax
	# 0x8050bc6:	movl	-0x48(%ebp), %edx [MEM, REG]
	movl	-0x48(%ebp), %edx
	# 0x8050bc9:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8050bcb:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8050bce:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x8050bd1:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8050bd8:	je	0x8050bdf [IMM <CODEREF>]
	je	.label_751
	# 0x8050bda:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8050bdf:	movl	-4(%ebp), %ebx [MEM, REG]
.label_751:
	movl	-4(%ebp), %ebx
	# 0x8050be2:	leave	 []
	leave	
	# 0x8050be3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8050be4

	# 0x8050be4:	pushl	%ebp [REG]
	.globl quote_name_width
	.type quote_name_width, @function
quote_name_width:
	pushl	%ebp
	# 0x8050be5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8050be7:	subl	$0x2028, %esp [IMM, REG]
	subl	$0x2028, %esp
	# 0x8050bed:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8050bf0:	movl	%eax, -0x201c(%ebp) [REG, MEM]
	movl	%eax, -0x201c(%ebp)
	# 0x8050bf6:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8050bf9:	movl	%eax, -0x2020(%ebp) [REG, MEM]
	movl	%eax, -0x2020(%ebp)
	# 0x8050bff:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8050c05:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8050c08:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8050c0a:	leal	-0x200c(%ebp), %eax [MEM, REG]
	leal	-0x200c(%ebp), %eax
	# 0x8050c10:	movl	%eax, -0x2014(%ebp) [REG, MEM]
	movl	%eax, -0x2014(%ebp)
	# 0x8050c16:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050c19:	leal	-0x2015(%ebp), %eax [MEM, REG]
	leal	-0x2015(%ebp), %eax
	# 0x8050c1f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050c20:	leal	-0x2010(%ebp), %eax [MEM, REG]
	leal	-0x2010(%ebp), %eax
	# 0x8050c26:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050c27:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8050c2a:	pushl	-0x2020(%ebp) [MEM]
	pushl	-0x2020(%ebp)
	# 0x8050c30:	pushl	-0x201c(%ebp) [MEM]
	pushl	-0x201c(%ebp)
	# 0x8050c36:	pushl	$0x2000 [IMM]
	pushl	$0x2000
	# 0x8050c3b:	leal	-0x2014(%ebp), %eax [MEM, REG]
	leal	-0x2014(%ebp), %eax
	# 0x8050c41:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050c42:	calll	0x8050781 [IMM <CODEREF>]
	calll	quote_name_buf
	# 0x8050c47:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050c4a:	movl	-0x2014(%ebp), %edx [MEM, REG]
	movl	-0x2014(%ebp), %edx
	# 0x8050c50:	leal	-0x200c(%ebp), %eax [MEM, REG]
	leal	-0x200c(%ebp), %eax
	# 0x8050c56:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8050c58:	je	0x8050c7a [IMM <CODEREF>]
	je	.label_762
	# 0x8050c5a:	movl	-0x2014(%ebp), %eax [MEM, REG]
	movl	-0x2014(%ebp), %eax
	# 0x8050c60:	cmpl	-0x201c(%ebp), %eax [MEM, REG]
	cmpl	-0x201c(%ebp), %eax
	# 0x8050c66:	je	0x8050c7a [IMM <CODEREF>]
	je	.label_762
	# 0x8050c68:	movl	-0x2014(%ebp), %eax [MEM, REG]
	movl	-0x2014(%ebp), %eax
	# 0x8050c6e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050c71:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050c72:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8050c77:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050c7a:	movzbl	-0x2015(%ebp), %eax [MEM, REG]
.label_762:
	movzbl	-0x2015(%ebp), %eax
	# 0x8050c81:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x8050c84:	movl	-0x2010(%ebp), %eax [MEM, REG]
	movl	-0x2010(%ebp), %eax
	# 0x8050c8a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8050c8c:	movl	%eax, -0x2010(%ebp) [REG, MEM]
	movl	%eax, -0x2010(%ebp)
	# 0x8050c92:	movl	-0x2010(%ebp), %eax [MEM, REG]
	movl	-0x2010(%ebp), %eax
	# 0x8050c98:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x8050c9b:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8050ca2:	je	0x8050ca9 [IMM <CODEREF>]
	je	.label_763
	# 0x8050ca4:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8050ca9:	leave	 []
.label_763:
	leave	
	# 0x8050caa:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8050cab

	# 0x8050cab:	pushl	%ebp [REG]
	.globl file_escape
	.type file_escape, @function
file_escape:
	pushl	%ebp
	# 0x8050cac:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8050cae:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8050cb1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8050cb4:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x8050cb7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050cba:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8050cbd:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8050cc2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050cc5:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8050cc8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050ccb:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050ccc:	pushl	$3 [IMM]
	pushl	$3
	# 0x8050cce:	calll	0x805c3f0 [IMM <CODEREF>]
	calll	xnmalloc
	# 0x8050cd3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050cd6:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8050cd9:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8050cdc:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8050cdf:	jmp	0x8050d77 [IMM <CODEREF>]
	jmp	.label_765
	# 0x8050ce4:	cmpb	$0, -0x1c(%ebp) [IMM, MEM]
.label_766:
	cmpb	$0, -0x1c(%ebp)
	# 0x8050ce8:	je	0x8050d06 [IMM <CODEREF>]
	je	.label_764
	# 0x8050cea:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8050ced:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050cf0:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8050cf2:	jne	0x8050d06 [IMM <CODEREF>]
	jne	.label_764
	# 0x8050cf4:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8050cf7:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050cfa:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x8050cfd:	movb	$0x2f, 0(%eax) [IMM, MEM]
	movb	$0x2f, 0(%eax)
	# 0x8050d00:	addl	$1, 8(%ebp) [IMM, MEM]
	addl	$1, 8(%ebp)
	# 0x8050d04:	jmp	0x8050d77 [IMM <CODEREF>]
	jmp	.label_765
	# 0x8050d06:	movl	8(%ebp), %eax [MEM, REG]
.label_764:
	movl	8(%ebp), %eax
	# 0x8050d09:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050d0c:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8050d0f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050d12:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050d13:	calll	0x8049cef [IMM <CODEREF>]
	calll	to_uchar
	# 0x8050d18:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050d1b:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8050d1e:	movzbl	0x806a600(%eax), %eax [MEM, REG]
	movzbl	RFC3986(%eax),  %eax
	# 0x8050d25:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050d27:	je	0x8050d42 [IMM <CODEREF>]
	je	.label_767
	# 0x8050d29:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8050d2c:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050d2f:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x8050d32:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8050d35:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x8050d38:	movl	%ecx, 8(%ebp) [REG, MEM]
	movl	%ecx, 8(%ebp)
	# 0x8050d3b:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x8050d3e:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8050d40:	jmp	0x8050d77 [IMM <CODEREF>]
	jmp	.label_765
	# 0x8050d42:	movl	8(%ebp), %eax [MEM, REG]
.label_767:
	movl	8(%ebp), %eax
	# 0x8050d45:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8050d48:	movl	%edx, 8(%ebp) [REG, MEM]
	movl	%edx, 8(%ebp)
	# 0x8050d4b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050d4e:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8050d51:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050d54:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050d55:	calll	0x8049cef [IMM <CODEREF>]
	calll	to_uchar
	# 0x8050d5a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050d5d:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8050d60:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050d63:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050d64:	pushl	$0x80615a0 [IMM <DATAREF>]
	pushl	$label_768
	# 0x8050d69:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8050d6c:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x8050d71:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050d74:	addl	%eax, -0x10(%ebp) [REG, MEM]
	addl	%eax, -0x10(%ebp)
	# 0x8050d77:	movl	8(%ebp), %eax [MEM, REG]
.label_765:
	movl	8(%ebp), %eax
	# 0x8050d7a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050d7d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050d7f:	jne	0x8050ce4 [IMM <CODEREF>]
	jne	.label_766
	# 0x8050d85:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8050d88:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8050d8b:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8050d8e:	leave	 []
	leave	
	# 0x8050d8f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8050d90

	# 0x8050d90:	pushl	%ebp [REG]
	.globl quote_name
	.type quote_name, @function
quote_name:
	pushl	%ebp
	# 0x8050d91:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8050d93:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8050d94:	subl	$0x2054, %esp [IMM, REG]
	subl	$0x2054, %esp
	# 0x8050d9a:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x8050d9d:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8050da0:	movl	%edx, -0x203c(%ebp) [REG, MEM]
	movl	%edx, -0x203c(%ebp)
	# 0x8050da6:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x8050da9:	movl	%edx, -0x2040(%ebp) [REG, MEM]
	movl	%edx, -0x2040(%ebp)
	# 0x8050daf:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x8050db2:	movl	%edx, -0x2044(%ebp) [REG, MEM]
	movl	%edx, -0x2044(%ebp)
	# 0x8050db8:	movb	%al, -0x2048(%ebp) [REG, MEM]
	movb	%al, -0x2048(%ebp)
	# 0x8050dbe:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x8050dc1:	movl	%eax, -0x204c(%ebp) [REG, MEM]
	movl	%eax, -0x204c(%ebp)
	# 0x8050dc7:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x8050dca:	movl	%eax, -0x2050(%ebp) [REG, MEM]
	movl	%eax, -0x2050(%ebp)
	# 0x8050dd0:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8050dd6:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8050dd9:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8050ddb:	leal	-0x200c(%ebp), %eax [MEM, REG]
	leal	-0x200c(%ebp), %eax
	# 0x8050de1:	movl	%eax, -0x2034(%ebp) [REG, MEM]
	movl	%eax, -0x2034(%ebp)
	# 0x8050de7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050dea:	leal	-0x2036(%ebp), %eax [MEM, REG]
	leal	-0x2036(%ebp), %eax
	# 0x8050df0:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050df1:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050df3:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8050df6:	pushl	-0x2040(%ebp) [MEM]
	pushl	-0x2040(%ebp)
	# 0x8050dfc:	pushl	-0x203c(%ebp) [MEM]
	pushl	-0x203c(%ebp)
	# 0x8050e02:	pushl	$0x2000 [IMM]
	pushl	$0x2000
	# 0x8050e07:	leal	-0x2034(%ebp), %eax [MEM, REG]
	leal	-0x2034(%ebp), %eax
	# 0x8050e0d:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050e0e:	calll	0x8050781 [IMM <CODEREF>]
	calll	quote_name_buf
	# 0x8050e13:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8050e16:	movl	%eax, -0x2030(%ebp) [REG, MEM]
	movl	%eax, -0x2030(%ebp)
	# 0x8050e1c:	movzbl	-0x2036(%ebp), %eax [MEM, REG]
	movzbl	-0x2036(%ebp), %eax
	# 0x8050e23:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050e25:	je	0x8050e4a [IMM <CODEREF>]
	je	.label_772
	# 0x8050e27:	cmpb	$0, -0x2048(%ebp) [IMM, MEM]
	cmpb	$0, -0x2048(%ebp)
	# 0x8050e2e:	je	0x8050e4a [IMM <CODEREF>]
	je	.label_772
	# 0x8050e30:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050e33:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8050e35:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8050e3a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050e3d:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x8050e42:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8050e45:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x8050e4a:	cmpl	$0, -0x2044(%ebp) [IMM, MEM]
.label_772:
	cmpl	$0, -0x2044(%ebp)
	# 0x8050e51:	je	0x8050e64 [IMM <CODEREF>]
	je	.label_777
	# 0x8050e53:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050e56:	pushl	-0x2044(%ebp) [MEM]
	pushl	-0x2044(%ebp)
	# 0x8050e5c:	calll	0x8051626 [IMM <CODEREF>]
	calll	print_color_indicator
	# 0x8050e61:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050e64:	movb	$0, -0x2035(%ebp) [IMM, MEM]
.label_777:
	movb	$0, -0x2035(%ebp)
	# 0x8050e6b:	cmpl	$0, -0x2050(%ebp) [IMM, MEM]
	cmpl	$0, -0x2050(%ebp)
	# 0x8050e72:	je	0x8050f42 [IMM <CODEREF>]
	je	.label_779
	# 0x8050e78:	movzbl	0x806a3d1, %eax [MEM, REG]
	movzbl	align_variable_outer_quotes,  %eax
	# 0x8050e7f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050e81:	je	0x8050ebb [IMM <CODEREF>]
	je	.label_770
	# 0x8050e83:	movzbl	0x806a3d0, %eax [MEM, REG]
	movzbl	cwd_some_quoted,  %eax
	# 0x8050e8a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050e8c:	je	0x8050ebb [IMM <CODEREF>]
	je	.label_770
	# 0x8050e8e:	movzbl	-0x2036(%ebp), %eax [MEM, REG]
	movzbl	-0x2036(%ebp), %eax
	# 0x8050e95:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8050e98:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050e9a:	je	0x8050ebb [IMM <CODEREF>]
	je	.label_770
	# 0x8050e9c:	movb	$1, -0x2035(%ebp) [IMM, MEM]
	movb	$1, -0x2035(%ebp)
	# 0x8050ea3:	movl	-0x2034(%ebp), %eax [MEM, REG]
	movl	-0x2034(%ebp), %eax
	# 0x8050ea9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050eac:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8050eaf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050eb2:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050eb3:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8050eb8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050ebb:	movl	0x806a3e0, %eax [MEM, REG]
.label_770:
	movl	hostname,  %eax
	# 0x8050ec0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050ec3:	pushl	$0 [IMM]
	pushl	$0
	# 0x8050ec5:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050ec6:	calll	0x8050cab [IMM <CODEREF>]
	calll	file_escape
	# 0x8050ecb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050ece:	movl	%eax, -0x202c(%ebp) [REG, MEM]
	movl	%eax, -0x202c(%ebp)
	# 0x8050ed4:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050ed7:	pushl	$1 [IMM]
	pushl	$1
	# 0x8050ed9:	pushl	-0x2050(%ebp) [MEM]
	pushl	-0x2050(%ebp)
	# 0x8050edf:	calll	0x8050cab [IMM <CODEREF>]
	calll	file_escape
	# 0x8050ee4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050ee7:	movl	%eax, -0x2028(%ebp) [REG, MEM]
	movl	%eax, -0x2028(%ebp)
	# 0x8050eed:	movl	-0x2028(%ebp), %eax [MEM, REG]
	movl	-0x2028(%ebp), %eax
	# 0x8050ef3:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8050ef6:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8050ef8:	jne	0x8050f01 [IMM <CODEREF>]
	jne	.label_781
	# 0x8050efa:	movl	$0x805eef7, %eax [IMM <DATAREF>, REG]
	movl	$label_26,  %eax
	# 0x8050eff:	jmp	0x8050f06 [IMM <CODEREF>]
	jmp	.label_784
	# 0x8050f01:	movl	$0x80615a7, %eax [IMM <DATAREF>, REG]
.label_781:
	movl	$label_769,  %eax
	# 0x8050f06:	pushl	-0x2028(%ebp) [MEM]
.label_784:
	pushl	-0x2028(%ebp)
	# 0x8050f0c:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050f0d:	pushl	-0x202c(%ebp) [MEM]
	pushl	-0x202c(%ebp)
	# 0x8050f13:	pushl	$0x80615a9 [IMM <DATAREF>]
	pushl	$label_771
	# 0x8050f18:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x8050f1d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050f20:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050f23:	pushl	-0x202c(%ebp) [MEM]
	pushl	-0x202c(%ebp)
	# 0x8050f29:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8050f2e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050f31:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8050f34:	pushl	-0x2028(%ebp) [MEM]
	pushl	-0x2028(%ebp)
	# 0x8050f3a:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8050f3f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050f42:	cmpl	$0, -0x204c(%ebp) [IMM, MEM]
.label_779:
	cmpl	$0, -0x204c(%ebp)
	# 0x8050f49:	je	0x8050ff1 [IMM <CODEREF>]
	je	.label_776
	# 0x8050f4f:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x8050f56:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8050f58:	je	0x8050ff1 [IMM <CODEREF>]
	je	.label_776
	# 0x8050f5e:	movl	-0x204c(%ebp), %eax [MEM, REG]
	movl	-0x204c(%ebp), %eax
	# 0x8050f64:	movl	%eax, -0x2024(%ebp) [REG, MEM]
	movl	%eax, -0x2024(%ebp)
	# 0x8050f6a:	movl	$4, -0x2020(%ebp) [IMM, MEM]
	movl	$4, -0x2020(%ebp)
	# 0x8050f74:	movl	-0x2024(%ebp), %eax [MEM, REG]
	movl	-0x2024(%ebp), %eax
	# 0x8050f7a:	movl	%eax, -0x201c(%ebp) [REG, MEM]
	movl	%eax, -0x201c(%ebp)
	# 0x8050f80:	movl	-0x201c(%ebp), %eax [MEM, REG]
	movl	-0x201c(%ebp), %eax
	# 0x8050f86:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8050f89:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8050f8b:	movl	-0x201c(%ebp), %eax [MEM, REG]
	movl	-0x201c(%ebp), %eax
	# 0x8050f91:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8050f94:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8050f96:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8050f98:	cmpl	-0x2020(%ebp), %eax [MEM, REG]
	cmpl	-0x2020(%ebp), %eax
	# 0x8050f9e:	jae	0x8050fb7 [IMM <CODEREF>]
	jae	.label_780
	# 0x8050fa0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8050fa3:	pushl	-0x2020(%ebp) [MEM]
	pushl	-0x2020(%ebp)
	# 0x8050fa9:	pushl	-0x2024(%ebp) [MEM]
	pushl	-0x2024(%ebp)
	# 0x8050faf:	calll	0x805d691 [IMM <CODEREF>]
	calll	_obstack_newchunk
	# 0x8050fb4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050fb7:	movl	-0x2024(%ebp), %eax [MEM, REG]
.label_780:
	movl	-0x2024(%ebp), %eax
	# 0x8050fbd:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8050fc0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8050fc3:	pushl	-0x2020(%ebp) [MEM]
	pushl	-0x2020(%ebp)
	# 0x8050fc9:	pushl	$0x806a534 [IMM <DATAREF>]
	pushl	$dired_pos
	# 0x8050fce:	pushl	%eax [REG]
	pushl	%eax
	# 0x8050fcf:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8050fd4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8050fd7:	movl	-0x2024(%ebp), %eax [MEM, REG]
	movl	-0x2024(%ebp), %eax
	# 0x8050fdd:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x8050fe0:	movl	-0x2020(%ebp), %eax [MEM, REG]
	movl	-0x2020(%ebp), %eax
	# 0x8050fe6:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8050fe8:	movl	-0x2024(%ebp), %eax [MEM, REG]
	movl	-0x2024(%ebp), %eax
	# 0x8050fee:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x8050ff1:	movl	0x806a398, %eax [MEM, REG]
.label_776:
	movl	stdout,  %eax
	# 0x8050ff6:	movzbl	-0x2035(%ebp), %edx [MEM, REG]
	movzbl	-0x2035(%ebp), %edx
	# 0x8050ffd:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x8050fff:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x8051001:	movl	-0x2030(%ebp), %edx [MEM, REG]
	movl	-0x2030(%ebp), %edx
	# 0x8051007:	subl	%ecx, %edx [REG, REG]
	subl	%ecx, %edx
	# 0x8051009:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805100b:	movl	-0x2034(%ebp), %ebx [MEM, REG]
	movl	-0x2034(%ebp), %ebx
	# 0x8051011:	movzbl	-0x2035(%ebp), %edx [MEM, REG]
	movzbl	-0x2035(%ebp), %edx
	# 0x8051018:	addl	%ebx, %edx [REG, REG]
	addl	%ebx, %edx
	# 0x805101a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805101b:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805101c:	pushl	$1 [IMM]
	pushl	$1
	# 0x805101e:	pushl	%edx [REG]
	pushl	%edx
	# 0x805101f:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x8051024:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051027:	movl	0x806a534, %edx [MEM, REG]
	movl	dired_pos,  %edx
	# 0x805102d:	movl	-0x2030(%ebp), %eax [MEM, REG]
	movl	-0x2030(%ebp), %eax
	# 0x8051033:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051035:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x805103a:	cmpl	$0, -0x204c(%ebp) [IMM, MEM]
	cmpl	$0, -0x204c(%ebp)
	# 0x8051041:	je	0x80510e9 [IMM <CODEREF>]
	je	.label_773
	# 0x8051047:	movzbl	0x806a43c, %eax [MEM, REG]
	movzbl	dired,  %eax
	# 0x805104e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051050:	je	0x80510e9 [IMM <CODEREF>]
	je	.label_773
	# 0x8051056:	movl	-0x204c(%ebp), %eax [MEM, REG]
	movl	-0x204c(%ebp), %eax
	# 0x805105c:	movl	%eax, -0x2018(%ebp) [REG, MEM]
	movl	%eax, -0x2018(%ebp)
	# 0x8051062:	movl	$4, -0x2014(%ebp) [IMM, MEM]
	movl	$4, -0x2014(%ebp)
	# 0x805106c:	movl	-0x2018(%ebp), %eax [MEM, REG]
	movl	-0x2018(%ebp), %eax
	# 0x8051072:	movl	%eax, -0x2010(%ebp) [REG, MEM]
	movl	%eax, -0x2010(%ebp)
	# 0x8051078:	movl	-0x2010(%ebp), %eax [MEM, REG]
	movl	-0x2010(%ebp), %eax
	# 0x805107e:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8051081:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8051083:	movl	-0x2010(%ebp), %eax [MEM, REG]
	movl	-0x2010(%ebp), %eax
	# 0x8051089:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805108c:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805108e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8051090:	cmpl	-0x2014(%ebp), %eax [MEM, REG]
	cmpl	-0x2014(%ebp), %eax
	# 0x8051096:	jae	0x80510af [IMM <CODEREF>]
	jae	.label_778
	# 0x8051098:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805109b:	pushl	-0x2014(%ebp) [MEM]
	pushl	-0x2014(%ebp)
	# 0x80510a1:	pushl	-0x2018(%ebp) [MEM]
	pushl	-0x2018(%ebp)
	# 0x80510a7:	calll	0x805d691 [IMM <CODEREF>]
	calll	_obstack_newchunk
	# 0x80510ac:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80510af:	movl	-0x2018(%ebp), %eax [MEM, REG]
.label_778:
	movl	-0x2018(%ebp), %eax
	# 0x80510b5:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80510b8:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80510bb:	pushl	-0x2014(%ebp) [MEM]
	pushl	-0x2014(%ebp)
	# 0x80510c1:	pushl	$0x806a534 [IMM <DATAREF>]
	pushl	$dired_pos
	# 0x80510c6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80510c7:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x80510cc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80510cf:	movl	-0x2018(%ebp), %eax [MEM, REG]
	movl	-0x2018(%ebp), %eax
	# 0x80510d5:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x80510d8:	movl	-0x2014(%ebp), %eax [MEM, REG]
	movl	-0x2014(%ebp), %eax
	# 0x80510de:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x80510e0:	movl	-0x2018(%ebp), %eax [MEM, REG]
	movl	-0x2018(%ebp), %eax
	# 0x80510e6:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x80510e9:	cmpl	$0, -0x2050(%ebp) [IMM, MEM]
.label_773:
	cmpl	$0, -0x2050(%ebp)
	# 0x80510f0:	je	0x8051135 [IMM <CODEREF>]
	je	.label_774
	# 0x80510f2:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x80510f7:	pushl	%eax [REG]
	pushl	%eax
	# 0x80510f8:	pushl	$6 [IMM]
	pushl	$6
	# 0x80510fa:	pushl	$1 [IMM]
	pushl	$1
	# 0x80510fc:	pushl	$0x80615bd [IMM <DATAREF>]
	pushl	$label_783
	# 0x8051101:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x8051106:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051109:	cmpb	$0, -0x2035(%ebp) [IMM, MEM]
	cmpb	$0, -0x2035(%ebp)
	# 0x8051110:	je	0x8051135 [IMM <CODEREF>]
	je	.label_774
	# 0x8051112:	movl	-0x2034(%ebp), %eax [MEM, REG]
	movl	-0x2034(%ebp), %eax
	# 0x8051118:	movl	-0x2030(%ebp), %edx [MEM, REG]
	movl	-0x2030(%ebp), %edx
	# 0x805111e:	subl	$1, %edx [IMM, REG]
	subl	$1, %edx
	# 0x8051121:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051123:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8051126:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8051129:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805112c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805112d:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051132:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051135:	movl	-0x2034(%ebp), %edx [MEM, REG]
.label_774:
	movl	-0x2034(%ebp), %edx
	# 0x805113b:	leal	-0x200c(%ebp), %eax [MEM, REG]
	leal	-0x200c(%ebp), %eax
	# 0x8051141:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8051143:	je	0x8051165 [IMM <CODEREF>]
	je	.label_775
	# 0x8051145:	movl	-0x2034(%ebp), %eax [MEM, REG]
	movl	-0x2034(%ebp), %eax
	# 0x805114b:	cmpl	-0x203c(%ebp), %eax [MEM, REG]
	cmpl	-0x203c(%ebp), %eax
	# 0x8051151:	je	0x8051165 [IMM <CODEREF>]
	je	.label_775
	# 0x8051153:	movl	-0x2034(%ebp), %eax [MEM, REG]
	movl	-0x2034(%ebp), %eax
	# 0x8051159:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805115c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805115d:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8051162:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051165:	movzbl	-0x2036(%ebp), %eax [MEM, REG]
.label_775:
	movzbl	-0x2036(%ebp), %eax
	# 0x805116c:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x805116f:	movl	-0x2030(%ebp), %eax [MEM, REG]
	movl	-0x2030(%ebp), %eax
	# 0x8051175:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051177:	movl	-0xc(%ebp), %ebx [MEM, REG]
	movl	-0xc(%ebp), %ebx
	# 0x805117a:	xorl	%gs:0x14, %ebx [MEM, REG]
	xorl	%gs:0x14, %ebx
	# 0x8051181:	je	0x8051188 [IMM <CODEREF>]
	je	.label_782
	# 0x8051183:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8051188:	movl	-4(%ebp), %ebx [MEM, REG]
.label_782:
	movl	-4(%ebp), %ebx
	# 0x805118b:	leave	 []
	leave	
	# 0x805118c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805118d

	# 0x805118d:	pushl	%ebp [REG]
	.globl print_name_with_quoting
	.type print_name_with_quoting, @function
print_name_with_quoting:
	pushl	%ebp
	# 0x805118e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051190:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8051191:	subl	$0x24, %esp [IMM, REG]
	subl	$0x24, %esp
	# 0x8051194:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8051197:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x805119a:	cmpb	$0, -0x1c(%ebp) [IMM, MEM]
	cmpb	$0, -0x1c(%ebp)
	# 0x805119e:	je	0x80511a8 [IMM <CODEREF>]
	je	.label_788
	# 0x80511a0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80511a3:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80511a6:	jmp	0x80511ad [IMM <CODEREF>]
	jmp	.label_790
	# 0x80511a8:	movl	8(%ebp), %eax [MEM, REG]
.label_788:
	movl	8(%ebp), %eax
	# 0x80511ab:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80511ad:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_790:
	movl	%eax, -0x14(%ebp)
	# 0x80511b0:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x80511b7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80511b9:	je	0x80511d0 [IMM <CODEREF>]
	je	.label_792
	# 0x80511bb:	movzbl	-0x1c(%ebp), %eax [MEM, REG]
	movzbl	-0x1c(%ebp), %eax
	# 0x80511bf:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80511c2:	pushl	%eax [REG]
	pushl	%eax
	# 0x80511c3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80511c6:	calll	0x805167f [IMM <CODEREF>]
	calll	get_color_indicator
	# 0x80511cb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80511ce:	jmp	0x80511d5 [IMM <CODEREF>]
	jmp	.label_785
	# 0x80511d0:	movl	$0, %eax [IMM, REG]
.label_792:
	movl	$0, %eax
	# 0x80511d5:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_785:
	movl	%eax, -0x10(%ebp)
	# 0x80511d8:	movzbl	0x806a444, %eax [MEM, REG]
	movzbl	print_with_color,  %eax
	# 0x80511df:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80511e1:	je	0x8051201 [IMM <CODEREF>]
	je	.label_789
	# 0x80511e3:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x80511e7:	jne	0x80511fa [IMM <CODEREF>]
	jne	.label_791
	# 0x80511e9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80511ec:	pushl	$4 [IMM]
	pushl	$4
	# 0x80511ee:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x80511f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80511f6:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80511f8:	je	0x8051201 [IMM <CODEREF>]
	je	.label_789
	# 0x80511fa:	movl	$1, %eax [IMM, REG]
.label_791:
	movl	$1, %eax
	# 0x80511ff:	jmp	0x8051206 [IMM <CODEREF>]
	jmp	.label_793
	# 0x8051201:	movl	$0, %eax [IMM, REG]
.label_789:
	movl	$0, %eax
	# 0x8051206:	movb	%al, -0x15(%ebp) [REG, MEM]
.label_793:
	movb	%al, -0x15(%ebp)
	# 0x8051209:	andb	$1, -0x15(%ebp) [IMM, MEM]
	andb	$1, -0x15(%ebp)
	# 0x805120d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051210:	movl	8(%eax), %ebx [MEM, REG]
	movl	8(%eax), %ebx
	# 0x8051213:	movzbl	-0x1c(%ebp), %eax [MEM, REG]
	movzbl	-0x1c(%ebp), %eax
	# 0x8051217:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805121a:	movzbl	%al, %ecx [REG, REG]
	movzbl	%al, %ecx
	# 0x805121d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051220:	movl	0x84(%eax), %edx [MEM, REG]
	movl	0x84(%eax), %edx
	# 0x8051226:	movl	0x806a46c, %eax [MEM, REG]
	movl	filename_quoting_options,  %eax
	# 0x805122b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805122e:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805122f:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8051232:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051233:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051236:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051237:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051238:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805123b:	calll	0x8050d90 [IMM <CODEREF>]
	calll	quote_name
	# 0x8051240:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8051243:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8051246:	calll	0x804a819 [IMM <CODEREF>]
	calll	process_signals
	# 0x805124b:	cmpb	$0, -0x15(%ebp) [IMM, MEM]
	cmpb	$0, -0x15(%ebp)
	# 0x805124f:	je	0x805129d [IMM <CODEREF>]
	je	.label_786
	# 0x8051251:	calll	0x80512a5 [IMM <CODEREF>]
	calll	prep_non_filename_text
	# 0x8051256:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x805125b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805125d:	je	0x805129d [IMM <CODEREF>]
	je	.label_786
	# 0x805125f:	movl	0x806a47c, %ebx [MEM, REG]
	movl	line_length,  %ebx
	# 0x8051265:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8051268:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805126d:	divl	%ebx [REG]
	divl	%ebx
	# 0x805126f:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x8051271:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x8051274:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051277:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051279:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x805127c:	movl	0x806a47c, %ebx [MEM, REG]
	movl	line_length,  %ebx
	# 0x8051282:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051287:	divl	%ebx [REG]
	divl	%ebx
	# 0x8051289:	cmpl	%eax, %ecx [REG, REG]
	cmpl	%eax, %ecx
	# 0x805128b:	je	0x805129d [IMM <CODEREF>]
	je	.label_786
	# 0x805128d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051290:	pushl	$0x806a2b8 [IMM <DATAREF>]
	pushl	$label_787
	# 0x8051295:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x805129a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805129d:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_786:
	movl	-0xc(%ebp), %eax
	# 0x80512a0:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x80512a3:	leave	 []
	leave	
	# 0x80512a4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80512a5

	# 0x80512a5:	pushl	%ebp [REG]
	.globl prep_non_filename_text
	.type prep_non_filename_text, @function
prep_non_filename_text:
	pushl	%ebp
	# 0x80512a6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80512a8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80512ab:	movl	0x806a214, %eax [MEM, REG]
	movl	label_797,  %eax
	# 0x80512b0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80512b2:	je	0x80512c6 [IMM <CODEREF>]
	je	.label_798
	# 0x80512b4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80512b7:	pushl	$0x806a210 [IMM <DATAREF>]
	pushl	$label_796
	# 0x80512bc:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x80512c1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80512c4:	jmp	0x80512f6 [IMM <CODEREF>]
	jmp	.label_794
	# 0x80512c6:	subl	$0xc, %esp [IMM, REG]
.label_798:
	subl	$0xc, %esp
	# 0x80512c9:	pushl	$0x806a200 [IMM <DATAREF>]
	pushl	$color_indicator
	# 0x80512ce:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x80512d3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80512d6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80512d9:	pushl	$0x806a218 [IMM <DATAREF>]
	pushl	$label_795
	# 0x80512de:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x80512e3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80512e6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80512e9:	pushl	$0x806a208 [IMM <DATAREF>]
	pushl	$label_97
	# 0x80512ee:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x80512f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80512f6:	nop	 []
.label_794:
	nop	
	# 0x80512f7:	leave	 []
	leave	
	# 0x80512f8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80512f9

	# 0x80512f9:	pushl	%ebp [REG]
	.globl print_file_name_and_frills
	.type print_file_name_and_frills, @function
print_file_name_and_frills:
	pushl	%ebp
	# 0x80512fa:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80512fc:	pushl	%esi [REG]
	pushl	%esi
	# 0x80512fd:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80512fe:	subl	$0x2b0, %esp [IMM, REG]
	subl	$0x2b0, %esp
	# 0x8051304:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051307:	movl	%eax, -0x2ac(%ebp) [REG, MEM]
	movl	%eax, -0x2ac(%ebp)
	# 0x805130d:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8051313:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8051316:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8051318:	calll	0x804a791 [IMM <CODEREF>]
	calll	set_normal_color
	# 0x805131d:	movzbl	0x806a451, %eax [MEM, REG]
	movzbl	print_inode,  %eax
	# 0x8051324:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051326:	je	0x805136f [IMM <CODEREF>]
	je	.label_800
	# 0x8051328:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805132b:	pushl	-0x2ac(%ebp) [MEM]
	pushl	-0x2ac(%ebp)
	# 0x8051331:	pushl	$0x28c [IMM]
	pushl	$0x28c
	# 0x8051336:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x805133c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805133d:	calll	0x804fd57 [IMM <CODEREF>]
	calll	format_inode
	# 0x8051342:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051345:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8051347:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x805134c:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x805134f:	je	0x8051358 [IMM <CODEREF>]
	je	.label_799
	# 0x8051351:	movl	0x806a3f4, %eax [MEM, REG]
	movl	inode_number_width,  %eax
	# 0x8051356:	jmp	0x805135d [IMM <CODEREF>]
	jmp	.label_805
	# 0x8051358:	movl	$0, %eax [IMM, REG]
.label_799:
	movl	$0, %eax
	# 0x805135d:	subl	$4, %esp [IMM, REG]
.label_805:
	subl	$4, %esp
	# 0x8051360:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051361:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051362:	pushl	$0x8061584 [IMM <DATAREF>]
	pushl	$label_672
	# 0x8051367:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x805136c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805136f:	movzbl	0x806a42b, %eax [MEM, REG]
.label_800:
	movzbl	print_block_size,  %eax
	# 0x8051376:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051378:	je	0x80513f4 [IMM <CODEREF>]
	je	.label_807
	# 0x805137a:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051380:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8051384:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8051387:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051389:	je	0x8051392 [IMM <CODEREF>]
	je	.label_810
	# 0x805138b:	movl	$0x8061556, %edx [IMM <DATAREF>, REG]
	movl	$label_652,  %edx
	# 0x8051390:	jmp	0x80513cc [IMM <CODEREF>]
	jmp	.label_802
	# 0x8051392:	movl	0x806a430, %eax [MEM, REG]
.label_810:
	movl	output_block_size,  %eax
	# 0x8051397:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x805139d:	movl	0x806a42c, %esi [MEM, REG]
	movl	human_output_opts,  %esi
	# 0x80513a3:	movl	-0x2ac(%ebp), %ecx [MEM, REG]
	movl	-0x2ac(%ebp), %ecx
	# 0x80513a9:	movl	0x48(%ecx), %ebx [MEM, REG]
	movl	0x48(%ecx), %ebx
	# 0x80513ac:	movl	0x44(%ecx), %ecx [MEM, REG]
	movl	0x44(%ecx), %ecx
	# 0x80513af:	pushl	%edx [REG]
	pushl	%edx
	# 0x80513b0:	pushl	%eax [REG]
	pushl	%eax
	# 0x80513b1:	pushl	$0 [IMM]
	pushl	$0
	# 0x80513b3:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x80513b8:	pushl	%esi [REG]
	pushl	%esi
	# 0x80513b9:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x80513bf:	pushl	%eax [REG]
	pushl	%eax
	# 0x80513c0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80513c1:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80513c2:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x80513c7:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80513ca:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80513cc:	movl	0x806a41c, %eax [MEM, REG]
.label_802:
	movl	format,  %eax
	# 0x80513d1:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x80513d4:	je	0x80513dd [IMM <CODEREF>]
	je	.label_803
	# 0x80513d6:	movl	0x806a3f8, %eax [MEM, REG]
	movl	block_size_width,  %eax
	# 0x80513db:	jmp	0x80513e2 [IMM <CODEREF>]
	jmp	.label_806
	# 0x80513dd:	movl	$0, %eax [IMM, REG]
.label_803:
	movl	$0, %eax
	# 0x80513e2:	subl	$4, %esp [IMM, REG]
.label_806:
	subl	$4, %esp
	# 0x80513e5:	pushl	%edx [REG]
	pushl	%edx
	# 0x80513e6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80513e7:	pushl	$0x8061584 [IMM <DATAREF>]
	pushl	$label_672
	# 0x80513ec:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x80513f1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80513f4:	movzbl	0x806a3f0, %eax [MEM, REG]
.label_807:
	movzbl	print_scontext,  %eax
	# 0x80513fb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80513fd:	je	0x8051430 [IMM <CODEREF>]
	je	.label_809
	# 0x80513ff:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051405:	movl	0x74(%eax), %edx [MEM, REG]
	movl	0x74(%eax), %edx
	# 0x8051408:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x805140d:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x8051410:	je	0x8051419 [IMM <CODEREF>]
	je	.label_811
	# 0x8051412:	movl	0x806a400, %eax [MEM, REG]
	movl	scontext_width,  %eax
	# 0x8051417:	jmp	0x805141e [IMM <CODEREF>]
	jmp	.label_808
	# 0x8051419:	movl	$0, %eax [IMM, REG]
.label_811:
	movl	$0, %eax
	# 0x805141e:	subl	$4, %esp [IMM, REG]
.label_808:
	subl	$4, %esp
	# 0x8051421:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051422:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051423:	pushl	$0x8061584 [IMM <DATAREF>]
	pushl	$label_672
	# 0x8051428:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x805142d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051430:	pushl	0xc(%ebp) [MEM]
.label_809:
	pushl	0xc(%ebp)
	# 0x8051433:	pushl	$0 [IMM]
	pushl	$0
	# 0x8051435:	pushl	$0 [IMM]
	pushl	$0
	# 0x8051437:	pushl	-0x2ac(%ebp) [MEM]
	pushl	-0x2ac(%ebp)
	# 0x805143d:	calll	0x805118d [IMM <CODEREF>]
	calll	print_name_with_quoting
	# 0x8051442:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051445:	movl	%eax, -0x29c(%ebp) [REG, MEM]
	movl	%eax, -0x29c(%ebp)
	# 0x805144b:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x8051450:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051452:	je	0x805148a [IMM <CODEREF>]
	je	.label_804
	# 0x8051454:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x805145a:	movl	0x6c(%eax), %ecx [MEM, REG]
	movl	0x6c(%eax), %ecx
	# 0x805145d:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051463:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x8051466:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x805146c:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8051470:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8051473:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8051476:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051477:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051478:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051479:	calll	0x80515d8 [IMM <CODEREF>]
	calll	print_type_indicator
	# 0x805147e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051481:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8051484:	addl	%eax, -0x29c(%ebp) [REG, MEM]
	addl	%eax, -0x29c(%ebp)
	# 0x805148a:	movl	-0x29c(%ebp), %eax [MEM, REG]
.label_804:
	movl	-0x29c(%ebp), %eax
	# 0x8051490:	movl	-0xc(%ebp), %ebx [MEM, REG]
	movl	-0xc(%ebp), %ebx
	# 0x8051493:	xorl	%gs:0x14, %ebx [MEM, REG]
	xorl	%gs:0x14, %ebx
	# 0x805149a:	je	0x80514a1 [IMM <CODEREF>]
	je	.label_801
	# 0x805149c:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x80514a1:	leal	-8(%ebp), %esp [MEM, REG]
.label_801:
	leal	-8(%ebp), %esp
	# 0x80514a4:	popl	%ebx [REG]
	popl	%ebx
	# 0x80514a5:	popl	%esi [REG]
	popl	%esi
	# 0x80514a6:	popl	%ebp [REG]
	popl	%ebp
	# 0x80514a7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80514a8

	# 0x80514a8:	pushl	%ebp [REG]
	.globl get_type_indicator
	.type get_type_indicator, @function
get_type_indicator:
	pushl	%ebp
	# 0x80514a9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80514ab:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x80514ae:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80514b1:	movb	%al, -0x14(%ebp) [REG, MEM]
	movb	%al, -0x14(%ebp)
	# 0x80514b4:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
	cmpb	$0, -0x14(%ebp)
	# 0x80514b8:	je	0x80514cc [IMM <CODEREF>]
	je	.label_826
	# 0x80514ba:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80514bd:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80514c2:	cmpl	$0x8000, %eax [IMM, REG]
	cmpl	$0x8000, %eax
	# 0x80514c7:	sete	%al [REG]
	sete	%al
	# 0x80514ca:	jmp	0x80514d3 [IMM <CODEREF>]
	jmp	.label_831
	# 0x80514cc:	cmpl	$5, 0x10(%ebp) [IMM, MEM]
.label_826:
	cmpl	$5, 0x10(%ebp)
	# 0x80514d0:	sete	%al [REG]
	sete	%al
	# 0x80514d3:	testb	%al, %al [REG, REG]
.label_831:
	testb	%al, %al
	# 0x80514d5:	je	0x8051503 [IMM <CODEREF>]
	je	.label_825
	# 0x80514d7:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
	cmpb	$0, -0x14(%ebp)
	# 0x80514db:	je	0x80514fa [IMM <CODEREF>]
	je	.label_818
	# 0x80514dd:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x80514e2:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x80514e5:	jne	0x80514fa [IMM <CODEREF>]
	jne	.label_818
	# 0x80514e7:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80514ea:	andl	$0x49, %eax [IMM, REG]
	andl	$0x49, %eax
	# 0x80514ed:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80514ef:	je	0x80514fa [IMM <CODEREF>]
	je	.label_818
	# 0x80514f1:	movb	$0x2a, -1(%ebp) [IMM, MEM]
	movb	$0x2a, -1(%ebp)
	# 0x80514f5:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x80514fa:	movb	$0, -1(%ebp) [IMM, MEM]
.label_818:
	movb	$0, -1(%ebp)
	# 0x80514fe:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x8051503:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
.label_825:
	cmpb	$0, -0x14(%ebp)
	# 0x8051507:	je	0x805151b [IMM <CODEREF>]
	je	.label_813
	# 0x8051509:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805150c:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8051511:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x8051516:	sete	%al [REG]
	sete	%al
	# 0x8051519:	jmp	0x8051536 [IMM <CODEREF>]
	jmp	.label_816
	# 0x805151b:	cmpl	$3, 0x10(%ebp) [IMM, MEM]
.label_813:
	cmpl	$3, 0x10(%ebp)
	# 0x805151f:	je	0x8051527 [IMM <CODEREF>]
	je	.label_820
	# 0x8051521:	cmpl	$9, 0x10(%ebp) [IMM, MEM]
	cmpl	$9, 0x10(%ebp)
	# 0x8051525:	jne	0x805152e [IMM <CODEREF>]
	jne	.label_822
	# 0x8051527:	movl	$1, %eax [IMM, REG]
.label_820:
	movl	$1, %eax
	# 0x805152c:	jmp	0x8051533 [IMM <CODEREF>]
	jmp	.label_828
	# 0x805152e:	movl	$0, %eax [IMM, REG]
.label_822:
	movl	$0, %eax
	# 0x8051533:	andl	$1, %eax [IMM, REG]
.label_828:
	andl	$1, %eax
	# 0x8051536:	testb	%al, %al [REG, REG]
.label_816:
	testb	%al, %al
	# 0x8051538:	je	0x8051543 [IMM <CODEREF>]
	je	.label_830
	# 0x805153a:	movb	$0x2f, -1(%ebp) [IMM, MEM]
	movb	$0x2f, -1(%ebp)
	# 0x805153e:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x8051543:	movl	0x806a440, %eax [MEM, REG]
.label_830:
	movl	indicator_style,  %eax
	# 0x8051548:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x805154b:	jne	0x8051553 [IMM <CODEREF>]
	jne	.label_817
	# 0x805154d:	movb	$0, -1(%ebp) [IMM, MEM]
	movb	$0, -1(%ebp)
	# 0x8051551:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x8051553:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
.label_817:
	cmpb	$0, -0x14(%ebp)
	# 0x8051557:	je	0x805156b [IMM <CODEREF>]
	je	.label_827
	# 0x8051559:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805155c:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8051561:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x8051566:	sete	%al [REG]
	sete	%al
	# 0x8051569:	jmp	0x8051572 [IMM <CODEREF>]
	jmp	.label_819
	# 0x805156b:	cmpl	$6, 0x10(%ebp) [IMM, MEM]
.label_827:
	cmpl	$6, 0x10(%ebp)
	# 0x805156f:	sete	%al [REG]
	sete	%al
	# 0x8051572:	testb	%al, %al [REG, REG]
.label_819:
	testb	%al, %al
	# 0x8051574:	je	0x805157c [IMM <CODEREF>]
	je	.label_829
	# 0x8051576:	movb	$0x40, -1(%ebp) [IMM, MEM]
	movb	$0x40, -1(%ebp)
	# 0x805157a:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x805157c:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
.label_829:
	cmpb	$0, -0x14(%ebp)
	# 0x8051580:	je	0x8051594 [IMM <CODEREF>]
	je	.label_832
	# 0x8051582:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8051585:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x805158a:	cmpl	$0x1000, %eax [IMM, REG]
	cmpl	$0x1000, %eax
	# 0x805158f:	sete	%al [REG]
	sete	%al
	# 0x8051592:	jmp	0x805159b [IMM <CODEREF>]
	jmp	.label_812
	# 0x8051594:	cmpl	$1, 0x10(%ebp) [IMM, MEM]
.label_832:
	cmpl	$1, 0x10(%ebp)
	# 0x8051598:	sete	%al [REG]
	sete	%al
	# 0x805159b:	testb	%al, %al [REG, REG]
.label_812:
	testb	%al, %al
	# 0x805159d:	je	0x80515a5 [IMM <CODEREF>]
	je	.label_823
	# 0x805159f:	movb	$0x7c, -1(%ebp) [IMM, MEM]
	movb	$0x7c, -1(%ebp)
	# 0x80515a3:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x80515a5:	cmpb	$0, -0x14(%ebp) [IMM, MEM]
.label_823:
	cmpb	$0, -0x14(%ebp)
	# 0x80515a9:	je	0x80515bd [IMM <CODEREF>]
	je	.label_824
	# 0x80515ab:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80515ae:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80515b3:	cmpl	$0xc000, %eax [IMM, REG]
	cmpl	$0xc000, %eax
	# 0x80515b8:	sete	%al [REG]
	sete	%al
	# 0x80515bb:	jmp	0x80515c4 [IMM <CODEREF>]
	jmp	.label_821
	# 0x80515bd:	cmpl	$7, 0x10(%ebp) [IMM, MEM]
.label_824:
	cmpl	$7, 0x10(%ebp)
	# 0x80515c1:	sete	%al [REG]
	sete	%al
	# 0x80515c4:	testb	%al, %al [REG, REG]
.label_821:
	testb	%al, %al
	# 0x80515c6:	je	0x80515ce [IMM <CODEREF>]
	je	.label_814
	# 0x80515c8:	movb	$0x3d, -1(%ebp) [IMM, MEM]
	movb	$0x3d, -1(%ebp)
	# 0x80515cc:	jmp	0x80515d2 [IMM <CODEREF>]
	jmp	.label_815
	# 0x80515ce:	movb	$0, -1(%ebp) [IMM, MEM]
.label_814:
	movb	$0, -1(%ebp)
	# 0x80515d2:	movzbl	-1(%ebp), %eax [MEM, REG]
.label_815:
	movzbl	-1(%ebp), %eax
	# 0x80515d6:	leave	 []
	leave	
	# 0x80515d7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80515d8

	# 0x80515d8:	pushl	%ebp [REG]
	.globl print_type_indicator
	.type print_type_indicator, @function
print_type_indicator:
	pushl	%ebp
	# 0x80515d9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80515db:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80515de:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80515e1:	movb	%al, -0x1c(%ebp) [REG, MEM]
	movb	%al, -0x1c(%ebp)
	# 0x80515e4:	movzbl	-0x1c(%ebp), %eax [MEM, REG]
	movzbl	-0x1c(%ebp), %eax
	# 0x80515e8:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80515eb:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80515ee:	pushl	%eax [REG]
	pushl	%eax
	# 0x80515ef:	calll	0x80514a8 [IMM <CODEREF>]
	calll	get_type_indicator
	# 0x80515f4:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x80515f7:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x80515fa:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x80515fe:	je	0x805161d [IMM <CODEREF>]
	je	.label_833
	# 0x8051600:	movsbl	-9(%ebp), %eax [MEM, REG]
	movsbl	-9(%ebp), %eax
	# 0x8051604:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051607:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051608:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x805160d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051610:	movl	0x806a534, %eax [MEM, REG]
	movl	dired_pos,  %eax
	# 0x8051615:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051618:	movl	%eax, 0x806a534 [REG, MEM]
	movl	%eax, dired_pos
	# 0x805161d:	cmpb	$0, -9(%ebp) [IMM, MEM]
.label_833:
	cmpb	$0, -9(%ebp)
	# 0x8051621:	setne	%al [REG]
	setne	%al
	# 0x8051624:	leave	 []
	leave	
	# 0x8051625:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051626

	# 0x8051626:	pushl	%ebp [REG]
	.globl print_color_indicator
	.type print_color_indicator, @function
print_color_indicator:
	pushl	%ebp
	# 0x8051627:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051629:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805162c:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x8051630:	je	0x8051676 [IMM <CODEREF>]
	je	.label_834
	# 0x8051632:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051635:	pushl	$4 [IMM]
	pushl	$4
	# 0x8051637:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x805163c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805163f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051641:	je	0x8051648 [IMM <CODEREF>]
	je	.label_835
	# 0x8051643:	calll	0x804a768 [IMM <CODEREF>]
	calll	restore_default_color
	# 0x8051648:	subl	$0xc, %esp [IMM, REG]
.label_835:
	subl	$0xc, %esp
	# 0x805164b:	pushl	$0x806a200 [IMM <DATAREF>]
	pushl	$color_indicator
	# 0x8051650:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x8051655:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051658:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805165b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805165e:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x8051663:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051666:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051669:	pushl	$0x806a208 [IMM <DATAREF>]
	pushl	$label_97
	# 0x805166e:	calll	0x8051a2a [IMM <CODEREF>]
	calll	put_indicator
	# 0x8051673:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051676:	cmpl	$0, 8(%ebp) [IMM, MEM]
.label_834:
	cmpl	$0, 8(%ebp)
	# 0x805167a:	setne	%al [REG]
	setne	%al
	# 0x805167d:	leave	 []
	leave	
	# 0x805167e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805167f

	# 0x805167f:	pushl	%ebp [REG]
	.globl get_color_indicator
	.type get_color_indicator, @function
get_color_indicator:
	pushl	%ebp
	# 0x8051680:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051682:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8051683:	subl	$0x34, %esp [IMM, REG]
	subl	$0x34, %esp
	# 0x8051686:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8051689:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x805168c:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
	cmpb	$0, -0x2c(%ebp)
	# 0x8051690:	je	0x80516c0 [IMM <CODEREF>]
	je	.label_868
	# 0x8051692:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051695:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8051698:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805169b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805169e:	movl	0x70(%eax), %eax [MEM, REG]
	movl	0x70(%eax), %eax
	# 0x80516a1:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80516a4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80516a7:	movzbl	0x79(%eax), %eax [MEM, REG]
	movzbl	0x79(%eax), %eax
	# 0x80516ab:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80516ad:	je	0x80516b6 [IMM <CODEREF>]
	je	.label_843
	# 0x80516af:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80516b4:	jmp	0x80516bb [IMM <CODEREF>]
	jmp	.label_848
	# 0x80516b6:	movl	$0xffffffff, %eax [IMM, REG]
.label_843:
	movl	$0xffffffff, %eax
	# 0x80516bb:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_848:
	movl	%eax, -0x14(%ebp)
	# 0x80516be:	jmp	0x80516fc [IMM <CODEREF>]
	jmp	.label_853
	# 0x80516c0:	movl	8(%ebp), %eax [MEM, REG]
.label_868:
	movl	8(%ebp), %eax
	# 0x80516c3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80516c5:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80516c8:	movzbl	0x806a3dc, %eax [MEM, REG]
	movzbl	color_symlink_as_referent,  %eax
	# 0x80516cf:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80516d1:	je	0x80516e6 [IMM <CODEREF>]
	je	.label_855
	# 0x80516d3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80516d6:	movzbl	0x79(%eax), %eax [MEM, REG]
	movzbl	0x79(%eax), %eax
	# 0x80516da:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80516dc:	je	0x80516e6 [IMM <CODEREF>]
	je	.label_855
	# 0x80516de:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80516e1:	movl	0x70(%eax), %eax [MEM, REG]
	movl	0x70(%eax), %eax
	# 0x80516e4:	jmp	0x80516ec [IMM <CODEREF>]
	jmp	.label_862
	# 0x80516e6:	movl	8(%ebp), %eax [MEM, REG]
.label_855:
	movl	8(%ebp), %eax
	# 0x80516e9:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x80516ec:	movl	%eax, -0x18(%ebp) [REG, MEM]
.label_862:
	movl	%eax, -0x18(%ebp)
	# 0x80516ef:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80516f2:	movzbl	0x79(%eax), %eax [MEM, REG]
	movzbl	0x79(%eax), %eax
	# 0x80516f6:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x80516f9:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x80516fc:	cmpl	$-1, -0x14(%ebp) [IMM, MEM]
.label_853:
	cmpl	$-1, -0x14(%ebp)
	# 0x8051700:	jne	0x805171f [IMM <CODEREF>]
	jne	.label_839
	# 0x8051702:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051705:	pushl	$0xc [IMM]
	pushl	$0xc
	# 0x8051707:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x805170c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805170f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051711:	je	0x805171f [IMM <CODEREF>]
	je	.label_839
	# 0x8051713:	movl	$0xc, -0x24(%ebp) [IMM, MEM]
	movl	$0xc, -0x24(%ebp)
	# 0x805171a:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x805171f:	movl	8(%ebp), %eax [MEM, REG]
.label_839:
	movl	8(%ebp), %eax
	# 0x8051722:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8051726:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8051729:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805172b:	je	0x8051742 [IMM <CODEREF>]
	je	.label_846
	# 0x805172d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051730:	movl	0x6c(%eax), %eax [MEM, REG]
	movl	0x6c(%eax), %eax
	# 0x8051733:	movl	0x806a2e0(, %eax, 4), %eax [MEM, REG]
	movl	filetype_indicator.9329(, %eax, 4),  %eax
	# 0x805173a:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805173d:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051742:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_846:
	movl	-0x18(%ebp), %eax
	# 0x8051745:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x805174a:	cmpl	$0x8000, %eax [IMM, REG]
	cmpl	$0x8000, %eax
	# 0x805174f:	jne	0x8051830 [IMM <CODEREF>]
	jne	.label_856
	# 0x8051755:	movl	$5, -0x24(%ebp) [IMM, MEM]
	movl	$5, -0x24(%ebp)
	# 0x805175c:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805175f:	andl	$0x800, %eax [IMM, REG]
	andl	$0x800, %eax
	# 0x8051764:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051766:	je	0x8051785 [IMM <CODEREF>]
	je	.label_861
	# 0x8051768:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805176b:	pushl	$0x10 [IMM]
	pushl	$0x10
	# 0x805176d:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x8051772:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051775:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051777:	je	0x8051785 [IMM <CODEREF>]
	je	.label_861
	# 0x8051779:	movl	$0x10, -0x24(%ebp) [IMM, MEM]
	movl	$0x10, -0x24(%ebp)
	# 0x8051780:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051785:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_861:
	movl	-0x18(%ebp), %eax
	# 0x8051788:	andl	$0x400, %eax [IMM, REG]
	andl	$0x400, %eax
	# 0x805178d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805178f:	je	0x80517ae [IMM <CODEREF>]
	je	.label_837
	# 0x8051791:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051794:	pushl	$0x11 [IMM]
	pushl	$0x11
	# 0x8051796:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x805179b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805179e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80517a0:	je	0x80517ae [IMM <CODEREF>]
	je	.label_837
	# 0x80517a2:	movl	$0x11, -0x24(%ebp) [IMM, MEM]
	movl	$0x11, -0x24(%ebp)
	# 0x80517a9:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x80517ae:	subl	$0xc, %esp [IMM, REG]
.label_837:
	subl	$0xc, %esp
	# 0x80517b1:	pushl	$0x15 [IMM]
	pushl	$0x15
	# 0x80517b3:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x80517b8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80517bb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80517bd:	je	0x80517d9 [IMM <CODEREF>]
	je	.label_852
	# 0x80517bf:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80517c2:	movzbl	0x80(%eax), %eax [MEM, REG]
	movzbl	0x80(%eax), %eax
	# 0x80517c9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80517cb:	je	0x80517d9 [IMM <CODEREF>]
	je	.label_852
	# 0x80517cd:	movl	$0x15, -0x24(%ebp) [IMM, MEM]
	movl	$0x15, -0x24(%ebp)
	# 0x80517d4:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x80517d9:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_852:
	movl	-0x18(%ebp), %eax
	# 0x80517dc:	andl	$0x49, %eax [IMM, REG]
	andl	$0x49, %eax
	# 0x80517df:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80517e1:	je	0x8051800 [IMM <CODEREF>]
	je	.label_838
	# 0x80517e3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80517e6:	pushl	$0xe [IMM]
	pushl	$0xe
	# 0x80517e8:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x80517ed:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80517f0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80517f2:	je	0x8051800 [IMM <CODEREF>]
	je	.label_838
	# 0x80517f4:	movl	$0xe, -0x24(%ebp) [IMM, MEM]
	movl	$0xe, -0x24(%ebp)
	# 0x80517fb:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051800:	movl	8(%ebp), %eax [MEM, REG]
.label_838:
	movl	8(%ebp), %eax
	# 0x8051803:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8051806:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8051809:	jbe	0x8051951 [IMM <CODEREF>]
	jbe	.label_836
	# 0x805180f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051812:	pushl	$0x16 [IMM]
	pushl	$0x16
	# 0x8051814:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x8051819:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805181c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805181e:	je	0x8051951 [IMM <CODEREF>]
	je	.label_836
	# 0x8051824:	movl	$0x16, -0x24(%ebp) [IMM, MEM]
	movl	$0x16, -0x24(%ebp)
	# 0x805182b:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051830:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_856:
	movl	-0x18(%ebp), %eax
	# 0x8051833:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8051838:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x805183d:	jne	0x80518d2 [IMM <CODEREF>]
	jne	.label_849
	# 0x8051843:	movl	$6, -0x24(%ebp) [IMM, MEM]
	movl	$6, -0x24(%ebp)
	# 0x805184a:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805184d:	andl	$0x200, %eax [IMM, REG]
	andl	$0x200, %eax
	# 0x8051852:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051854:	je	0x805187d [IMM <CODEREF>]
	je	.label_857
	# 0x8051856:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8051859:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x805185c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805185e:	je	0x805187d [IMM <CODEREF>]
	je	.label_857
	# 0x8051860:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051863:	pushl	$0x14 [IMM]
	pushl	$0x14
	# 0x8051865:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x805186a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805186d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805186f:	je	0x805187d [IMM <CODEREF>]
	je	.label_857
	# 0x8051871:	movl	$0x14, -0x24(%ebp) [IMM, MEM]
	movl	$0x14, -0x24(%ebp)
	# 0x8051878:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x805187d:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_857:
	movl	-0x18(%ebp), %eax
	# 0x8051880:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x8051883:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051885:	je	0x80518a4 [IMM <CODEREF>]
	je	.label_859
	# 0x8051887:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805188a:	pushl	$0x13 [IMM]
	pushl	$0x13
	# 0x805188c:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x8051891:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051894:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051896:	je	0x80518a4 [IMM <CODEREF>]
	je	.label_859
	# 0x8051898:	movl	$0x13, -0x24(%ebp) [IMM, MEM]
	movl	$0x13, -0x24(%ebp)
	# 0x805189f:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x80518a4:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_859:
	movl	-0x18(%ebp), %eax
	# 0x80518a7:	andl	$0x200, %eax [IMM, REG]
	andl	$0x200, %eax
	# 0x80518ac:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80518ae:	je	0x8051951 [IMM <CODEREF>]
	je	.label_836
	# 0x80518b4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80518b7:	pushl	$0x12 [IMM]
	pushl	$0x12
	# 0x80518b9:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x80518be:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80518c1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80518c3:	je	0x8051951 [IMM <CODEREF>]
	je	.label_836
	# 0x80518c9:	movl	$0x12, -0x24(%ebp) [IMM, MEM]
	movl	$0x12, -0x24(%ebp)
	# 0x80518d0:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x80518d2:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_849:
	movl	-0x18(%ebp), %eax
	# 0x80518d5:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80518da:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x80518df:	jne	0x80518ea [IMM <CODEREF>]
	jne	.label_860
	# 0x80518e1:	movl	$7, -0x24(%ebp) [IMM, MEM]
	movl	$7, -0x24(%ebp)
	# 0x80518e8:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x80518ea:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_860:
	movl	-0x18(%ebp), %eax
	# 0x80518ed:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80518f2:	cmpl	$0x1000, %eax [IMM, REG]
	cmpl	$0x1000, %eax
	# 0x80518f7:	jne	0x8051902 [IMM <CODEREF>]
	jne	.label_864
	# 0x80518f9:	movl	$8, -0x24(%ebp) [IMM, MEM]
	movl	$8, -0x24(%ebp)
	# 0x8051900:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051902:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_864:
	movl	-0x18(%ebp), %eax
	# 0x8051905:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x805190a:	cmpl	$0xc000, %eax [IMM, REG]
	cmpl	$0xc000, %eax
	# 0x805190f:	jne	0x805191a [IMM <CODEREF>]
	jne	.label_840
	# 0x8051911:	movl	$9, -0x24(%ebp) [IMM, MEM]
	movl	$9, -0x24(%ebp)
	# 0x8051918:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x805191a:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_840:
	movl	-0x18(%ebp), %eax
	# 0x805191d:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8051922:	cmpl	$0x6000, %eax [IMM, REG]
	cmpl	$0x6000, %eax
	# 0x8051927:	jne	0x8051932 [IMM <CODEREF>]
	jne	.label_844
	# 0x8051929:	movl	$0xa, -0x24(%ebp) [IMM, MEM]
	movl	$0xa, -0x24(%ebp)
	# 0x8051930:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x8051932:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_844:
	movl	-0x18(%ebp), %eax
	# 0x8051935:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x805193a:	cmpl	$0x2000, %eax [IMM, REG]
	cmpl	$0x2000, %eax
	# 0x805193f:	jne	0x805194a [IMM <CODEREF>]
	jne	.label_850
	# 0x8051941:	movl	$0xb, -0x24(%ebp) [IMM, MEM]
	movl	$0xb, -0x24(%ebp)
	# 0x8051948:	jmp	0x8051951 [IMM <CODEREF>]
	jmp	.label_836
	# 0x805194a:	movl	$0xd, -0x24(%ebp) [IMM, MEM]
.label_850:
	movl	$0xd, -0x24(%ebp)
	# 0x8051951:	movl	$0, -0x20(%ebp) [IMM, MEM]
.label_836:
	movl	$0, -0x20(%ebp)
	# 0x8051958:	cmpl	$5, -0x24(%ebp) [IMM, MEM]
	cmpl	$5, -0x24(%ebp)
	# 0x805195c:	jne	0x80519c6 [IMM <CODEREF>]
	jne	.label_845
	# 0x805195e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051961:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x8051964:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8051969:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805196c:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805196f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8051972:	addl	%eax, -0x1c(%ebp) [REG, MEM]
	addl	%eax, -0x1c(%ebp)
	# 0x8051975:	movl	0x806a448, %eax [MEM, REG]
	movl	color_ext_list,  %eax
	# 0x805197a:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805197d:	jmp	0x80519bd [IMM <CODEREF>]
	jmp	.label_863
	# 0x805197f:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_854:
	movl	-0x20(%ebp), %eax
	# 0x8051982:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051984:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8051987:	ja	0x80519b4 [IMM <CODEREF>]
	ja	.label_851
	# 0x8051989:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805198c:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805198e:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8051991:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8051994:	movl	-0x20(%ebp), %ecx [MEM, REG]
	movl	-0x20(%ebp), %ecx
	# 0x8051997:	movl	0(%ecx), %ecx [MEM, REG]
	movl	0(%ecx), %ecx
	# 0x8051999:	movl	%ecx, %ebx [REG, REG]
	movl	%ecx, %ebx
	# 0x805199b:	negl	%ebx [REG]
	negl	%ebx
	# 0x805199d:	movl	-0x1c(%ebp), %ecx [MEM, REG]
	movl	-0x1c(%ebp), %ecx
	# 0x80519a0:	addl	%ebx, %ecx [REG, REG]
	addl	%ebx, %ecx
	# 0x80519a2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80519a5:	pushl	%edx [REG]
	pushl	%edx
	# 0x80519a6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80519a7:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x80519a8:	calll	0x8052f5f [IMM <CODEREF>]
	calll	c_strncasecmp
	# 0x80519ad:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80519b0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80519b2:	je	0x80519c5 [IMM <CODEREF>]
	je	.label_842
	# 0x80519b4:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_851:
	movl	-0x20(%ebp), %eax
	# 0x80519b7:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x80519ba:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x80519bd:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
.label_863:
	cmpl	$0, -0x20(%ebp)
	# 0x80519c1:	jne	0x805197f [IMM <CODEREF>]
	jne	.label_854
	# 0x80519c3:	jmp	0x80519c6 [IMM <CODEREF>]
	jmp	.label_845
	# 0x80519c5:	nop	 []
.label_842:
	nop	
	# 0x80519c6:	cmpl	$7, -0x24(%ebp) [IMM, MEM]
.label_845:
	cmpl	$7, -0x24(%ebp)
	# 0x80519ca:	jne	0x80519f5 [IMM <CODEREF>]
	jne	.label_858
	# 0x80519cc:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x80519d0:	jne	0x80519f5 [IMM <CODEREF>]
	jne	.label_858
	# 0x80519d2:	movzbl	0x806a3dc, %eax [MEM, REG]
	movzbl	color_symlink_as_referent,  %eax
	# 0x80519d9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80519db:	jne	0x80519ee [IMM <CODEREF>]
	jne	.label_865
	# 0x80519dd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80519e0:	pushl	$0xd [IMM]
	pushl	$0xd
	# 0x80519e2:	calll	0x804a6fa [IMM <CODEREF>]
	calll	is_colored
	# 0x80519e7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80519ea:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80519ec:	je	0x80519f5 [IMM <CODEREF>]
	je	.label_858
	# 0x80519ee:	movl	$0xd, -0x24(%ebp) [IMM, MEM]
.label_865:
	movl	$0xd, -0x24(%ebp)
	# 0x80519f5:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
.label_858:
	cmpl	$0, -0x20(%ebp)
	# 0x80519f9:	je	0x8051a03 [IMM <CODEREF>]
	je	.label_866
	# 0x80519fb:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80519fe:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8051a01:	jmp	0x8051a0e [IMM <CODEREF>]
	jmp	.label_867
	# 0x8051a03:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_866:
	movl	-0x24(%ebp), %eax
	# 0x8051a06:	shll	$3, %eax [IMM, REG]
	shll	$3, %eax
	# 0x8051a09:	addl	$0x806a200, %eax [IMM <DATAREF>, REG]
	addl	$color_indicator,  %eax
	# 0x8051a0e:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_867:
	movl	%eax, -0xc(%ebp)
	# 0x8051a11:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051a14:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8051a17:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051a19:	je	0x8051a20 [IMM <CODEREF>]
	je	.label_841
	# 0x8051a1b:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051a1e:	jmp	0x8051a25 [IMM <CODEREF>]
	jmp	.label_847
	# 0x8051a20:	movl	$0, %eax [IMM, REG]
.label_841:
	movl	$0, %eax
	# 0x8051a25:	movl	-4(%ebp), %ebx [MEM, REG]
.label_847:
	movl	-4(%ebp), %ebx
	# 0x8051a28:	leave	 []
	leave	
	# 0x8051a29:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051a2a

	# 0x8051a2a:	pushl	%ebp [REG]
	.globl put_indicator
	.type put_indicator, @function
put_indicator:
	pushl	%ebp
	# 0x8051a2b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051a2d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051a30:	movzbl	0x806a446, %eax [MEM, REG]
	movzbl	used_color,  %eax
	# 0x8051a37:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8051a3a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051a3c:	je	0x8051a60 [IMM <CODEREF>]
	je	.label_869
	# 0x8051a3e:	movb	$1, 0x806a446 [IMM, MEM]
	movb	$1, used_color
	# 0x8051a45:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051a48:	pushl	$1 [IMM]
	pushl	$1
	# 0x8051a4a:	calll	0x80499a0 [IMM <CODEREF>]
	calll	tcgetpgrp
	# 0x8051a4f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051a52:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051a54:	js	0x8051a5b [IMM <CODEREF>]
	js	.label_870
	# 0x8051a56:	calll	0x804aac9 [IMM <CODEREF>]
	calll	signal_init
	# 0x8051a5b:	calll	0x80512a5 [IMM <CODEREF>]
.label_870:
	calll	prep_non_filename_text
	# 0x8051a60:	movl	0x806a398, %ecx [MEM, REG]
.label_869:
	movl	stdout,  %ecx
	# 0x8051a66:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051a69:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x8051a6b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051a6e:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8051a71:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051a72:	pushl	$1 [IMM]
	pushl	$1
	# 0x8051a74:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051a75:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051a76:	calll	0x80499e0 [IMM <CODEREF>]
	calll	fwrite_unlocked
	# 0x8051a7b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051a7e:	nop	 []
	nop	
	# 0x8051a7f:	leave	 []
	leave	
	# 0x8051a80:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051a81

	# 0x8051a81:	pushl	%ebp [REG]
	.globl length_of_file_name_and_frills
	.type length_of_file_name_and_frills, @function
length_of_file_name_and_frills:
	pushl	%ebp
	# 0x8051a82:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051a84:	pushl	%esi [REG]
	pushl	%esi
	# 0x8051a85:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8051a86:	subl	$0x2b0, %esp [IMM, REG]
	subl	$0x2b0, %esp
	# 0x8051a8c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051a8f:	movl	%eax, -0x2ac(%ebp) [REG, MEM]
	movl	%eax, -0x2ac(%ebp)
	# 0x8051a95:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8051a9b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8051a9e:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8051aa0:	movl	$0, -0x29c(%ebp) [IMM, MEM]
	movl	$0, -0x29c(%ebp)
	# 0x8051aaa:	movzbl	0x806a451, %eax [MEM, REG]
	movzbl	print_inode,  %eax
	# 0x8051ab1:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051ab3:	je	0x8051afe [IMM <CODEREF>]
	je	.label_871
	# 0x8051ab5:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x8051aba:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x8051abd:	jne	0x8051af0 [IMM <CODEREF>]
	jne	.label_882
	# 0x8051abf:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051ac5:	movl	0x68(%eax), %edx [MEM, REG]
	movl	0x68(%eax), %edx
	# 0x8051ac8:	movl	0x64(%eax), %eax [MEM, REG]
	movl	0x64(%eax), %eax
	# 0x8051acb:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8051ace:	leal	-0x298(%ebp), %ecx [MEM, REG]
	leal	-0x298(%ebp), %ecx
	# 0x8051ad4:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051ad5:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051ad6:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051ad7:	calll	0x8057027 [IMM <CODEREF>]
	calll	umaxtostr
	# 0x8051adc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051adf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051ae2:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051ae3:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8051ae8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051aeb:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051aee:	jmp	0x8051af8 [IMM <CODEREF>]
	jmp	.label_878
	# 0x8051af0:	movl	0x806a3f4, %eax [MEM, REG]
.label_882:
	movl	inode_number_width,  %eax
	# 0x8051af5:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051af8:	addl	%eax, -0x29c(%ebp) [REG, MEM]
.label_878:
	addl	%eax, -0x29c(%ebp)
	# 0x8051afe:	movzbl	0x806a42b, %eax [MEM, REG]
.label_871:
	movzbl	print_block_size,  %eax
	# 0x8051b05:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051b07:	je	0x8051b82 [IMM <CODEREF>]
	je	.label_883
	# 0x8051b09:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x8051b0e:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x8051b11:	jne	0x8051b74 [IMM <CODEREF>]
	jne	.label_873
	# 0x8051b13:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051b19:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8051b1d:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8051b20:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051b22:	je	0x8051b2b [IMM <CODEREF>]
	je	.label_875
	# 0x8051b24:	movl	$0x8061556, %eax [IMM <DATAREF>, REG]
	movl	$label_652,  %eax
	# 0x8051b29:	jmp	0x8051b63 [IMM <CODEREF>]
	jmp	.label_876
	# 0x8051b2b:	movl	0x806a430, %eax [MEM, REG]
.label_875:
	movl	output_block_size,  %eax
	# 0x8051b30:	movl	0x806a434, %edx [MEM, REG]
	movl	label_215,  %edx
	# 0x8051b36:	movl	0x806a42c, %esi [MEM, REG]
	movl	human_output_opts,  %esi
	# 0x8051b3c:	movl	-0x2ac(%ebp), %ecx [MEM, REG]
	movl	-0x2ac(%ebp), %ecx
	# 0x8051b42:	movl	0x48(%ecx), %ebx [MEM, REG]
	movl	0x48(%ecx), %ebx
	# 0x8051b45:	movl	0x44(%ecx), %ecx [MEM, REG]
	movl	0x44(%ecx), %ecx
	# 0x8051b48:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051b49:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051b4a:	pushl	$0 [IMM]
	pushl	$0
	# 0x8051b4c:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x8051b51:	pushl	%esi [REG]
	pushl	%esi
	# 0x8051b52:	leal	-0x298(%ebp), %eax [MEM, REG]
	leal	-0x298(%ebp), %eax
	# 0x8051b58:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051b59:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8051b5a:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051b5b:	calll	0x8055e1a [IMM <CODEREF>]
	calll	human_readable
	# 0x8051b60:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8051b63:	subl	$0xc, %esp [IMM, REG]
.label_876:
	subl	$0xc, %esp
	# 0x8051b66:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051b67:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8051b6c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051b6f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051b72:	jmp	0x8051b7c [IMM <CODEREF>]
	jmp	.label_880
	# 0x8051b74:	movl	0x806a3f8, %eax [MEM, REG]
.label_873:
	movl	block_size_width,  %eax
	# 0x8051b79:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051b7c:	addl	%eax, -0x29c(%ebp) [REG, MEM]
.label_880:
	addl	%eax, -0x29c(%ebp)
	# 0x8051b82:	movzbl	0x806a3f0, %eax [MEM, REG]
.label_883:
	movzbl	print_scontext,  %eax
	# 0x8051b89:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8051b8b:	je	0x8051bbf [IMM <CODEREF>]
	je	.label_872
	# 0x8051b8d:	movl	0x806a41c, %eax [MEM, REG]
	movl	format,  %eax
	# 0x8051b92:	cmpl	$4, %eax [IMM, REG]
	cmpl	$4, %eax
	# 0x8051b95:	jne	0x8051bb1 [IMM <CODEREF>]
	jne	.label_874
	# 0x8051b97:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051b9d:	movl	0x74(%eax), %eax [MEM, REG]
	movl	0x74(%eax), %eax
	# 0x8051ba0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051ba3:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051ba4:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8051ba9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051bac:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051baf:	jmp	0x8051bb9 [IMM <CODEREF>]
	jmp	.label_879
	# 0x8051bb1:	movl	0x806a400, %eax [MEM, REG]
.label_874:
	movl	scontext_width,  %eax
	# 0x8051bb6:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051bb9:	addl	%eax, -0x29c(%ebp) [REG, MEM]
.label_879:
	addl	%eax, -0x29c(%ebp)
	# 0x8051bbf:	movl	-0x2ac(%ebp), %eax [MEM, REG]
.label_872:
	movl	-0x2ac(%ebp), %eax
	# 0x8051bc5:	movl	0x84(%eax), %ecx [MEM, REG]
	movl	0x84(%eax), %ecx
	# 0x8051bcb:	movl	0x806a46c, %edx [MEM, REG]
	movl	filename_quoting_options,  %edx
	# 0x8051bd1:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051bd7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051bd9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8051bdc:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051bdd:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051bde:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051bdf:	calll	0x8050be4 [IMM <CODEREF>]
	calll	quote_name_width
	# 0x8051be4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051be7:	addl	%eax, -0x29c(%ebp) [REG, MEM]
	addl	%eax, -0x29c(%ebp)
	# 0x8051bed:	movl	0x806a440, %eax [MEM, REG]
	movl	indicator_style,  %eax
	# 0x8051bf2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051bf4:	je	0x8051c3c [IMM <CODEREF>]
	je	.label_877
	# 0x8051bf6:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051bfc:	movl	0x6c(%eax), %ecx [MEM, REG]
	movl	0x6c(%eax), %ecx
	# 0x8051bff:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051c05:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x8051c08:	movl	-0x2ac(%ebp), %eax [MEM, REG]
	movl	-0x2ac(%ebp), %eax
	# 0x8051c0e:	movzbl	0x78(%eax), %eax [MEM, REG]
	movzbl	0x78(%eax), %eax
	# 0x8051c12:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8051c15:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8051c18:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8051c19:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051c1a:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051c1b:	calll	0x80514a8 [IMM <CODEREF>]
	calll	get_type_indicator
	# 0x8051c20:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051c23:	movb	%al, -0x29d(%ebp) [REG, MEM]
	movb	%al, -0x29d(%ebp)
	# 0x8051c29:	cmpb	$0, -0x29d(%ebp) [IMM, MEM]
	cmpb	$0, -0x29d(%ebp)
	# 0x8051c30:	setne	%al [REG]
	setne	%al
	# 0x8051c33:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8051c36:	addl	%eax, -0x29c(%ebp) [REG, MEM]
	addl	%eax, -0x29c(%ebp)
	# 0x8051c3c:	movl	-0x29c(%ebp), %eax [MEM, REG]
.label_877:
	movl	-0x29c(%ebp), %eax
	# 0x8051c42:	movl	-0xc(%ebp), %ebx [MEM, REG]
	movl	-0xc(%ebp), %ebx
	# 0x8051c45:	xorl	%gs:0x14, %ebx [MEM, REG]
	xorl	%gs:0x14, %ebx
	# 0x8051c4c:	je	0x8051c53 [IMM <CODEREF>]
	je	.label_881
	# 0x8051c4e:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8051c53:	leal	-8(%ebp), %esp [MEM, REG]
.label_881:
	leal	-8(%ebp), %esp
	# 0x8051c56:	popl	%ebx [REG]
	popl	%ebx
	# 0x8051c57:	popl	%esi [REG]
	popl	%esi
	# 0x8051c58:	popl	%ebp [REG]
	popl	%ebp
	# 0x8051c59:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051c5a

	# 0x8051c5a:	pushl	%ebp [REG]
	.globl print_many_per_line
	.type print_many_per_line, @function
print_many_per_line:
	pushl	%ebp
	# 0x8051c5b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051c5d:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8051c60:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051c63:	pushl	$1 [IMM]
	pushl	$1
	# 0x8051c65:	calll	0x8052262 [IMM <CODEREF>]
	calll	calculate_columns
	# 0x8051c6a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051c6d:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8051c70:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x8051c76:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8051c79:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8051c7b:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8051c7d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051c7f:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8051c82:	subl	$0xc, %eax [IMM, REG]
	subl	$0xc, %eax
	# 0x8051c85:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051c87:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8051c8a:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x8051c8f:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051c94:	divl	-0x20(%ebp) [MEM]
	divl	-0x20(%ebp)
	# 0x8051c97:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x8051c99:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x8051c9e:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051ca3:	divl	-0x20(%ebp) [MEM]
	divl	-0x20(%ebp)
	# 0x8051ca6:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8051ca8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051caa:	setne	%al [REG]
	setne	%al
	# 0x8051cad:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8051cb0:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051cb2:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8051cb5:	movl	$0, -0x30(%ebp) [IMM, MEM]
	movl	$0, -0x30(%ebp)
	# 0x8051cbc:	jmp	0x8051d6c [IMM <CODEREF>]
	jmp	.label_885
	# 0x8051cc1:	movl	$0, -0x2c(%ebp) [IMM, MEM]
.label_886:
	movl	$0, -0x2c(%ebp)
	# 0x8051cc8:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8051ccb:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8051cce:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x8051cd5:	movl	0x806a3d4, %eax [MEM, REG]
.label_884:
	movl	sorted_file,  %eax
	# 0x8051cda:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x8051cdd:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x8051ce0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051ce2:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051ce4:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8051ce7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051cea:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8051ced:	calll	0x8051a81 [IMM <CODEREF>]
	calll	length_of_file_name_and_frills
	# 0x8051cf2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051cf5:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8051cf8:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8051cfb:	movl	8(%eax), %ecx [MEM, REG]
	movl	8(%eax), %ecx
	# 0x8051cfe:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8051d01:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8051d04:	movl	%edx, -0x2c(%ebp) [REG, MEM]
	movl	%edx, -0x2c(%ebp)
	# 0x8051d07:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8051d0a:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051d0c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051d0e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8051d11:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051d14:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x8051d17:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8051d1a:	calll	0x80512f9 [IMM <CODEREF>]
	calll	print_file_name_and_frills
	# 0x8051d1f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051d22:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8051d25:	addl	%eax, -0x28(%ebp) [REG, MEM]
	addl	%eax, -0x28(%ebp)
	# 0x8051d28:	movl	0x806a3cc, %eax [MEM, REG]
	movl	cwd_n_used,  %eax
	# 0x8051d2d:	cmpl	%eax, -0x28(%ebp) [REG, MEM]
	cmpl	%eax, -0x28(%ebp)
	# 0x8051d30:	jae	0x8051d5a [IMM <CODEREF>]
	jae	.label_887
	# 0x8051d32:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x8051d35:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051d38:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8051d3a:	movl	-0x24(%ebp), %ecx [MEM, REG]
	movl	-0x24(%ebp), %ecx
	# 0x8051d3d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8051d40:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051d42:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051d45:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051d46:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051d47:	calll	0x8051f9a [IMM <CODEREF>]
	calll	indent
	# 0x8051d4c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051d4f:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051d52:	addl	%eax, -0x24(%ebp) [REG, MEM]
	addl	%eax, -0x24(%ebp)
	# 0x8051d55:	jmp	0x8051cd5 [IMM <CODEREF>]
	jmp	.label_884
	# 0x8051d5a:	nop	 []
.label_887:
	nop	
	# 0x8051d5b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051d5e:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8051d60:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051d65:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051d68:	addl	$1, -0x30(%ebp) [IMM, MEM]
	addl	$1, -0x30(%ebp)
	# 0x8051d6c:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_885:
	movl	-0x30(%ebp), %eax
	# 0x8051d6f:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x8051d72:	jb	0x8051cc1 [IMM <CODEREF>]
	jb	.label_886
	# 0x8051d78:	nop	 []
	nop	
	# 0x8051d79:	leave	 []
	leave	
	# 0x8051d7a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051d7b

	# 0x8051d7b:	pushl	%ebp [REG]
	.globl print_horizontal
	.type print_horizontal, @function
print_horizontal:
	pushl	%ebp
	# 0x8051d7c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051d7e:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8051d81:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x8051d88:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051d8b:	pushl	$0 [IMM]
	pushl	$0
	# 0x8051d8d:	calll	0x8052262 [IMM <CODEREF>]
	calll	calculate_columns
	# 0x8051d92:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051d95:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8051d98:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x8051d9e:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x8051da1:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8051da3:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8051da5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051da7:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8051daa:	subl	$0xc, %eax [IMM, REG]
	subl	$0xc, %eax
	# 0x8051dad:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051daf:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8051db2:	movl	0x806a3d4, %eax [MEM, REG]
	movl	sorted_file,  %eax
	# 0x8051db7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051db9:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8051dbc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051dbf:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051dc2:	calll	0x8051a81 [IMM <CODEREF>]
	calll	length_of_file_name_and_frills
	# 0x8051dc7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051dca:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8051dcd:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8051dd0:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8051dd3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051dd5:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8051dd8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051ddb:	pushl	$0 [IMM]
	pushl	$0
	# 0x8051ddd:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051de0:	calll	0x80512f9 [IMM <CODEREF>]
	calll	print_file_name_and_frills
	# 0x8051de5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051de8:	movl	$1, -0x28(%ebp) [IMM, MEM]
	movl	$1, -0x28(%ebp)
	# 0x8051def:	jmp	0x8051e8c [IMM <CODEREF>]
	jmp	.label_888
	# 0x8051df4:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_889:
	movl	-0x28(%ebp), %eax
	# 0x8051df7:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051dfc:	divl	-0x18(%ebp) [MEM]
	divl	-0x18(%ebp)
	# 0x8051dff:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x8051e02:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8051e06:	jne	0x8051e1e [IMM <CODEREF>]
	jne	.label_891
	# 0x8051e08:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051e0b:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8051e0d:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051e12:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051e15:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x8051e1c:	jmp	0x8051e41 [IMM <CODEREF>]
	jmp	.label_890
	# 0x8051e1e:	movl	-0x24(%ebp), %edx [MEM, REG]
.label_891:
	movl	-0x24(%ebp), %edx
	# 0x8051e21:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8051e24:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8051e26:	movl	-0x24(%ebp), %ecx [MEM, REG]
	movl	-0x24(%ebp), %ecx
	# 0x8051e29:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8051e2c:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8051e2e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051e31:	pushl	%edx [REG]
	pushl	%edx
	# 0x8051e32:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051e33:	calll	0x8051f9a [IMM <CODEREF>]
	calll	indent
	# 0x8051e38:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051e3b:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8051e3e:	addl	%eax, -0x24(%ebp) [REG, MEM]
	addl	%eax, -0x24(%ebp)
	# 0x8051e41:	movl	0x806a3d4, %eax [MEM, REG]
.label_890:
	movl	sorted_file,  %eax
	# 0x8051e46:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x8051e49:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x8051e4c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051e4e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051e50:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8051e53:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8051e56:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x8051e59:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051e5c:	calll	0x80512f9 [IMM <CODEREF>]
	calll	print_file_name_and_frills
	# 0x8051e61:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051e64:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051e67:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051e6a:	calll	0x8051a81 [IMM <CODEREF>]
	calll	length_of_file_name_and_frills
	# 0x8051e6f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051e72:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8051e75:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8051e78:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8051e7b:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8051e7e:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x8051e81:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051e83:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051e85:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8051e88:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x8051e8c:	movl	0x806a3cc, %eax [MEM, REG]
.label_888:
	movl	cwd_n_used,  %eax
	# 0x8051e91:	cmpl	%eax, -0x28(%ebp) [REG, MEM]
	cmpl	%eax, -0x28(%ebp)
	# 0x8051e94:	jb	0x8051df4 [IMM <CODEREF>]
	jb	.label_889
	# 0x8051e9a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051e9d:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8051e9f:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051ea4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051ea7:	nop	 []
	nop	
	# 0x8051ea8:	leave	 []
	leave	
	# 0x8051ea9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051eaa

	# 0x8051eaa:	pushl	%ebp [REG]
	.globl print_with_separator
	.type print_with_separator, @function
print_with_separator:
	pushl	%ebp
	# 0x8051eab:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051ead:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8051eb0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051eb3:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x8051eb6:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8051ebd:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x8051ec4:	jmp	0x8051f7c [IMM <CODEREF>]
	jmp	.label_894
	# 0x8051ec9:	movl	0x806a3d4, %eax [MEM, REG]
.label_899:
	movl	sorted_file,  %eax
	# 0x8051ece:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x8051ed1:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x8051ed4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051ed6:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8051ed8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8051edb:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x8051ee0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051ee2:	je	0x8051ef4 [IMM <CODEREF>]
	je	.label_893
	# 0x8051ee4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051ee7:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051eea:	calll	0x8051a81 [IMM <CODEREF>]
	calll	length_of_file_name_and_frills
	# 0x8051eef:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051ef2:	jmp	0x8051ef9 [IMM <CODEREF>]
	jmp	.label_897
	# 0x8051ef4:	movl	$0, %eax [IMM, REG]
.label_893:
	movl	$0, %eax
	# 0x8051ef9:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_897:
	movl	%eax, -0xc(%ebp)
	# 0x8051efc:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x8051f00:	je	0x8051f61 [IMM <CODEREF>]
	je	.label_898
	# 0x8051f02:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x8051f07:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051f09:	je	0x8051f2c [IMM <CODEREF>]
	je	.label_892
	# 0x8051f0b:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x8051f0e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051f11:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8051f13:	leal	2(%eax), %edx [MEM, REG]
	leal	2(%eax), %edx
	# 0x8051f16:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x8051f1b:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8051f1d:	jae	0x8051f36 [IMM <CODEREF>]
	jae	.label_895
	# 0x8051f1f:	movl	$0xfffffffd, %eax [IMM, REG]
	movl	$0xfffffffd, %eax
	# 0x8051f24:	subl	-0xc(%ebp), %eax [MEM, REG]
	subl	-0xc(%ebp), %eax
	# 0x8051f27:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x8051f2a:	jb	0x8051f36 [IMM <CODEREF>]
	jb	.label_895
	# 0x8051f2c:	addl	$2, -0x14(%ebp) [IMM, MEM]
.label_892:
	addl	$2, -0x14(%ebp)
	# 0x8051f30:	movb	$0x20, -0x19(%ebp) [IMM, MEM]
	movb	$0x20, -0x19(%ebp)
	# 0x8051f34:	jmp	0x8051f41 [IMM <CODEREF>]
	jmp	.label_896
	# 0x8051f36:	movl	$0, -0x14(%ebp) [IMM, MEM]
.label_895:
	movl	$0, -0x14(%ebp)
	# 0x8051f3d:	movb	$0xa, -0x19(%ebp) [IMM, MEM]
	movb	$0xa, -0x19(%ebp)
	# 0x8051f41:	movsbl	-0x2c(%ebp), %eax [MEM, REG]
.label_896:
	movsbl	-0x2c(%ebp), %eax
	# 0x8051f45:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051f48:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051f49:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051f4e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051f51:	movsbl	-0x19(%ebp), %eax [MEM, REG]
	movsbl	-0x19(%ebp), %eax
	# 0x8051f55:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051f58:	pushl	%eax [REG]
	pushl	%eax
	# 0x8051f59:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051f5e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051f61:	subl	$8, %esp [IMM, REG]
.label_898:
	subl	$8, %esp
	# 0x8051f64:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8051f67:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8051f6a:	calll	0x80512f9 [IMM <CODEREF>]
	calll	print_file_name_and_frills
	# 0x8051f6f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051f72:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8051f75:	addl	%eax, -0x14(%ebp) [REG, MEM]
	addl	%eax, -0x14(%ebp)
	# 0x8051f78:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x8051f7c:	movl	0x806a3cc, %eax [MEM, REG]
.label_894:
	movl	cwd_n_used,  %eax
	# 0x8051f81:	cmpl	%eax, -0x18(%ebp) [REG, MEM]
	cmpl	%eax, -0x18(%ebp)
	# 0x8051f84:	jb	0x8051ec9 [IMM <CODEREF>]
	jb	.label_899
	# 0x8051f8a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051f8d:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8051f8f:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051f94:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051f97:	nop	 []
	nop	
	# 0x8051f98:	leave	 []
	leave	
	# 0x8051f99:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8051f9a

	# 0x8051f9a:	pushl	%ebp [REG]
	.globl indent
	.type indent, @function
indent:
	pushl	%ebp
	# 0x8051f9b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8051f9d:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8051f9e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8051fa1:	jmp	0x8052014 [IMM <CODEREF>]
	jmp	.label_902
	# 0x8051fa3:	movl	0x806a474, %eax [MEM, REG]
.label_901:
	movl	tabsize,  %eax
	# 0x8051fa8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8051faa:	je	0x8052003 [IMM <CODEREF>]
	je	.label_900
	# 0x8051fac:	movl	0x806a474, %ebx [MEM, REG]
	movl	tabsize,  %ebx
	# 0x8051fb2:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8051fb5:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051fba:	divl	%ebx [REG]
	divl	%ebx
	# 0x8051fbc:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x8051fbe:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051fc1:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8051fc4:	movl	0x806a474, %ebx [MEM, REG]
	movl	tabsize,  %ebx
	# 0x8051fca:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051fcf:	divl	%ebx [REG]
	divl	%ebx
	# 0x8051fd1:	cmpl	%eax, %ecx [REG, REG]
	cmpl	%eax, %ecx
	# 0x8051fd3:	jbe	0x8052003 [IMM <CODEREF>]
	jbe	.label_900
	# 0x8051fd5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8051fd8:	pushl	$9 [IMM]
	pushl	$9
	# 0x8051fda:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x8051fdf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8051fe2:	movl	0x806a474, %ecx [MEM, REG]
	movl	tabsize,  %ecx
	# 0x8051fe8:	movl	0x806a474, %ebx [MEM, REG]
	movl	tabsize,  %ebx
	# 0x8051fee:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8051ff1:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8051ff6:	divl	%ebx [REG]
	divl	%ebx
	# 0x8051ff8:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8051ffa:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8051ffc:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8051ffe:	addl	%eax, 8(%ebp) [REG, MEM]
	addl	%eax, 8(%ebp)
	# 0x8052001:	jmp	0x8052014 [IMM <CODEREF>]
	jmp	.label_902
	# 0x8052003:	subl	$0xc, %esp [IMM, REG]
.label_900:
	subl	$0xc, %esp
	# 0x8052006:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8052008:	calll	0x8049bc0 [IMM <CODEREF>]
	calll	putchar_unlocked
	# 0x805200d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052010:	addl	$1, 8(%ebp) [IMM, MEM]
	addl	$1, 8(%ebp)
	# 0x8052014:	movl	8(%ebp), %eax [MEM, REG]
.label_902:
	movl	8(%ebp), %eax
	# 0x8052017:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805201a:	jb	0x8051fa3 [IMM <CODEREF>]
	jb	.label_901
	# 0x805201c:	nop	 []
	nop	
	# 0x805201d:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8052020:	leave	 []
	leave	
	# 0x8052021:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052022

	# 0x8052022:	pushl	%ebp [REG]
	.globl attach
	.type attach, @function
attach:
	pushl	%ebp
	# 0x8052023:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052025:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8052028:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805202b:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805202e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052031:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8052034:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x8052036:	jne	0x805205e [IMM <CODEREF>]
	jne	.label_904
	# 0x8052038:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805203b:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805203e:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8052041:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8052043:	je	0x80520a2 [IMM <CODEREF>]
	je	.label_903
	# 0x8052045:	jmp	0x805205e [IMM <CODEREF>]
	jmp	.label_904
	# 0x8052047:	movl	8(%ebp), %eax [MEM, REG]
.label_906:
	movl	8(%ebp), %eax
	# 0x805204a:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805204d:	movl	%edx, 8(%ebp) [REG, MEM]
	movl	%edx, 8(%ebp)
	# 0x8052050:	movl	-4(%ebp), %edx [MEM, REG]
	movl	-4(%ebp), %edx
	# 0x8052053:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x8052056:	movl	%ecx, -4(%ebp) [REG, MEM]
	movl	%ecx, -4(%ebp)
	# 0x8052059:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x805205c:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805205e:	movl	-4(%ebp), %eax [MEM, REG]
.label_904:
	movl	-4(%ebp), %eax
	# 0x8052061:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8052064:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8052066:	jne	0x8052047 [IMM <CODEREF>]
	jne	.label_906
	# 0x8052068:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805206b:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805206e:	jbe	0x80520a2 [IMM <CODEREF>]
	jbe	.label_903
	# 0x8052070:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8052073:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8052076:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8052079:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x805207b:	je	0x80520a2 [IMM <CODEREF>]
	je	.label_903
	# 0x805207d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052080:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8052083:	movl	%edx, 8(%ebp) [REG, MEM]
	movl	%edx, 8(%ebp)
	# 0x8052086:	movb	$0x2f, 0(%eax) [IMM, MEM]
	movb	$0x2f, 0(%eax)
	# 0x8052089:	jmp	0x80520a2 [IMM <CODEREF>]
	jmp	.label_903
	# 0x805208b:	movl	8(%ebp), %eax [MEM, REG]
.label_905:
	movl	8(%ebp), %eax
	# 0x805208e:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8052091:	movl	%edx, 8(%ebp) [REG, MEM]
	movl	%edx, 8(%ebp)
	# 0x8052094:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x8052097:	leal	1(%edx), %ecx [MEM, REG]
	leal	1(%edx), %ecx
	# 0x805209a:	movl	%ecx, 0x10(%ebp) [REG, MEM]
	movl	%ecx, 0x10(%ebp)
	# 0x805209d:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x80520a0:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x80520a2:	movl	0x10(%ebp), %eax [MEM, REG]
.label_903:
	movl	0x10(%ebp), %eax
	# 0x80520a5:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80520a8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80520aa:	jne	0x805208b [IMM <CODEREF>]
	jne	.label_905
	# 0x80520ac:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80520af:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80520b2:	nop	 []
	nop	
	# 0x80520b3:	leave	 []
	leave	
	# 0x80520b4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80520b5

	# 0x80520b5:	pushl	%ebp [REG]
	.globl init_column_info
	.type init_column_info, @function
init_column_info:
	pushl	%ebp
	# 0x80520b6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80520b8:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80520bb:	movl	0x806a3cc, %edx [MEM, REG]
	movl	cwd_n_used,  %edx
	# 0x80520c1:	movl	0x806a530, %eax [MEM, REG]
	movl	max_idx,  %eax
	# 0x80520c6:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x80520c8:	cmovbel	%edx, %eax [REG, REG]
	cmovbel	%edx, %eax
	# 0x80520cb:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80520ce:	movl	0x806b3d8, %eax [MEM, REG]
	movl	column_info_alloc.9410,  %eax
	# 0x80520d3:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x80520d6:	jae	0x80521d6 [IMM <CODEREF>]
	jae	.label_911
	# 0x80520dc:	movl	0x806a530, %eax [MEM, REG]
	movl	max_idx,  %eax
	# 0x80520e1:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x80520e3:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x80520e6:	jbe	0x805210d [IMM <CODEREF>]
	jbe	.label_916
	# 0x80520e8:	movl	0x806a52c, %eax [MEM, REG]
	movl	column_info,  %eax
	# 0x80520ed:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80520f0:	pushl	$0x18 [IMM]
	pushl	$0x18
	# 0x80520f2:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x80520f5:	pushl	%eax [REG]
	pushl	%eax
	# 0x80520f6:	calll	0x805c453 [IMM <CODEREF>]
	calll	xnrealloc
	# 0x80520fb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80520fe:	movl	%eax, 0x806a52c [REG, MEM]
	movl	%eax, column_info
	# 0x8052103:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8052106:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052108:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805210b:	jmp	0x8052134 [IMM <CODEREF>]
	jmp	.label_915
	# 0x805210d:	movl	0x806a530, %edx [MEM, REG]
.label_916:
	movl	max_idx,  %edx
	# 0x8052113:	movl	0x806a52c, %eax [MEM, REG]
	movl	column_info,  %eax
	# 0x8052118:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805211b:	pushl	$0xc [IMM]
	pushl	$0xc
	# 0x805211d:	pushl	%edx [REG]
	pushl	%edx
	# 0x805211e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805211f:	calll	0x805c453 [IMM <CODEREF>]
	calll	xnrealloc
	# 0x8052124:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052127:	movl	%eax, 0x806a52c [REG, MEM]
	movl	%eax, column_info
	# 0x805212c:	movl	0x806a530, %eax [MEM, REG]
	movl	max_idx,  %eax
	# 0x8052131:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8052134:	movl	0x806b3d8, %eax [MEM, REG]
.label_915:
	movl	column_info_alloc.9410,  %eax
	# 0x8052139:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x805213c:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805213e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052140:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8052143:	movl	0x806b3d8, %edx [MEM, REG]
	movl	column_info_alloc.9410,  %edx
	# 0x8052149:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805214c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805214e:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8052151:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8052154:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8052157:	imull	-0x14(%ebp), %eax [MEM, REG]
	imull	-0x14(%ebp), %eax
	# 0x805215b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805215e:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8052161:	cmpl	-0x24(%ebp), %eax [MEM, REG]
	cmpl	-0x24(%ebp), %eax
	# 0x8052164:	jb	0x8052176 [IMM <CODEREF>]
	jb	.label_910
	# 0x8052166:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8052169:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805216e:	divl	-0x14(%ebp) [MEM]
	divl	-0x14(%ebp)
	# 0x8052171:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8052174:	je	0x805217b [IMM <CODEREF>]
	je	.label_907
	# 0x8052176:	calll	0x805c726 [IMM <CODEREF>]
.label_910:
	calll	xalloc_die
	# 0x805217b:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_907:
	movl	-0xc(%ebp), %eax
	# 0x805217e:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x8052180:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052183:	pushl	$4 [IMM]
	pushl	$4
	# 0x8052185:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052186:	calll	0x805c3f0 [IMM <CODEREF>]
	calll	xnmalloc
	# 0x805218b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805218e:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8052191:	movl	0x806b3d8, %eax [MEM, REG]
	movl	column_info_alloc.9410,  %eax
	# 0x8052196:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8052199:	jmp	0x80521c6 [IMM <CODEREF>]
	jmp	.label_914
	# 0x805219b:	movl	0x806a52c, %ecx [MEM, REG]
.label_909:
	movl	column_info,  %ecx
	# 0x80521a1:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x80521a4:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80521a6:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80521a8:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80521aa:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80521ad:	leal	0(%ecx, %eax), %edx [MEM, REG]
	leal	0(%ecx, %eax), %edx
	# 0x80521b0:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80521b3:	movl	%eax, 8(%edx) [REG, MEM]
	movl	%eax, 8(%edx)
	# 0x80521b6:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x80521b9:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80521bc:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80521bf:	addl	%eax, -0x20(%ebp) [REG, MEM]
	addl	%eax, -0x20(%ebp)
	# 0x80521c2:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x80521c6:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_914:
	movl	-0x28(%ebp), %eax
	# 0x80521c9:	cmpl	-0x24(%ebp), %eax [MEM, REG]
	cmpl	-0x24(%ebp), %eax
	# 0x80521cc:	jb	0x805219b [IMM <CODEREF>]
	jb	.label_909
	# 0x80521ce:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x80521d1:	movl	%eax, 0x806b3d8 [REG, MEM]
	movl	%eax, column_info_alloc.9410
	# 0x80521d6:	movl	$0, -0x28(%ebp) [IMM, MEM]
.label_911:
	movl	$0, -0x28(%ebp)
	# 0x80521dd:	jmp	0x8052257 [IMM <CODEREF>]
	jmp	.label_912
	# 0x80521df:	movl	0x806a52c, %ecx [MEM, REG]
.label_913:
	movl	column_info,  %ecx
	# 0x80521e5:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x80521e8:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80521ea:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80521ec:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80521ee:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80521f1:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80521f3:	movb	$1, 0(%eax) [IMM, MEM]
	movb	$1, 0(%eax)
	# 0x80521f6:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x80521fc:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x80521ff:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052201:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052203:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052205:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8052208:	addl	%eax, %ecx [REG, REG]
	addl	%eax, %ecx
	# 0x805220a:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x805220d:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8052210:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052212:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052214:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052216:	movl	%eax, 4(%ecx) [REG, MEM]
	movl	%eax, 4(%ecx)
	# 0x8052219:	movl	$0, -0x1c(%ebp) [IMM, MEM]
	movl	$0, -0x1c(%ebp)
	# 0x8052220:	jmp	0x805224b [IMM <CODEREF>]
	jmp	.label_917
	# 0x8052222:	movl	0x806a52c, %ecx [MEM, REG]
.label_908:
	movl	column_info,  %ecx
	# 0x8052228:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805222b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805222d:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x805222f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052231:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8052234:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8052236:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8052239:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x805223c:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x805223f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052241:	movl	$3, 0(%eax) [IMM, MEM]
	movl	$3, 0(%eax)
	# 0x8052247:	addl	$1, -0x1c(%ebp) [IMM, MEM]
	addl	$1, -0x1c(%ebp)
	# 0x805224b:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_917:
	movl	-0x1c(%ebp), %eax
	# 0x805224e:	cmpl	-0x28(%ebp), %eax [MEM, REG]
	cmpl	-0x28(%ebp), %eax
	# 0x8052251:	jbe	0x8052222 [IMM <CODEREF>]
	jbe	.label_908
	# 0x8052253:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x8052257:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_912:
	movl	-0x28(%ebp), %eax
	# 0x805225a:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x805225d:	jb	0x80521df [IMM <CODEREF>]
	jb	.label_913
	# 0x805225f:	nop	 []
	nop	
	# 0x8052260:	leave	 []
	leave	
	# 0x8052261:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052262

	# 0x8052262:	pushl	%ebp [REG]
	.globl calculate_columns
	.type calculate_columns, @function
calculate_columns:
	pushl	%ebp
	# 0x8052263:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052265:	pushl	%esi [REG]
	pushl	%esi
	# 0x8052266:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052267:	subl	$0x30, %esp [IMM, REG]
	subl	$0x30, %esp
	# 0x805226a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805226d:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x8052270:	movl	0x806a3cc, %edx [MEM, REG]
	movl	cwd_n_used,  %edx
	# 0x8052276:	movl	0x806a530, %eax [MEM, REG]
	movl	max_idx,  %eax
	# 0x805227b:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805227d:	cmovbel	%edx, %eax [REG, REG]
	cmovbel	%edx, %eax
	# 0x8052280:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8052283:	calll	0x80520b5 [IMM <CODEREF>]
	calll	init_column_info
	# 0x8052288:	movl	$0, -0x28(%ebp) [IMM, MEM]
	movl	$0, -0x28(%ebp)
	# 0x805228f:	jmp	0x8052430 [IMM <CODEREF>]
	jmp	.label_921
	# 0x8052294:	movl	0x806a3d4, %eax [MEM, REG]
.label_925:
	movl	sorted_file,  %eax
	# 0x8052299:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805229c:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x805229f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80522a1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80522a3:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80522a6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80522a9:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x80522ac:	calll	0x8051a81 [IMM <CODEREF>]
	calll	length_of_file_name_and_frills
	# 0x80522b1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80522b4:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x80522b7:	movl	$0, -0x20(%ebp) [IMM, MEM]
	movl	$0, -0x20(%ebp)
	# 0x80522be:	jmp	0x8052420 [IMM <CODEREF>]
	jmp	.label_926
	# 0x80522c3:	movl	0x806a52c, %ecx [MEM, REG]
.label_924:
	movl	column_info,  %ecx
	# 0x80522c9:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x80522cc:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80522ce:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80522d0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80522d2:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80522d5:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80522d7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80522da:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80522dc:	je	0x805241c [IMM <CODEREF>]
	je	.label_919
	# 0x80522e2:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
	cmpb	$0, -0x2c(%ebp)
	# 0x80522e6:	je	0x805230e [IMM <CODEREF>]
	je	.label_922
	# 0x80522e8:	movl	0x806a3cc, %edx [MEM, REG]
	movl	cwd_n_used,  %edx
	# 0x80522ee:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80522f1:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80522f3:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x80522f6:	leal	1(%edx), %esi [MEM, REG]
	leal	1(%edx), %esi
	# 0x80522f9:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80522fe:	divl	%esi [REG]
	divl	%esi
	# 0x8052300:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x8052302:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x8052305:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805230a:	divl	%esi [REG]
	divl	%esi
	# 0x805230c:	jmp	0x8052320 [IMM <CODEREF>]
	jmp	.label_927
	# 0x805230e:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_922:
	movl	-0x20(%ebp), %eax
	# 0x8052311:	leal	1(%eax), %ecx [MEM, REG]
	leal	1(%eax), %ecx
	# 0x8052314:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x8052317:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805231c:	divl	%ecx [REG]
	divl	%ecx
	# 0x805231e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052320:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_927:
	movl	%eax, -0x10(%ebp)
	# 0x8052323:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8052326:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x8052329:	jne	0x8052332 [IMM <CODEREF>]
	jne	.label_918
	# 0x805232b:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8052330:	jmp	0x8052337 [IMM <CODEREF>]
	jmp	.label_928
	# 0x8052332:	movl	$2, %edx [IMM, REG]
.label_918:
	movl	$2, %edx
	# 0x8052337:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_928:
	movl	-0x14(%ebp), %eax
	# 0x805233a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805233c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805233f:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x8052345:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8052348:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805234a:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x805234c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805234e:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8052351:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8052353:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8052356:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8052359:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x805235c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805235e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052360:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8052363:	jae	0x805241c [IMM <CODEREF>]
	jae	.label_919
	# 0x8052369:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x805236f:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8052372:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052374:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052376:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052378:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805237b:	addl	%eax, %ecx [REG, REG]
	addl	%eax, %ecx
	# 0x805237d:	movl	0x806a52c, %ebx [MEM, REG]
	movl	column_info,  %ebx
	# 0x8052383:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8052386:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052388:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x805238a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805238c:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805238f:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x8052391:	movl	4(%eax), %ebx [MEM, REG]
	movl	4(%eax), %ebx
	# 0x8052394:	movl	0x806a52c, %esi [MEM, REG]
	movl	column_info,  %esi
	# 0x805239a:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x805239d:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805239f:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80523a1:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80523a3:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80523a6:	addl	%esi, %eax [REG, REG]
	addl	%esi, %eax
	# 0x80523a8:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80523ab:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x80523ae:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x80523b1:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80523b3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80523b5:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x80523b8:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80523ba:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80523bc:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x80523be:	movl	%eax, 4(%ecx) [REG, MEM]
	movl	%eax, 4(%ecx)
	# 0x80523c1:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x80523c7:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x80523ca:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80523cc:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80523ce:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80523d0:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80523d3:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80523d5:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80523d8:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x80523db:	shll	$2, %edx [IMM, REG]
	shll	$2, %edx
	# 0x80523de:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x80523e0:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80523e3:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x80523e5:	movl	0x806a52c, %ecx [MEM, REG]
	movl	column_info,  %ecx
	# 0x80523eb:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x80523ee:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80523f0:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x80523f2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80523f4:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x80523f7:	addl	%eax, %ecx [REG, REG]
	addl	%eax, %ecx
	# 0x80523f9:	movl	0x806a52c, %ebx [MEM, REG]
	movl	column_info,  %ebx
	# 0x80523ff:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8052402:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052404:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052406:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052408:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805240b:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x805240d:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8052410:	movl	0x806a47c, %eax [MEM, REG]
	movl	line_length,  %eax
	# 0x8052415:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8052417:	setb	%al [REG]
	setb	%al
	# 0x805241a:	movb	%al, 0(%ecx) [REG, MEM]
	movb	%al, 0(%ecx)
	# 0x805241c:	addl	$1, -0x20(%ebp) [IMM, MEM]
.label_919:
	addl	$1, -0x20(%ebp)
	# 0x8052420:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_926:
	movl	-0x20(%ebp), %eax
	# 0x8052423:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x8052426:	jb	0x80522c3 [IMM <CODEREF>]
	jb	.label_924
	# 0x805242c:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x8052430:	movl	0x806a3cc, %eax [MEM, REG]
.label_921:
	movl	cwd_n_used,  %eax
	# 0x8052435:	cmpl	%eax, -0x28(%ebp) [REG, MEM]
	cmpl	%eax, -0x28(%ebp)
	# 0x8052438:	jb	0x8052294 [IMM <CODEREF>]
	jb	.label_925
	# 0x805243e:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8052441:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8052444:	jmp	0x8052468 [IMM <CODEREF>]
	jmp	.label_930
	# 0x8052446:	movl	0x806a52c, %ecx [MEM, REG]
.label_923:
	movl	column_info,  %ecx
	# 0x805244c:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x805244f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052451:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8052453:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052455:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8052458:	subl	$0xc, %eax [IMM, REG]
	subl	$0xc, %eax
	# 0x805245b:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x805245d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8052460:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8052462:	jne	0x8052470 [IMM <CODEREF>]
	jne	.label_920
	# 0x8052464:	subl	$1, -0x24(%ebp) [IMM, MEM]
	subl	$1, -0x24(%ebp)
	# 0x8052468:	cmpl	$1, -0x24(%ebp) [IMM, MEM]
.label_930:
	cmpl	$1, -0x24(%ebp)
	# 0x805246c:	ja	0x8052446 [IMM <CODEREF>]
	ja	.label_923
	# 0x805246e:	jmp	0x8052471 [IMM <CODEREF>]
	jmp	.label_929
	# 0x8052470:	nop	 []
.label_920:
	nop	
	# 0x8052471:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_929:
	movl	-0x24(%ebp), %eax
	# 0x8052474:	leal	-8(%ebp), %esp [MEM, REG]
	leal	-8(%ebp), %esp
	# 0x8052477:	popl	%ebx [REG]
	popl	%ebx
	# 0x8052478:	popl	%esi [REG]
	popl	%esi
	# 0x8052479:	popl	%ebp [REG]
	popl	%ebp
	# 0x805247a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805247b

	# 0x805247b:	pushl	%ebp [REG]
	.globl usage
	.type usage, @function
usage:
	pushl	%ebp
	# 0x805247c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805247e:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805247f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052482:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x8052486:	je	0x80524b8 [IMM <CODEREF>]
	je	.label_959
	# 0x8052488:	movl	0x806b3f4, %ebx [MEM, REG]
	movl	program_name,  %ebx
	# 0x805248e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052491:	pushl	$0x80615c4 [IMM <DATAREF>]
	pushl	$label_934
	# 0x8052496:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805249b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805249e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80524a0:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x80524a5:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80524a8:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80524a9:	pushl	%edx [REG]
	pushl	%edx
	# 0x80524aa:	pushl	%eax [REG]
	pushl	%eax
	# 0x80524ab:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x80524b0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80524b3:	jmp	0x80528ec [IMM <CODEREF>]
	jmp	.label_941
	# 0x80524b8:	movl	0x806b3f4, %ebx [MEM, REG]
.label_959:
	movl	program_name,  %ebx
	# 0x80524be:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80524c1:	pushl	$0x80615ec [IMM <DATAREF>]
	pushl	$label_946
	# 0x80524c6:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80524cb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80524ce:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80524d1:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80524d2:	pushl	%eax [REG]
	pushl	%eax
	# 0x80524d3:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x80524d8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80524db:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80524e1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80524e4:	pushl	$0x8061610 [IMM <DATAREF>]
	pushl	$label_956
	# 0x80524e9:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80524ee:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80524f1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80524f4:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80524f5:	pushl	%eax [REG]
	pushl	%eax
	# 0x80524f6:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80524fb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80524fe:	calll	0x8049d59 [IMM <CODEREF>]
	calll	emit_mandatory_arg_note
	# 0x8052503:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052509:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805250c:	pushl	$0x80616a0 [IMM <DATAREF>]
	pushl	$label_933
	# 0x8052511:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052516:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052519:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805251c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805251d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805251e:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052523:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052526:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805252c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805252f:	pushl	$0x80617b0 [IMM <DATAREF>]
	pushl	$label_955
	# 0x8052534:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052539:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805253c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805253f:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052540:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052541:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052546:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052549:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805254f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052552:	pushl	$0x806184c [IMM <DATAREF>]
	pushl	$label_950
	# 0x8052557:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805255c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805255f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052562:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052563:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052564:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052569:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805256c:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052572:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052575:	pushl	$0x80619b8 [IMM <DATAREF>]
	pushl	$label_960
	# 0x805257a:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805257f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052582:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052585:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052586:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052587:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805258c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805258f:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052595:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052598:	pushl	$0x8061b28 [IMM <DATAREF>]
	pushl	$label_935
	# 0x805259d:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80525a2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525a5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80525a8:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80525a9:	pushl	%eax [REG]
	pushl	%eax
	# 0x80525aa:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80525af:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525b2:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80525b8:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80525bb:	pushl	$0x8061ccc [IMM <DATAREF>]
	pushl	$label_943
	# 0x80525c0:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80525c5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525c8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80525cb:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80525cc:	pushl	%eax [REG]
	pushl	%eax
	# 0x80525cd:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80525d2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525d5:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80525db:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80525de:	pushl	$0x8061d0c [IMM <DATAREF>]
	pushl	$label_954
	# 0x80525e3:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80525e8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525eb:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80525ee:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80525ef:	pushl	%eax [REG]
	pushl	%eax
	# 0x80525f0:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80525f5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80525f8:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80525fe:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052601:	pushl	$0x8061e04 [IMM <DATAREF>]
	pushl	$label_964
	# 0x8052606:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805260b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805260e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052611:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052612:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052613:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052618:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805261b:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052621:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052624:	pushl	$0x8061e50 [IMM <DATAREF>]
	pushl	$label_938
	# 0x8052629:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805262e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052631:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052634:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052635:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052636:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805263b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805263e:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052644:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052647:	pushl	$0x8061ee8 [IMM <DATAREF>]
	pushl	$label_947
	# 0x805264c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052651:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052654:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052657:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052658:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052659:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805265e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052661:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052667:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805266a:	pushl	$0x8062090 [IMM <DATAREF>]
	pushl	$label_957
	# 0x805266f:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052674:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052677:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805267a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805267b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805267c:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052681:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052684:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805268a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805268d:	pushl	$0x8062124 [IMM <DATAREF>]
	pushl	$label_931
	# 0x8052692:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052697:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805269a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805269d:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805269e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805269f:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80526a4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80526a7:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80526ad:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80526b0:	pushl	$0x8062288 [IMM <DATAREF>]
	pushl	$label_942
	# 0x80526b5:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80526ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80526bd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80526c0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80526c1:	pushl	%eax [REG]
	pushl	%eax
	# 0x80526c2:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80526c7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80526ca:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80526d0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80526d3:	pushl	$0x806231c [IMM <DATAREF>]
	pushl	$label_951
	# 0x80526d8:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80526dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80526e0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80526e3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80526e4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80526e5:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80526ea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80526ed:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80526f3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80526f6:	pushl	$0x8062484 [IMM <DATAREF>]
	pushl	$label_961
	# 0x80526fb:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052700:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052703:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052706:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052707:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052708:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805270d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052710:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052716:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052719:	pushl	$0x80625b4 [IMM <DATAREF>]
	pushl	$label_936
	# 0x805271e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052723:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052726:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052729:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805272a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805272b:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052730:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052733:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052739:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805273c:	pushl	$0x8062800 [IMM <DATAREF>]
	pushl	$label_944
	# 0x8052741:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052746:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052749:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805274c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805274d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805274e:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052753:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052756:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805275c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805275f:	pushl	$0x80628c8 [IMM <DATAREF>]
	pushl	$label_963
	# 0x8052764:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052769:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805276c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805276f:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052770:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052771:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052776:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052779:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805277f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052782:	pushl	$0x8062ad0 [IMM <DATAREF>]
	pushl	$label_965
	# 0x8052787:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805278c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805278f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052792:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052793:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052794:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052799:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805279c:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80527a2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80527a5:	pushl	$0x8062b20 [IMM <DATAREF>]
	pushl	$label_939
	# 0x80527aa:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80527af:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80527b2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80527b5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80527b6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80527b7:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80527bc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80527bf:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80527c5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80527c8:	pushl	$0x8062bb0 [IMM <DATAREF>]
	pushl	$label_948
	# 0x80527cd:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80527d2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80527d5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80527d8:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80527d9:	pushl	%eax [REG]
	pushl	%eax
	# 0x80527da:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80527df:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80527e2:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x80527e8:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80527eb:	pushl	$0x8062d24 [IMM <DATAREF>]
	pushl	$label_958
	# 0x80527f0:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80527f5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80527f8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80527fb:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80527fc:	pushl	%eax [REG]
	pushl	%eax
	# 0x80527fd:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052802:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052805:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805280b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805280e:	pushl	$0x8062e90 [IMM <DATAREF>]
	pushl	$label_932
	# 0x8052813:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052818:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805281b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805281e:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805281f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052820:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052825:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052828:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805282e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052831:	pushl	$0x8062ec0 [IMM <DATAREF>]
	pushl	$label_940
	# 0x8052836:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805283b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805283e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052841:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052842:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052843:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052848:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805284b:	calll	0x8049d89 [IMM <CODEREF>]
	calll	emit_size_note
	# 0x8052850:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052856:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052859:	pushl	$0x8062ef8 [IMM <DATAREF>]
	pushl	$label_953
	# 0x805285e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052863:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052866:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052869:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805286a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805286b:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052870:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052873:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x8052879:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805287c:	pushl	$0x8063070 [IMM <DATAREF>]
	pushl	$label_962
	# 0x8052881:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052886:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052889:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805288c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805288d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805288e:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052893:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052896:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805289c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805289f:	pushl	$0x8063190 [IMM <DATAREF>]
	pushl	$label_937
	# 0x80528a4:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80528a9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80528ac:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80528af:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80528b0:	pushl	%eax [REG]
	pushl	%eax
	# 0x80528b1:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x80528b6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80528b9:	movl	0x806a308, %eax [MEM, REG]
	movl	ls_mode,  %eax
	# 0x80528be:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x80528c1:	je	0x80528db [IMM <CODEREF>]
	je	.label_945
	# 0x80528c3:	movl	0x806a308, %eax [MEM, REG]
	movl	ls_mode,  %eax
	# 0x80528c8:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x80528cb:	jne	0x80528d4 [IMM <CODEREF>]
	jne	.label_949
	# 0x80528cd:	movl	$0x8060983, %eax [IMM <DATAREF>, REG]
	movl	$label_175,  %eax
	# 0x80528d2:	jmp	0x80528e0 [IMM <CODEREF>]
	jmp	.label_952
	# 0x80528d4:	movl	$0x8060987, %eax [IMM <DATAREF>, REG]
.label_949:
	movl	$label_179,  %eax
	# 0x80528d9:	jmp	0x80528e0 [IMM <CODEREF>]
	jmp	.label_952
	# 0x80528db:	movl	$0x806098c, %eax [IMM <DATAREF>, REG]
.label_945:
	movl	$label_194,  %eax
	# 0x80528e0:	subl	$0xc, %esp [IMM, REG]
.label_952:
	subl	$0xc, %esp
	# 0x80528e3:	pushl	%eax [REG]
	pushl	%eax
	# 0x80528e4:	calll	0x8049db9 [IMM <CODEREF>]
	calll	emit_ancillary_info
	# 0x80528e9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80528ec:	subl	$0xc, %esp [IMM, REG]
.label_941:
	subl	$0xc, %esp
	# 0x80528ef:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80528f2:	calll	0x80498a0 [IMM <CODEREF>]
	calll	exit
	.section	.text
	.align	32
	#Procedure 0x80528f7

	# 0x80528f7:	pushl	%ebp [REG]
	.globl areadlink_with_size
	.type areadlink_with_size, @function
areadlink_with_size:
	pushl	%ebp
	# 0x80528f8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80528fa:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80528fd:	movl	$0x400, -0x24(%ebp) [IMM, MEM]
	movl	$0x400, -0x24(%ebp)
	# 0x8052904:	movl	$0x2000, -0x20(%ebp) [IMM, MEM]
	movl	$0x2000, -0x20(%ebp)
	# 0x805290b:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805290e:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x8052911:	jae	0x805291b [IMM <CODEREF>]
	jae	.label_975
	# 0x8052913:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x8052916:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8052919:	jmp	0x805291e [IMM <CODEREF>]
	jmp	.label_969
	# 0x805291b:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_975:
	movl	-0x20(%ebp), %eax
	# 0x805291e:	movl	%eax, -0x1c(%ebp) [REG, MEM]
.label_969:
	movl	%eax, -0x1c(%ebp)
	# 0x8052921:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052924:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x8052927:	jae	0x8052931 [IMM <CODEREF>]
	jae	.label_970
	# 0x8052929:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805292c:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805292f:	jmp	0x8052934 [IMM <CODEREF>]
	jmp	.label_973
	# 0x8052931:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_970:
	movl	-0x1c(%ebp), %eax
	# 0x8052934:	movl	%eax, -0x28(%ebp) [REG, MEM]
.label_973:
	movl	%eax, -0x28(%ebp)
	# 0x8052937:	subl	$0xc, %esp [IMM, REG]
.label_971:
	subl	$0xc, %esp
	# 0x805293a:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805293d:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x8052942:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052945:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8052948:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x805294c:	jne	0x8052958 [IMM <CODEREF>]
	jne	.label_967
	# 0x805294e:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8052953:	jmp	0x8052a0e [IMM <CODEREF>]
	jmp	.label_968
	# 0x8052958:	subl	$4, %esp [IMM, REG]
.label_967:
	subl	$4, %esp
	# 0x805295b:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805295e:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8052961:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052964:	calll	0x8049730 [IMM <CODEREF>]
	calll	readlink
	# 0x8052969:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805296c:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805296f:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8052972:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8052975:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x8052979:	jns	0x80529b2 [IMM <CODEREF>]
	jns	.label_966
	# 0x805297b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x8052980:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052982:	cmpl	$0x22, %eax [IMM, REG]
	cmpl	$0x22, %eax
	# 0x8052985:	je	0x80529b2 [IMM <CODEREF>]
	je	.label_966
	# 0x8052987:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805298c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805298e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8052991:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052994:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8052997:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805299c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805299f:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x80529a4:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80529a6:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80529a9:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x80529ab:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80529b0:	jmp	0x8052a0e [IMM <CODEREF>]
	jmp	.label_968
	# 0x80529b2:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_966:
	movl	-0x10(%ebp), %eax
	# 0x80529b5:	cmpl	-0x28(%ebp), %eax [MEM, REG]
	cmpl	-0x28(%ebp), %eax
	# 0x80529b8:	jae	0x80529ca [IMM <CODEREF>]
	jae	.label_974
	# 0x80529ba:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x80529bd:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x80529c0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80529c2:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80529c5:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80529c8:	jmp	0x8052a0e [IMM <CODEREF>]
	jmp	.label_968
	# 0x80529ca:	subl	$0xc, %esp [IMM, REG]
.label_974:
	subl	$0xc, %esp
	# 0x80529cd:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x80529d0:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80529d5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80529d8:	cmpl	$0x3fffffff, -0x28(%ebp) [IMM, MEM]
	cmpl	$0x3fffffff, -0x28(%ebp)
	# 0x80529df:	ja	0x80529e9 [IMM <CODEREF>]
	ja	.label_976
	# 0x80529e1:	shll	$1, -0x28(%ebp) [IMM, MEM]
	shll	$1, -0x28(%ebp)
	# 0x80529e4:	jmp	0x8052937 [IMM <CODEREF>]
	jmp	.label_971
	# 0x80529e9:	cmpl	$0x7ffffffe, -0x28(%ebp) [IMM, MEM]
.label_976:
	cmpl	$0x7ffffffe, -0x28(%ebp)
	# 0x80529f0:	ja	0x80529fe [IMM <CODEREF>]
	ja	.label_972
	# 0x80529f2:	movl	$0x7fffffff, -0x28(%ebp) [IMM, MEM]
	movl	$0x7fffffff, -0x28(%ebp)
	# 0x80529f9:	jmp	0x8052937 [IMM <CODEREF>]
	jmp	.label_971
	# 0x80529fe:	calll	0x8049990 [IMM <CODEREF>]
.label_972:
	calll	__errno_location
	# 0x8052a03:	movl	$0xc, 0(%eax) [IMM, MEM]
	movl	$0xc, 0(%eax)
	# 0x8052a09:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8052a0e:	leave	 []
.label_968:
	leave	
	# 0x8052a0f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052a10

	# 0x8052a10:	pushl	%ebp [REG]
	.globl __argmatch_die
	.type __argmatch_die, @function
__argmatch_die:
	pushl	%ebp
	# 0x8052a11:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052a13:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052a16:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052a19:	pushl	$1 [IMM]
	pushl	$1
	# 0x8052a1b:	calll	0x805247b [IMM <CODEREF>]
	calll	usage
	.section	.text
	.align	32
	#Procedure 0x8052a26

	# 0x8052a26:	pushl	%ebp [REG]
	.globl argmatch
	.type argmatch, @function
argmatch:
	pushl	%ebp
	# 0x8052a27:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052a29:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8052a2c:	movl	$0xffffffff, -0x10(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x10(%ebp)
	# 0x8052a33:	movb	$0, -0x15(%ebp) [IMM, MEM]
	movb	$0, -0x15(%ebp)
	# 0x8052a37:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052a3a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052a3d:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8052a42:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052a45:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8052a48:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8052a4f:	jmp	0x8052aee [IMM <CODEREF>]
	jmp	.label_977
	# 0x8052a54:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_981:
	movl	-0x14(%ebp), %eax
	# 0x8052a57:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052a5e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052a61:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052a63:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052a65:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052a68:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8052a6b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052a6e:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052a6f:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x8052a74:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052a77:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052a79:	jne	0x8052aea [IMM <CODEREF>]
	jne	.label_979
	# 0x8052a7b:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8052a7e:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052a85:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052a88:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052a8a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052a8c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052a8f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052a90:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8052a95:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052a98:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8052a9b:	jne	0x8052aa2 [IMM <CODEREF>]
	jne	.label_983
	# 0x8052a9d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8052aa0:	jmp	0x8052b17 [IMM <CODEREF>]
	jmp	.label_980
	# 0x8052aa2:	cmpl	$-1, -0x10(%ebp) [IMM, MEM]
.label_983:
	cmpl	$-1, -0x10(%ebp)
	# 0x8052aa6:	jne	0x8052ab0 [IMM <CODEREF>]
	jne	.label_984
	# 0x8052aa8:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8052aab:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8052aae:	jmp	0x8052aea [IMM <CODEREF>]
	jmp	.label_979
	# 0x8052ab0:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
.label_984:
	cmpl	$0, 0x10(%ebp)
	# 0x8052ab4:	je	0x8052ae6 [IMM <CODEREF>]
	je	.label_982
	# 0x8052ab6:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8052ab9:	imull	-0x14(%ebp), %eax [MEM, REG]
	imull	-0x14(%ebp), %eax
	# 0x8052abd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052abf:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8052ac2:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8052ac4:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8052ac7:	imull	0x14(%ebp), %eax [MEM, REG]
	imull	0x14(%ebp), %eax
	# 0x8052acb:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x8052acd:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8052ad0:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x8052ad2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052ad5:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x8052ad8:	pushl	%edx [REG]
	pushl	%edx
	# 0x8052ad9:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052ada:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x8052adf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052ae2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052ae4:	je	0x8052aea [IMM <CODEREF>]
	je	.label_979
	# 0x8052ae6:	movb	$1, -0x15(%ebp) [IMM, MEM]
.label_982:
	movb	$1, -0x15(%ebp)
	# 0x8052aea:	addl	$1, -0x14(%ebp) [IMM, MEM]
.label_979:
	addl	$1, -0x14(%ebp)
	# 0x8052aee:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_977:
	movl	-0x14(%ebp), %eax
	# 0x8052af1:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052af8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052afb:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052afd:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052aff:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052b01:	jne	0x8052a54 [IMM <CODEREF>]
	jne	.label_981
	# 0x8052b07:	cmpb	$0, -0x15(%ebp) [IMM, MEM]
	cmpb	$0, -0x15(%ebp)
	# 0x8052b0b:	je	0x8052b14 [IMM <CODEREF>]
	je	.label_978
	# 0x8052b0d:	movl	$0xfffffffe, %eax [IMM, REG]
	movl	$0xfffffffe, %eax
	# 0x8052b12:	jmp	0x8052b17 [IMM <CODEREF>]
	jmp	.label_980
	# 0x8052b14:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_978:
	movl	-0x10(%ebp), %eax
	# 0x8052b17:	leave	 []
.label_980:
	leave	
	# 0x8052b18:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052b19

	# 0x8052b19:	pushl	%ebp [REG]
	.globl argmatch_invalid
	.type argmatch_invalid, @function
argmatch_invalid:
	pushl	%ebp
	# 0x8052b1a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052b1c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052b1d:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x8052b20:	cmpl	$-1, 0x10(%ebp) [IMM, MEM]
	cmpl	$-1, 0x10(%ebp)
	# 0x8052b24:	jne	0x8052b38 [IMM <CODEREF>]
	jne	.label_988
	# 0x8052b26:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052b29:	pushl	$0x80632aa [IMM <DATAREF>]
	pushl	$label_986
	# 0x8052b2e:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052b33:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052b36:	jmp	0x8052b48 [IMM <CODEREF>]
	jmp	.label_985
	# 0x8052b38:	subl	$0xc, %esp [IMM, REG]
.label_988:
	subl	$0xc, %esp
	# 0x8052b3b:	pushl	$0x80632c5 [IMM <DATAREF>]
	pushl	$label_987
	# 0x8052b40:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052b45:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052b48:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_985:
	movl	%eax, -0xc(%ebp)
	# 0x8052b4b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052b4e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052b51:	pushl	$1 [IMM]
	pushl	$1
	# 0x8052b53:	calll	0x805b862 [IMM <CODEREF>]
	calll	quote_n
	# 0x8052b58:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052b5b:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x8052b5d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052b60:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8052b63:	pushl	$8 [IMM]
	pushl	$8
	# 0x8052b65:	pushl	$0 [IMM]
	pushl	$0
	# 0x8052b67:	calll	0x805b471 [IMM <CODEREF>]
	calll	quotearg_n_style
	# 0x8052b6c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052b6f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052b72:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052b73:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052b74:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8052b77:	pushl	$0 [IMM]
	pushl	$0
	# 0x8052b79:	pushl	$0 [IMM]
	pushl	$0
	# 0x8052b7b:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x8052b80:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8052b83:	nop	 []
	nop	
	# 0x8052b84:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8052b87:	leave	 []
	leave	
	# 0x8052b88:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052b89

	# 0x8052b89:	pushl	%ebp [REG]
	.globl argmatch_valid
	.type argmatch_valid, @function
argmatch_valid:
	pushl	%ebp
	# 0x8052b8a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052b8c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052b8d:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x8052b90:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8052b97:	movl	0x806a388, %ebx [MEM, REG]
	movl	stderr,  %ebx
	# 0x8052b9d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052ba0:	pushl	$0x80632e2 [IMM <DATAREF>]
	pushl	$label_992
	# 0x8052ba5:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x8052baa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052bad:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052bb0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052bb1:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052bb2:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x8052bb7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052bba:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x8052bc1:	jmp	0x8052c73 [IMM <CODEREF>]
	jmp	.label_995
	# 0x8052bc6:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_994:
	cmpl	$0, -0x10(%ebp)
	# 0x8052bca:	je	0x8052bf0 [IMM <CODEREF>]
	je	.label_991
	# 0x8052bcc:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8052bcf:	imull	-0x10(%ebp), %eax [MEM, REG]
	imull	-0x10(%ebp), %eax
	# 0x8052bd3:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052bd5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052bd8:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052bda:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052bdd:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8052be0:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052be1:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8052be4:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x8052be9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052bec:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052bee:	je	0x8052c39 [IMM <CODEREF>]
	je	.label_993
	# 0x8052bf0:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_991:
	movl	-0x10(%ebp), %eax
	# 0x8052bf3:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052bfa:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052bfd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052bff:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052c01:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052c04:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052c05:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x8052c0a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052c0d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052c0f:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x8052c14:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052c17:	pushl	%edx [REG]
	pushl	%edx
	# 0x8052c18:	pushl	$0x80632f7 [IMM <DATAREF>]
	pushl	$label_996
	# 0x8052c1d:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052c1e:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x8052c23:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052c26:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8052c29:	imull	-0x10(%ebp), %eax [MEM, REG]
	imull	-0x10(%ebp), %eax
	# 0x8052c2d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052c2f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052c32:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052c34:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8052c37:	jmp	0x8052c6f [IMM <CODEREF>]
	jmp	.label_990
	# 0x8052c39:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_993:
	movl	-0x10(%ebp), %eax
	# 0x8052c3c:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052c43:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052c46:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052c48:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052c4a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052c4d:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052c4e:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x8052c53:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052c56:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052c58:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x8052c5d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052c60:	pushl	%edx [REG]
	pushl	%edx
	# 0x8052c61:	pushl	$0x80632ff [IMM <DATAREF>]
	pushl	$label_989
	# 0x8052c66:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052c67:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x8052c6c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052c6f:	addl	$1, -0x10(%ebp) [IMM, MEM]
.label_990:
	addl	$1, -0x10(%ebp)
	# 0x8052c73:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_995:
	movl	-0x10(%ebp), %eax
	# 0x8052c76:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052c7d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052c80:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052c82:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052c84:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052c86:	jne	0x8052bc6 [IMM <CODEREF>]
	jne	.label_994
	# 0x8052c8c:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x8052c91:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8052c94:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052c95:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8052c97:	calll	0x8049550 [IMM <CODEREF>]
	calll	putc_unlocked
	# 0x8052c9c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052c9f:	nop	 []
	nop	
	# 0x8052ca0:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8052ca3:	leave	 []
	leave	
	# 0x8052ca4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052ca5

	# 0x8052ca5:	pushl	%ebp [REG]
	.globl __xargmatch_internal
	.type __xargmatch_internal, @function
__xargmatch_internal:
	pushl	%ebp
	# 0x8052ca6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052ca8:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8052cab:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x8052cae:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x8052cb1:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8052cb4:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8052cb7:	calll	0x8052a26 [IMM <CODEREF>]
	calll	argmatch
	# 0x8052cbc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052cbf:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8052cc2:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8052cc6:	js	0x8052ccd [IMM <CODEREF>]
	js	.label_998
	# 0x8052cc8:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8052ccb:	jmp	0x8052cff [IMM <CODEREF>]
	jmp	.label_997
	# 0x8052ccd:	subl	$4, %esp [IMM, REG]
.label_998:
	subl	$4, %esp
	# 0x8052cd0:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8052cd3:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8052cd6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052cd9:	calll	0x8052b19 [IMM <CODEREF>]
	calll	argmatch_invalid
	# 0x8052cde:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052ce1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052ce4:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x8052ce7:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x8052cea:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8052ced:	calll	0x8052b89 [IMM <CODEREF>]
	calll	argmatch_valid
	# 0x8052cf2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052cf5:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x8052cf8:	calll	*%eax [REG]
	calll	*%eax
	# 0x8052cfa:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8052cff:	leave	 []
.label_997:
	leave	
	# 0x8052d00:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052d01
	.globl argmatch_to_argument
	.type argmatch_to_argument, @function
argmatch_to_argument:

	# 0x8052d01:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052d02:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052d04:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8052d07:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8052d0e:	jmp	0x8052d4b [IMM <CODEREF>]
	jmp	.label_999
	# 0x8052d10:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1001:
	movl	0x14(%ebp), %eax
	# 0x8052d13:	imull	-0xc(%ebp), %eax [MEM, REG]
	imull	-0xc(%ebp), %eax
	# 0x8052d17:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8052d19:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8052d1c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052d1e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8052d21:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x8052d24:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052d25:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8052d28:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x8052d2d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052d30:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052d32:	jne	0x8052d47 [IMM <CODEREF>]
	jne	.label_1002
	# 0x8052d34:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8052d37:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052d3e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052d41:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052d43:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052d45:	jmp	0x8052d65 [IMM <CODEREF>]
	jmp	.label_1000
	# 0x8052d47:	addl	$1, -0xc(%ebp) [IMM, MEM]
.label_1002:
	addl	$1, -0xc(%ebp)
	# 0x8052d4b:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_999:
	movl	-0xc(%ebp), %eax
	# 0x8052d4e:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8052d55:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8052d58:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8052d5a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052d5c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052d5e:	jne	0x8052d10 [IMM <CODEREF>]
	jne	.label_1001
	# 0x8052d60:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8052d65:	leave	 []
.label_1000:
	leave	
	# 0x8052d66:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052d67

	# 0x8052d67:	pushl	%ebp [REG]
	.globl c_isalnum
	.type c_isalnum, @function
c_isalnum:
	pushl	%ebp
	# 0x8052d68:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052d6a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052d6d:	cmpl	$0x5a, %eax [IMM, REG]
	cmpl	$0x5a, %eax
	# 0x8052d70:	jg	0x8052d81 [IMM <CODEREF>]
	jg	.label_1006
	# 0x8052d72:	cmpl	$0x41, %eax [IMM, REG]
	cmpl	$0x41, %eax
	# 0x8052d75:	jge	0x8052d89 [IMM <CODEREF>]
	jge	.label_1004
	# 0x8052d77:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8052d7a:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x8052d7d:	ja	0x8052d90 [IMM <CODEREF>]
	ja	.label_1003
	# 0x8052d7f:	jmp	0x8052d89 [IMM <CODEREF>]
	jmp	.label_1004
	# 0x8052d81:	subl	$0x61, %eax [IMM, REG]
.label_1006:
	subl	$0x61, %eax
	# 0x8052d84:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052d87:	ja	0x8052d90 [IMM <CODEREF>]
	ja	.label_1003
	# 0x8052d89:	movl	$1, %eax [IMM, REG]
.label_1004:
	movl	$1, %eax
	# 0x8052d8e:	jmp	0x8052d95 [IMM <CODEREF>]
	jmp	.label_1005
	# 0x8052d90:	movl	$0, %eax [IMM, REG]
.label_1003:
	movl	$0, %eax
	# 0x8052d95:	popl	%ebp [REG]
.label_1005:
	popl	%ebp
	# 0x8052d96:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052d97

	# 0x8052d97:	pushl	%ebp [REG]
	.globl c_isalpha
	.type c_isalpha, @function
c_isalpha:
	pushl	%ebp
	# 0x8052d98:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052d9a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052d9d:	cmpl	$0x41, %eax [IMM, REG]
	cmpl	$0x41, %eax
	# 0x8052da0:	jl	0x8052db6 [IMM <CODEREF>]
	jl	.label_1008
	# 0x8052da2:	cmpl	$0x5a, %eax [IMM, REG]
	cmpl	$0x5a, %eax
	# 0x8052da5:	jle	0x8052daf [IMM <CODEREF>]
	jle	.label_1007
	# 0x8052da7:	subl	$0x61, %eax [IMM, REG]
	subl	$0x61, %eax
	# 0x8052daa:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052dad:	ja	0x8052db6 [IMM <CODEREF>]
	ja	.label_1008
	# 0x8052daf:	movl	$1, %eax [IMM, REG]
.label_1007:
	movl	$1, %eax
	# 0x8052db4:	jmp	0x8052dbb [IMM <CODEREF>]
	jmp	.label_1009
	# 0x8052db6:	movl	$0, %eax [IMM, REG]
.label_1008:
	movl	$0, %eax
	# 0x8052dbb:	popl	%ebp [REG]
.label_1009:
	popl	%ebp
	# 0x8052dbc:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052dbd
	.globl c_isascii
	.type c_isascii, @function
c_isascii:

	# 0x8052dbd:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052dbe:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052dc0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052dc3:	addl	$0, %eax [IMM, REG]
	addl	$0, %eax
	# 0x8052dc6:	cmpl	$0x7f, %eax [IMM, REG]
	cmpl	$0x7f, %eax
	# 0x8052dc9:	ja	0x8052dd2 [IMM <CODEREF>]
	ja	.label_1011
	# 0x8052dcb:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052dd0:	jmp	0x8052dd7 [IMM <CODEREF>]
	jmp	.label_1010
	# 0x8052dd2:	movl	$0, %eax [IMM, REG]
.label_1011:
	movl	$0, %eax
	# 0x8052dd7:	popl	%ebp [REG]
.label_1010:
	popl	%ebp
	# 0x8052dd8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052dd9
	.globl c_isblank
	.type c_isblank, @function
c_isblank:

	# 0x8052dd9:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052dda:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052ddc:	cmpl	$0x20, 8(%ebp) [IMM, MEM]
	cmpl	$0x20, 8(%ebp)
	# 0x8052de0:	je	0x8052de8 [IMM <CODEREF>]
	je	.label_1013
	# 0x8052de2:	cmpl	$9, 8(%ebp) [IMM, MEM]
	cmpl	$9, 8(%ebp)
	# 0x8052de6:	jne	0x8052def [IMM <CODEREF>]
	jne	.label_1014
	# 0x8052de8:	movl	$1, %eax [IMM, REG]
.label_1013:
	movl	$1, %eax
	# 0x8052ded:	jmp	0x8052df4 [IMM <CODEREF>]
	jmp	.label_1012
	# 0x8052def:	movl	$0, %eax [IMM, REG]
.label_1014:
	movl	$0, %eax
	# 0x8052df4:	andl	$1, %eax [IMM, REG]
.label_1012:
	andl	$1, %eax
	# 0x8052df7:	popl	%ebp [REG]
	popl	%ebp
	# 0x8052df8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052df9
	.globl c_iscntrl
	.type c_iscntrl, @function
c_iscntrl:

	# 0x8052df9:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052dfa:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052dfc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052dff:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052e01:	js	0x8052e14 [IMM <CODEREF>]
	js	.label_1016
	# 0x8052e03:	cmpl	$0x1f, %eax [IMM, REG]
	cmpl	$0x1f, %eax
	# 0x8052e06:	jle	0x8052e0d [IMM <CODEREF>]
	jle	.label_1015
	# 0x8052e08:	cmpl	$0x7f, %eax [IMM, REG]
	cmpl	$0x7f, %eax
	# 0x8052e0b:	jne	0x8052e14 [IMM <CODEREF>]
	jne	.label_1016
	# 0x8052e0d:	movl	$1, %eax [IMM, REG]
.label_1015:
	movl	$1, %eax
	# 0x8052e12:	jmp	0x8052e19 [IMM <CODEREF>]
	jmp	.label_1017
	# 0x8052e14:	movl	$0, %eax [IMM, REG]
.label_1016:
	movl	$0, %eax
	# 0x8052e19:	popl	%ebp [REG]
.label_1017:
	popl	%ebp
	# 0x8052e1a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052e1b

	# 0x8052e1b:	pushl	%ebp [REG]
	.globl c_isdigit
	.type c_isdigit, @function
c_isdigit:
	pushl	%ebp
	# 0x8052e1c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052e1e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052e21:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8052e24:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x8052e27:	ja	0x8052e30 [IMM <CODEREF>]
	ja	.label_1019
	# 0x8052e29:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052e2e:	jmp	0x8052e35 [IMM <CODEREF>]
	jmp	.label_1018
	# 0x8052e30:	movl	$0, %eax [IMM, REG]
.label_1019:
	movl	$0, %eax
	# 0x8052e35:	popl	%ebp [REG]
.label_1018:
	popl	%ebp
	# 0x8052e36:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052e37
	.globl c_isgraph
	.type c_isgraph, @function
c_isgraph:

	# 0x8052e37:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052e38:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052e3a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052e3d:	subl	$0x21, %eax [IMM, REG]
	subl	$0x21, %eax
	# 0x8052e40:	cmpl	$0x5d, %eax [IMM, REG]
	cmpl	$0x5d, %eax
	# 0x8052e43:	ja	0x8052e4c [IMM <CODEREF>]
	ja	.label_1021
	# 0x8052e45:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052e4a:	jmp	0x8052e51 [IMM <CODEREF>]
	jmp	.label_1020
	# 0x8052e4c:	movl	$0, %eax [IMM, REG]
.label_1021:
	movl	$0, %eax
	# 0x8052e51:	popl	%ebp [REG]
.label_1020:
	popl	%ebp
	# 0x8052e52:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052e53
	.globl c_islower
	.type c_islower, @function
c_islower:

	# 0x8052e53:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052e54:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052e56:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052e59:	subl	$0x61, %eax [IMM, REG]
	subl	$0x61, %eax
	# 0x8052e5c:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052e5f:	ja	0x8052e68 [IMM <CODEREF>]
	ja	.label_1023
	# 0x8052e61:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052e66:	jmp	0x8052e6d [IMM <CODEREF>]
	jmp	.label_1022
	# 0x8052e68:	movl	$0, %eax [IMM, REG]
.label_1023:
	movl	$0, %eax
	# 0x8052e6d:	popl	%ebp [REG]
.label_1022:
	popl	%ebp
	# 0x8052e6e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052e6f
	.globl c_isprint
	.type c_isprint, @function
c_isprint:

	# 0x8052e6f:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052e70:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052e72:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052e75:	subl	$0x20, %eax [IMM, REG]
	subl	$0x20, %eax
	# 0x8052e78:	cmpl	$0x5e, %eax [IMM, REG]
	cmpl	$0x5e, %eax
	# 0x8052e7b:	ja	0x8052e84 [IMM <CODEREF>]
	ja	.label_1025
	# 0x8052e7d:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052e82:	jmp	0x8052e89 [IMM <CODEREF>]
	jmp	.label_1024
	# 0x8052e84:	movl	$0, %eax [IMM, REG]
.label_1025:
	movl	$0, %eax
	# 0x8052e89:	popl	%ebp [REG]
.label_1024:
	popl	%ebp
	# 0x8052e8a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052e8b
	.globl c_ispunct
	.type c_ispunct, @function
c_ispunct:

	# 0x8052e8b:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052e8c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052e8e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052e91:	cmpl	$0x40, %eax [IMM, REG]
	cmpl	$0x40, %eax
	# 0x8052e94:	jg	0x8052ea5 [IMM <CODEREF>]
	jg	.label_1029
	# 0x8052e96:	cmpl	$0x3a, %eax [IMM, REG]
	cmpl	$0x3a, %eax
	# 0x8052e99:	jge	0x8052eb7 [IMM <CODEREF>]
	jge	.label_1027
	# 0x8052e9b:	subl	$0x21, %eax [IMM, REG]
	subl	$0x21, %eax
	# 0x8052e9e:	cmpl	$0xe, %eax [IMM, REG]
	cmpl	$0xe, %eax
	# 0x8052ea1:	ja	0x8052ebe [IMM <CODEREF>]
	ja	.label_1026
	# 0x8052ea3:	jmp	0x8052eb7 [IMM <CODEREF>]
	jmp	.label_1027
	# 0x8052ea5:	cmpl	$0x5b, %eax [IMM, REG]
.label_1029:
	cmpl	$0x5b, %eax
	# 0x8052ea8:	jl	0x8052ebe [IMM <CODEREF>]
	jl	.label_1026
	# 0x8052eaa:	cmpl	$0x60, %eax [IMM, REG]
	cmpl	$0x60, %eax
	# 0x8052ead:	jle	0x8052eb7 [IMM <CODEREF>]
	jle	.label_1027
	# 0x8052eaf:	subl	$0x7b, %eax [IMM, REG]
	subl	$0x7b, %eax
	# 0x8052eb2:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x8052eb5:	ja	0x8052ebe [IMM <CODEREF>]
	ja	.label_1026
	# 0x8052eb7:	movl	$1, %eax [IMM, REG]
.label_1027:
	movl	$1, %eax
	# 0x8052ebc:	jmp	0x8052ec3 [IMM <CODEREF>]
	jmp	.label_1028
	# 0x8052ebe:	movl	$0, %eax [IMM, REG]
.label_1026:
	movl	$0, %eax
	# 0x8052ec3:	popl	%ebp [REG]
.label_1028:
	popl	%ebp
	# 0x8052ec4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052ec5
	.globl c_isspace
	.type c_isspace, @function
c_isspace:

	# 0x8052ec5:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052ec6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052ec8:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052ecb:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x8052ece:	jl	0x8052ee1 [IMM <CODEREF>]
	jl	.label_1031
	# 0x8052ed0:	cmpl	$0xd, %eax [IMM, REG]
	cmpl	$0xd, %eax
	# 0x8052ed3:	jle	0x8052eda [IMM <CODEREF>]
	jle	.label_1030
	# 0x8052ed5:	cmpl	$0x20, %eax [IMM, REG]
	cmpl	$0x20, %eax
	# 0x8052ed8:	jne	0x8052ee1 [IMM <CODEREF>]
	jne	.label_1031
	# 0x8052eda:	movl	$1, %eax [IMM, REG]
.label_1030:
	movl	$1, %eax
	# 0x8052edf:	jmp	0x8052ee6 [IMM <CODEREF>]
	jmp	.label_1032
	# 0x8052ee1:	movl	$0, %eax [IMM, REG]
.label_1031:
	movl	$0, %eax
	# 0x8052ee6:	popl	%ebp [REG]
.label_1032:
	popl	%ebp
	# 0x8052ee7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052ee8
	.globl c_isupper
	.type c_isupper, @function
c_isupper:

	# 0x8052ee8:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052ee9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052eeb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052eee:	subl	$0x41, %eax [IMM, REG]
	subl	$0x41, %eax
	# 0x8052ef1:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052ef4:	ja	0x8052efd [IMM <CODEREF>]
	ja	.label_1033
	# 0x8052ef6:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8052efb:	jmp	0x8052f02 [IMM <CODEREF>]
	jmp	.label_1034
	# 0x8052efd:	movl	$0, %eax [IMM, REG]
.label_1033:
	movl	$0, %eax
	# 0x8052f02:	popl	%ebp [REG]
.label_1034:
	popl	%ebp
	# 0x8052f03:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052f04
	.globl c_isxdigit
	.type c_isxdigit, @function
c_isxdigit:

	# 0x8052f04:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052f05:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052f07:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052f0a:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8052f0d:	cmpl	$0x36, %eax [IMM, REG]
	cmpl	$0x36, %eax
	# 0x8052f10:	ja	0x8052f22 [IMM <CODEREF>]
	ja	.label_1037
	# 0x8052f12:	movl	0x8063304(, %eax, 4), %eax [MEM, REG]
	movl	label_1035(, %eax, 4),  %eax
	# 0x8052f19:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x8052f1b:	movl	$1, %eax [IMM, REG]
.label_2651:
	movl	$1, %eax
	# 0x8052f20:	jmp	0x8052f27 [IMM <CODEREF>]
	jmp	.label_1036
	# 0x8052f22:	movl	$0, %eax [IMM, REG]
.label_1037:
	movl	$0, %eax
	# 0x8052f27:	popl	%ebp [REG]
.label_1036:
	popl	%ebp
	# 0x8052f28:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052f29

	# 0x8052f29:	pushl	%ebp [REG]
	.globl c_tolower
	.type c_tolower, @function
c_tolower:
	pushl	%ebp
	# 0x8052f2a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052f2c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052f2f:	subl	$0x41, %eax [IMM, REG]
	subl	$0x41, %eax
	# 0x8052f32:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052f35:	ja	0x8052f3f [IMM <CODEREF>]
	ja	.label_1038
	# 0x8052f37:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052f3a:	addl	$0x20, %eax [IMM, REG]
	addl	$0x20, %eax
	# 0x8052f3d:	jmp	0x8052f42 [IMM <CODEREF>]
	jmp	.label_1039
	# 0x8052f3f:	movl	8(%ebp), %eax [MEM, REG]
.label_1038:
	movl	8(%ebp), %eax
	# 0x8052f42:	popl	%ebp [REG]
.label_1039:
	popl	%ebp
	# 0x8052f43:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052f44
	.globl c_toupper
	.type c_toupper, @function
c_toupper:

	# 0x8052f44:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8052f45:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052f47:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052f4a:	subl	$0x61, %eax [IMM, REG]
	subl	$0x61, %eax
	# 0x8052f4d:	cmpl	$0x19, %eax [IMM, REG]
	cmpl	$0x19, %eax
	# 0x8052f50:	ja	0x8052f5a [IMM <CODEREF>]
	ja	.label_1040
	# 0x8052f52:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052f55:	subl	$0x20, %eax [IMM, REG]
	subl	$0x20, %eax
	# 0x8052f58:	jmp	0x8052f5d [IMM <CODEREF>]
	jmp	.label_1041
	# 0x8052f5a:	movl	8(%ebp), %eax [MEM, REG]
.label_1040:
	movl	8(%ebp), %eax
	# 0x8052f5d:	popl	%ebp [REG]
.label_1041:
	popl	%ebp
	# 0x8052f5e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052f5f

	# 0x8052f5f:	pushl	%ebp [REG]
	.globl c_strncasecmp
	.type c_strncasecmp, @function
c_strncasecmp:
	pushl	%ebp
	# 0x8052f60:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052f62:	pushl	%esi [REG]
	pushl	%esi
	# 0x8052f63:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8052f64:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8052f67:	movl	8(%ebp), %esi [MEM, REG]
	movl	8(%ebp), %esi
	# 0x8052f6a:	movl	0xc(%ebp), %ebx [MEM, REG]
	movl	0xc(%ebp), %ebx
	# 0x8052f6d:	cmpl	%ebx, %esi [REG, REG]
	cmpl	%ebx, %esi
	# 0x8052f6f:	je	0x8052f77 [IMM <CODEREF>]
	je	.label_1045
	# 0x8052f71:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x8052f75:	jne	0x8052f7e [IMM <CODEREF>]
	jne	.label_1042
	# 0x8052f77:	movl	$0, %eax [IMM, REG]
.label_1045:
	movl	$0, %eax
	# 0x8052f7c:	jmp	0x8052fd3 [IMM <CODEREF>]
	jmp	.label_1044
	# 0x8052f7e:	movzbl	0(%esi), %eax [MEM, REG]
.label_1042:
	movzbl	0(%esi), %eax
	# 0x8052f81:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8052f84:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052f87:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052f88:	calll	0x8052f29 [IMM <CODEREF>]
	calll	c_tolower
	# 0x8052f8d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052f90:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x8052f93:	movzbl	0(%ebx), %eax [MEM, REG]
	movzbl	0(%ebx), %eax
	# 0x8052f96:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8052f99:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052f9c:	pushl	%eax [REG]
	pushl	%eax
	# 0x8052f9d:	calll	0x8052f29 [IMM <CODEREF>]
	calll	c_tolower
	# 0x8052fa2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8052fa5:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x8052fa8:	subl	$1, 0x10(%ebp) [IMM, MEM]
	subl	$1, 0x10(%ebp)
	# 0x8052fac:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x8052fb0:	je	0x8052fc7 [IMM <CODEREF>]
	je	.label_1043
	# 0x8052fb2:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x8052fb6:	je	0x8052fc7 [IMM <CODEREF>]
	je	.label_1043
	# 0x8052fb8:	addl	$1, %esi [IMM, REG]
	addl	$1, %esi
	# 0x8052fbb:	addl	$1, %ebx [IMM, REG]
	addl	$1, %ebx
	# 0x8052fbe:	movzbl	-0xa(%ebp), %eax [MEM, REG]
	movzbl	-0xa(%ebp), %eax
	# 0x8052fc2:	cmpb	-9(%ebp), %al [MEM, REG]
	cmpb	-9(%ebp), %al
	# 0x8052fc5:	je	0x8052f7e [IMM <CODEREF>]
	je	.label_1042
	# 0x8052fc7:	movzbl	-0xa(%ebp), %edx [MEM, REG]
.label_1043:
	movzbl	-0xa(%ebp), %edx
	# 0x8052fcb:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x8052fcf:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8052fd1:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8052fd3:	leal	-8(%ebp), %esp [MEM, REG]
.label_1044:
	leal	-8(%ebp), %esp
	# 0x8052fd6:	popl	%ebx [REG]
	popl	%ebx
	# 0x8052fd7:	popl	%esi [REG]
	popl	%esi
	# 0x8052fd8:	popl	%ebp [REG]
	popl	%ebp
	# 0x8052fd9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8052fda

	# 0x8052fda:	pushl	%ebp [REG]
	.globl seen_triple
	.type seen_triple, @function
seen_triple:
	pushl	%ebp
	# 0x8052fdb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8052fdd:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8052fe0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8052fe3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8052fe5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8052fe7:	jne	0x8053024 [IMM <CODEREF>]
	jne	.label_1047
	# 0x8052fe9:	movl	$7, -0xc(%ebp) [IMM, MEM]
	movl	$7, -0xc(%ebp)
	# 0x8052ff0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8052ff3:	pushl	$0x8055bf3 [IMM <CODEREF>]
	pushl	$triple_free
	# 0x8052ff8:	pushl	$0x8055b72 [IMM <CODEREF>]
	pushl	$triple_compare_ino_str
	# 0x8052ffd:	pushl	$0x8055a5d [IMM <CODEREF>]
	pushl	$triple_hash
	# 0x8053002:	pushl	$0 [IMM]
	pushl	$0
	# 0x8053004:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8053007:	calll	0x8054daf [IMM <CODEREF>]
	calll	hash_initialize
	# 0x805300c:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805300f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053011:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053014:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8053016:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053019:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805301b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805301d:	jne	0x8053024 [IMM <CODEREF>]
	jne	.label_1047
	# 0x805301f:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x8053024:	movl	8(%ebp), %eax [MEM, REG]
.label_1047:
	movl	8(%ebp), %eax
	# 0x8053027:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053029:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805302c:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805302f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053032:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053033:	calll	0x8053c7c [IMM <CODEREF>]
	calll	seen_file
	# 0x8053038:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805303b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805303d:	je	0x8053046 [IMM <CODEREF>]
	je	.label_1046
	# 0x805303f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8053044:	jmp	0x8053062 [IMM <CODEREF>]
	jmp	.label_1048
	# 0x8053046:	movl	8(%ebp), %eax [MEM, REG]
.label_1046:
	movl	8(%ebp), %eax
	# 0x8053049:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805304b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805304e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8053051:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053054:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053055:	calll	0x8053bee [IMM <CODEREF>]
	calll	record_file
	# 0x805305a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805305d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053062:	leave	 []
.label_1048:
	leave	
	# 0x8053063:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053064

	# 0x8053064:	pushl	%ebp [REG]
	.globl canonicalize_filename_mode
	.type canonicalize_filename_mode, @function
canonicalize_filename_mode:
	pushl	%ebp
	# 0x8053065:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053067:	subl	$0xc8, %esp [IMM, REG]
	subl	$0xc8, %esp
	# 0x805306d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053070:	movl	%eax, -0xbc(%ebp) [REG, MEM]
	movl	%eax, -0xbc(%ebp)
	# 0x8053076:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805307c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805307f:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8053081:	movl	$0, -0xa8(%ebp) [IMM, MEM]
	movl	$0, -0xa8(%ebp)
	# 0x805308b:	movl	$0, -0x98(%ebp) [IMM, MEM]
	movl	$0, -0x98(%ebp)
	# 0x8053095:	movl	$0, -0xb4(%ebp) [IMM, MEM]
	movl	$0, -0xb4(%ebp)
	# 0x805309f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80530a2:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x80530a5:	movl	%eax, -0x88(%ebp) [REG, MEM]
	movl	%eax, -0x88(%ebp)
	# 0x80530ab:	movl	-0x88(%ebp), %eax [MEM, REG]
	movl	-0x88(%ebp), %eax
	# 0x80530b1:	andl	$4, %eax [IMM, REG]
	andl	$4, %eax
	# 0x80530b4:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80530b6:	setne	%al [REG]
	setne	%al
	# 0x80530b9:	movb	%al, -0xb5(%ebp) [REG, MEM]
	movb	%al, -0xb5(%ebp)
	# 0x80530bf:	andl	$3, 0xc(%ebp) [IMM, MEM]
	andl	$3, 0xc(%ebp)
	# 0x80530c3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80530c6:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x80530c9:	andl	0xc(%ebp), %eax [MEM, REG]
	andl	0xc(%ebp), %eax
	# 0x80530cc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80530ce:	je	0x80530e5 [IMM <CODEREF>]
	je	.label_1076
	# 0x80530d0:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x80530d5:	movl	$0x16, 0(%eax) [IMM, MEM]
	movl	$0x16, 0(%eax)
	# 0x80530db:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80530e0:	jmp	0x805393c [IMM <CODEREF>]
	jmp	.label_1054
	# 0x80530e5:	cmpl	$0, -0xbc(%ebp) [IMM, MEM]
.label_1076:
	cmpl	$0, -0xbc(%ebp)
	# 0x80530ec:	jne	0x8053103 [IMM <CODEREF>]
	jne	.label_1099
	# 0x80530ee:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x80530f3:	movl	$0x16, 0(%eax) [IMM, MEM]
	movl	$0x16, 0(%eax)
	# 0x80530f9:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80530fe:	jmp	0x805393c [IMM <CODEREF>]
	jmp	.label_1054
	# 0x8053103:	movl	-0xbc(%ebp), %eax [MEM, REG]
.label_1099:
	movl	-0xbc(%ebp), %eax
	# 0x8053109:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805310c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805310e:	jne	0x8053125 [IMM <CODEREF>]
	jne	.label_1050
	# 0x8053110:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x8053115:	movl	$2, 0(%eax) [IMM, MEM]
	movl	$2, 0(%eax)
	# 0x805311b:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053120:	jmp	0x805393c [IMM <CODEREF>]
	jmp	.label_1054
	# 0x8053125:	movl	$0, -0x90(%ebp) [IMM, MEM]
.label_1050:
	movl	$0, -0x90(%ebp)
	# 0x805312f:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x8053135:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053138:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x805313a:	je	0x8053210 [IMM <CODEREF>]
	je	.label_1058
	# 0x8053140:	calll	0x805c8f5 [IMM <CODEREF>]
	calll	xgetcwd
	# 0x8053145:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x805314b:	cmpl	$0, -0xb0(%ebp) [IMM, MEM]
	cmpl	$0, -0xb0(%ebp)
	# 0x8053152:	jne	0x805315e [IMM <CODEREF>]
	jne	.label_1066
	# 0x8053154:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053159:	jmp	0x805393c [IMM <CODEREF>]
	jmp	.label_1054
	# 0x805315e:	subl	$8, %esp [IMM, REG]
.label_1066:
	subl	$8, %esp
	# 0x8053161:	pushl	$0 [IMM]
	pushl	$0
	# 0x8053163:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053169:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805316e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053171:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x8053177:	movl	-0xac(%ebp), %edx [MEM, REG]
	movl	-0xac(%ebp), %edx
	# 0x805317d:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x8053183:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053185:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053187:	cmpl	$0xfff, %eax [IMM, REG]
	cmpl	$0xfff, %eax
	# 0x805318c:	jg	0x80531e9 [IMM <CODEREF>]
	jg	.label_1080
	# 0x805318e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8053191:	pushl	$0x1000 [IMM]
	pushl	$0x1000
	# 0x8053196:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x805319c:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x80531a1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80531a4:	movl	%eax, -0x84(%ebp) [REG, MEM]
	movl	%eax, -0x84(%ebp)
	# 0x80531aa:	movl	-0xac(%ebp), %edx [MEM, REG]
	movl	-0xac(%ebp), %edx
	# 0x80531b0:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x80531b6:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80531b8:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80531ba:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80531bc:	movl	-0x84(%ebp), %eax [MEM, REG]
	movl	-0x84(%ebp), %eax
	# 0x80531c2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80531c4:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x80531ca:	movl	-0x84(%ebp), %eax [MEM, REG]
	movl	-0x84(%ebp), %eax
	# 0x80531d0:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x80531d6:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x80531dc:	addl	$0x1000, %eax [IMM, REG]
	addl	$0x1000, %eax
	# 0x80531e1:	movl	%eax, -0x9c(%ebp) [REG, MEM]
	movl	%eax, -0x9c(%ebp)
	# 0x80531e7:	jmp	0x80531f5 [IMM <CODEREF>]
	jmp	.label_1085
	# 0x80531e9:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1080:
	movl	-0xac(%ebp), %eax
	# 0x80531ef:	movl	%eax, -0x9c(%ebp) [REG, MEM]
	movl	%eax, -0x9c(%ebp)
	# 0x80531f5:	movl	-0xbc(%ebp), %eax [MEM, REG]
.label_1085:
	movl	-0xbc(%ebp), %eax
	# 0x80531fb:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x8053201:	movl	$0, -0x90(%ebp) [IMM, MEM]
	movl	$0, -0x90(%ebp)
	# 0x805320b:	jmp	0x805382b [IMM <CODEREF>]
	jmp	.label_1070
	# 0x8053210:	subl	$0xc, %esp [IMM, REG]
.label_1058:
	subl	$0xc, %esp
	# 0x8053213:	pushl	$0x1000 [IMM]
	pushl	$0x1000
	# 0x8053218:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805321d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053220:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x8053226:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805322c:	addl	$0x1000, %eax [IMM, REG]
	addl	$0x1000, %eax
	# 0x8053231:	movl	%eax, -0x9c(%ebp) [REG, MEM]
	movl	%eax, -0x9c(%ebp)
	# 0x8053237:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805323d:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x8053243:	cmpl	$0, -0x90(%ebp) [IMM, MEM]
	cmpl	$0, -0x90(%ebp)
	# 0x805324a:	je	0x8053275 [IMM <CODEREF>]
	je	.label_1055
	# 0x805324c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805324f:	pushl	-0x90(%ebp) [MEM]
	pushl	-0x90(%ebp)
	# 0x8053255:	pushl	-0xbc(%ebp) [MEM]
	pushl	-0xbc(%ebp)
	# 0x805325b:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053261:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8053266:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053269:	movl	-0x90(%ebp), %eax [MEM, REG]
	movl	-0x90(%ebp), %eax
	# 0x805326f:	addl	%eax, -0xac(%ebp) [REG, MEM]
	addl	%eax, -0xac(%ebp)
	# 0x8053275:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1055:
	movl	-0xac(%ebp), %eax
	# 0x805327b:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805327e:	movl	%edx, -0xac(%ebp) [REG, MEM]
	movl	%edx, -0xac(%ebp)
	# 0x8053284:	movb	$0x2f, 0(%eax) [IMM, MEM]
	movb	$0x2f, 0(%eax)
	# 0x8053287:	movl	-0xbc(%ebp), %edx [MEM, REG]
	movl	-0xbc(%ebp), %edx
	# 0x805328d:	movl	-0x90(%ebp), %eax [MEM, REG]
	movl	-0x90(%ebp), %eax
	# 0x8053293:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053295:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x805329b:	jmp	0x805382b [IMM <CODEREF>]
	jmp	.label_1070
	# 0x80532a0:	addl	$1, -0xa4(%ebp) [IMM, MEM]
.label_1087:
	addl	$1, -0xa4(%ebp)
	# 0x80532a7:	movl	-0xa4(%ebp), %eax [MEM, REG]
.label_1059:
	movl	-0xa4(%ebp), %eax
	# 0x80532ad:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80532b0:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x80532b2:	je	0x80532a0 [IMM <CODEREF>]
	je	.label_1087
	# 0x80532b4:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x80532ba:	movl	%eax, -0xa0(%ebp) [REG, MEM]
	movl	%eax, -0xa0(%ebp)
	# 0x80532c0:	jmp	0x80532c9 [IMM <CODEREF>]
	jmp	.label_1089
	# 0x80532c2:	addl	$1, -0xa0(%ebp) [IMM, MEM]
.label_1096:
	addl	$1, -0xa0(%ebp)
	# 0x80532c9:	movl	-0xa0(%ebp), %eax [MEM, REG]
.label_1089:
	movl	-0xa0(%ebp), %eax
	# 0x80532cf:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80532d2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80532d4:	je	0x80532e3 [IMM <CODEREF>]
	je	.label_1095
	# 0x80532d6:	movl	-0xa0(%ebp), %eax [MEM, REG]
	movl	-0xa0(%ebp), %eax
	# 0x80532dc:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80532df:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x80532e1:	jne	0x80532c2 [IMM <CODEREF>]
	jne	.label_1096
	# 0x80532e3:	movl	-0xa0(%ebp), %edx [MEM, REG]
.label_1095:
	movl	-0xa0(%ebp), %edx
	# 0x80532e9:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x80532ef:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x80532f1:	je	0x805383e [IMM <CODEREF>]
	je	.label_1098
	# 0x80532f7:	movl	-0xa0(%ebp), %edx [MEM, REG]
	movl	-0xa0(%ebp), %edx
	# 0x80532fd:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053303:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053305:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053307:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x805330a:	jne	0x805331d [IMM <CODEREF>]
	jne	.label_1101
	# 0x805330c:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053312:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053315:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x8053317:	je	0x805381f [IMM <CODEREF>]
	je	.label_1049
	# 0x805331d:	movl	-0xa0(%ebp), %edx [MEM, REG]
.label_1101:
	movl	-0xa0(%ebp), %edx
	# 0x8053323:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053329:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805332b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805332d:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x8053330:	jne	0x80533a3 [IMM <CODEREF>]
	jne	.label_1061
	# 0x8053332:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053338:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805333b:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x805333d:	jne	0x80533a3 [IMM <CODEREF>]
	jne	.label_1061
	# 0x805333f:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053345:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053348:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805334b:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x805334d:	jne	0x80533a3 [IMM <CODEREF>]
	jne	.label_1061
	# 0x805334f:	movl	-0x90(%ebp), %eax [MEM, REG]
	movl	-0x90(%ebp), %eax
	# 0x8053355:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8053358:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805335e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053360:	cmpl	-0xac(%ebp), %eax [MEM, REG]
	cmpl	-0xac(%ebp), %eax
	# 0x8053366:	jae	0x8053818 [IMM <CODEREF>]
	jae	.label_1071
	# 0x805336c:	subl	$1, -0xac(%ebp) [IMM, MEM]
	subl	$1, -0xac(%ebp)
	# 0x8053373:	jmp	0x805337c [IMM <CODEREF>]
	jmp	.label_1079
	# 0x8053375:	subl	$1, -0xac(%ebp) [IMM, MEM]
.label_1073:
	subl	$1, -0xac(%ebp)
	# 0x805337c:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1079:
	movl	-0xac(%ebp), %eax
	# 0x8053382:	cmpl	-0xb0(%ebp), %eax [MEM, REG]
	cmpl	-0xb0(%ebp), %eax
	# 0x8053388:	jbe	0x8053818 [IMM <CODEREF>]
	jbe	.label_1071
	# 0x805338e:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x8053394:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8053397:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805339a:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x805339c:	jne	0x8053375 [IMM <CODEREF>]
	jne	.label_1073
	# 0x805339e:	jmp	0x8053818 [IMM <CODEREF>]
	jmp	.label_1071
	# 0x80533a3:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1061:
	movl	-0xac(%ebp), %eax
	# 0x80533a9:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x80533ac:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80533af:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x80533b1:	je	0x80533c5 [IMM <CODEREF>]
	je	.label_1086
	# 0x80533b3:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x80533b9:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80533bc:	movl	%edx, -0xac(%ebp) [REG, MEM]
	movl	%edx, -0xac(%ebp)
	# 0x80533c2:	movb	$0x2f, 0(%eax) [IMM, MEM]
	movb	$0x2f, 0(%eax)
	# 0x80533c5:	movl	-0xa0(%ebp), %edx [MEM, REG]
.label_1086:
	movl	-0xa0(%ebp), %edx
	# 0x80533cb:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x80533d1:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80533d3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80533d5:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80533d7:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x80533dd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80533df:	cmpl	-0x9c(%ebp), %eax [MEM, REG]
	cmpl	-0x9c(%ebp), %eax
	# 0x80533e5:	jb	0x805349f [IMM <CODEREF>]
	jb	.label_1093
	# 0x80533eb:	movl	-0xac(%ebp), %edx [MEM, REG]
	movl	-0xac(%ebp), %edx
	# 0x80533f1:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x80533f7:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80533f9:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80533fb:	movl	%eax, -0x80(%ebp) [REG, MEM]
	movl	%eax, -0x80(%ebp)
	# 0x80533fe:	movl	-0x9c(%ebp), %edx [MEM, REG]
	movl	-0x9c(%ebp), %edx
	# 0x8053404:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805340a:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805340c:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805340e:	movl	%eax, -0x8c(%ebp) [REG, MEM]
	movl	%eax, -0x8c(%ebp)
	# 0x8053414:	movl	-0xa0(%ebp), %edx [MEM, REG]
	movl	-0xa0(%ebp), %edx
	# 0x805341a:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8053420:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053422:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053424:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053427:	cmpl	$0x1000, %eax [IMM, REG]
	cmpl	$0x1000, %eax
	# 0x805342c:	jle	0x8053453 [IMM <CODEREF>]
	jle	.label_1100
	# 0x805342e:	movl	-0xa0(%ebp), %edx [MEM, REG]
	movl	-0xa0(%ebp), %edx
	# 0x8053434:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x805343a:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805343c:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805343e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053440:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8053446:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053448:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805344b:	movl	%eax, -0x8c(%ebp) [REG, MEM]
	movl	%eax, -0x8c(%ebp)
	# 0x8053451:	jmp	0x805345d [IMM <CODEREF>]
	jmp	.label_1060
	# 0x8053453:	addl	$0x1000, -0x8c(%ebp) [IMM, MEM]
.label_1100:
	addl	$0x1000, -0x8c(%ebp)
	# 0x805345d:	subl	$8, %esp [IMM, REG]
.label_1060:
	subl	$8, %esp
	# 0x8053460:	pushl	-0x8c(%ebp) [MEM]
	pushl	-0x8c(%ebp)
	# 0x8053466:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x805346c:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x8053471:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053474:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x805347a:	movl	-0xb0(%ebp), %edx [MEM, REG]
	movl	-0xb0(%ebp), %edx
	# 0x8053480:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8053486:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053488:	movl	%eax, -0x9c(%ebp) [REG, MEM]
	movl	%eax, -0x9c(%ebp)
	# 0x805348e:	movl	-0x80(%ebp), %edx [MEM, REG]
	movl	-0x80(%ebp), %edx
	# 0x8053491:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x8053497:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053499:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x805349f:	movl	-0xa0(%ebp), %edx [MEM, REG]
.label_1093:
	movl	-0xa0(%ebp), %edx
	# 0x80534a5:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x80534ab:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80534ad:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80534af:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80534b2:	pushl	%eax [REG]
	pushl	%eax
	# 0x80534b3:	pushl	-0xa4(%ebp) [MEM]
	pushl	-0xa4(%ebp)
	# 0x80534b9:	pushl	-0xac(%ebp) [MEM]
	pushl	-0xac(%ebp)
	# 0x80534bf:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x80534c4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80534c7:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x80534cd:	movl	-0xa0(%ebp), %edx [MEM, REG]
	movl	-0xa0(%ebp), %edx
	# 0x80534d3:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x80534d9:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80534db:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80534dd:	addl	%eax, -0xac(%ebp) [REG, MEM]
	addl	%eax, -0xac(%ebp)
	# 0x80534e3:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x80534e9:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80534ec:	cmpb	$0, -0xb5(%ebp) [IMM, MEM]
	cmpb	$0, -0xb5(%ebp)
	# 0x80534f3:	je	0x8053507 [IMM <CODEREF>]
	je	.label_1092
	# 0x80534f5:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x80534f9:	jne	0x8053507 [IMM <CODEREF>]
	jne	.label_1092
	# 0x80534fb:	movl	$0, -0x5c(%ebp) [IMM, MEM]
	movl	$0, -0x5c(%ebp)
	# 0x8053502:	jmp	0x80535ab [IMM <CODEREF>]
	jmp	.label_1067
	# 0x8053507:	cmpb	$0, -0xb5(%ebp) [IMM, MEM]
.label_1092:
	cmpb	$0, -0xb5(%ebp)
	# 0x805350e:	je	0x805352c [IMM <CODEREF>]
	je	.label_1051
	# 0x8053510:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8053513:	leal	-0x6c(%ebp), %eax [MEM, REG]
	leal	-0x6c(%ebp), %eax
	# 0x8053516:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053517:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x805351d:	calll	0x805ebf0 [IMM <CODEREF>]
	calll	stat64
	# 0x8053522:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053525:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053527:	setne	%al [REG]
	setne	%al
	# 0x805352a:	jmp	0x8053546 [IMM <CODEREF>]
	jmp	.label_1056
	# 0x805352c:	subl	$8, %esp [IMM, REG]
.label_1051:
	subl	$8, %esp
	# 0x805352f:	leal	-0x6c(%ebp), %eax [MEM, REG]
	leal	-0x6c(%ebp), %eax
	# 0x8053532:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053533:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053539:	calll	0x805ec50 [IMM <CODEREF>]
	calll	lstat64
	# 0x805353e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053541:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053543:	setne	%al [REG]
	setne	%al
	# 0x8053546:	testb	%al, %al [REG, REG]
.label_1056:
	testb	%al, %al
	# 0x8053548:	je	0x80535ab [IMM <CODEREF>]
	je	.label_1067
	# 0x805354a:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805354f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053551:	movl	%eax, -0x94(%ebp) [REG, MEM]
	movl	%eax, -0x94(%ebp)
	# 0x8053557:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805355b:	je	0x80538e9 [IMM <CODEREF>]
	je	.label_1082
	# 0x8053561:	cmpl	$1, 0xc(%ebp) [IMM, MEM]
	cmpl	$1, 0xc(%ebp)
	# 0x8053565:	jne	0x80535a4 [IMM <CODEREF>]
	jne	.label_1068
	# 0x8053567:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805356a:	pushl	$0x80633e0 [IMM <DATAREF>]
	pushl	$label_1077
	# 0x805356f:	pushl	-0xa0(%ebp) [MEM]
	pushl	-0xa0(%ebp)
	# 0x8053575:	calll	0x8049b60 [IMM <CODEREF>]
	calll	strspn
	# 0x805357a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805357d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805357f:	movl	-0xa0(%ebp), %eax [MEM, REG]
	movl	-0xa0(%ebp), %eax
	# 0x8053585:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053587:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805358a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805358c:	jne	0x80538e9 [IMM <CODEREF>]
	jne	.label_1082
	# 0x8053592:	cmpl	$2, -0x94(%ebp) [IMM, MEM]
	cmpl	$2, -0x94(%ebp)
	# 0x8053599:	jne	0x80538e9 [IMM <CODEREF>]
	jne	.label_1082
	# 0x805359f:	jmp	0x805381f [IMM <CODEREF>]
	jmp	.label_1049
	# 0x80535a4:	movl	$0, -0x5c(%ebp) [IMM, MEM]
.label_1068:
	movl	$0, -0x5c(%ebp)
	# 0x80535ab:	movl	-0x5c(%ebp), %eax [MEM, REG]
.label_1067:
	movl	-0x5c(%ebp), %eax
	# 0x80535ae:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80535b3:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x80535b8:	jne	0x80537e6 [IMM <CODEREF>]
	jne	.label_1090
	# 0x80535be:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80535c1:	leal	-0x6c(%ebp), %eax [MEM, REG]
	leal	-0x6c(%ebp), %eax
	# 0x80535c4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80535c5:	pushl	-0xbc(%ebp) [MEM]
	pushl	-0xbc(%ebp)
	# 0x80535cb:	leal	-0xb4(%ebp), %eax [MEM, REG]
	leal	-0xb4(%ebp), %eax
	# 0x80535d1:	pushl	%eax [REG]
	pushl	%eax
	# 0x80535d2:	calll	0x8052fda [IMM <CODEREF>]
	calll	seen_triple
	# 0x80535d7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80535da:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80535dc:	je	0x80535f7 [IMM <CODEREF>]
	je	.label_1097
	# 0x80535de:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x80535e2:	je	0x805381b [IMM <CODEREF>]
	je	.label_1062
	# 0x80535e8:	movl	$0x28, -0x94(%ebp) [IMM, MEM]
	movl	$0x28, -0x94(%ebp)
	# 0x80535f2:	jmp	0x80538ea [IMM <CODEREF>]
	jmp	.label_1052
	# 0x80535f7:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_1097:
	movl	-0x40(%ebp), %eax
	# 0x80535fa:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x80535fd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8053600:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053601:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053607:	calll	0x80528f7 [IMM <CODEREF>]
	calll	areadlink_with_size
	# 0x805360c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805360f:	movl	%eax, -0x7c(%ebp) [REG, MEM]
	movl	%eax, -0x7c(%ebp)
	# 0x8053612:	cmpl	$0, -0x7c(%ebp) [IMM, MEM]
	cmpl	$0, -0x7c(%ebp)
	# 0x8053616:	jne	0x8053640 [IMM <CODEREF>]
	jne	.label_1069
	# 0x8053618:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x805361c:	jne	0x805362e [IMM <CODEREF>]
	jne	.label_1083
	# 0x805361e:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x8053623:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053625:	cmpl	$0xc, %eax [IMM, REG]
	cmpl	$0xc, %eax
	# 0x8053628:	jne	0x805381e [IMM <CODEREF>]
	jne	.label_1057
	# 0x805362e:	calll	0x8049990 [IMM <CODEREF>]
.label_1083:
	calll	__errno_location
	# 0x8053633:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053635:	movl	%eax, -0x94(%ebp) [REG, MEM]
	movl	%eax, -0x94(%ebp)
	# 0x805363b:	jmp	0x80538ea [IMM <CODEREF>]
	jmp	.label_1052
	# 0x8053640:	subl	$0xc, %esp [IMM, REG]
.label_1069:
	subl	$0xc, %esp
	# 0x8053643:	pushl	-0x7c(%ebp) [MEM]
	pushl	-0x7c(%ebp)
	# 0x8053646:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805364b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805364e:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x8053651:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053654:	pushl	-0xa0(%ebp) [MEM]
	pushl	-0xa0(%ebp)
	# 0x805365a:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805365f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053662:	movl	%eax, -0x74(%ebp) [REG, MEM]
	movl	%eax, -0x74(%ebp)
	# 0x8053665:	cmpl	$0, -0x98(%ebp) [IMM, MEM]
	cmpl	$0, -0x98(%ebp)
	# 0x805366c:	jne	0x80536a5 [IMM <CODEREF>]
	jne	.label_1075
	# 0x805366e:	movl	-0x78(%ebp), %edx [MEM, REG]
	movl	-0x78(%ebp), %edx
	# 0x8053671:	movl	-0x74(%ebp), %eax [MEM, REG]
	movl	-0x74(%ebp), %eax
	# 0x8053674:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053676:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053679:	movl	$0x1000, %edx [IMM, REG]
	movl	$0x1000, %edx
	# 0x805367e:	cmpl	$0x1000, %eax [IMM, REG]
	cmpl	$0x1000, %eax
	# 0x8053683:	cmovbl	%edx, %eax [REG, REG]
	cmovbl	%edx, %eax
	# 0x8053686:	movl	%eax, -0x98(%ebp) [REG, MEM]
	movl	%eax, -0x98(%ebp)
	# 0x805368c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805368f:	pushl	-0x98(%ebp) [MEM]
	pushl	-0x98(%ebp)
	# 0x8053695:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805369a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805369d:	movl	%eax, -0xa8(%ebp) [REG, MEM]
	movl	%eax, -0xa8(%ebp)
	# 0x80536a3:	jmp	0x80536e6 [IMM <CODEREF>]
	jmp	.label_1084
	# 0x80536a5:	movl	-0x78(%ebp), %edx [MEM, REG]
.label_1075:
	movl	-0x78(%ebp), %edx
	# 0x80536a8:	movl	-0x74(%ebp), %eax [MEM, REG]
	movl	-0x74(%ebp), %eax
	# 0x80536ab:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80536ad:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80536b0:	cmpl	-0x98(%ebp), %eax [MEM, REG]
	cmpl	-0x98(%ebp), %eax
	# 0x80536b6:	jbe	0x80536e6 [IMM <CODEREF>]
	jbe	.label_1084
	# 0x80536b8:	movl	-0x78(%ebp), %edx [MEM, REG]
	movl	-0x78(%ebp), %edx
	# 0x80536bb:	movl	-0x74(%ebp), %eax [MEM, REG]
	movl	-0x74(%ebp), %eax
	# 0x80536be:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80536c0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80536c3:	movl	%eax, -0x98(%ebp) [REG, MEM]
	movl	%eax, -0x98(%ebp)
	# 0x80536c9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80536cc:	pushl	-0x98(%ebp) [MEM]
	pushl	-0x98(%ebp)
	# 0x80536d2:	pushl	-0xa8(%ebp) [MEM]
	pushl	-0xa8(%ebp)
	# 0x80536d8:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x80536dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80536e0:	movl	%eax, -0xa8(%ebp) [REG, MEM]
	movl	%eax, -0xa8(%ebp)
	# 0x80536e6:	movl	-0x74(%ebp), %eax [MEM, REG]
.label_1084:
	movl	-0x74(%ebp), %eax
	# 0x80536e9:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80536ec:	movl	-0xa8(%ebp), %ecx [MEM, REG]
	movl	-0xa8(%ebp), %ecx
	# 0x80536f2:	movl	-0x78(%ebp), %eax [MEM, REG]
	movl	-0x78(%ebp), %eax
	# 0x80536f5:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80536f7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80536fa:	pushl	%edx [REG]
	pushl	%edx
	# 0x80536fb:	pushl	-0xa0(%ebp) [MEM]
	pushl	-0xa0(%ebp)
	# 0x8053701:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053702:	calll	0x80495e0 [IMM <CODEREF>]
	calll	memmove
	# 0x8053707:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805370a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805370d:	pushl	-0x78(%ebp) [MEM]
	pushl	-0x78(%ebp)
	# 0x8053710:	pushl	-0x7c(%ebp) [MEM]
	pushl	-0x7c(%ebp)
	# 0x8053713:	pushl	-0xa8(%ebp) [MEM]
	pushl	-0xa8(%ebp)
	# 0x8053719:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805371e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053721:	movl	%eax, -0xa0(%ebp) [REG, MEM]
	movl	%eax, -0xa0(%ebp)
	# 0x8053727:	movl	-0xa0(%ebp), %eax [MEM, REG]
	movl	-0xa0(%ebp), %eax
	# 0x805372d:	movl	%eax, -0xbc(%ebp) [REG, MEM]
	movl	%eax, -0xbc(%ebp)
	# 0x8053733:	movl	-0x7c(%ebp), %eax [MEM, REG]
	movl	-0x7c(%ebp), %eax
	# 0x8053736:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053739:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x805373b:	jne	0x805378f [IMM <CODEREF>]
	jne	.label_1065
	# 0x805373d:	movl	$0, -0x70(%ebp) [IMM, MEM]
	movl	$0, -0x70(%ebp)
	# 0x8053744:	cmpl	$0, -0x70(%ebp) [IMM, MEM]
	cmpl	$0, -0x70(%ebp)
	# 0x8053748:	je	0x8053761 [IMM <CODEREF>]
	je	.label_1064
	# 0x805374a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805374d:	pushl	-0x70(%ebp) [MEM]
	pushl	-0x70(%ebp)
	# 0x8053750:	pushl	-0x7c(%ebp) [MEM]
	pushl	-0x7c(%ebp)
	# 0x8053753:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053759:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805375e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053761:	movl	-0xb0(%ebp), %edx [MEM, REG]
.label_1064:
	movl	-0xb0(%ebp), %edx
	# 0x8053767:	movl	-0x70(%ebp), %eax [MEM, REG]
	movl	-0x70(%ebp), %eax
	# 0x805376a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805376c:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x8053772:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x8053778:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805377b:	movl	%edx, -0xac(%ebp) [REG, MEM]
	movl	%edx, -0xac(%ebp)
	# 0x8053781:	movb	$0x2f, 0(%eax) [IMM, MEM]
	movb	$0x2f, 0(%eax)
	# 0x8053784:	movl	-0x70(%ebp), %eax [MEM, REG]
	movl	-0x70(%ebp), %eax
	# 0x8053787:	movl	%eax, -0x90(%ebp) [REG, MEM]
	movl	%eax, -0x90(%ebp)
	# 0x805378d:	jmp	0x80537d6 [IMM <CODEREF>]
	jmp	.label_1072
	# 0x805378f:	movl	-0x90(%ebp), %eax [MEM, REG]
.label_1065:
	movl	-0x90(%ebp), %eax
	# 0x8053795:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8053798:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805379e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80537a0:	cmpl	-0xac(%ebp), %eax [MEM, REG]
	cmpl	-0xac(%ebp), %eax
	# 0x80537a6:	jae	0x80537d6 [IMM <CODEREF>]
	jae	.label_1072
	# 0x80537a8:	subl	$1, -0xac(%ebp) [IMM, MEM]
	subl	$1, -0xac(%ebp)
	# 0x80537af:	jmp	0x80537b8 [IMM <CODEREF>]
	jmp	.label_1088
	# 0x80537b1:	subl	$1, -0xac(%ebp) [IMM, MEM]
.label_1094:
	subl	$1, -0xac(%ebp)
	# 0x80537b8:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1088:
	movl	-0xac(%ebp), %eax
	# 0x80537be:	cmpl	-0xb0(%ebp), %eax [MEM, REG]
	cmpl	-0xb0(%ebp), %eax
	# 0x80537c4:	jbe	0x80537d6 [IMM <CODEREF>]
	jbe	.label_1072
	# 0x80537c6:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x80537cc:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x80537cf:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80537d2:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x80537d4:	jne	0x80537b1 [IMM <CODEREF>]
	jne	.label_1094
	# 0x80537d6:	subl	$0xc, %esp [IMM, REG]
.label_1072:
	subl	$0xc, %esp
	# 0x80537d9:	pushl	-0x7c(%ebp) [MEM]
	pushl	-0x7c(%ebp)
	# 0x80537dc:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80537e1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80537e4:	jmp	0x805381f [IMM <CODEREF>]
	jmp	.label_1049
	# 0x80537e6:	movl	-0x5c(%ebp), %eax [MEM, REG]
.label_1090:
	movl	-0x5c(%ebp), %eax
	# 0x80537e9:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x80537ee:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x80537f3:	je	0x805381f [IMM <CODEREF>]
	je	.label_1049
	# 0x80537f5:	movl	-0xa0(%ebp), %eax [MEM, REG]
	movl	-0xa0(%ebp), %eax
	# 0x80537fb:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80537fe:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8053800:	je	0x805381f [IMM <CODEREF>]
	je	.label_1049
	# 0x8053802:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x8053806:	je	0x805381f [IMM <CODEREF>]
	je	.label_1049
	# 0x8053808:	movl	$0x14, -0x94(%ebp) [IMM, MEM]
	movl	$0x14, -0x94(%ebp)
	# 0x8053812:	nop	 []
	nop	
	# 0x8053813:	jmp	0x80538ea [IMM <CODEREF>]
	jmp	.label_1052
	# 0x8053818:	nop	 []
.label_1071:
	nop	
	# 0x8053819:	jmp	0x805381f [IMM <CODEREF>]
	jmp	.label_1049
	# 0x805381b:	nop	 []
.label_1062:
	nop	
	# 0x805381c:	jmp	0x805381f [IMM <CODEREF>]
	jmp	.label_1049
	# 0x805381e:	nop	 []
.label_1057:
	nop	
	# 0x805381f:	movl	-0xa0(%ebp), %eax [MEM, REG]
.label_1049:
	movl	-0xa0(%ebp), %eax
	# 0x8053825:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x805382b:	movl	-0xa4(%ebp), %eax [MEM, REG]
.label_1070:
	movl	-0xa4(%ebp), %eax
	# 0x8053831:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053834:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8053836:	jne	0x80532a7 [IMM <CODEREF>]
	jne	.label_1059
	# 0x805383c:	jmp	0x805383f [IMM <CODEREF>]
	jmp	.label_1063
	# 0x805383e:	nop	 []
.label_1098:
	nop	
	# 0x805383f:	movl	-0x90(%ebp), %eax [MEM, REG]
.label_1063:
	movl	-0x90(%ebp), %eax
	# 0x8053845:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8053848:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x805384e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053850:	cmpl	-0xac(%ebp), %eax [MEM, REG]
	cmpl	-0xac(%ebp), %eax
	# 0x8053856:	jae	0x805386f [IMM <CODEREF>]
	jae	.label_1074
	# 0x8053858:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x805385e:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8053861:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053864:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053866:	jne	0x805386f [IMM <CODEREF>]
	jne	.label_1074
	# 0x8053868:	subl	$1, -0xac(%ebp) [IMM, MEM]
	subl	$1, -0xac(%ebp)
	# 0x805386f:	movl	-0xac(%ebp), %eax [MEM, REG]
.label_1074:
	movl	-0xac(%ebp), %eax
	# 0x8053875:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8053878:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x805387e:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053881:	cmpl	-0x9c(%ebp), %eax [MEM, REG]
	cmpl	-0x9c(%ebp), %eax
	# 0x8053887:	je	0x80538b4 [IMM <CODEREF>]
	je	.label_1081
	# 0x8053889:	movl	-0xac(%ebp), %edx [MEM, REG]
	movl	-0xac(%ebp), %edx
	# 0x805388f:	movl	-0xb0(%ebp), %eax [MEM, REG]
	movl	-0xb0(%ebp), %eax
	# 0x8053895:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053897:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053899:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805389c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805389f:	pushl	%eax [REG]
	pushl	%eax
	# 0x80538a0:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x80538a6:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x80538ab:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80538ae:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x80538b4:	subl	$0xc, %esp [IMM, REG]
.label_1081:
	subl	$0xc, %esp
	# 0x80538b7:	pushl	-0xa8(%ebp) [MEM]
	pushl	-0xa8(%ebp)
	# 0x80538bd:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80538c2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80538c5:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x80538cb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80538cd:	je	0x80538e1 [IMM <CODEREF>]
	je	.label_1091
	# 0x80538cf:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x80538d5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80538d8:	pushl	%eax [REG]
	pushl	%eax
	# 0x80538d9:	calll	0x8054fac [IMM <CODEREF>]
	calll	hash_free
	# 0x80538de:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80538e1:	movl	-0xb0(%ebp), %eax [MEM, REG]
.label_1091:
	movl	-0xb0(%ebp), %eax
	# 0x80538e7:	jmp	0x805393c [IMM <CODEREF>]
	jmp	.label_1054
	# 0x80538e9:	nop	 []
.label_1082:
	nop	
	# 0x80538ea:	subl	$0xc, %esp [IMM, REG]
.label_1052:
	subl	$0xc, %esp
	# 0x80538ed:	pushl	-0xa8(%ebp) [MEM]
	pushl	-0xa8(%ebp)
	# 0x80538f3:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80538f8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80538fb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80538fe:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x8053904:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8053909:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805390c:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x8053912:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053914:	je	0x8053928 [IMM <CODEREF>]
	je	.label_1053
	# 0x8053916:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x805391c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805391f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053920:	calll	0x8054fac [IMM <CODEREF>]
	calll	hash_free
	# 0x8053925:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053928:	calll	0x8049990 [IMM <CODEREF>]
.label_1053:
	calll	__errno_location
	# 0x805392d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805392f:	movl	-0x94(%ebp), %eax [MEM, REG]
	movl	-0x94(%ebp), %eax
	# 0x8053935:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x8053937:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805393c:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1054:
	movl	-0xc(%ebp), %ecx
	# 0x805393f:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8053946:	je	0x805394d [IMM <CODEREF>]
	je	.label_1078
	# 0x8053948:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805394d:	leave	 []
.label_1078:
	leave	
	# 0x805394e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805394f
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	# 0x805394f:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8053950:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053952:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053955:	movl	%eax, 0x806b3dc [REG, MEM]
	movl	%eax, file_name
	# 0x805395a:	nop	 []
	nop	
	# 0x805395b:	popl	%ebp [REG]
	popl	%ebp
	# 0x805395c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805395d
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	# 0x805395d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805395e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053960:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8053963:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053966:	movb	%al, -4(%ebp) [REG, MEM]
	movb	%al, -4(%ebp)
	# 0x8053969:	movzbl	-4(%ebp), %eax [MEM, REG]
	movzbl	-4(%ebp), %eax
	# 0x805396d:	movb	%al, 0x806b3e0 [REG, MEM]
	movb	%al, ignore_EPIPE
	# 0x8053972:	nop	 []
	nop	
	# 0x8053973:	leave	 []
	leave	
	# 0x8053974:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053975

	# 0x8053975:	pushl	%ebp [REG]
	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	pushl	%ebp
	# 0x8053976:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053978:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8053979:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x805397c:	movl	0x806a398, %eax [MEM, REG]
	movl	stdout,  %eax
	# 0x8053981:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053984:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053985:	calll	0x805e251 [IMM <CODEREF>]
	calll	close_stream
	# 0x805398a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805398d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805398f:	je	0x8053a26 [IMM <CODEREF>]
	je	.label_1102
	# 0x8053995:	movzbl	0x806b3e0, %eax [MEM, REG]
	movzbl	ignore_EPIPE,  %eax
	# 0x805399c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805399f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80539a1:	jne	0x80539af [IMM <CODEREF>]
	jne	.label_1109
	# 0x80539a3:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x80539a8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80539aa:	cmpl	$0x20, %eax [IMM, REG]
	cmpl	$0x20, %eax
	# 0x80539ad:	je	0x8053a26 [IMM <CODEREF>]
	je	.label_1102
	# 0x80539af:	subl	$0xc, %esp [IMM, REG]
.label_1109:
	subl	$0xc, %esp
	# 0x80539b2:	pushl	$0x80633e2 [IMM <DATAREF>]
	pushl	$label_1103
	# 0x80539b7:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x80539bc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80539bf:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80539c2:	movl	0x806b3dc, %eax [MEM, REG]
	movl	file_name,  %eax
	# 0x80539c7:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80539c9:	je	0x80539fe [IMM <CODEREF>]
	je	.label_1108
	# 0x80539cb:	movl	0x806b3dc, %eax [MEM, REG]
	movl	file_name,  %eax
	# 0x80539d0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80539d3:	pushl	%eax [REG]
	pushl	%eax
	# 0x80539d4:	calll	0x805b622 [IMM <CODEREF>]
	calll	quotearg_colon
	# 0x80539d9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80539dc:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x80539de:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x80539e3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80539e5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80539e8:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x80539eb:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80539ec:	pushl	$0x80633ee [IMM <DATAREF>]
	pushl	$label_1107
	# 0x80539f1:	pushl	%eax [REG]
	pushl	%eax
	# 0x80539f2:	pushl	$0 [IMM]
	pushl	$0
	# 0x80539f4:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x80539f9:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80539fc:	jmp	0x8053a18 [IMM <CODEREF>]
	jmp	.label_1106
	# 0x80539fe:	calll	0x8049990 [IMM <CODEREF>]
.label_1108:
	calll	__errno_location
	# 0x8053a03:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053a05:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8053a08:	pushl	$0x80633f5 [IMM <DATAREF>]
	pushl	$label_1104
	# 0x8053a0d:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053a0e:	pushl	$0 [IMM]
	pushl	$0
	# 0x8053a10:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x8053a15:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053a18:	movl	0x806a314, %eax [MEM, REG]
.label_1106:
	movl	exit_failure,  %eax
	# 0x8053a1d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053a20:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053a21:	calll	0x80495a0 [IMM <CODEREF>]
	calll	_exit
	# 0x8053a26:	movl	0x806a388, %eax [MEM, REG]
.label_1102:
	movl	stderr,  %eax
	# 0x8053a2b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053a2e:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053a2f:	calll	0x805e251 [IMM <CODEREF>]
	calll	close_stream
	# 0x8053a34:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053a37:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053a39:	je	0x8053a49 [IMM <CODEREF>]
	je	.label_1105
	# 0x8053a3b:	movl	0x806a314, %eax [MEM, REG]
	movl	exit_failure,  %eax
	# 0x8053a40:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053a43:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053a44:	calll	0x80495a0 [IMM <CODEREF>]
	calll	_exit
	# 0x8053a49:	nop	 []
.label_1105:
	nop	
	# 0x8053a4a:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8053a4d:	leave	 []
	leave	
	# 0x8053a4e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053a4f

	# 0x8053a4f:	pushl	%ebp [REG]
	.globl dir_len
	.type dir_len, @function
dir_len:
	pushl	%ebp
	# 0x8053a50:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053a52:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8053a55:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8053a5c:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8053a60:	jne	0x8053a7a [IMM <CODEREF>]
	jne	.label_1113
	# 0x8053a62:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053a65:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053a68:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053a6a:	jne	0x8053a73 [IMM <CODEREF>]
	jne	.label_1110
	# 0x8053a6c:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8053a71:	jmp	0x8053a7f [IMM <CODEREF>]
	jmp	.label_1111
	# 0x8053a73:	movl	$0, %eax [IMM, REG]
.label_1110:
	movl	$0, %eax
	# 0x8053a78:	jmp	0x8053a7f [IMM <CODEREF>]
	jmp	.label_1111
	# 0x8053a7a:	movl	$0, %eax [IMM, REG]
.label_1113:
	movl	$0, %eax
	# 0x8053a7f:	addl	%eax, -0xc(%ebp) [REG, MEM]
.label_1111:
	addl	%eax, -0xc(%ebp)
	# 0x8053a82:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053a85:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053a88:	calll	0x8053b48 [IMM <CODEREF>]
	calll	last_component
	# 0x8053a8d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053a90:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053a92:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053a95:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053a97:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053a99:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8053a9c:	jmp	0x8053ab4 [IMM <CODEREF>]
	jmp	.label_1112
	# 0x8053a9e:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1114:
	movl	-0x10(%ebp), %eax
	# 0x8053aa1:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8053aa4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053aa7:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053aa9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053aac:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053aae:	jne	0x8053abe [IMM <CODEREF>]
	jne	.label_1116
	# 0x8053ab0:	subl	$1, -0x10(%ebp) [IMM, MEM]
	subl	$1, -0x10(%ebp)
	# 0x8053ab4:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1112:
	movl	-0xc(%ebp), %eax
	# 0x8053ab7:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8053aba:	jb	0x8053a9e [IMM <CODEREF>]
	jb	.label_1114
	# 0x8053abc:	jmp	0x8053abf [IMM <CODEREF>]
	jmp	.label_1115
	# 0x8053abe:	nop	 []
.label_1116:
	nop	
	# 0x8053abf:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1115:
	movl	-0x10(%ebp), %eax
	# 0x8053ac2:	leave	 []
	leave	
	# 0x8053ac3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053ac4

	# 0x8053ac4:	pushl	%ebp [REG]
	.globl mdir_name
	.type mdir_name, @function
mdir_name:
	pushl	%ebp
	# 0x8053ac5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053ac7:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8053aca:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053acd:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053ad0:	calll	0x8053a4f [IMM <CODEREF>]
	calll	dir_len
	# 0x8053ad5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053ad8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8053adb:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8053adf:	sete	%al [REG]
	sete	%al
	# 0x8053ae2:	movb	%al, -0x11(%ebp) [REG, MEM]
	movb	%al, -0x11(%ebp)
	# 0x8053ae5:	movzbl	-0x11(%ebp), %edx [MEM, REG]
	movzbl	-0x11(%ebp), %edx
	# 0x8053ae9:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8053aec:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053aee:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053af1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053af4:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053af5:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x8053afa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053afd:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8053b00:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8053b04:	jne	0x8053b0d [IMM <CODEREF>]
	jne	.label_1118
	# 0x8053b06:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053b0b:	jmp	0x8053b46 [IMM <CODEREF>]
	jmp	.label_1117
	# 0x8053b0d:	subl	$4, %esp [IMM, REG]
.label_1118:
	subl	$4, %esp
	# 0x8053b10:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8053b13:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053b16:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8053b19:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8053b1e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053b21:	cmpb	$0, -0x11(%ebp) [IMM, MEM]
	cmpb	$0, -0x11(%ebp)
	# 0x8053b25:	je	0x8053b38 [IMM <CODEREF>]
	je	.label_1119
	# 0x8053b27:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8053b2a:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8053b2d:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x8053b30:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8053b33:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053b35:	movb	$0x2e, 0(%eax) [IMM, MEM]
	movb	$0x2e, 0(%eax)
	# 0x8053b38:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_1119:
	movl	-0xc(%ebp), %edx
	# 0x8053b3b:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8053b3e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053b40:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8053b43:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8053b46:	leave	 []
.label_1117:
	leave	
	# 0x8053b47:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053b48

	# 0x8053b48:	pushl	%ebp [REG]
	.globl last_component
	.type last_component, @function
last_component:
	pushl	%ebp
	# 0x8053b49:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053b4b:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8053b4e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053b51:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x8053b54:	movb	$0, -9(%ebp) [IMM, MEM]
	movb	$0, -9(%ebp)
	# 0x8053b58:	jmp	0x8053b5e [IMM <CODEREF>]
	jmp	.label_1124
	# 0x8053b5a:	addl	$1, -8(%ebp) [IMM, MEM]
.label_1125:
	addl	$1, -8(%ebp)
	# 0x8053b5e:	movl	-8(%ebp), %eax [MEM, REG]
.label_1124:
	movl	-8(%ebp), %eax
	# 0x8053b61:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053b64:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053b66:	je	0x8053b5a [IMM <CODEREF>]
	je	.label_1125
	# 0x8053b68:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8053b6b:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x8053b6e:	jmp	0x8053b94 [IMM <CODEREF>]
	jmp	.label_1121
	# 0x8053b70:	movl	-4(%ebp), %eax [MEM, REG]
.label_1123:
	movl	-4(%ebp), %eax
	# 0x8053b73:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053b76:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053b78:	jne	0x8053b80 [IMM <CODEREF>]
	jne	.label_1120
	# 0x8053b7a:	movb	$1, -9(%ebp) [IMM, MEM]
	movb	$1, -9(%ebp)
	# 0x8053b7e:	jmp	0x8053b90 [IMM <CODEREF>]
	jmp	.label_1122
	# 0x8053b80:	cmpb	$0, -9(%ebp) [IMM, MEM]
.label_1120:
	cmpb	$0, -9(%ebp)
	# 0x8053b84:	je	0x8053b90 [IMM <CODEREF>]
	je	.label_1122
	# 0x8053b86:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8053b89:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x8053b8c:	movb	$0, -9(%ebp) [IMM, MEM]
	movb	$0, -9(%ebp)
	# 0x8053b90:	addl	$1, -4(%ebp) [IMM, MEM]
.label_1122:
	addl	$1, -4(%ebp)
	# 0x8053b94:	movl	-4(%ebp), %eax [MEM, REG]
.label_1121:
	movl	-4(%ebp), %eax
	# 0x8053b97:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053b9a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8053b9c:	jne	0x8053b70 [IMM <CODEREF>]
	jne	.label_1123
	# 0x8053b9e:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8053ba1:	leave	 []
	leave	
	# 0x8053ba2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053ba3

	# 0x8053ba3:	pushl	%ebp [REG]
	.globl base_len
	.type base_len, @function
base_len:
	pushl	%ebp
	# 0x8053ba4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053ba6:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8053ba9:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8053bb0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053bb3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053bb6:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8053bbb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053bbe:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8053bc1:	jmp	0x8053bc7 [IMM <CODEREF>]
	jmp	.label_1127
	# 0x8053bc3:	subl	$1, -0x10(%ebp) [IMM, MEM]
.label_1128:
	subl	$1, -0x10(%ebp)
	# 0x8053bc7:	cmpl	$1, -0x10(%ebp) [IMM, MEM]
.label_1127:
	cmpl	$1, -0x10(%ebp)
	# 0x8053bcb:	jbe	0x8053bdf [IMM <CODEREF>]
	jbe	.label_1126
	# 0x8053bcd:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8053bd0:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8053bd3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053bd6:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053bd8:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053bdb:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053bdd:	je	0x8053bc3 [IMM <CODEREF>]
	je	.label_1128
	# 0x8053bdf:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1126:
	movl	-0x10(%ebp), %eax
	# 0x8053be2:	leave	 []
	leave	
	# 0x8053be3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053be4

	# 0x8053be4:	pushl	%ebp [REG]
	.globl file_has_acl
	.type file_has_acl, @function
file_has_acl:
	pushl	%ebp
	# 0x8053be5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053be7:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053bec:	popl	%ebp [REG]
	popl	%ebp
	# 0x8053bed:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053bee

	# 0x8053bee:	pushl	%ebp [REG]
	.globl record_file
	.type record_file, @function
record_file:
	pushl	%ebp
	# 0x8053bef:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053bf1:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8053bf4:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x8053bf8:	je	0x8053c79 [IMM <CODEREF>]
	je	.label_1131
	# 0x8053bfa:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053bfd:	pushl	$0x14 [IMM]
	pushl	$0x14
	# 0x8053bff:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x8053c04:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053c07:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8053c0a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053c0d:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053c10:	calll	0x805c6fe [IMM <CODEREF>]
	calll	xstrdup
	# 0x8053c15:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053c18:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053c1a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8053c1d:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8053c1f:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8053c22:	movl	0x5c(%eax), %edx [MEM, REG]
	movl	0x5c(%eax), %edx
	# 0x8053c25:	movl	0x58(%eax), %eax [MEM, REG]
	movl	0x58(%eax), %eax
	# 0x8053c28:	movl	-0x10(%ebp), %ecx [MEM, REG]
	movl	-0x10(%ebp), %ecx
	# 0x8053c2b:	movl	%eax, 4(%ecx) [REG, MEM]
	movl	%eax, 4(%ecx)
	# 0x8053c2e:	movl	%edx, 8(%ecx) [REG, MEM]
	movl	%edx, 8(%ecx)
	# 0x8053c31:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8053c34:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8053c37:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053c39:	movl	-0x10(%ebp), %ecx [MEM, REG]
	movl	-0x10(%ebp), %ecx
	# 0x8053c3c:	movl	%eax, 0xc(%ecx) [REG, MEM]
	movl	%eax, 0xc(%ecx)
	# 0x8053c3f:	movl	%edx, 0x10(%ecx) [REG, MEM]
	movl	%edx, 0x10(%ecx)
	# 0x8053c42:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8053c45:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8053c48:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053c4b:	calll	0x80557f0 [IMM <CODEREF>]
	calll	hash_insert
	# 0x8053c50:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053c53:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8053c56:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8053c5a:	jne	0x8053c61 [IMM <CODEREF>]
	jne	.label_1129
	# 0x8053c5c:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x8053c61:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1129:
	movl	-0xc(%ebp), %eax
	# 0x8053c64:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8053c67:	je	0x8053c7a [IMM <CODEREF>]
	je	.label_1130
	# 0x8053c69:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053c6c:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8053c6f:	calll	0x8055bf3 [IMM <CODEREF>]
	calll	triple_free
	# 0x8053c74:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053c77:	jmp	0x8053c7a [IMM <CODEREF>]
	jmp	.label_1130
	# 0x8053c79:	nop	 []
.label_1131:
	nop	
	# 0x8053c7a:	leave	 []
.label_1130:
	leave	
	# 0x8053c7b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053c7c

	# 0x8053c7c:	pushl	%ebp [REG]
	.globl seen_file
	.type seen_file, @function
seen_file:
	pushl	%ebp
	# 0x8053c7d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053c7f:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8053c82:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053c85:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8053c88:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053c8b:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x8053c8e:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8053c91:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x8053c94:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8053c9a:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8053c9d:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8053c9f:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x8053ca3:	jne	0x8053cac [IMM <CODEREF>]
	jne	.label_1134
	# 0x8053ca5:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8053caa:	jmp	0x8053ce6 [IMM <CODEREF>]
	jmp	.label_1132
	# 0x8053cac:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_1134:
	movl	-0x30(%ebp), %eax
	# 0x8053caf:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8053cb2:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x8053cb5:	movl	0x5c(%eax), %edx [MEM, REG]
	movl	0x5c(%eax), %edx
	# 0x8053cb8:	movl	0x58(%eax), %eax [MEM, REG]
	movl	0x58(%eax), %eax
	# 0x8053cbb:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8053cbe:	movl	%edx, -0x18(%ebp) [REG, MEM]
	movl	%edx, -0x18(%ebp)
	# 0x8053cc1:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x8053cc4:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8053cc7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8053cc9:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8053ccc:	movl	%edx, -0x10(%ebp) [REG, MEM]
	movl	%edx, -0x10(%ebp)
	# 0x8053ccf:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8053cd2:	leal	-0x20(%ebp), %eax [MEM, REG]
	leal	-0x20(%ebp), %eax
	# 0x8053cd5:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053cd6:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8053cd9:	calll	0x80548cb [IMM <CODEREF>]
	calll	hash_lookup
	# 0x8053cde:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053ce1:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053ce3:	setne	%al [REG]
	setne	%al
	# 0x8053ce6:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_1132:
	movl	-0xc(%ebp), %edx
	# 0x8053ce9:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x8053cf0:	je	0x8053cf7 [IMM <CODEREF>]
	je	.label_1133
	# 0x8053cf2:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8053cf7:	leave	 []
.label_1133:
	leave	
	# 0x8053cf8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053cf9

	# 0x8053cf9:	pushl	%ebp [REG]
	.globl ftypelet
	.type ftypelet, @function
ftypelet:
	pushl	%ebp
	# 0x8053cfa:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053cfc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053cff:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d04:	cmpl	$0x8000, %eax [IMM, REG]
	cmpl	$0x8000, %eax
	# 0x8053d09:	jne	0x8053d15 [IMM <CODEREF>]
	jne	.label_1142
	# 0x8053d0b:	movl	$0x2d, %eax [IMM, REG]
	movl	$0x2d, %eax
	# 0x8053d10:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d15:	movl	8(%ebp), %eax [MEM, REG]
.label_1142:
	movl	8(%ebp), %eax
	# 0x8053d18:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d1d:	cmpl	$0x4000, %eax [IMM, REG]
	cmpl	$0x4000, %eax
	# 0x8053d22:	jne	0x8053d2b [IMM <CODEREF>]
	jne	.label_1140
	# 0x8053d24:	movl	$0x64, %eax [IMM, REG]
	movl	$0x64, %eax
	# 0x8053d29:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d2b:	movl	8(%ebp), %eax [MEM, REG]
.label_1140:
	movl	8(%ebp), %eax
	# 0x8053d2e:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d33:	cmpl	$0x6000, %eax [IMM, REG]
	cmpl	$0x6000, %eax
	# 0x8053d38:	jne	0x8053d41 [IMM <CODEREF>]
	jne	.label_1137
	# 0x8053d3a:	movl	$0x62, %eax [IMM, REG]
	movl	$0x62, %eax
	# 0x8053d3f:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d41:	movl	8(%ebp), %eax [MEM, REG]
.label_1137:
	movl	8(%ebp), %eax
	# 0x8053d44:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d49:	cmpl	$0x2000, %eax [IMM, REG]
	cmpl	$0x2000, %eax
	# 0x8053d4e:	jne	0x8053d57 [IMM <CODEREF>]
	jne	.label_1135
	# 0x8053d50:	movl	$0x63, %eax [IMM, REG]
	movl	$0x63, %eax
	# 0x8053d55:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d57:	movl	8(%ebp), %eax [MEM, REG]
.label_1135:
	movl	8(%ebp), %eax
	# 0x8053d5a:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d5f:	cmpl	$0xa000, %eax [IMM, REG]
	cmpl	$0xa000, %eax
	# 0x8053d64:	jne	0x8053d6d [IMM <CODEREF>]
	jne	.label_1141
	# 0x8053d66:	movl	$0x6c, %eax [IMM, REG]
	movl	$0x6c, %eax
	# 0x8053d6b:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d6d:	movl	8(%ebp), %eax [MEM, REG]
.label_1141:
	movl	8(%ebp), %eax
	# 0x8053d70:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d75:	cmpl	$0x1000, %eax [IMM, REG]
	cmpl	$0x1000, %eax
	# 0x8053d7a:	jne	0x8053d83 [IMM <CODEREF>]
	jne	.label_1138
	# 0x8053d7c:	movl	$0x70, %eax [IMM, REG]
	movl	$0x70, %eax
	# 0x8053d81:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d83:	movl	8(%ebp), %eax [MEM, REG]
.label_1138:
	movl	8(%ebp), %eax
	# 0x8053d86:	andl	$0xf000, %eax [IMM, REG]
	andl	$0xf000, %eax
	# 0x8053d8b:	cmpl	$0xc000, %eax [IMM, REG]
	cmpl	$0xc000, %eax
	# 0x8053d90:	jne	0x8053d99 [IMM <CODEREF>]
	jne	.label_1139
	# 0x8053d92:	movl	$0x73, %eax [IMM, REG]
	movl	$0x73, %eax
	# 0x8053d97:	jmp	0x8053d9e [IMM <CODEREF>]
	jmp	.label_1136
	# 0x8053d99:	movl	$0x3f, %eax [IMM, REG]
.label_1139:
	movl	$0x3f, %eax
	# 0x8053d9e:	popl	%ebp [REG]
.label_1136:
	popl	%ebp
	# 0x8053d9f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053da0

	# 0x8053da0:	pushl	%ebp [REG]
	.globl strmode
	.type strmode, @function
strmode:
	pushl	%ebp
	# 0x8053da1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053da3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053da6:	calll	0x8053cf9 [IMM <CODEREF>]
	calll	ftypelet
	# 0x8053dab:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x8053dae:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053db0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053db3:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8053db5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053db8:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8053dbb:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053dbe:	andl	$0x100, %edx [IMM, REG]
	andl	$0x100, %edx
	# 0x8053dc4:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053dc6:	je	0x8053dcf [IMM <CODEREF>]
	je	.label_1144
	# 0x8053dc8:	movl	$0x72, %edx [IMM, REG]
	movl	$0x72, %edx
	# 0x8053dcd:	jmp	0x8053dd4 [IMM <CODEREF>]
	jmp	.label_1147
	# 0x8053dcf:	movl	$0x2d, %edx [IMM, REG]
.label_1144:
	movl	$0x2d, %edx
	# 0x8053dd4:	movb	%dl, 0(%eax) [REG, MEM]
.label_1147:
	movb	%dl, 0(%eax)
	# 0x8053dd6:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053dd9:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x8053ddc:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053ddf:	andl	$0x80, %edx [IMM, REG]
	andl	$0x80, %edx
	# 0x8053de5:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053de7:	je	0x8053df0 [IMM <CODEREF>]
	je	.label_1153
	# 0x8053de9:	movl	$0x77, %edx [IMM, REG]
	movl	$0x77, %edx
	# 0x8053dee:	jmp	0x8053df5 [IMM <CODEREF>]
	jmp	.label_1160
	# 0x8053df0:	movl	$0x2d, %edx [IMM, REG]
.label_1153:
	movl	$0x2d, %edx
	# 0x8053df5:	movb	%dl, 0(%eax) [REG, MEM]
.label_1160:
	movb	%dl, 0(%eax)
	# 0x8053df7:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053dfa:	leal	3(%eax), %edx [MEM, REG]
	leal	3(%eax), %edx
	# 0x8053dfd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053e00:	andl	$0x800, %eax [IMM, REG]
	andl	$0x800, %eax
	# 0x8053e05:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053e07:	je	0x8053e21 [IMM <CODEREF>]
	je	.label_1163
	# 0x8053e09:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053e0c:	andl	$0x40, %eax [IMM, REG]
	andl	$0x40, %eax
	# 0x8053e0f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053e11:	je	0x8053e1a [IMM <CODEREF>]
	je	.label_1165
	# 0x8053e13:	movl	$0x73, %eax [IMM, REG]
	movl	$0x73, %eax
	# 0x8053e18:	jmp	0x8053e37 [IMM <CODEREF>]
	jmp	.label_1152
	# 0x8053e1a:	movl	$0x53, %eax [IMM, REG]
.label_1165:
	movl	$0x53, %eax
	# 0x8053e1f:	jmp	0x8053e37 [IMM <CODEREF>]
	jmp	.label_1152
	# 0x8053e21:	movl	8(%ebp), %eax [MEM, REG]
.label_1163:
	movl	8(%ebp), %eax
	# 0x8053e24:	andl	$0x40, %eax [IMM, REG]
	andl	$0x40, %eax
	# 0x8053e27:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053e29:	je	0x8053e32 [IMM <CODEREF>]
	je	.label_1157
	# 0x8053e2b:	movl	$0x78, %eax [IMM, REG]
	movl	$0x78, %eax
	# 0x8053e30:	jmp	0x8053e37 [IMM <CODEREF>]
	jmp	.label_1152
	# 0x8053e32:	movl	$0x2d, %eax [IMM, REG]
.label_1157:
	movl	$0x2d, %eax
	# 0x8053e37:	movb	%al, 0(%edx) [REG, MEM]
.label_1152:
	movb	%al, 0(%edx)
	# 0x8053e39:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053e3c:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x8053e3f:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053e42:	andl	$0x20, %edx [IMM, REG]
	andl	$0x20, %edx
	# 0x8053e45:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053e47:	je	0x8053e50 [IMM <CODEREF>]
	je	.label_1149
	# 0x8053e49:	movl	$0x72, %edx [IMM, REG]
	movl	$0x72, %edx
	# 0x8053e4e:	jmp	0x8053e55 [IMM <CODEREF>]
	jmp	.label_1148
	# 0x8053e50:	movl	$0x2d, %edx [IMM, REG]
.label_1149:
	movl	$0x2d, %edx
	# 0x8053e55:	movb	%dl, 0(%eax) [REG, MEM]
.label_1148:
	movb	%dl, 0(%eax)
	# 0x8053e57:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053e5a:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x8053e5d:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053e60:	andl	$0x10, %edx [IMM, REG]
	andl	$0x10, %edx
	# 0x8053e63:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053e65:	je	0x8053e6e [IMM <CODEREF>]
	je	.label_1154
	# 0x8053e67:	movl	$0x77, %edx [IMM, REG]
	movl	$0x77, %edx
	# 0x8053e6c:	jmp	0x8053e73 [IMM <CODEREF>]
	jmp	.label_1159
	# 0x8053e6e:	movl	$0x2d, %edx [IMM, REG]
.label_1154:
	movl	$0x2d, %edx
	# 0x8053e73:	movb	%dl, 0(%eax) [REG, MEM]
.label_1159:
	movb	%dl, 0(%eax)
	# 0x8053e75:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053e78:	leal	6(%eax), %edx [MEM, REG]
	leal	6(%eax), %edx
	# 0x8053e7b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053e7e:	andl	$0x400, %eax [IMM, REG]
	andl	$0x400, %eax
	# 0x8053e83:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053e85:	je	0x8053e9f [IMM <CODEREF>]
	je	.label_1162
	# 0x8053e87:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053e8a:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x8053e8d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053e8f:	je	0x8053e98 [IMM <CODEREF>]
	je	.label_1146
	# 0x8053e91:	movl	$0x73, %eax [IMM, REG]
	movl	$0x73, %eax
	# 0x8053e96:	jmp	0x8053eb5 [IMM <CODEREF>]
	jmp	.label_1151
	# 0x8053e98:	movl	$0x53, %eax [IMM, REG]
.label_1146:
	movl	$0x53, %eax
	# 0x8053e9d:	jmp	0x8053eb5 [IMM <CODEREF>]
	jmp	.label_1151
	# 0x8053e9f:	movl	8(%ebp), %eax [MEM, REG]
.label_1162:
	movl	8(%ebp), %eax
	# 0x8053ea2:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x8053ea5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053ea7:	je	0x8053eb0 [IMM <CODEREF>]
	je	.label_1156
	# 0x8053ea9:	movl	$0x78, %eax [IMM, REG]
	movl	$0x78, %eax
	# 0x8053eae:	jmp	0x8053eb5 [IMM <CODEREF>]
	jmp	.label_1151
	# 0x8053eb0:	movl	$0x2d, %eax [IMM, REG]
.label_1156:
	movl	$0x2d, %eax
	# 0x8053eb5:	movb	%al, 0(%edx) [REG, MEM]
.label_1151:
	movb	%al, 0(%edx)
	# 0x8053eb7:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053eba:	addl	$7, %eax [IMM, REG]
	addl	$7, %eax
	# 0x8053ebd:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053ec0:	andl	$4, %edx [IMM, REG]
	andl	$4, %edx
	# 0x8053ec3:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053ec5:	je	0x8053ece [IMM <CODEREF>]
	je	.label_1166
	# 0x8053ec7:	movl	$0x72, %edx [IMM, REG]
	movl	$0x72, %edx
	# 0x8053ecc:	jmp	0x8053ed3 [IMM <CODEREF>]
	jmp	.label_1150
	# 0x8053ece:	movl	$0x2d, %edx [IMM, REG]
.label_1166:
	movl	$0x2d, %edx
	# 0x8053ed3:	movb	%dl, 0(%eax) [REG, MEM]
.label_1150:
	movb	%dl, 0(%eax)
	# 0x8053ed5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053ed8:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8053edb:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8053ede:	andl	$2, %edx [IMM, REG]
	andl	$2, %edx
	# 0x8053ee1:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x8053ee3:	je	0x8053eec [IMM <CODEREF>]
	je	.label_1164
	# 0x8053ee5:	movl	$0x77, %edx [IMM, REG]
	movl	$0x77, %edx
	# 0x8053eea:	jmp	0x8053ef1 [IMM <CODEREF>]
	jmp	.label_1158
	# 0x8053eec:	movl	$0x2d, %edx [IMM, REG]
.label_1164:
	movl	$0x2d, %edx
	# 0x8053ef1:	movb	%dl, 0(%eax) [REG, MEM]
.label_1158:
	movb	%dl, 0(%eax)
	# 0x8053ef3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053ef6:	leal	9(%eax), %edx [MEM, REG]
	leal	9(%eax), %edx
	# 0x8053ef9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053efc:	andl	$0x200, %eax [IMM, REG]
	andl	$0x200, %eax
	# 0x8053f01:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053f03:	je	0x8053f1d [IMM <CODEREF>]
	je	.label_1161
	# 0x8053f05:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053f08:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8053f0b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053f0d:	je	0x8053f16 [IMM <CODEREF>]
	je	.label_1145
	# 0x8053f0f:	movl	$0x74, %eax [IMM, REG]
	movl	$0x74, %eax
	# 0x8053f14:	jmp	0x8053f33 [IMM <CODEREF>]
	jmp	.label_1143
	# 0x8053f16:	movl	$0x54, %eax [IMM, REG]
.label_1145:
	movl	$0x54, %eax
	# 0x8053f1b:	jmp	0x8053f33 [IMM <CODEREF>]
	jmp	.label_1143
	# 0x8053f1d:	movl	8(%ebp), %eax [MEM, REG]
.label_1161:
	movl	8(%ebp), %eax
	# 0x8053f20:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8053f23:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8053f25:	je	0x8053f2e [IMM <CODEREF>]
	je	.label_1155
	# 0x8053f27:	movl	$0x78, %eax [IMM, REG]
	movl	$0x78, %eax
	# 0x8053f2c:	jmp	0x8053f33 [IMM <CODEREF>]
	jmp	.label_1143
	# 0x8053f2e:	movl	$0x2d, %eax [IMM, REG]
.label_1155:
	movl	$0x2d, %eax
	# 0x8053f33:	movb	%al, 0(%edx) [REG, MEM]
.label_1143:
	movb	%al, 0(%edx)
	# 0x8053f35:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053f38:	addl	$0xa, %eax [IMM, REG]
	addl	$0xa, %eax
	# 0x8053f3b:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x8053f3e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053f41:	addl	$0xb, %eax [IMM, REG]
	addl	$0xb, %eax
	# 0x8053f44:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8053f47:	nop	 []
	nop	
	# 0x8053f48:	leave	 []
	leave	
	# 0x8053f49:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053f4a

	# 0x8053f4a:	pushl	%ebp [REG]
	.globl filemodestring
	.type filemodestring, @function
filemodestring:
	pushl	%ebp
	# 0x8053f4b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053f4d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053f50:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8053f53:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053f56:	pushl	%eax [REG]
	pushl	%eax
	# 0x8053f57:	calll	0x8053da0 [IMM <CODEREF>]
	calll	strmode
	# 0x8053f5c:	addl	$8, %esp [IMM, REG]
	addl	$8, %esp
	# 0x8053f5f:	nop	 []
	nop	
	# 0x8053f60:	leave	 []
	leave	
	# 0x8053f61:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053f62

	# 0x8053f62:	pushl	%ebp [REG]
	.globl file_name_concat
	.type file_name_concat, @function
file_name_concat:
	pushl	%ebp
	# 0x8053f63:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053f65:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8053f68:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8053f6b:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8053f6e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053f71:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053f74:	calll	0x8053f8f [IMM <CODEREF>]
	calll	mfile_name_concat
	# 0x8053f79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053f7c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8053f7f:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8053f83:	jne	0x8053f8a [IMM <CODEREF>]
	jne	.label_1167
	# 0x8053f85:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x8053f8a:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1167:
	movl	-0xc(%ebp), %eax
	# 0x8053f8d:	leave	 []
	leave	
	# 0x8053f8e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8053f8f

	# 0x8053f8f:	pushl	%ebp [REG]
	.globl mfile_name_concat
	.type mfile_name_concat, @function
mfile_name_concat:
	pushl	%ebp
	# 0x8053f90:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8053f92:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8053f95:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053f98:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8053f9b:	calll	0x8053b48 [IMM <CODEREF>]
	calll	last_component
	# 0x8053fa0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053fa3:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8053fa6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053fa9:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x8053fac:	calll	0x8053ba3 [IMM <CODEREF>]
	calll	base_len
	# 0x8053fb1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053fb4:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8053fb7:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x8053fba:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053fbd:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8053fbf:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8053fc1:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8053fc3:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8053fc6:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053fc8:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8053fcb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8053fce:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8053fd1:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8053fd6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8053fd9:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8053fdc:	movb	$0, -0x21(%ebp) [IMM, MEM]
	movb	$0, -0x21(%ebp)
	# 0x8053fe0:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x8053fe4:	je	0x8054008 [IMM <CODEREF>]
	je	.label_1170
	# 0x8053fe6:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8053fe9:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8053fec:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8053fef:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8053ff1:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053ff4:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8053ff6:	je	0x8054016 [IMM <CODEREF>]
	je	.label_1168
	# 0x8053ff8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8053ffb:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8053ffe:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8054000:	je	0x8054016 [IMM <CODEREF>]
	je	.label_1168
	# 0x8054002:	movb	$0x2f, -0x21(%ebp) [IMM, MEM]
	movb	$0x2f, -0x21(%ebp)
	# 0x8054006:	jmp	0x8054016 [IMM <CODEREF>]
	jmp	.label_1168
	# 0x8054008:	movl	0xc(%ebp), %eax [MEM, REG]
.label_1170:
	movl	0xc(%ebp), %eax
	# 0x805400b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805400e:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8054010:	jne	0x8054016 [IMM <CODEREF>]
	jne	.label_1168
	# 0x8054012:	movb	$0x2e, -0x21(%ebp) [IMM, MEM]
	movb	$0x2e, -0x21(%ebp)
	# 0x8054016:	cmpb	$0, -0x21(%ebp) [IMM, MEM]
.label_1168:
	cmpb	$0, -0x21(%ebp)
	# 0x805401a:	setne	%al [REG]
	setne	%al
	# 0x805401d:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x8054020:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054023:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8054025:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054028:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805402a:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805402d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054030:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054031:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x8054036:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054039:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805403c:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8054040:	jne	0x8054049 [IMM <CODEREF>]
	jne	.label_1172
	# 0x8054042:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054047:	jmp	0x80540a4 [IMM <CODEREF>]
	jmp	.label_1169
	# 0x8054049:	subl	$4, %esp [IMM, REG]
.label_1172:
	subl	$4, %esp
	# 0x805404c:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805404f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8054052:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8054055:	calll	0x80499f0 [IMM <CODEREF>]
	calll	mempcpy
	# 0x805405a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805405d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054060:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054063:	movzbl	-0x21(%ebp), %edx [MEM, REG]
	movzbl	-0x21(%ebp), %edx
	# 0x8054067:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8054069:	cmpb	$0, -0x21(%ebp) [IMM, MEM]
	cmpb	$0, -0x21(%ebp)
	# 0x805406d:	setne	%al [REG]
	setne	%al
	# 0x8054070:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8054073:	addl	%eax, -0xc(%ebp) [REG, MEM]
	addl	%eax, -0xc(%ebp)
	# 0x8054076:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805407a:	je	0x8054084 [IMM <CODEREF>]
	je	.label_1171
	# 0x805407c:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805407f:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8054082:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8054084:	subl	$4, %esp [IMM, REG]
.label_1171:
	subl	$4, %esp
	# 0x8054087:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805408a:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805408d:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8054090:	calll	0x80499f0 [IMM <CODEREF>]
	calll	mempcpy
	# 0x8054095:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054098:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805409b:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805409e:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80540a1:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x80540a4:	leave	 []
.label_1169:
	leave	
	# 0x80540a5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80540a6

	# 0x80540a6:	pushl	%ebp [REG]
	.globl match_suffix
	.type match_suffix, @function
match_suffix:
	pushl	%ebp
	# 0x80540a7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80540a9:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x80540ac:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x80540b3:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x80540b7:	jmp	0x8054157 [IMM <CODEREF>]
	jmp	.label_1174
	# 0x80540bc:	cmpb	$0, -0xd(%ebp) [IMM, MEM]
.label_1175:
	cmpb	$0, -0xd(%ebp)
	# 0x80540c0:	je	0x80540f9 [IMM <CODEREF>]
	je	.label_1177
	# 0x80540c2:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x80540c6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80540c9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80540cb:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80540ce:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x80540d1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80540d4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80540d5:	calll	0x8052d97 [IMM <CODEREF>]
	calll	c_isalpha
	# 0x80540da:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80540dd:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x80540e0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80540e2:	je	0x805414a [IMM <CODEREF>]
	je	.label_1173
	# 0x80540e4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80540e7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80540e9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80540ec:	cmpb	$0x7e, %al [IMM, REG]
	cmpb	$0x7e, %al
	# 0x80540ee:	je	0x805414a [IMM <CODEREF>]
	je	.label_1173
	# 0x80540f0:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x80540f7:	jmp	0x805414a [IMM <CODEREF>]
	jmp	.label_1173
	# 0x80540f9:	movl	8(%ebp), %eax [MEM, REG]
.label_1177:
	movl	8(%ebp), %eax
	# 0x80540fc:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80540fe:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054101:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x8054103:	jne	0x8054119 [IMM <CODEREF>]
	jne	.label_1176
	# 0x8054105:	movb	$1, -0xd(%ebp) [IMM, MEM]
	movb	$1, -0xd(%ebp)
	# 0x8054109:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805410d:	jne	0x805414a [IMM <CODEREF>]
	jne	.label_1173
	# 0x805410f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054112:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054114:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054117:	jmp	0x805414a [IMM <CODEREF>]
	jmp	.label_1173
	# 0x8054119:	movl	8(%ebp), %eax [MEM, REG]
.label_1176:
	movl	8(%ebp), %eax
	# 0x805411c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805411e:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054121:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8054124:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054127:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054128:	calll	0x8052d67 [IMM <CODEREF>]
	calll	c_isalnum
	# 0x805412d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054130:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8054133:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054135:	je	0x805414a [IMM <CODEREF>]
	je	.label_1173
	# 0x8054137:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805413a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805413c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805413f:	cmpb	$0x7e, %al [IMM, REG]
	cmpb	$0x7e, %al
	# 0x8054141:	je	0x805414a [IMM <CODEREF>]
	je	.label_1173
	# 0x8054143:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x805414a:	movl	8(%ebp), %eax [MEM, REG]
.label_1173:
	movl	8(%ebp), %eax
	# 0x805414d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805414f:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8054152:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054155:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8054157:	movl	8(%ebp), %eax [MEM, REG]
.label_1174:
	movl	8(%ebp), %eax
	# 0x805415a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805415c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805415f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054161:	jne	0x80540bc [IMM <CODEREF>]
	jne	.label_1175
	# 0x8054167:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805416a:	leave	 []
	leave	
	# 0x805416b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805416c

	# 0x805416c:	pushl	%ebp [REG]
	.globl order
	.type order, @function
order:
	pushl	%ebp
	# 0x805416d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805416f:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054172:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054175:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x8054178:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x805417c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805417f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054180:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054185:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054188:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805418a:	je	0x8054193 [IMM <CODEREF>]
	je	.label_1180
	# 0x805418c:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054191:	jmp	0x80541c3 [IMM <CODEREF>]
	jmp	.label_1179
	# 0x8054193:	movzbl	-0xc(%ebp), %eax [MEM, REG]
.label_1180:
	movzbl	-0xc(%ebp), %eax
	# 0x8054197:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805419a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805419b:	calll	0x8052d97 [IMM <CODEREF>]
	calll	c_isalpha
	# 0x80541a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80541a3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80541a5:	je	0x80541ad [IMM <CODEREF>]
	je	.label_1178
	# 0x80541a7:	movzbl	-0xc(%ebp), %eax [MEM, REG]
	movzbl	-0xc(%ebp), %eax
	# 0x80541ab:	jmp	0x80541c3 [IMM <CODEREF>]
	jmp	.label_1179
	# 0x80541ad:	cmpb	$0x7e, -0xc(%ebp) [IMM, MEM]
.label_1178:
	cmpb	$0x7e, -0xc(%ebp)
	# 0x80541b1:	jne	0x80541ba [IMM <CODEREF>]
	jne	.label_1181
	# 0x80541b3:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x80541b8:	jmp	0x80541c3 [IMM <CODEREF>]
	jmp	.label_1179
	# 0x80541ba:	movzbl	-0xc(%ebp), %eax [MEM, REG]
.label_1181:
	movzbl	-0xc(%ebp), %eax
	# 0x80541be:	addl	$0x100, %eax [IMM, REG]
	addl	$0x100, %eax
	# 0x80541c3:	leave	 []
.label_1179:
	leave	
	# 0x80541c4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80541c5

	# 0x80541c5:	pushl	%ebp [REG]
	.globl verrevcmp
	.type verrevcmp, @function
verrevcmp:
	pushl	%ebp
	# 0x80541c6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80541c8:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80541cb:	movl	$0, -0x1c(%ebp) [IMM, MEM]
	movl	$0, -0x1c(%ebp)
	# 0x80541d2:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x80541d9:	jmp	0x80543a2 [IMM <CODEREF>]
	jmp	.label_1185
	# 0x80541de:	movl	$0, -0x14(%ebp) [IMM, MEM]
.label_1186:
	movl	$0, -0x14(%ebp)
	# 0x80541e5:	jmp	0x805425a [IMM <CODEREF>]
	jmp	.label_1198
	# 0x80541e7:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1187:
	movl	-0x1c(%ebp), %eax
	# 0x80541ea:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x80541ed:	je	0x805420b [IMM <CODEREF>]
	je	.label_1202
	# 0x80541ef:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x80541f2:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x80541f5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80541f7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80541fa:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x80541fd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054200:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054201:	calll	0x805416c [IMM <CODEREF>]
	calll	order
	# 0x8054206:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054209:	jmp	0x8054210 [IMM <CODEREF>]
	jmp	.label_1182
	# 0x805420b:	movl	$0, %eax [IMM, REG]
.label_1202:
	movl	$0, %eax
	# 0x8054210:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_1182:
	movl	%eax, -0x10(%ebp)
	# 0x8054213:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054216:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x8054219:	je	0x8054237 [IMM <CODEREF>]
	je	.label_1200
	# 0x805421b:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x805421e:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054221:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054223:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054226:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8054229:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805422c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805422d:	calll	0x805416c [IMM <CODEREF>]
	calll	order
	# 0x8054232:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054235:	jmp	0x805423c [IMM <CODEREF>]
	jmp	.label_1189
	# 0x8054237:	movl	$0, %eax [IMM, REG]
.label_1200:
	movl	$0, %eax
	# 0x805423c:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_1189:
	movl	%eax, -0xc(%ebp)
	# 0x805423f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054242:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8054245:	je	0x8054252 [IMM <CODEREF>]
	je	.label_1192
	# 0x8054247:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805424a:	subl	-0xc(%ebp), %eax [MEM, REG]
	subl	-0xc(%ebp), %eax
	# 0x805424d:	jmp	0x80543bf [IMM <CODEREF>]
	jmp	.label_1184
	# 0x8054252:	addl	$1, -0x1c(%ebp) [IMM, MEM]
.label_1192:
	addl	$1, -0x1c(%ebp)
	# 0x8054256:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x805425a:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1198:
	movl	-0x1c(%ebp), %eax
	# 0x805425d:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x8054260:	jae	0x8054287 [IMM <CODEREF>]
	jae	.label_1196
	# 0x8054262:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8054265:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8054268:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805426a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805426d:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8054270:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054273:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054274:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054279:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805427c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805427f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054281:	jne	0x80541e7 [IMM <CODEREF>]
	jne	.label_1187
	# 0x8054287:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1196:
	movl	-0x18(%ebp), %eax
	# 0x805428a:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x805428d:	jae	0x80542ba [IMM <CODEREF>]
	jae	.label_1183
	# 0x805428f:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x8054292:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054295:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054297:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805429a:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805429d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80542a0:	pushl	%eax [REG]
	pushl	%eax
	# 0x80542a1:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x80542a6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80542a9:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x80542ac:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80542ae:	jne	0x80541e7 [IMM <CODEREF>]
	jne	.label_1187
	# 0x80542b4:	jmp	0x80542ba [IMM <CODEREF>]
	jmp	.label_1183
	# 0x80542b6:	addl	$1, -0x1c(%ebp) [IMM, MEM]
.label_1197:
	addl	$1, -0x1c(%ebp)
	# 0x80542ba:	movl	8(%ebp), %edx [MEM, REG]
.label_1183:
	movl	8(%ebp), %edx
	# 0x80542bd:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x80542c0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80542c2:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80542c5:	cmpb	$0x30, %al [IMM, REG]
	cmpb	$0x30, %al
	# 0x80542c7:	je	0x80542b6 [IMM <CODEREF>]
	je	.label_1197
	# 0x80542c9:	jmp	0x80542cf [IMM <CODEREF>]
	jmp	.label_1194
	# 0x80542cb:	addl	$1, -0x18(%ebp) [IMM, MEM]
.label_1195:
	addl	$1, -0x18(%ebp)
	# 0x80542cf:	movl	0x10(%ebp), %edx [MEM, REG]
.label_1194:
	movl	0x10(%ebp), %edx
	# 0x80542d2:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80542d5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80542d7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80542da:	cmpb	$0x30, %al [IMM, REG]
	cmpb	$0x30, %al
	# 0x80542dc:	je	0x80542cb [IMM <CODEREF>]
	je	.label_1195
	# 0x80542de:	jmp	0x8054311 [IMM <CODEREF>]
	jmp	.label_1190
	# 0x80542e0:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
.label_1193:
	cmpl	$0, -0x14(%ebp)
	# 0x80542e4:	jne	0x8054309 [IMM <CODEREF>]
	jne	.label_1199
	# 0x80542e6:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x80542e9:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x80542ec:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80542ee:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80542f1:	movsbl	%al, %edx [REG, REG]
	movsbl	%al, %edx
	# 0x80542f4:	movl	0x10(%ebp), %ecx [MEM, REG]
	movl	0x10(%ebp), %ecx
	# 0x80542f7:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80542fa:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80542fc:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80542ff:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8054302:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8054304:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054306:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8054309:	addl	$1, -0x1c(%ebp) [IMM, MEM]
.label_1199:
	addl	$1, -0x1c(%ebp)
	# 0x805430d:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x8054311:	movl	8(%ebp), %edx [MEM, REG]
.label_1190:
	movl	8(%ebp), %edx
	# 0x8054314:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8054317:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054319:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805431c:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805431f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054322:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054323:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054328:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805432b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805432d:	je	0x805434d [IMM <CODEREF>]
	je	.label_1188
	# 0x805432f:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x8054332:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054335:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054337:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805433a:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805433d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054340:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054341:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054346:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054349:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805434b:	jne	0x80542e0 [IMM <CODEREF>]
	jne	.label_1193
	# 0x805434d:	movl	8(%ebp), %edx [MEM, REG]
.label_1188:
	movl	8(%ebp), %edx
	# 0x8054350:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8054353:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054355:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054358:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805435b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805435e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805435f:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054364:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054367:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054369:	je	0x8054372 [IMM <CODEREF>]
	je	.label_1201
	# 0x805436b:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8054370:	jmp	0x80543bf [IMM <CODEREF>]
	jmp	.label_1184
	# 0x8054372:	movl	0x10(%ebp), %edx [MEM, REG]
.label_1201:
	movl	0x10(%ebp), %edx
	# 0x8054375:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8054378:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805437a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805437d:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8054380:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054383:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054384:	calll	0x8052e1b [IMM <CODEREF>]
	calll	c_isdigit
	# 0x8054389:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805438c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805438e:	je	0x8054397 [IMM <CODEREF>]
	je	.label_1191
	# 0x8054390:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8054395:	jmp	0x80543bf [IMM <CODEREF>]
	jmp	.label_1184
	# 0x8054397:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
.label_1191:
	cmpl	$0, -0x14(%ebp)
	# 0x805439b:	je	0x80543a2 [IMM <CODEREF>]
	je	.label_1185
	# 0x805439d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80543a0:	jmp	0x80543bf [IMM <CODEREF>]
	jmp	.label_1184
	# 0x80543a2:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1185:
	movl	-0x1c(%ebp), %eax
	# 0x80543a5:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x80543a8:	jb	0x80541de [IMM <CODEREF>]
	jb	.label_1186
	# 0x80543ae:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80543b1:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x80543b4:	jb	0x80541de [IMM <CODEREF>]
	jb	.label_1186
	# 0x80543ba:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80543bf:	leave	 []
.label_1184:
	leave	
	# 0x80543c0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80543c1

	# 0x80543c1:	pushl	%ebp [REG]
	.globl filevercmp
	.type filevercmp, @function
filevercmp:
	pushl	%ebp
	# 0x80543c2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80543c4:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x80543c7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80543ca:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x80543cd:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80543d0:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x80543d3:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x80543d9:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80543dc:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x80543de:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80543e1:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x80543e4:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x80543e7:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x80543ec:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80543ef:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80543f2:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x80543f6:	jne	0x8054402 [IMM <CODEREF>]
	jne	.label_1206
	# 0x80543f8:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80543fd:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x8054402:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1206:
	movl	-0x3c(%ebp), %eax
	# 0x8054405:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054408:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805440a:	jne	0x8054416 [IMM <CODEREF>]
	jne	.label_1203
	# 0x805440c:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8054411:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x8054416:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_1203:
	movl	-0x40(%ebp), %eax
	# 0x8054419:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805441c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805441e:	jne	0x805442a [IMM <CODEREF>]
	jne	.label_1209
	# 0x8054420:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8054425:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x805442a:	subl	$8, %esp [IMM, REG]
.label_1209:
	subl	$8, %esp
	# 0x805442d:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x8054430:	pushl	$0x80633f8 [IMM <DATAREF>]
	pushl	$label_1211
	# 0x8054435:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805443a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805443d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805443f:	jne	0x805444b [IMM <CODEREF>]
	jne	.label_1214
	# 0x8054441:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8054446:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x805444b:	subl	$8, %esp [IMM, REG]
.label_1214:
	subl	$8, %esp
	# 0x805444e:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x8054451:	pushl	$0x80633f8 [IMM <DATAREF>]
	pushl	$label_1211
	# 0x8054456:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805445b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805445e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054460:	jne	0x805446c [IMM <CODEREF>]
	jne	.label_1220
	# 0x8054462:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8054467:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x805446c:	subl	$8, %esp [IMM, REG]
.label_1220:
	subl	$8, %esp
	# 0x805446f:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x8054472:	pushl	$0x80633fa [IMM <DATAREF>]
	pushl	$label_1207
	# 0x8054477:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805447c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805447f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054481:	jne	0x805448d [IMM <CODEREF>]
	jne	.label_1223
	# 0x8054483:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8054488:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x805448d:	subl	$8, %esp [IMM, REG]
.label_1223:
	subl	$8, %esp
	# 0x8054490:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x8054493:	pushl	$0x80633fa [IMM <DATAREF>]
	pushl	$label_1207
	# 0x8054498:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805449d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80544a0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80544a2:	jne	0x80544ae [IMM <CODEREF>]
	jne	.label_1210
	# 0x80544a4:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80544a9:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x80544ae:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1210:
	movl	-0x3c(%ebp), %eax
	# 0x80544b1:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544b4:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544b6:	jne	0x80544cc [IMM <CODEREF>]
	jne	.label_1212
	# 0x80544b8:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80544bb:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544be:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544c0:	je	0x80544cc [IMM <CODEREF>]
	je	.label_1212
	# 0x80544c2:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x80544c7:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x80544cc:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1212:
	movl	-0x3c(%ebp), %eax
	# 0x80544cf:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544d2:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544d4:	je	0x80544ea [IMM <CODEREF>]
	je	.label_1218
	# 0x80544d6:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80544d9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544dc:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544de:	jne	0x80544ea [IMM <CODEREF>]
	jne	.label_1218
	# 0x80544e0:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80544e5:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x80544ea:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1218:
	movl	-0x3c(%ebp), %eax
	# 0x80544ed:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544f0:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544f2:	jne	0x8054506 [IMM <CODEREF>]
	jne	.label_1222
	# 0x80544f4:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80544f7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80544fa:	cmpb	$0x2e, %al [IMM, REG]
	cmpb	$0x2e, %al
	# 0x80544fc:	jne	0x8054506 [IMM <CODEREF>]
	jne	.label_1222
	# 0x80544fe:	addl	$1, -0x3c(%ebp) [IMM, MEM]
	addl	$1, -0x3c(%ebp)
	# 0x8054502:	addl	$1, -0x40(%ebp) [IMM, MEM]
	addl	$1, -0x40(%ebp)
	# 0x8054506:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1222:
	movl	-0x3c(%ebp), %eax
	# 0x8054509:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805450c:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x805450f:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8054512:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054515:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x8054518:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054519:	calll	0x80540a6 [IMM <CODEREF>]
	calll	match_suffix
	# 0x805451e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054521:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8054524:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054527:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805452a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805452b:	calll	0x80540a6 [IMM <CODEREF>]
	calll	match_suffix
	# 0x8054530:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054533:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8054536:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x805453a:	je	0x8054541 [IMM <CODEREF>]
	je	.label_1213
	# 0x805453c:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805453f:	jmp	0x8054544 [IMM <CODEREF>]
	jmp	.label_1215
	# 0x8054541:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1213:
	movl	-0x2c(%ebp), %eax
	# 0x8054544:	movl	%eax, %edx [REG, REG]
.label_1215:
	movl	%eax, %edx
	# 0x8054546:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x8054549:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805454b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805454d:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8054550:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x8054554:	je	0x805455b [IMM <CODEREF>]
	je	.label_1216
	# 0x8054556:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054559:	jmp	0x805455e [IMM <CODEREF>]
	jmp	.label_1205
	# 0x805455b:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1216:
	movl	-0x28(%ebp), %eax
	# 0x805455e:	movl	%eax, %edx [REG, REG]
.label_1205:
	movl	%eax, %edx
	# 0x8054560:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8054563:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8054565:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054567:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805456a:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x805456e:	jne	0x8054576 [IMM <CODEREF>]
	jne	.label_1221
	# 0x8054570:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x8054574:	je	0x80545b4 [IMM <CODEREF>]
	je	.label_1208
	# 0x8054576:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_1221:
	movl	-0x24(%ebp), %eax
	# 0x8054579:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x805457c:	jne	0x80545b4 [IMM <CODEREF>]
	jne	.label_1208
	# 0x805457e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8054581:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x8054584:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x8054587:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x805458a:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x805458f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054592:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054594:	jne	0x80545b4 [IMM <CODEREF>]
	jne	.label_1208
	# 0x8054596:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8054599:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805459b:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805459e:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80545a0:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80545a2:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x80545a5:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x80545a8:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80545aa:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80545ad:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80545af:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80545b1:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x80545b4:	pushl	-0x20(%ebp) [MEM]
.label_1208:
	pushl	-0x20(%ebp)
	# 0x80545b7:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x80545ba:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x80545bd:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x80545c0:	calll	0x80541c5 [IMM <CODEREF>]
	calll	verrevcmp
	# 0x80545c5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80545c8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80545cb:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x80545cf:	jne	0x80545d6 [IMM <CODEREF>]
	jne	.label_1217
	# 0x80545d1:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x80545d4:	jmp	0x80545da [IMM <CODEREF>]
	jmp	.label_1204
	# 0x80545d6:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1217:
	movl	-0x10(%ebp), %eax
	# 0x80545d9:	nop	 []
	nop	
	# 0x80545da:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1204:
	movl	-0xc(%ebp), %ecx
	# 0x80545dd:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x80545e4:	je	0x80545eb [IMM <CODEREF>]
	je	.label_1219
	# 0x80545e6:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x80545eb:	leave	 []
.label_1219:
	leave	
	# 0x80545ec:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80545ed

	# 0x80545ed:	pushl	%ebp [REG]
	.globl gettime
	.type gettime, @function
gettime:
	pushl	%ebp
	# 0x80545ee:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80545f0:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80545f3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80545f6:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80545f9:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x80545ff:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054602:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8054604:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054607:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805460a:	pushl	$0 [IMM]
	pushl	$0
	# 0x805460c:	calll	0x8049640 [IMM <CODEREF>]
	calll	clock_gettime
	# 0x8054611:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054614:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054616:	je	0x8054642 [IMM <CODEREF>]
	je	.label_1224
	# 0x8054618:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805461b:	pushl	$0 [IMM]
	pushl	$0
	# 0x805461d:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x8054620:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054621:	calll	0x80496a0 [IMM <CODEREF>]
	calll	gettimeofday
	# 0x8054626:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054629:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805462c:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805462f:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8054631:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054634:	imull	$0x3e8, %eax, %edx [IMM, REG, REG]
	imull	$0x3e8, %eax, %edx
	# 0x805463a:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805463d:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8054640:	jmp	0x8054643 [IMM <CODEREF>]
	jmp	.label_1226
	# 0x8054642:	nop	 []
.label_1224:
	nop	
	# 0x8054643:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1226:
	movl	-0xc(%ebp), %eax
	# 0x8054646:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x805464d:	je	0x8054654 [IMM <CODEREF>]
	je	.label_1225
	# 0x805464f:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8054654:	leave	 []
.label_1225:
	leave	
	# 0x8054655:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054656

	# 0x8054656:	pushl	%ebp [REG]
	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	pushl	%ebp
	# 0x8054657:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054659:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805465c:	movb	$1, -0xd(%ebp) [IMM, MEM]
	movb	$1, -0xd(%ebp)
	# 0x8054660:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054663:	pushl	$0 [IMM]
	pushl	$0
	# 0x8054665:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8054668:	calll	0x8049a30 [IMM <CODEREF>]
	calll	setlocale
	# 0x805466d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054670:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054673:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8054677:	je	0x80546ab [IMM <CODEREF>]
	je	.label_1228
	# 0x8054679:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805467c:	pushl	$0x80633fd [IMM <DATAREF>]
	pushl	$label_1230
	# 0x8054681:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8054684:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8054689:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805468c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805468e:	je	0x80546a7 [IMM <CODEREF>]
	je	.label_1229
	# 0x8054690:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054693:	pushl	$0x80633ff [IMM <DATAREF>]
	pushl	$label_1227
	# 0x8054698:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805469b:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x80546a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80546a3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80546a5:	jne	0x80546ab [IMM <CODEREF>]
	jne	.label_1228
	# 0x80546a7:	movb	$0, -0xd(%ebp) [IMM, MEM]
.label_1229:
	movb	$0, -0xd(%ebp)
	# 0x80546ab:	movzbl	-0xd(%ebp), %eax [MEM, REG]
.label_1228:
	movzbl	-0xd(%ebp), %eax
	# 0x80546af:	leave	 []
	leave	
	# 0x80546b0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80546b1

	# 0x80546b1:	pushl	%ebp [REG]
	.globl hash_get_n_buckets
	.type hash_get_n_buckets, @function
hash_get_n_buckets:
	pushl	%ebp
	# 0x80546b2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80546b4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80546b7:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80546ba:	popl	%ebp [REG]
	popl	%ebp
	# 0x80546bb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80546bc

	# 0x80546bc:	pushl	%ebp [REG]
	.globl hash_get_n_buckets_used
	.type hash_get_n_buckets_used, @function
hash_get_n_buckets_used:
	pushl	%ebp
	# 0x80546bd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80546bf:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80546c2:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80546c5:	popl	%ebp [REG]
	popl	%ebp
	# 0x80546c6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80546c7

	# 0x80546c7:	pushl	%ebp [REG]
	.globl hash_get_n_entries
	.type hash_get_n_entries, @function
hash_get_n_entries:
	pushl	%ebp
	# 0x80546c8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80546ca:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80546cd:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x80546d0:	popl	%ebp [REG]
	popl	%ebp
	# 0x80546d1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80546d2

	# 0x80546d2:	pushl	%ebp [REG]
	.globl hash_get_max_bucket_length
	.type hash_get_max_bucket_length, @function
hash_get_max_bucket_length:
	pushl	%ebp
	# 0x80546d3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80546d5:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x80546d8:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x80546df:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80546e2:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80546e4:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80546e7:	jmp	0x8054726 [IMM <CODEREF>]
	jmp	.label_1231
	# 0x80546e9:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1234:
	movl	-0x10(%ebp), %eax
	# 0x80546ec:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80546ee:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80546f0:	je	0x8054722 [IMM <CODEREF>]
	je	.label_1232
	# 0x80546f2:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x80546f5:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x80546f8:	movl	$1, -4(%ebp) [IMM, MEM]
	movl	$1, -4(%ebp)
	# 0x80546ff:	jmp	0x8054705 [IMM <CODEREF>]
	jmp	.label_1235
	# 0x8054701:	addl	$1, -4(%ebp) [IMM, MEM]
.label_1233:
	addl	$1, -4(%ebp)
	# 0x8054705:	movl	-8(%ebp), %eax [MEM, REG]
.label_1235:
	movl	-8(%ebp), %eax
	# 0x8054708:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805470b:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805470e:	cmpl	$0, -8(%ebp) [IMM, MEM]
	cmpl	$0, -8(%ebp)
	# 0x8054712:	jne	0x8054701 [IMM <CODEREF>]
	jne	.label_1233
	# 0x8054714:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8054717:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x805471a:	jbe	0x8054722 [IMM <CODEREF>]
	jbe	.label_1232
	# 0x805471c:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805471f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054722:	addl	$8, -0x10(%ebp) [IMM, MEM]
.label_1232:
	addl	$8, -0x10(%ebp)
	# 0x8054726:	movl	8(%ebp), %eax [MEM, REG]
.label_1231:
	movl	8(%ebp), %eax
	# 0x8054729:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805472c:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805472f:	ja	0x80546e9 [IMM <CODEREF>]
	ja	.label_1234
	# 0x8054731:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054734:	leave	 []
	leave	
	# 0x8054735:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054736
	.globl hash_table_ok
	.type hash_table_ok, @function
hash_table_ok:

	# 0x8054736:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054737:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054739:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805473c:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8054743:	movl	$0, -8(%ebp) [IMM, MEM]
	movl	$0, -8(%ebp)
	# 0x805474a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805474d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805474f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054752:	jmp	0x8054784 [IMM <CODEREF>]
	jmp	.label_1241
	# 0x8054754:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1236:
	movl	-0x10(%ebp), %eax
	# 0x8054757:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054759:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805475b:	je	0x8054780 [IMM <CODEREF>]
	je	.label_1240
	# 0x805475d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054760:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x8054763:	addl	$1, -0xc(%ebp) [IMM, MEM]
	addl	$1, -0xc(%ebp)
	# 0x8054767:	addl	$1, -8(%ebp) [IMM, MEM]
	addl	$1, -8(%ebp)
	# 0x805476b:	jmp	0x8054771 [IMM <CODEREF>]
	jmp	.label_1242
	# 0x805476d:	addl	$1, -8(%ebp) [IMM, MEM]
.label_1238:
	addl	$1, -8(%ebp)
	# 0x8054771:	movl	-4(%ebp), %eax [MEM, REG]
.label_1242:
	movl	-4(%ebp), %eax
	# 0x8054774:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054777:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805477a:	cmpl	$0, -4(%ebp) [IMM, MEM]
	cmpl	$0, -4(%ebp)
	# 0x805477e:	jne	0x805476d [IMM <CODEREF>]
	jne	.label_1238
	# 0x8054780:	addl	$8, -0x10(%ebp) [IMM, MEM]
.label_1240:
	addl	$8, -0x10(%ebp)
	# 0x8054784:	movl	8(%ebp), %eax [MEM, REG]
.label_1241:
	movl	8(%ebp), %eax
	# 0x8054787:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805478a:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805478d:	ja	0x8054754 [IMM <CODEREF>]
	ja	.label_1236
	# 0x805478f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054792:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8054795:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8054798:	jne	0x80547ac [IMM <CODEREF>]
	jne	.label_1239
	# 0x805479a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805479d:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x80547a0:	cmpl	-8(%ebp), %eax [MEM, REG]
	cmpl	-8(%ebp), %eax
	# 0x80547a3:	jne	0x80547ac [IMM <CODEREF>]
	jne	.label_1239
	# 0x80547a5:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80547aa:	jmp	0x80547b1 [IMM <CODEREF>]
	jmp	.label_1237
	# 0x80547ac:	movl	$0, %eax [IMM, REG]
.label_1239:
	movl	$0, %eax
	# 0x80547b1:	leave	 []
.label_1237:
	leave	
	# 0x80547b2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80547b3
	.globl hash_print_statistics
	.type hash_print_statistics, @function
hash_print_statistics:

	# 0x80547b3:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x80547b4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80547b6:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80547b9:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80547bc:	calll	0x80546c7 [IMM <CODEREF>]
	calll	hash_get_n_entries
	# 0x80547c1:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x80547c4:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80547c7:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80547ca:	calll	0x80546b1 [IMM <CODEREF>]
	calll	hash_get_n_buckets
	# 0x80547cf:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x80547d2:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x80547d5:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80547d8:	calll	0x80546bc [IMM <CODEREF>]
	calll	hash_get_n_buckets_used
	# 0x80547dd:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x80547e0:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80547e3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80547e6:	calll	0x80546d2 [IMM <CODEREF>]
	calll	hash_get_max_bucket_length
	# 0x80547eb:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x80547ee:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80547f1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80547f4:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x80547f7:	pushl	$0x806341c [IMM <DATAREF>]
	pushl	$label_1247
	# 0x80547fc:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80547ff:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x8054804:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054807:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805480a:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805480d:	pushl	$0x8063434 [IMM <DATAREF>]
	pushl	$label_1244
	# 0x8054812:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8054815:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805481a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805481d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054820:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054825:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8054828:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805482b:	fildll	-0x28(%ebp) [MEM]
	fildll	-0x28(%ebp)
	# 0x805482e:	fstpl	-0x20(%ebp) [MEM]
	fstpl	-0x20(%ebp)
	# 0x8054831:	fldl	-0x20(%ebp) [MEM]
	fldl	-0x20(%ebp)
	# 0x8054834:	fldl	0x8063488 [MEM]
	fldl	label_1245
	# 0x805483a:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x805483c:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805483f:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054844:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8054847:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805484a:	fildll	-0x28(%ebp) [MEM]
	fildll	-0x28(%ebp)
	# 0x805484d:	fstpl	-0x20(%ebp) [MEM]
	fstpl	-0x20(%ebp)
	# 0x8054850:	fldl	-0x20(%ebp) [MEM]
	fldl	-0x20(%ebp)
	# 0x8054853:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x8054855:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054858:	leal	-8(%esp), %esp [MEM, REG]
	leal	-8(%esp), %esp
	# 0x805485c:	fstpl	0(%esp) [MEM]
	fstpl	0(%esp)
	# 0x805485f:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8054862:	pushl	$0x806344c [IMM <DATAREF>]
	pushl	$label_1246
	# 0x8054867:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805486a:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805486f:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8054872:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8054875:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8054878:	pushl	$0x806346d [IMM <DATAREF>]
	pushl	$label_1243
	# 0x805487d:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8054880:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x8054885:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054888:	nop	 []
	nop	
	# 0x8054889:	leave	 []
	leave	
	# 0x805488a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805488b

	# 0x805488b:	pushl	%ebp [REG]
	.globl safe_hasher
	.type safe_hasher, @function
safe_hasher:
	pushl	%ebp
	# 0x805488c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805488e:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054891:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054894:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x8054897:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805489a:	movl	8(%edx), %edx [MEM, REG]
	movl	8(%edx), %edx
	# 0x805489d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80548a0:	pushl	%edx [REG]
	pushl	%edx
	# 0x80548a1:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80548a4:	calll	*%eax [REG]
	calll	*%eax
	# 0x80548a6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80548a9:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80548ac:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80548af:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80548b2:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x80548b5:	ja	0x80548bc [IMM <CODEREF>]
	ja	.label_1248
	# 0x80548b7:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x80548bc:	movl	8(%ebp), %eax [MEM, REG]
.label_1248:
	movl	8(%ebp), %eax
	# 0x80548bf:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80548c1:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x80548c4:	shll	$3, %edx [IMM, REG]
	shll	$3, %edx
	# 0x80548c7:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80548c9:	leave	 []
	leave	
	# 0x80548ca:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80548cb

	# 0x80548cb:	pushl	%ebp [REG]
	.globl hash_lookup
	.type hash_lookup, @function
hash_lookup:
	pushl	%ebp
	# 0x80548cc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80548ce:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x80548d1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80548d4:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80548d7:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80548da:	calll	0x805488b [IMM <CODEREF>]
	calll	safe_hasher
	# 0x80548df:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80548e2:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80548e5:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80548e8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80548ea:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80548ec:	jne	0x80548f5 [IMM <CODEREF>]
	jne	.label_1254
	# 0x80548ee:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80548f3:	jmp	0x805493d [IMM <CODEREF>]
	jmp	.label_1249
	# 0x80548f5:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1254:
	movl	-0xc(%ebp), %eax
	# 0x80548f8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80548fb:	jmp	0x8054932 [IMM <CODEREF>]
	jmp	.label_1251
	# 0x80548fd:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1250:
	movl	-0x10(%ebp), %eax
	# 0x8054900:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054902:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x8054905:	je	0x8054922 [IMM <CODEREF>]
	je	.label_1253
	# 0x8054907:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805490a:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x805490d:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8054910:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x8054912:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054915:	pushl	%edx [REG]
	pushl	%edx
	# 0x8054916:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8054919:	calll	*%eax [REG]
	calll	*%eax
	# 0x805491b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805491e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054920:	je	0x8054929 [IMM <CODEREF>]
	je	.label_1252
	# 0x8054922:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1253:
	movl	-0x10(%ebp), %eax
	# 0x8054925:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054927:	jmp	0x805493d [IMM <CODEREF>]
	jmp	.label_1249
	# 0x8054929:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1252:
	movl	-0x10(%ebp), %eax
	# 0x805492c:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805492f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054932:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1251:
	cmpl	$0, -0x10(%ebp)
	# 0x8054936:	jne	0x80548fd [IMM <CODEREF>]
	jne	.label_1250
	# 0x8054938:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805493d:	leave	 []
.label_1249:
	leave	
	# 0x805493e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805493f
	.globl hash_get_first
	.type hash_get_first, @function
hash_get_first:

	# 0x805493f:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054940:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054942:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054945:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054948:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x805494b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805494d:	jne	0x8054956 [IMM <CODEREF>]
	jne	.label_1257
	# 0x805494f:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054954:	jmp	0x8054984 [IMM <CODEREF>]
	jmp	.label_1256
	# 0x8054956:	movl	8(%ebp), %eax [MEM, REG]
.label_1257:
	movl	8(%ebp), %eax
	# 0x8054959:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805495b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805495e:	movl	8(%ebp), %eax [MEM, REG]
.label_1258:
	movl	8(%ebp), %eax
	# 0x8054961:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054964:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8054967:	ja	0x805496e [IMM <CODEREF>]
	ja	.label_1259
	# 0x8054969:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x805496e:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1259:
	movl	-0xc(%ebp), %eax
	# 0x8054971:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054973:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054975:	je	0x805497e [IMM <CODEREF>]
	je	.label_1255
	# 0x8054977:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805497a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805497c:	jmp	0x8054984 [IMM <CODEREF>]
	jmp	.label_1256
	# 0x805497e:	addl	$8, -0xc(%ebp) [IMM, MEM]
.label_1255:
	addl	$8, -0xc(%ebp)
	# 0x8054982:	jmp	0x805495e [IMM <CODEREF>]
	jmp	.label_1258
	# 0x8054984:	leave	 []
.label_1256:
	leave	
	# 0x8054985:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054986
	.globl hash_get_next
	.type hash_get_next, @function
hash_get_next:

	# 0x8054986:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054987:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054989:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805498c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805498f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8054992:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8054995:	calll	0x805488b [IMM <CODEREF>]
	calll	safe_hasher
	# 0x805499a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805499d:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80549a0:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x80549a3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80549a6:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1260:
	movl	-0xc(%ebp), %eax
	# 0x80549a9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80549ab:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x80549ae:	jne	0x80549c4 [IMM <CODEREF>]
	jne	.label_1261
	# 0x80549b0:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80549b3:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80549b6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80549b8:	je	0x80549c4 [IMM <CODEREF>]
	je	.label_1261
	# 0x80549ba:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80549bd:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80549c0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80549c2:	jmp	0x80549f9 [IMM <CODEREF>]
	jmp	.label_1263
	# 0x80549c4:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1261:
	movl	-0xc(%ebp), %eax
	# 0x80549c7:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80549ca:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80549cd:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x80549d1:	jne	0x80549a6 [IMM <CODEREF>]
	jne	.label_1260
	# 0x80549d3:	jmp	0x80549e5 [IMM <CODEREF>]
	jmp	.label_1262
	# 0x80549d5:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1264:
	movl	-0x10(%ebp), %eax
	# 0x80549d8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80549da:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80549dc:	je	0x80549e5 [IMM <CODEREF>]
	je	.label_1262
	# 0x80549de:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x80549e1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80549e3:	jmp	0x80549f9 [IMM <CODEREF>]
	jmp	.label_1263
	# 0x80549e5:	addl	$8, -0x10(%ebp) [IMM, MEM]
.label_1262:
	addl	$8, -0x10(%ebp)
	# 0x80549e9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80549ec:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80549ef:	cmpl	%eax, -0x10(%ebp) [REG, MEM]
	cmpl	%eax, -0x10(%ebp)
	# 0x80549f2:	jb	0x80549d5 [IMM <CODEREF>]
	jb	.label_1264
	# 0x80549f4:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80549f9:	leave	 []
.label_1263:
	leave	
	# 0x80549fa:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80549fb
	.globl hash_get_entries
	.type hash_get_entries, @function
hash_get_entries:

	# 0x80549fb:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x80549fc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80549fe:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8054a01:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x8054a08:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054a0b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a0d:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x8054a10:	jmp	0x8054a5f [IMM <CODEREF>]
	jmp	.label_1270
	# 0x8054a12:	movl	-8(%ebp), %eax [MEM, REG]
.label_1271:
	movl	-8(%ebp), %eax
	# 0x8054a15:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a17:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054a19:	je	0x8054a5b [IMM <CODEREF>]
	je	.label_1266
	# 0x8054a1b:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054a1e:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x8054a21:	jmp	0x8054a55 [IMM <CODEREF>]
	jmp	.label_1267
	# 0x8054a23:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1268:
	movl	-0xc(%ebp), %eax
	# 0x8054a26:	cmpl	0x10(%ebp), %eax [MEM, REG]
	cmpl	0x10(%ebp), %eax
	# 0x8054a29:	jb	0x8054a30 [IMM <CODEREF>]
	jb	.label_1265
	# 0x8054a2b:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054a2e:	jmp	0x8054a6d [IMM <CODEREF>]
	jmp	.label_1269
	# 0x8054a30:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1265:
	movl	-0xc(%ebp), %eax
	# 0x8054a33:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8054a36:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x8054a39:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8054a40:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8054a43:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8054a45:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8054a48:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a4a:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x8054a4c:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8054a4f:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054a52:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x8054a55:	cmpl	$0, -4(%ebp) [IMM, MEM]
.label_1267:
	cmpl	$0, -4(%ebp)
	# 0x8054a59:	jne	0x8054a23 [IMM <CODEREF>]
	jne	.label_1268
	# 0x8054a5b:	addl	$8, -8(%ebp) [IMM, MEM]
.label_1266:
	addl	$8, -8(%ebp)
	# 0x8054a5f:	movl	8(%ebp), %eax [MEM, REG]
.label_1270:
	movl	8(%ebp), %eax
	# 0x8054a62:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054a65:	cmpl	-8(%ebp), %eax [MEM, REG]
	cmpl	-8(%ebp), %eax
	# 0x8054a68:	ja	0x8054a12 [IMM <CODEREF>]
	ja	.label_1271
	# 0x8054a6a:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054a6d:	leave	 []
.label_1269:
	leave	
	# 0x8054a6e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054a6f
	.globl hash_do_for_each
	.type hash_do_for_each, @function
hash_do_for_each:

	# 0x8054a6f:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054a70:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054a72:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054a75:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8054a7c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054a7f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a81:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054a84:	jmp	0x8054ace [IMM <CODEREF>]
	jmp	.label_1278
	# 0x8054a86:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1275:
	movl	-0x10(%ebp), %eax
	# 0x8054a89:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a8b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054a8d:	je	0x8054aca [IMM <CODEREF>]
	je	.label_1273
	# 0x8054a8f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054a92:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054a95:	jmp	0x8054ac4 [IMM <CODEREF>]
	jmp	.label_1276
	# 0x8054a97:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1272:
	movl	-0xc(%ebp), %eax
	# 0x8054a9a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054a9c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054a9f:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8054aa2:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054aa3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8054aa6:	calll	*%eax [REG]
	calll	*%eax
	# 0x8054aa8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054aab:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8054aae:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054ab0:	je	0x8054ab7 [IMM <CODEREF>]
	je	.label_1274
	# 0x8054ab2:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054ab5:	jmp	0x8054adc [IMM <CODEREF>]
	jmp	.label_1277
	# 0x8054ab7:	addl	$1, -0x14(%ebp) [IMM, MEM]
.label_1274:
	addl	$1, -0x14(%ebp)
	# 0x8054abb:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054abe:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054ac1:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054ac4:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
.label_1276:
	cmpl	$0, -0xc(%ebp)
	# 0x8054ac8:	jne	0x8054a97 [IMM <CODEREF>]
	jne	.label_1272
	# 0x8054aca:	addl	$8, -0x10(%ebp) [IMM, MEM]
.label_1273:
	addl	$8, -0x10(%ebp)
	# 0x8054ace:	movl	8(%ebp), %eax [MEM, REG]
.label_1278:
	movl	8(%ebp), %eax
	# 0x8054ad1:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054ad4:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8054ad7:	ja	0x8054a86 [IMM <CODEREF>]
	ja	.label_1275
	# 0x8054ad9:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054adc:	leave	 []
.label_1277:
	leave	
	# 0x8054add:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054ade
	.globl hash_string
	.type hash_string, @function
hash_string:

	# 0x8054ade:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054adf:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054ae1:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8054ae4:	movl	$0, -4(%ebp) [IMM, MEM]
	movl	$0, -4(%ebp)
	# 0x8054aeb:	jmp	0x8054b0e [IMM <CODEREF>]
	jmp	.label_1280
	# 0x8054aed:	movl	-4(%ebp), %edx [MEM, REG]
.label_1279:
	movl	-4(%ebp), %edx
	# 0x8054af0:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054af2:	shll	$5, %eax [IMM, REG]
	shll	$5, %eax
	# 0x8054af5:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8054af7:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8054af9:	movzbl	-5(%ebp), %eax [MEM, REG]
	movzbl	-5(%ebp), %eax
	# 0x8054afd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8054aff:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054b04:	divl	0xc(%ebp) [MEM]
	divl	0xc(%ebp)
	# 0x8054b07:	movl	%edx, -4(%ebp) [REG, MEM]
	movl	%edx, -4(%ebp)
	# 0x8054b0a:	addl	$1, 8(%ebp) [IMM, MEM]
	addl	$1, 8(%ebp)
	# 0x8054b0e:	movl	8(%ebp), %eax [MEM, REG]
.label_1280:
	movl	8(%ebp), %eax
	# 0x8054b11:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8054b14:	movb	%al, -5(%ebp) [REG, MEM]
	movb	%al, -5(%ebp)
	# 0x8054b17:	cmpb	$0, -5(%ebp) [IMM, MEM]
	cmpb	$0, -5(%ebp)
	# 0x8054b1b:	jne	0x8054aed [IMM <CODEREF>]
	jne	.label_1279
	# 0x8054b1d:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8054b20:	leave	 []
	leave	
	# 0x8054b21:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054b22

	# 0x8054b22:	pushl	%ebp [REG]
	.globl is_prime
	.type is_prime, @function
is_prime:
	pushl	%ebp
	# 0x8054b23:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054b25:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8054b28:	movl	$3, -8(%ebp) [IMM, MEM]
	movl	$3, -8(%ebp)
	# 0x8054b2f:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054b32:	imull	-8(%ebp), %eax [MEM, REG]
	imull	-8(%ebp), %eax
	# 0x8054b36:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x8054b39:	jmp	0x8054b4c [IMM <CODEREF>]
	jmp	.label_1282
	# 0x8054b3b:	addl	$1, -8(%ebp) [IMM, MEM]
.label_1281:
	addl	$1, -8(%ebp)
	# 0x8054b3f:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054b42:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8054b45:	addl	%eax, -4(%ebp) [REG, MEM]
	addl	%eax, -4(%ebp)
	# 0x8054b48:	addl	$1, -8(%ebp) [IMM, MEM]
	addl	$1, -8(%ebp)
	# 0x8054b4c:	movl	-4(%ebp), %eax [MEM, REG]
.label_1282:
	movl	-4(%ebp), %eax
	# 0x8054b4f:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x8054b52:	jae	0x8054b65 [IMM <CODEREF>]
	jae	.label_1283
	# 0x8054b54:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054b57:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054b5c:	divl	-8(%ebp) [MEM]
	divl	-8(%ebp)
	# 0x8054b5f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054b61:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054b63:	jne	0x8054b3b [IMM <CODEREF>]
	jne	.label_1281
	# 0x8054b65:	movl	8(%ebp), %eax [MEM, REG]
.label_1283:
	movl	8(%ebp), %eax
	# 0x8054b68:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054b6d:	divl	-8(%ebp) [MEM]
	divl	-8(%ebp)
	# 0x8054b70:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054b72:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054b74:	setne	%al [REG]
	setne	%al
	# 0x8054b77:	leave	 []
	leave	
	# 0x8054b78:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054b79

	# 0x8054b79:	pushl	%ebp [REG]
	.globl next_prime
	.type next_prime, @function
next_prime:
	pushl	%ebp
	# 0x8054b7a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054b7c:	cmpl	$9, 8(%ebp) [IMM, MEM]
	cmpl	$9, 8(%ebp)
	# 0x8054b80:	ja	0x8054b89 [IMM <CODEREF>]
	ja	.label_1287
	# 0x8054b82:	movl	$0xa, 8(%ebp) [IMM, MEM]
	movl	$0xa, 8(%ebp)
	# 0x8054b89:	orl	$1, 8(%ebp) [IMM, MEM]
.label_1287:
	orl	$1, 8(%ebp)
	# 0x8054b8d:	jmp	0x8054b93 [IMM <CODEREF>]
	jmp	.label_1284
	# 0x8054b8f:	addl	$2, 8(%ebp) [IMM, MEM]
.label_1285:
	addl	$2, 8(%ebp)
	# 0x8054b93:	cmpl	$-1, 8(%ebp) [IMM, MEM]
.label_1284:
	cmpl	$-1, 8(%ebp)
	# 0x8054b97:	je	0x8054bab [IMM <CODEREF>]
	je	.label_1286
	# 0x8054b99:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8054b9c:	calll	0x8054b22 [IMM <CODEREF>]
	calll	is_prime
	# 0x8054ba1:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x8054ba4:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8054ba7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054ba9:	jne	0x8054b8f [IMM <CODEREF>]
	jne	.label_1285
	# 0x8054bab:	movl	8(%ebp), %eax [MEM, REG]
.label_1286:
	movl	8(%ebp), %eax
	# 0x8054bae:	leave	 []
	leave	
	# 0x8054baf:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054bb0
	.globl hash_reset_tuning
	.type hash_reset_tuning, @function
hash_reset_tuning:

	# 0x8054bb0:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054bb1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054bb3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bb6:	fldz	 []
	fldz	
	# 0x8054bb8:	fstps	0(%eax) [MEM]
	fstps	0(%eax)
	# 0x8054bba:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bbd:	fld1	 []
	fld1	
	# 0x8054bbf:	fstps	4(%eax) [MEM]
	fstps	4(%eax)
	# 0x8054bc2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bc5:	flds	0x8063490 [MEM]
	flds	label_1288
	# 0x8054bcb:	fstps	8(%eax) [MEM]
	fstps	8(%eax)
	# 0x8054bce:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bd1:	flds	0x8063494 [MEM]
	flds	label_1289
	# 0x8054bd7:	fstps	0xc(%eax) [MEM]
	fstps	0xc(%eax)
	# 0x8054bda:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bdd:	movb	$0, 0x10(%eax) [IMM, MEM]
	movb	$0, 0x10(%eax)
	# 0x8054be1:	nop	 []
	nop	
	# 0x8054be2:	popl	%ebp [REG]
	popl	%ebp
	# 0x8054be3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054be4

	# 0x8054be4:	pushl	%ebp [REG]
	.globl raw_hasher
	.type raw_hasher, @function
raw_hasher:
	pushl	%ebp
	# 0x8054be5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054be7:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054bea:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054bed:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054bf0:	pushl	$3 [IMM]
	pushl	$3
	# 0x8054bf2:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054bf3:	calll	0x805e0f8 [IMM <CODEREF>]
	calll	rotr_sz
	# 0x8054bf8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054bfb:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054bfe:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054c01:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054c06:	divl	0xc(%ebp) [MEM]
	divl	0xc(%ebp)
	# 0x8054c09:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054c0b:	leave	 []
	leave	
	# 0x8054c0c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054c0d

	# 0x8054c0d:	pushl	%ebp [REG]
	.globl raw_comparator
	.type raw_comparator, @function
raw_comparator:
	pushl	%ebp
	# 0x8054c0e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054c10:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054c13:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x8054c16:	sete	%al [REG]
	sete	%al
	# 0x8054c19:	popl	%ebp [REG]
	popl	%ebp
	# 0x8054c1a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054c1b

	# 0x8054c1b:	pushl	%ebp [REG]
	.globl check_tuning
	.type check_tuning, @function
check_tuning:
	pushl	%ebp
	# 0x8054c1c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054c1e:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8054c21:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054c24:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8054c27:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x8054c2a:	cmpl	$0x8063408, -8(%ebp) [IMM <DATAREF>, MEM]
	cmpl	$default_tuning, -8(%ebp)
	# 0x8054c31:	jne	0x8054c3d [IMM <CODEREF>]
	jne	.label_1291
	# 0x8054c33:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8054c38:	jmp	0x8054cd6 [IMM <CODEREF>]
	jmp	.label_1290
	# 0x8054c3d:	flds	0x8063498 [MEM]
.label_1291:
	flds	label_1293
	# 0x8054c43:	fstps	-4(%ebp) [MEM]
	fstps	-4(%ebp)
	# 0x8054c46:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c49:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8054c4c:	flds	-4(%ebp) [MEM]
	flds	-4(%ebp)
	# 0x8054c4f:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8054c51:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054c53:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054c55:	jbe	0x8054cc7 [IMM <CODEREF>]
	jbe	.label_1292
	# 0x8054c57:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c5a:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8054c5d:	fld1	 []
	fld1	
	# 0x8054c5f:	fsubs	-4(%ebp) [MEM]
	fsubs	-4(%ebp)
	# 0x8054c62:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054c64:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054c66:	jbe	0x8054cc7 [IMM <CODEREF>]
	jbe	.label_1292
	# 0x8054c68:	flds	-4(%ebp) [MEM]
	flds	-4(%ebp)
	# 0x8054c6b:	fld1	 []
	fld1	
	# 0x8054c6d:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x8054c6f:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c72:	flds	0xc(%eax) [MEM]
	flds	0xc(%eax)
	# 0x8054c75:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054c77:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054c79:	jbe	0x8054cc7 [IMM <CODEREF>]
	jbe	.label_1292
	# 0x8054c7b:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c7e:	flds	0(%eax) [MEM]
	flds	0(%eax)
	# 0x8054c80:	fldz	 []
	fldz	
	# 0x8054c82:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8054c84:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054c86:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054c88:	jb	0x8054cc7 [IMM <CODEREF>]
	jb	.label_1292
	# 0x8054c8a:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c8d:	flds	0(%eax) [MEM]
	flds	0(%eax)
	# 0x8054c8f:	fadds	-4(%ebp) [MEM]
	fadds	-4(%ebp)
	# 0x8054c92:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054c95:	flds	4(%eax) [MEM]
	flds	4(%eax)
	# 0x8054c98:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054c9a:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054c9c:	jbe	0x8054cc7 [IMM <CODEREF>]
	jbe	.label_1292
	# 0x8054c9e:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054ca1:	flds	4(%eax) [MEM]
	flds	4(%eax)
	# 0x8054ca4:	fld1	 []
	fld1	
	# 0x8054ca6:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054ca8:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054caa:	jb	0x8054cc7 [IMM <CODEREF>]
	jb	.label_1292
	# 0x8054cac:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054caf:	flds	0(%eax) [MEM]
	flds	0(%eax)
	# 0x8054cb1:	fadds	-4(%ebp) [MEM]
	fadds	-4(%ebp)
	# 0x8054cb4:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x8054cb7:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8054cba:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054cbc:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054cbe:	jbe	0x8054cc7 [IMM <CODEREF>]
	jbe	.label_1292
	# 0x8054cc0:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8054cc5:	jmp	0x8054cd6 [IMM <CODEREF>]
	jmp	.label_1290
	# 0x8054cc7:	movl	8(%ebp), %eax [MEM, REG]
.label_1292:
	movl	8(%ebp), %eax
	# 0x8054cca:	movl	$0x8063408, 0x14(%eax) [IMM <DATAREF>, MEM]
	movl	$default_tuning, 20(%eax)
	# 0x8054cd1:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054cd6:	leave	 []
.label_1290:
	leave	
	# 0x8054cd7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054cd8

	# 0x8054cd8:	pushl	%ebp [REG]
	.globl compute_bucket_size
	.type compute_bucket_size, @function
compute_bucket_size:
	pushl	%ebp
	# 0x8054cd9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054cdb:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8054cde:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8054ce1:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8054ce4:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8054cea:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054ced:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8054cef:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8054cf2:	movzbl	0x10(%eax), %eax [MEM, REG]
	movzbl	0x10(%eax), %eax
	# 0x8054cf6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8054cf9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054cfb:	je	0x8054d59 [IMM <CODEREF>]
	je	.label_1298
	# 0x8054cfd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054d00:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8054d05:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x8054d08:	movl	%edx, -0x34(%ebp) [REG, MEM]
	movl	%edx, -0x34(%ebp)
	# 0x8054d0b:	fildll	-0x38(%ebp) [MEM]
	fildll	-0x38(%ebp)
	# 0x8054d0e:	fstps	-0x20(%ebp) [MEM]
	fstps	-0x20(%ebp)
	# 0x8054d11:	flds	-0x20(%ebp) [MEM]
	flds	-0x20(%ebp)
	# 0x8054d14:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8054d17:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8054d1a:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x8054d1c:	fstps	-0x10(%ebp) [MEM]
	fstps	-0x10(%ebp)
	# 0x8054d1f:	flds	-0x10(%ebp) [MEM]
	flds	-0x10(%ebp)
	# 0x8054d22:	flds	0x806349c [MEM]
	flds	label_1300
	# 0x8054d28:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8054d2a:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8054d2c:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8054d2e:	jb	0x8054d37 [IMM <CODEREF>]
	jb	.label_1301
	# 0x8054d30:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054d35:	jmp	0x8054d9c [IMM <CODEREF>]
	jmp	.label_1297
	# 0x8054d37:	flds	-0x10(%ebp) [MEM]
.label_1301:
	flds	-0x10(%ebp)
	# 0x8054d3a:	fnstcw	-0x22(%ebp) [MEM]
	fnstcw	-0x22(%ebp)
	# 0x8054d3d:	movzwl	-0x22(%ebp), %eax [MEM, REG]
	movzwl	-0x22(%ebp), %eax
	# 0x8054d41:	movb	$0xc, %ah [IMM, REG]
	movb	$0xc, %ah
	# 0x8054d43:	movw	%ax, -0x24(%ebp) [REG, MEM]
	movw	%ax, -0x24(%ebp)
	# 0x8054d47:	fldcw	-0x24(%ebp) [MEM]
	fldcw	-0x24(%ebp)
	# 0x8054d4a:	fistpll	-0x30(%ebp) [MEM]
	fistpll	-0x30(%ebp)
	# 0x8054d4d:	fldcw	-0x22(%ebp) [MEM]
	fldcw	-0x22(%ebp)
	# 0x8054d50:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8054d53:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x8054d56:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x8054d59:	pushl	8(%ebp) [MEM]
.label_1298:
	pushl	8(%ebp)
	# 0x8054d5c:	calll	0x8054b79 [IMM <CODEREF>]
	calll	next_prime
	# 0x8054d61:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x8054d64:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x8054d67:	movl	$0, %ecx [IMM, REG]
	movl	$0, %ecx
	# 0x8054d6c:	movl	$4, %edx [IMM, REG]
	movl	$4, %edx
	# 0x8054d71:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8054d73:	mull	8(%ebp) [MEM]
	mull	8(%ebp)
	# 0x8054d76:	jno	0x8054d7d [IMM <CODEREF>]
	jno	.label_1294
	# 0x8054d78:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x8054d7d:	testl	%eax, %eax [REG, REG]
.label_1294:
	testl	%eax, %eax
	# 0x8054d7f:	jns	0x8054d86 [IMM <CODEREF>]
	jns	.label_1296
	# 0x8054d81:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x8054d86:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_1296:
	movl	%eax, -0x14(%ebp)
	# 0x8054d89:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8054d8b:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8054d8e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054d90:	je	0x8054d99 [IMM <CODEREF>]
	je	.label_1295
	# 0x8054d92:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054d97:	jmp	0x8054d9c [IMM <CODEREF>]
	jmp	.label_1297
	# 0x8054d99:	movl	8(%ebp), %eax [MEM, REG]
.label_1295:
	movl	8(%ebp), %eax
	# 0x8054d9c:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1297:
	movl	-0xc(%ebp), %ecx
	# 0x8054d9f:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8054da6:	je	0x8054dad [IMM <CODEREF>]
	je	.label_1299
	# 0x8054da8:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8054dad:	leave	 []
.label_1299:
	leave	
	# 0x8054dae:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054daf

	# 0x8054daf:	pushl	%ebp [REG]
	.globl hash_initialize
	.type hash_initialize, @function
hash_initialize:
	pushl	%ebp
	# 0x8054db0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054db2:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054db5:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x8054db9:	jne	0x8054dc2 [IMM <CODEREF>]
	jne	.label_1309
	# 0x8054dbb:	movl	$0x8054be4, 0x10(%ebp) [IMM <CODEREF>, MEM]
	movl	$raw_hasher, 16(%ebp)
	# 0x8054dc2:	cmpl	$0, 0x14(%ebp) [IMM, MEM]
.label_1309:
	cmpl	$0, 0x14(%ebp)
	# 0x8054dc6:	jne	0x8054dcf [IMM <CODEREF>]
	jne	.label_1302
	# 0x8054dc8:	movl	$0x8054c0d, 0x14(%ebp) [IMM <CODEREF>, MEM]
	movl	$raw_comparator, 20(%ebp)
	# 0x8054dcf:	subl	$0xc, %esp [IMM, REG]
.label_1302:
	subl	$0xc, %esp
	# 0x8054dd2:	pushl	$0x28 [IMM]
	pushl	$0x28
	# 0x8054dd4:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x8054dd9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054ddc:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054ddf:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8054de3:	jne	0x8054def [IMM <CODEREF>]
	jne	.label_1305
	# 0x8054de5:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054dea:	jmp	0x8054ed3 [IMM <CODEREF>]
	jmp	.label_1307
	# 0x8054def:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
.label_1305:
	cmpl	$0, 0xc(%ebp)
	# 0x8054df3:	jne	0x8054dfc [IMM <CODEREF>]
	jne	.label_1306
	# 0x8054df5:	movl	$0x8063408, 0xc(%ebp) [IMM <DATAREF>, MEM]
	movl	$default_tuning, 12(%ebp)
	# 0x8054dfc:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1306:
	movl	-0xc(%ebp), %eax
	# 0x8054dff:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x8054e02:	movl	%edx, 0x14(%eax) [REG, MEM]
	movl	%edx, 0x14(%eax)
	# 0x8054e05:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054e08:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8054e0b:	calll	0x8054c1b [IMM <CODEREF>]
	calll	check_tuning
	# 0x8054e10:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054e13:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8054e16:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8054e18:	jne	0x8054eb9 [IMM <CODEREF>]
	jne	.label_1303
	# 0x8054e1e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054e21:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8054e24:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8054e27:	calll	0x8054cd8 [IMM <CODEREF>]
	calll	compute_bucket_size
	# 0x8054e2c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054e2f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8054e31:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e34:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x8054e37:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e3a:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8054e3d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054e3f:	je	0x8054ebc [IMM <CODEREF>]
	je	.label_1308
	# 0x8054e41:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e44:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8054e47:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8054e4a:	pushl	$8 [IMM]
	pushl	$8
	# 0x8054e4c:	pushl	%eax [REG]
	pushl	%eax
	# 0x8054e4d:	calll	0x8049bb0 [IMM <CODEREF>]
	calll	calloc
	# 0x8054e52:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054e55:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8054e57:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e5a:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8054e5c:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e5f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054e61:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054e63:	je	0x8054ebf [IMM <CODEREF>]
	je	.label_1304
	# 0x8054e65:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e68:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x8054e6a:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e6d:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8054e70:	shll	$3, %eax [IMM, REG]
	shll	$3, %eax
	# 0x8054e73:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8054e75:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e78:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8054e7b:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e7e:	movl	$0, 0xc(%eax) [IMM, MEM]
	movl	$0, 0xc(%eax)
	# 0x8054e85:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e88:	movl	$0, 0x10(%eax) [IMM, MEM]
	movl	$0, 0x10(%eax)
	# 0x8054e8f:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e92:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x8054e95:	movl	%edx, 0x18(%eax) [REG, MEM]
	movl	%edx, 0x18(%eax)
	# 0x8054e98:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054e9b:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x8054e9e:	movl	%edx, 0x1c(%eax) [REG, MEM]
	movl	%edx, 0x1c(%eax)
	# 0x8054ea1:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054ea4:	movl	0x18(%ebp), %edx [MEM, REG]
	movl	0x18(%ebp), %edx
	# 0x8054ea7:	movl	%edx, 0x20(%eax) [REG, MEM]
	movl	%edx, 0x20(%eax)
	# 0x8054eaa:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054ead:	movl	$0, 0x24(%eax) [IMM, MEM]
	movl	$0, 0x24(%eax)
	# 0x8054eb4:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054eb7:	jmp	0x8054ed3 [IMM <CODEREF>]
	jmp	.label_1307
	# 0x8054eb9:	nop	 []
.label_1303:
	nop	
	# 0x8054eba:	jmp	0x8054ec0 [IMM <CODEREF>]
	jmp	.label_1310
	# 0x8054ebc:	nop	 []
.label_1308:
	nop	
	# 0x8054ebd:	jmp	0x8054ec0 [IMM <CODEREF>]
	jmp	.label_1310
	# 0x8054ebf:	nop	 []
.label_1304:
	nop	
	# 0x8054ec0:	subl	$0xc, %esp [IMM, REG]
.label_1310:
	subl	$0xc, %esp
	# 0x8054ec3:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8054ec6:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8054ecb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054ece:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8054ed3:	leave	 []
.label_1307:
	leave	
	# 0x8054ed4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054ed5
	.globl hash_clear
	.type hash_clear, @function
hash_clear:

	# 0x8054ed5:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8054ed6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054ed8:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054edb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054ede:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054ee0:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8054ee3:	jmp	0x8054f86 [IMM <CODEREF>]
	jmp	.label_1316
	# 0x8054ee8:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1312:
	movl	-0x14(%ebp), %eax
	# 0x8054eeb:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054eed:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054eef:	je	0x8054f82 [IMM <CODEREF>]
	je	.label_1313
	# 0x8054ef5:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054ef8:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054efb:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054efe:	jmp	0x8054f4b [IMM <CODEREF>]
	jmp	.label_1317
	# 0x8054f00:	movl	8(%ebp), %eax [MEM, REG]
.label_1314:
	movl	8(%ebp), %eax
	# 0x8054f03:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054f06:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054f08:	je	0x8054f1e [IMM <CODEREF>]
	je	.label_1311
	# 0x8054f0a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f0d:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054f10:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8054f13:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x8054f15:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054f18:	pushl	%edx [REG]
	pushl	%edx
	# 0x8054f19:	calll	*%eax [REG]
	calll	*%eax
	# 0x8054f1b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054f1e:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1311:
	movl	-0x10(%ebp), %eax
	# 0x8054f21:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x8054f27:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054f2a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054f2d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8054f30:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f33:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x8054f36:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054f39:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8054f3c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f3f:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8054f42:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x8054f45:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8054f48:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054f4b:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1317:
	cmpl	$0, -0x10(%ebp)
	# 0x8054f4f:	jne	0x8054f00 [IMM <CODEREF>]
	jne	.label_1314
	# 0x8054f51:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f54:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054f57:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054f59:	je	0x8054f6f [IMM <CODEREF>]
	je	.label_1315
	# 0x8054f5b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f5e:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054f61:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x8054f64:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x8054f66:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054f69:	pushl	%edx [REG]
	pushl	%edx
	# 0x8054f6a:	calll	*%eax [REG]
	calll	*%eax
	# 0x8054f6c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054f6f:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1315:
	movl	-0x14(%ebp), %eax
	# 0x8054f72:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x8054f78:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054f7b:	movl	$0, 4(%eax) [IMM, MEM]
	movl	$0, 4(%eax)
	# 0x8054f82:	addl	$8, -0x14(%ebp) [IMM, MEM]
.label_1313:
	addl	$8, -0x14(%ebp)
	# 0x8054f86:	movl	8(%ebp), %eax [MEM, REG]
.label_1316:
	movl	8(%ebp), %eax
	# 0x8054f89:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054f8c:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x8054f8f:	ja	0x8054ee8 [IMM <CODEREF>]
	ja	.label_1312
	# 0x8054f95:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054f98:	movl	$0, 0xc(%eax) [IMM, MEM]
	movl	$0, 0xc(%eax)
	# 0x8054f9f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054fa2:	movl	$0, 0x10(%eax) [IMM, MEM]
	movl	$0, 0x10(%eax)
	# 0x8054fa9:	nop	 []
	nop	
	# 0x8054faa:	leave	 []
	leave	
	# 0x8054fab:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8054fac

	# 0x8054fac:	pushl	%ebp [REG]
	.globl hash_free
	.type hash_free, @function
hash_free:
	pushl	%ebp
	# 0x8054fad:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8054faf:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8054fb2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054fb5:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054fb8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054fba:	je	0x8055013 [IMM <CODEREF>]
	je	.label_1328
	# 0x8054fbc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054fbf:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8054fc2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054fc4:	je	0x8055013 [IMM <CODEREF>]
	je	.label_1328
	# 0x8054fc6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8054fc9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054fcb:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8054fce:	jmp	0x8055008 [IMM <CODEREF>]
	jmp	.label_1320
	# 0x8054fd0:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1321:
	movl	-0x14(%ebp), %eax
	# 0x8054fd3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8054fd5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8054fd7:	je	0x8055004 [IMM <CODEREF>]
	je	.label_1323
	# 0x8054fd9:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8054fdc:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054fdf:	jmp	0x8054ffe [IMM <CODEREF>]
	jmp	.label_1325
	# 0x8054fe1:	movl	8(%ebp), %eax [MEM, REG]
.label_1329:
	movl	8(%ebp), %eax
	# 0x8054fe4:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8054fe7:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8054fea:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x8054fec:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8054fef:	pushl	%edx [REG]
	pushl	%edx
	# 0x8054ff0:	calll	*%eax [REG]
	calll	*%eax
	# 0x8054ff2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8054ff5:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8054ff8:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8054ffb:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8054ffe:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1325:
	cmpl	$0, -0x10(%ebp)
	# 0x8055002:	jne	0x8054fe1 [IMM <CODEREF>]
	jne	.label_1329
	# 0x8055004:	addl	$8, -0x14(%ebp) [IMM, MEM]
.label_1323:
	addl	$8, -0x14(%ebp)
	# 0x8055008:	movl	8(%ebp), %eax [MEM, REG]
.label_1320:
	movl	8(%ebp), %eax
	# 0x805500b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805500e:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x8055011:	ja	0x8054fd0 [IMM <CODEREF>]
	ja	.label_1321
	# 0x8055013:	movl	8(%ebp), %eax [MEM, REG]
.label_1328:
	movl	8(%ebp), %eax
	# 0x8055016:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055018:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805501b:	jmp	0x805504f [IMM <CODEREF>]
	jmp	.label_1324
	# 0x805501d:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1322:
	movl	-0x14(%ebp), %eax
	# 0x8055020:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055023:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055026:	jmp	0x8055045 [IMM <CODEREF>]
	jmp	.label_1327
	# 0x8055028:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1319:
	movl	-0x10(%ebp), %eax
	# 0x805502b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805502e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055031:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055034:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8055037:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805503c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805503f:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055042:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055045:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1327:
	cmpl	$0, -0x10(%ebp)
	# 0x8055049:	jne	0x8055028 [IMM <CODEREF>]
	jne	.label_1319
	# 0x805504b:	addl	$8, -0x14(%ebp) [IMM, MEM]
	addl	$8, -0x14(%ebp)
	# 0x805504f:	movl	8(%ebp), %eax [MEM, REG]
.label_1324:
	movl	8(%ebp), %eax
	# 0x8055052:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055055:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x8055058:	ja	0x805501d [IMM <CODEREF>]
	ja	.label_1322
	# 0x805505a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805505d:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x8055060:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055063:	jmp	0x8055082 [IMM <CODEREF>]
	jmp	.label_1326
	# 0x8055065:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1318:
	movl	-0x10(%ebp), %eax
	# 0x8055068:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805506b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805506e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055071:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8055074:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055079:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805507c:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805507f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055082:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1326:
	cmpl	$0, -0x10(%ebp)
	# 0x8055086:	jne	0x8055065 [IMM <CODEREF>]
	jne	.label_1318
	# 0x8055088:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805508b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805508d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055090:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055091:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055096:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055099:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805509c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805509f:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80550a4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80550a7:	nop	 []
	nop	
	# 0x80550a8:	leave	 []
	leave	
	# 0x80550a9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80550aa

	# 0x80550aa:	pushl	%ebp [REG]
	.globl allocate_entry
	.type allocate_entry, @function
allocate_entry:
	pushl	%ebp
	# 0x80550ab:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80550ad:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x80550b0:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80550b3:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x80550b6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80550b8:	je	0x80550d1 [IMM <CODEREF>]
	je	.label_1330
	# 0x80550ba:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80550bd:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x80550c0:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80550c3:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80550c6:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x80550c9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80550cc:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x80550cf:	jmp	0x80550e1 [IMM <CODEREF>]
	jmp	.label_1331
	# 0x80550d1:	subl	$0xc, %esp [IMM, REG]
.label_1330:
	subl	$0xc, %esp
	# 0x80550d4:	pushl	$8 [IMM]
	pushl	$8
	# 0x80550d6:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x80550db:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80550de:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80550e1:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1331:
	movl	-0xc(%ebp), %eax
	# 0x80550e4:	leave	 []
	leave	
	# 0x80550e5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80550e6

	# 0x80550e6:	pushl	%ebp [REG]
	.globl free_entry
	.type free_entry, @function
free_entry:
	pushl	%ebp
	# 0x80550e7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80550e9:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80550ec:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x80550f2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80550f5:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x80550f8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80550fb:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x80550fe:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055101:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x8055104:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x8055107:	nop	 []
	nop	
	# 0x8055108:	popl	%ebp [REG]
	popl	%ebp
	# 0x8055109:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805510a

	# 0x805510a:	pushl	%ebp [REG]
	.globl hash_find_entry
	.type hash_find_entry, @function
hash_find_entry:
	pushl	%ebp
	# 0x805510b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805510d:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x8055110:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8055113:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x8055116:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055119:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805511c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805511f:	calll	0x805488b [IMM <CODEREF>]
	calll	safe_hasher
	# 0x8055124:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055127:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805512a:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805512d:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8055130:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8055132:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8055135:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055137:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055139:	jne	0x8055145 [IMM <CODEREF>]
	jne	.label_1336
	# 0x805513b:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055140:	jmp	0x8055246 [IMM <CODEREF>]
	jmp	.label_1334
	# 0x8055145:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1336:
	movl	-0x1c(%ebp), %eax
	# 0x8055148:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805514a:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805514d:	je	0x805516a [IMM <CODEREF>]
	je	.label_1332
	# 0x805514f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055152:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x8055155:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8055158:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x805515a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805515d:	pushl	%edx [REG]
	pushl	%edx
	# 0x805515e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8055161:	calll	*%eax [REG]
	calll	*%eax
	# 0x8055163:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055166:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8055168:	je	0x80551bf [IMM <CODEREF>]
	je	.label_1335
	# 0x805516a:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1332:
	movl	-0x1c(%ebp), %eax
	# 0x805516d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805516f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055172:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
	cmpb	$0, -0x2c(%ebp)
	# 0x8055176:	je	0x80551b7 [IMM <CODEREF>]
	je	.label_1337
	# 0x8055178:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805517b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805517e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055180:	je	0x80551ae [IMM <CODEREF>]
	je	.label_1341
	# 0x8055182:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8055185:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055188:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805518b:	movl	-0x1c(%ebp), %ecx [MEM, REG]
	movl	-0x1c(%ebp), %ecx
	# 0x805518e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055191:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8055194:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055196:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x8055198:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805519b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805519e:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x80551a1:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80551a4:	calll	0x80550e6 [IMM <CODEREF>]
	calll	free_entry
	# 0x80551a9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80551ac:	jmp	0x80551b7 [IMM <CODEREF>]
	jmp	.label_1337
	# 0x80551ae:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1341:
	movl	-0x1c(%ebp), %eax
	# 0x80551b1:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x80551b7:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1337:
	movl	-0x10(%ebp), %eax
	# 0x80551ba:	jmp	0x8055246 [IMM <CODEREF>]
	jmp	.label_1334
	# 0x80551bf:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1335:
	movl	-0x1c(%ebp), %eax
	# 0x80551c2:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x80551c5:	jmp	0x8055237 [IMM <CODEREF>]
	jmp	.label_1342
	# 0x80551c7:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1340:
	movl	-0x20(%ebp), %eax
	# 0x80551ca:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80551cd:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80551cf:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x80551d2:	je	0x80551f2 [IMM <CODEREF>]
	je	.label_1333
	# 0x80551d4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80551d7:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x80551da:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x80551dd:	movl	4(%edx), %edx [MEM, REG]
	movl	4(%edx), %edx
	# 0x80551e0:	movl	0(%edx), %edx [MEM, REG]
	movl	0(%edx), %edx
	# 0x80551e2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80551e5:	pushl	%edx [REG]
	pushl	%edx
	# 0x80551e6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80551e9:	calll	*%eax [REG]
	calll	*%eax
	# 0x80551eb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80551ee:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80551f0:	je	0x805522e [IMM <CODEREF>]
	je	.label_1338
	# 0x80551f2:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1333:
	movl	-0x20(%ebp), %eax
	# 0x80551f5:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80551f8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80551fa:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80551fd:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
	cmpb	$0, -0x2c(%ebp)
	# 0x8055201:	je	0x8055229 [IMM <CODEREF>]
	je	.label_1339
	# 0x8055203:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8055206:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055209:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805520c:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805520f:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8055212:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8055215:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8055218:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805521b:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805521e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8055221:	calll	0x80550e6 [IMM <CODEREF>]
	calll	free_entry
	# 0x8055226:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055229:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1339:
	movl	-0x18(%ebp), %eax
	# 0x805522c:	jmp	0x8055246 [IMM <CODEREF>]
	jmp	.label_1334
	# 0x805522e:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1338:
	movl	-0x20(%ebp), %eax
	# 0x8055231:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055234:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8055237:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1342:
	movl	-0x20(%ebp), %eax
	# 0x805523a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805523d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805523f:	jne	0x80551c7 [IMM <CODEREF>]
	jne	.label_1340
	# 0x8055241:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055246:	leave	 []
.label_1334:
	leave	
	# 0x8055247:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055248

	# 0x8055248:	pushl	%ebp [REG]
	.globl transfer_entries
	.type transfer_entries, @function
transfer_entries:
	pushl	%ebp
	# 0x8055249:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805524b:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x805524e:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8055251:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x8055254:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055257:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055259:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805525c:	jmp	0x805539e [IMM <CODEREF>]
	jmp	.label_1344
	# 0x8055261:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1348:
	movl	-0x20(%ebp), %eax
	# 0x8055264:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055266:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055268:	je	0x805539a [IMM <CODEREF>]
	je	.label_1349
	# 0x805526e:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8055271:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055274:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8055277:	jmp	0x80552ec [IMM <CODEREF>]
	jmp	.label_1352
	# 0x8055279:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1351:
	movl	-0x1c(%ebp), %eax
	# 0x805527c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805527e:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8055281:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055284:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8055287:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805528a:	calll	0x805488b [IMM <CODEREF>]
	calll	safe_hasher
	# 0x805528f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055292:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8055295:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8055298:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805529b:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805529e:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80552a1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80552a3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80552a5:	je	0x80552be [IMM <CODEREF>]
	je	.label_1346
	# 0x80552a7:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80552aa:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x80552ad:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x80552b0:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x80552b3:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80552b6:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x80552b9:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x80552bc:	jmp	0x80552e6 [IMM <CODEREF>]
	jmp	.label_1350
	# 0x80552be:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1346:
	movl	-0x14(%ebp), %eax
	# 0x80552c1:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x80552c4:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80552c6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80552c9:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80552cc:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80552cf:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80552d2:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x80552d5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80552d8:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x80552db:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80552de:	calll	0x80550e6 [IMM <CODEREF>]
	calll	free_entry
	# 0x80552e3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80552e6:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1350:
	movl	-0x10(%ebp), %eax
	# 0x80552e9:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80552ec:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
.label_1352:
	cmpl	$0, -0x1c(%ebp)
	# 0x80552f0:	jne	0x8055279 [IMM <CODEREF>]
	jne	.label_1351
	# 0x80552f2:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80552f5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80552f7:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80552fa:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80552fd:	movl	$0, 4(%eax) [IMM, MEM]
	movl	$0, 4(%eax)
	# 0x8055304:	cmpb	$0, -0x2c(%ebp) [IMM, MEM]
	cmpb	$0, -0x2c(%ebp)
	# 0x8055308:	jne	0x8055399 [IMM <CODEREF>]
	jne	.label_1353
	# 0x805530e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055311:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8055314:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8055317:	calll	0x805488b [IMM <CODEREF>]
	calll	safe_hasher
	# 0x805531c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805531f:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8055322:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8055325:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055327:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055329:	je	0x8055368 [IMM <CODEREF>]
	je	.label_1347
	# 0x805532b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805532e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8055331:	calll	0x80550aa [IMM <CODEREF>]
	calll	allocate_entry
	# 0x8055336:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055339:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805533c:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8055340:	jne	0x8055349 [IMM <CODEREF>]
	jne	.label_1354
	# 0x8055342:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055347:	jmp	0x80553b2 [IMM <CODEREF>]
	jmp	.label_1343
	# 0x8055349:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1354:
	movl	-0xc(%ebp), %eax
	# 0x805534c:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x805534f:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8055351:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8055354:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8055357:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805535a:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805535d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8055360:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8055363:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8055366:	jmp	0x805537f [IMM <CODEREF>]
	jmp	.label_1345
	# 0x8055368:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1347:
	movl	-0x14(%ebp), %eax
	# 0x805536b:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x805536e:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8055370:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055373:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8055376:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8055379:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805537c:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x805537f:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1345:
	movl	-0x20(%ebp), %eax
	# 0x8055382:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x8055388:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805538b:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805538e:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8055391:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055394:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x8055397:	jmp	0x805539a [IMM <CODEREF>]
	jmp	.label_1349
	# 0x8055399:	nop	 []
.label_1353:
	nop	
	# 0x805539a:	addl	$8, -0x20(%ebp) [IMM, MEM]
.label_1349:
	addl	$8, -0x20(%ebp)
	# 0x805539e:	movl	0xc(%ebp), %eax [MEM, REG]
.label_1344:
	movl	0xc(%ebp), %eax
	# 0x80553a1:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x80553a4:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x80553a7:	ja	0x8055261 [IMM <CODEREF>]
	ja	.label_1348
	# 0x80553ad:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80553b2:	leave	 []
.label_1343:
	leave	
	# 0x80553b3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80553b4

	# 0x80553b4:	pushl	%ebp [REG]
	.globl hash_rehash
	.type hash_rehash, @function
hash_rehash:
	pushl	%ebp
	# 0x80553b5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80553b7:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x80553ba:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80553bd:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x80553c0:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x80553c6:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80553c9:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x80553cb:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80553ce:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80553d1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80553d4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80553d5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80553d8:	calll	0x8054cd8 [IMM <CODEREF>]
	calll	compute_bucket_size
	# 0x80553dd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80553e0:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x80553e3:	cmpl	$0, -0x3c(%ebp) [IMM, MEM]
	cmpl	$0, -0x3c(%ebp)
	# 0x80553e7:	jne	0x80553f3 [IMM <CODEREF>]
	jne	.label_1358
	# 0x80553e9:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80553ee:	jmp	0x8055568 [IMM <CODEREF>]
	jmp	.label_1356
	# 0x80553f3:	movl	-0x4c(%ebp), %eax [MEM, REG]
.label_1358:
	movl	-0x4c(%ebp), %eax
	# 0x80553f6:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80553f9:	cmpl	-0x3c(%ebp), %eax [MEM, REG]
	cmpl	-0x3c(%ebp), %eax
	# 0x80553fc:	jne	0x8055408 [IMM <CODEREF>]
	jne	.label_1359
	# 0x80553fe:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8055403:	jmp	0x8055568 [IMM <CODEREF>]
	jmp	.label_1356
	# 0x8055408:	leal	-0x34(%ebp), %eax [MEM, REG]
.label_1359:
	leal	-0x34(%ebp), %eax
	# 0x805540b:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805540e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055411:	pushl	$8 [IMM]
	pushl	$8
	# 0x8055413:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x8055416:	calll	0x8049bb0 [IMM <CODEREF>]
	calll	calloc
	# 0x805541b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805541e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8055420:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055423:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8055425:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055428:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805542a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805542c:	jne	0x8055438 [IMM <CODEREF>]
	jne	.label_1357
	# 0x805542e:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055433:	jmp	0x8055568 [IMM <CODEREF>]
	jmp	.label_1356
	# 0x8055438:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_1357:
	movl	-0x38(%ebp), %eax
	# 0x805543b:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x805543e:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x8055441:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055444:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055446:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x8055449:	shll	$3, %edx [IMM, REG]
	shll	$3, %edx
	# 0x805544c:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805544e:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055451:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8055454:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055457:	movl	$0, 0xc(%eax) [IMM, MEM]
	movl	$0, 0xc(%eax)
	# 0x805545e:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055461:	movl	$0, 0x10(%eax) [IMM, MEM]
	movl	$0, 0x10(%eax)
	# 0x8055468:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805546b:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x805546e:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055471:	movl	%edx, 0x14(%eax) [REG, MEM]
	movl	%edx, 0x14(%eax)
	# 0x8055474:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8055477:	movl	0x18(%eax), %edx [MEM, REG]
	movl	0x18(%eax), %edx
	# 0x805547a:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805547d:	movl	%edx, 0x18(%eax) [REG, MEM]
	movl	%edx, 0x18(%eax)
	# 0x8055480:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8055483:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x8055486:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055489:	movl	%edx, 0x1c(%eax) [REG, MEM]
	movl	%edx, 0x1c(%eax)
	# 0x805548c:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805548f:	movl	0x20(%eax), %edx [MEM, REG]
	movl	0x20(%eax), %edx
	# 0x8055492:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x8055495:	movl	%edx, 0x20(%eax) [REG, MEM]
	movl	%edx, 0x20(%eax)
	# 0x8055498:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805549b:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x805549e:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554a1:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x80554a4:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80554a7:	pushl	$0 [IMM]
	pushl	$0
	# 0x80554a9:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x80554ac:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x80554af:	calll	0x8055248 [IMM <CODEREF>]
	calll	transfer_entries
	# 0x80554b4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80554b7:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80554b9:	je	0x805550d [IMM <CODEREF>]
	je	.label_1362
	# 0x80554bb:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80554be:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80554c0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80554c3:	pushl	%eax [REG]
	pushl	%eax
	# 0x80554c4:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80554c9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80554cc:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554cf:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x80554d1:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80554d4:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80554d6:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554d9:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x80554dc:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80554df:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x80554e2:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554e5:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x80554e8:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80554eb:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x80554ee:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554f1:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x80554f4:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x80554f7:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x80554fa:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80554fd:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x8055500:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8055503:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x8055506:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805550b:	jmp	0x8055568 [IMM <CODEREF>]
	jmp	.label_1356
	# 0x805550d:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_1362:
	movl	-0x38(%ebp), %eax
	# 0x8055510:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x8055513:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x8055516:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x8055519:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805551c:	pushl	$1 [IMM]
	pushl	$1
	# 0x805551e:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x8055521:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x8055524:	calll	0x8055248 [IMM <CODEREF>]
	calll	transfer_entries
	# 0x8055529:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805552c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805552f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8055531:	jne	0x805554d [IMM <CODEREF>]
	jne	.label_1361
	# 0x8055533:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8055536:	pushl	$0 [IMM]
	pushl	$0
	# 0x8055538:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x805553b:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805553e:	calll	0x8055248 [IMM <CODEREF>]
	calll	transfer_entries
	# 0x8055543:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055546:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8055549:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805554b:	je	0x8055552 [IMM <CODEREF>]
	je	.label_1355
	# 0x805554d:	calll	0x8049b10 [IMM <CODEREF>]
.label_1361:
	calll	abort
	# 0x8055552:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_1355:
	movl	-0x38(%ebp), %eax
	# 0x8055555:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055557:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805555a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805555b:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055560:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055563:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055568:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1356:
	movl	-0xc(%ebp), %ecx
	# 0x805556b:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8055572:	je	0x8055579 [IMM <CODEREF>]
	je	.label_1360
	# 0x8055574:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8055579:	leave	 []
.label_1360:
	leave	
	# 0x805557a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805557b

	# 0x805557b:	pushl	%ebp [REG]
	.globl hash_insert_if_absent
	.type hash_insert_if_absent, @function
hash_insert_if_absent:
	pushl	%ebp
	# 0x805557c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805557e:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x8055581:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055584:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8055587:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805558a:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805558d:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8055590:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x8055593:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8055599:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805559c:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805559e:	cmpl	$0, -0x30(%ebp) [IMM, MEM]
	cmpl	$0, -0x30(%ebp)
	# 0x80555a2:	jne	0x80555a9 [IMM <CODEREF>]
	jne	.label_1373
	# 0x80555a4:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x80555a9:	pushl	$0 [IMM]
.label_1373:
	pushl	$0
	# 0x80555ab:	leal	-0x20(%ebp), %eax [MEM, REG]
	leal	-0x20(%ebp), %eax
	# 0x80555ae:	pushl	%eax [REG]
	pushl	%eax
	# 0x80555af:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x80555b2:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x80555b5:	calll	0x805510a [IMM <CODEREF>]
	calll	hash_find_entry
	# 0x80555ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80555bd:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80555c0:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x80555c4:	je	0x80555de [IMM <CODEREF>]
	je	.label_1372
	# 0x80555c6:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
	cmpl	$0, -0x34(%ebp)
	# 0x80555ca:	je	0x80555d4 [IMM <CODEREF>]
	je	.label_1364
	# 0x80555cc:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x80555cf:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x80555d2:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80555d4:	movl	$0, %eax [IMM, REG]
.label_1364:
	movl	$0, %eax
	# 0x80555d9:	jmp	0x80557dd [IMM <CODEREF>]
	jmp	.label_1367
	# 0x80555de:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1372:
	movl	-0x2c(%ebp), %eax
	# 0x80555e1:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80555e4:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x80555e7:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x80555ee:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x80555f1:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x80555f4:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x80555f7:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80555fa:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80555fd:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8055600:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055603:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8055606:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8055609:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x8055610:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x8055613:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x8055616:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x8055619:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x805561b:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x805561d:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x805561f:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055621:	jbe	0x8055758 [IMM <CODEREF>]
	jbe	.label_1365
	# 0x8055627:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805562a:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805562d:	calll	0x8054c1b [IMM <CODEREF>]
	calll	check_tuning
	# 0x8055632:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055635:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055638:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805563b:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x805563e:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x8055645:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x8055648:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x805564b:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x805564e:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055651:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8055654:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x8055657:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805565a:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x805565d:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8055660:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x8055667:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x805566a:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x805566d:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x8055670:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x8055672:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8055674:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055676:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055678:	jbe	0x8055758 [IMM <CODEREF>]
	jbe	.label_1365
	# 0x805567e:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055681:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8055684:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8055687:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805568a:	movzbl	0x10(%eax), %eax [MEM, REG]
	movzbl	0x10(%eax), %eax
	# 0x805568e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8055690:	je	0x80556b5 [IMM <CODEREF>]
	je	.label_1374
	# 0x8055692:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055695:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8055698:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x805569b:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x80556a2:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x80556a5:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x80556a8:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x80556ab:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80556ae:	flds	0xc(%eax) [MEM]
	flds	0xc(%eax)
	# 0x80556b1:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80556b3:	jmp	0x80556de [IMM <CODEREF>]
	jmp	.label_1366
	# 0x80556b5:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1374:
	movl	-0x2c(%ebp), %eax
	# 0x80556b8:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80556bb:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x80556be:	movl	$0, -0x4c(%ebp) [IMM, MEM]
	movl	$0, -0x4c(%ebp)
	# 0x80556c5:	fildll	-0x50(%ebp) [MEM]
	fildll	-0x50(%ebp)
	# 0x80556c8:	fstps	-0x38(%ebp) [MEM]
	fstps	-0x38(%ebp)
	# 0x80556cb:	flds	-0x38(%ebp) [MEM]
	flds	-0x38(%ebp)
	# 0x80556ce:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80556d1:	flds	0xc(%eax) [MEM]
	flds	0xc(%eax)
	# 0x80556d4:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80556d6:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80556d9:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x80556dc:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80556de:	fstps	-0x14(%ebp) [MEM]
.label_1366:
	fstps	-0x14(%ebp)
	# 0x80556e1:	flds	-0x14(%ebp) [MEM]
	flds	-0x14(%ebp)
	# 0x80556e4:	flds	0x806349c [MEM]
	flds	label_1300
	# 0x80556ea:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x80556ec:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x80556ee:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x80556f0:	jb	0x80556fc [IMM <CODEREF>]
	jb	.label_1363
	# 0x80556f2:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x80556f7:	jmp	0x80557dd [IMM <CODEREF>]
	jmp	.label_1367
	# 0x80556fc:	flds	-0x14(%ebp) [MEM]
.label_1363:
	flds	-0x14(%ebp)
	# 0x80556ff:	fnstcw	-0x3a(%ebp) [MEM]
	fnstcw	-0x3a(%ebp)
	# 0x8055702:	movzwl	-0x3a(%ebp), %eax [MEM, REG]
	movzwl	-0x3a(%ebp), %eax
	# 0x8055706:	movb	$0xc, %ah [IMM, REG]
	movb	$0xc, %ah
	# 0x8055708:	movw	%ax, -0x3c(%ebp) [REG, MEM]
	movw	%ax, -0x3c(%ebp)
	# 0x805570c:	fldcw	-0x3c(%ebp) [MEM]
	fldcw	-0x3c(%ebp)
	# 0x805570f:	fistpll	-0x48(%ebp) [MEM]
	fistpll	-0x48(%ebp)
	# 0x8055712:	fldcw	-0x3a(%ebp) [MEM]
	fldcw	-0x3a(%ebp)
	# 0x8055715:	movl	-0x48(%ebp), %eax [MEM, REG]
	movl	-0x48(%ebp), %eax
	# 0x8055718:	movl	-0x44(%ebp), %edx [MEM, REG]
	movl	-0x44(%ebp), %edx
	# 0x805571b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805571e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805571f:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8055722:	calll	0x80553b4 [IMM <CODEREF>]
	calll	hash_rehash
	# 0x8055727:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805572a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805572d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805572f:	je	0x805573b [IMM <CODEREF>]
	je	.label_1370
	# 0x8055731:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x8055736:	jmp	0x80557dd [IMM <CODEREF>]
	jmp	.label_1367
	# 0x805573b:	pushl	$0 [IMM]
.label_1370:
	pushl	$0
	# 0x805573d:	leal	-0x20(%ebp), %eax [MEM, REG]
	leal	-0x20(%ebp), %eax
	# 0x8055740:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055741:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8055744:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8055747:	calll	0x805510a [IMM <CODEREF>]
	calll	hash_find_entry
	# 0x805574c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805574f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055751:	je	0x8055758 [IMM <CODEREF>]
	je	.label_1365
	# 0x8055753:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x8055758:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1365:
	movl	-0x20(%ebp), %eax
	# 0x805575b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805575d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805575f:	je	0x80557b2 [IMM <CODEREF>]
	je	.label_1368
	# 0x8055761:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055764:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8055767:	calll	0x80550aa [IMM <CODEREF>]
	calll	allocate_entry
	# 0x805576c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805576f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055772:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8055776:	jne	0x805577f [IMM <CODEREF>]
	jne	.label_1371
	# 0x8055778:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805577d:	jmp	0x80557dd [IMM <CODEREF>]
	jmp	.label_1367
	# 0x805577f:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1371:
	movl	-0x10(%ebp), %eax
	# 0x8055782:	movl	-0x30(%ebp), %edx [MEM, REG]
	movl	-0x30(%ebp), %edx
	# 0x8055785:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8055787:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805578a:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805578d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055790:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8055793:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8055796:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8055799:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805579c:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805579f:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x80557a2:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80557a5:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80557a8:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x80557ab:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80557b0:	jmp	0x80557dd [IMM <CODEREF>]
	jmp	.label_1367
	# 0x80557b2:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1368:
	movl	-0x20(%ebp), %eax
	# 0x80557b5:	movl	-0x30(%ebp), %edx [MEM, REG]
	movl	-0x30(%ebp), %edx
	# 0x80557b8:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80557ba:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80557bd:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x80557c0:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80557c3:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80557c6:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x80557c9:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80557cc:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80557cf:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80557d2:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80557d5:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x80557d8:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80557dd:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1367:
	movl	-0xc(%ebp), %ecx
	# 0x80557e0:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x80557e7:	je	0x80557ee [IMM <CODEREF>]
	je	.label_1369
	# 0x80557e9:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x80557ee:	leave	 []
.label_1369:
	leave	
	# 0x80557ef:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80557f0

	# 0x80557f0:	pushl	%ebp [REG]
	.globl hash_insert
	.type hash_insert, @function
hash_insert:
	pushl	%ebp
	# 0x80557f1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80557f3:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80557f6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80557f9:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80557fc:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80557ff:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8055802:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8055808:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805580b:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805580d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8055810:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x8055813:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055814:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x8055817:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805581a:	calll	0x805557b [IMM <CODEREF>]
	calll	hash_insert_if_absent
	# 0x805581f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055822:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055825:	cmpl	$-1, -0x10(%ebp) [IMM, MEM]
	cmpl	$-1, -0x10(%ebp)
	# 0x8055829:	je	0x805583b [IMM <CODEREF>]
	je	.label_1378
	# 0x805582b:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805582f:	jne	0x8055836 [IMM <CODEREF>]
	jne	.label_1376
	# 0x8055831:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8055834:	jmp	0x8055840 [IMM <CODEREF>]
	jmp	.label_1375
	# 0x8055836:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1376:
	movl	-0x20(%ebp), %eax
	# 0x8055839:	jmp	0x8055840 [IMM <CODEREF>]
	jmp	.label_1375
	# 0x805583b:	movl	$0, %eax [IMM, REG]
.label_1378:
	movl	$0, %eax
	# 0x8055840:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_1375:
	movl	-0xc(%ebp), %edx
	# 0x8055843:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805584a:	je	0x8055851 [IMM <CODEREF>]
	je	.label_1377
	# 0x805584c:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8055851:	leave	 []
.label_1377:
	leave	
	# 0x8055852:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055853

	# 0x8055853:	pushl	%ebp [REG]
	.globl hash_delete
	.type hash_delete, @function
hash_delete:
	pushl	%ebp
	# 0x8055854:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055856:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x8055859:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805585c:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805585f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055862:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x8055865:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805586b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805586e:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8055870:	pushl	$1 [IMM]
	pushl	$1
	# 0x8055872:	leal	-0x24(%ebp), %eax [MEM, REG]
	leal	-0x24(%ebp), %eax
	# 0x8055875:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055876:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8055879:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805587c:	calll	0x805510a [IMM <CODEREF>]
	calll	hash_find_entry
	# 0x8055881:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055884:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8055887:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x805588b:	jne	0x8055897 [IMM <CODEREF>]
	jne	.label_1379
	# 0x805588d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8055892:	jmp	0x8055a4a [IMM <CODEREF>]
	jmp	.label_1383
	# 0x8055897:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1379:
	movl	-0x2c(%ebp), %eax
	# 0x805589a:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x805589d:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x80558a0:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558a3:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x80558a6:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x80558a9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80558ab:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80558ad:	jne	0x8055a47 [IMM <CODEREF>]
	jne	.label_1380
	# 0x80558b3:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558b6:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80558b9:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x80558bc:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558bf:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x80558c2:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558c5:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x80558c8:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x80558cb:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x80558d2:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x80558d5:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x80558d8:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x80558db:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558de:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80558e1:	flds	0(%eax) [MEM]
	flds	0(%eax)
	# 0x80558e3:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80558e6:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80558e9:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x80558ec:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x80558f3:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x80558f6:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x80558f9:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x80558fc:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80558fe:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055900:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055902:	jbe	0x8055a47 [IMM <CODEREF>]
	jbe	.label_1380
	# 0x8055908:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805590b:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805590e:	calll	0x8054c1b [IMM <CODEREF>]
	calll	check_tuning
	# 0x8055913:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055916:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055919:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805591c:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x805591f:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x8055926:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x8055929:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x805592c:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x805592f:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055932:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8055935:	flds	0(%eax) [MEM]
	flds	0(%eax)
	# 0x8055937:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805593a:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x805593d:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x8055940:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x8055947:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x805594a:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x805594d:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x8055950:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x8055952:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055954:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055956:	jbe	0x8055a47 [IMM <CODEREF>]
	jbe	.label_1380
	# 0x805595c:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805595f:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8055962:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8055965:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8055968:	movzbl	0x10(%eax), %eax [MEM, REG]
	movzbl	0x10(%eax), %eax
	# 0x805596c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805596e:	je	0x80559af [IMM <CODEREF>]
	je	.label_1386
	# 0x8055970:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055973:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8055976:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x8055979:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x8055980:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x8055983:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x8055986:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x8055989:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805598c:	flds	4(%eax) [MEM]
	flds	4(%eax)
	# 0x805598f:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x8055991:	fnstcw	-0x36(%ebp) [MEM]
	fnstcw	-0x36(%ebp)
	# 0x8055994:	movzwl	-0x36(%ebp), %eax [MEM, REG]
	movzwl	-0x36(%ebp), %eax
	# 0x8055998:	movb	$0xc, %ah [IMM, REG]
	movb	$0xc, %ah
	# 0x805599a:	movw	%ax, -0x38(%ebp) [REG, MEM]
	movw	%ax, -0x38(%ebp)
	# 0x805599e:	fldcw	-0x38(%ebp) [MEM]
	fldcw	-0x38(%ebp)
	# 0x80559a1:	fistpll	-0x40(%ebp) [MEM]
	fistpll	-0x40(%ebp)
	# 0x80559a4:	fldcw	-0x36(%ebp) [MEM]
	fldcw	-0x36(%ebp)
	# 0x80559a7:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80559aa:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x80559ad:	jmp	0x80559f4 [IMM <CODEREF>]
	jmp	.label_1384
	# 0x80559af:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1386:
	movl	-0x2c(%ebp), %eax
	# 0x80559b2:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x80559b5:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x80559b8:	movl	$0, -0x44(%ebp) [IMM, MEM]
	movl	$0, -0x44(%ebp)
	# 0x80559bf:	fildll	-0x48(%ebp) [MEM]
	fildll	-0x48(%ebp)
	# 0x80559c2:	fstps	-0x34(%ebp) [MEM]
	fstps	-0x34(%ebp)
	# 0x80559c5:	flds	-0x34(%ebp) [MEM]
	flds	-0x34(%ebp)
	# 0x80559c8:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80559cb:	flds	4(%eax) [MEM]
	flds	4(%eax)
	# 0x80559ce:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80559d0:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x80559d3:	flds	8(%eax) [MEM]
	flds	8(%eax)
	# 0x80559d6:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80559d8:	fnstcw	-0x36(%ebp) [MEM]
	fnstcw	-0x36(%ebp)
	# 0x80559db:	movzwl	-0x36(%ebp), %eax [MEM, REG]
	movzwl	-0x36(%ebp), %eax
	# 0x80559df:	movb	$0xc, %ah [IMM, REG]
	movb	$0xc, %ah
	# 0x80559e1:	movw	%ax, -0x38(%ebp) [REG, MEM]
	movw	%ax, -0x38(%ebp)
	# 0x80559e5:	fldcw	-0x38(%ebp) [MEM]
	fldcw	-0x38(%ebp)
	# 0x80559e8:	fistpll	-0x40(%ebp) [MEM]
	fistpll	-0x40(%ebp)
	# 0x80559eb:	fldcw	-0x36(%ebp) [MEM]
	fldcw	-0x36(%ebp)
	# 0x80559ee:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x80559f1:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x80559f4:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_1384:
	movl	%eax, -0x14(%ebp)
	# 0x80559f7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80559fa:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x80559fd:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8055a00:	calll	0x80553b4 [IMM <CODEREF>]
	calll	hash_rehash
	# 0x8055a05:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055a08:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x8055a0b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8055a0d:	je	0x8055a47 [IMM <CODEREF>]
	je	.label_1380
	# 0x8055a0f:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055a12:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x8055a15:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8055a18:	jmp	0x8055a37 [IMM <CODEREF>]
	jmp	.label_1385
	# 0x8055a1a:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1382:
	movl	-0x20(%ebp), %eax
	# 0x8055a1d:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055a20:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055a23:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055a26:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x8055a29:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055a2e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055a31:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055a34:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8055a37:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
.label_1385:
	cmpl	$0, -0x20(%ebp)
	# 0x8055a3b:	jne	0x8055a1a [IMM <CODEREF>]
	jne	.label_1382
	# 0x8055a3d:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8055a40:	movl	$0, 0x24(%eax) [IMM, MEM]
	movl	$0, 0x24(%eax)
	# 0x8055a47:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1380:
	movl	-0x1c(%ebp), %eax
	# 0x8055a4a:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1383:
	movl	-0xc(%ebp), %ecx
	# 0x8055a4d:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8055a54:	je	0x8055a5b [IMM <CODEREF>]
	je	.label_1381
	# 0x8055a56:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8055a5b:	leave	 []
.label_1381:
	leave	
	# 0x8055a5c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055a5d

	# 0x8055a5d:	pushl	%ebp [REG]
	.globl triple_hash
	.type triple_hash, @function
triple_hash:
	pushl	%ebp
	# 0x8055a5e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055a60:	pushl	%esi [REG]
	pushl	%esi
	# 0x8055a61:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055a62:	subl	$0x20, %esp [IMM, REG]
	subl	$0x20, %esp
	# 0x8055a65:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055a68:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055a6b:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055a6e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055a70:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055a73:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8055a76:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055a77:	calll	0x805e302 [IMM <CODEREF>]
	calll	hash_pjw
	# 0x8055a7c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055a7f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055a82:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055a85:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8055a8a:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8055a8d:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x8055a90:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055a93:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8055a96:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055a99:	movl	-0x20(%ebp), %ecx [MEM, REG]
	movl	-0x20(%ebp), %ecx
	# 0x8055a9c:	xorl	%eax, %ecx [REG, REG]
	xorl	%eax, %ecx
	# 0x8055a9e:	movl	%ecx, %ebx [REG, REG]
	movl	%ecx, %ebx
	# 0x8055aa0:	movl	-0x1c(%ebp), %ecx [MEM, REG]
	movl	-0x1c(%ebp), %ecx
	# 0x8055aa3:	xorl	%edx, %ecx [REG, REG]
	xorl	%edx, %ecx
	# 0x8055aa5:	movl	%ecx, %esi [REG, REG]
	movl	%ecx, %esi
	# 0x8055aa7:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055aaa:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8055aaf:	pushl	%edx [REG]
	pushl	%edx
	# 0x8055ab0:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055ab1:	pushl	%esi [REG]
	pushl	%esi
	# 0x8055ab2:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055ab3:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x8055ab8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055abb:	leal	-8(%ebp), %esp [MEM, REG]
	leal	-8(%ebp), %esp
	# 0x8055abe:	popl	%ebx [REG]
	popl	%ebx
	# 0x8055abf:	popl	%esi [REG]
	popl	%esi
	# 0x8055ac0:	popl	%ebp [REG]
	popl	%ebp
	# 0x8055ac1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055ac2
	.globl triple_hash_no_name
	.type triple_hash_no_name, @function
triple_hash_no_name:

	# 0x8055ac2:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8055ac3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055ac5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055ac6:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x8055ac9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055acc:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055acf:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055ad2:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8055ad5:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055ad8:	movl	0xc(%ebp), %ecx [MEM, REG]
	movl	0xc(%ebp), %ecx
	# 0x8055adb:	movl	$0, %ebx [IMM, REG]
	movl	$0, %ebx
	# 0x8055ae0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055ae1:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8055ae2:	pushl	%edx [REG]
	pushl	%edx
	# 0x8055ae3:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055ae4:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x8055ae9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055aec:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8055aef:	leave	 []
	leave	
	# 0x8055af0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055af1
	.globl triple_compare
	.type triple_compare, @function
triple_compare:

	# 0x8055af1:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8055af2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055af4:	pushl	%esi [REG]
	pushl	%esi
	# 0x8055af5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055af6:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8055af9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055afc:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055aff:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055b02:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055b05:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055b08:	movl	4(%eax), %ecx [MEM, REG]
	movl	4(%eax), %ecx
	# 0x8055b0b:	movl	8(%eax), %ebx [MEM, REG]
	movl	8(%eax), %ebx
	# 0x8055b0e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055b11:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8055b14:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055b17:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x8055b19:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x8055b1b:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x8055b1d:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x8055b1f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055b21:	jne	0x8055b63 [IMM <CODEREF>]
	jne	.label_1387
	# 0x8055b23:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055b26:	movl	0xc(%eax), %ecx [MEM, REG]
	movl	0xc(%eax), %ecx
	# 0x8055b29:	movl	0x10(%eax), %ebx [MEM, REG]
	movl	0x10(%eax), %ebx
	# 0x8055b2c:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055b2f:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x8055b32:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8055b35:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x8055b37:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x8055b39:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x8055b3b:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x8055b3d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055b3f:	jne	0x8055b63 [IMM <CODEREF>]
	jne	.label_1387
	# 0x8055b41:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055b44:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x8055b46:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055b49:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055b4b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055b4e:	pushl	%edx [REG]
	pushl	%edx
	# 0x8055b4f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055b50:	calll	0x805b895 [IMM <CODEREF>]
	calll	same_name
	# 0x8055b55:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055b58:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8055b5a:	je	0x8055b63 [IMM <CODEREF>]
	je	.label_1387
	# 0x8055b5c:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8055b61:	jmp	0x8055b68 [IMM <CODEREF>]
	jmp	.label_1388
	# 0x8055b63:	movl	$0, %eax [IMM, REG]
.label_1387:
	movl	$0, %eax
	# 0x8055b68:	andl	$1, %eax [IMM, REG]
.label_1388:
	andl	$1, %eax
	# 0x8055b6b:	leal	-8(%ebp), %esp [MEM, REG]
	leal	-8(%ebp), %esp
	# 0x8055b6e:	popl	%ebx [REG]
	popl	%ebx
	# 0x8055b6f:	popl	%esi [REG]
	popl	%esi
	# 0x8055b70:	popl	%ebp [REG]
	popl	%ebp
	# 0x8055b71:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055b72

	# 0x8055b72:	pushl	%ebp [REG]
	.globl triple_compare_ino_str
	.type triple_compare_ino_str, @function
triple_compare_ino_str:
	pushl	%ebp
	# 0x8055b73:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055b75:	pushl	%esi [REG]
	pushl	%esi
	# 0x8055b76:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055b77:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8055b7a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055b7d:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055b80:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055b83:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055b86:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055b89:	movl	4(%eax), %ecx [MEM, REG]
	movl	4(%eax), %ecx
	# 0x8055b8c:	movl	8(%eax), %ebx [MEM, REG]
	movl	8(%eax), %ebx
	# 0x8055b8f:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055b92:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8055b95:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055b98:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x8055b9a:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x8055b9c:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x8055b9e:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x8055ba0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055ba2:	jne	0x8055be4 [IMM <CODEREF>]
	jne	.label_1389
	# 0x8055ba4:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055ba7:	movl	0xc(%eax), %ecx [MEM, REG]
	movl	0xc(%eax), %ecx
	# 0x8055baa:	movl	0x10(%eax), %ebx [MEM, REG]
	movl	0x10(%eax), %ebx
	# 0x8055bad:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055bb0:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x8055bb3:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8055bb6:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x8055bb8:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x8055bba:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x8055bbc:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x8055bbe:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055bc0:	jne	0x8055be4 [IMM <CODEREF>]
	jne	.label_1389
	# 0x8055bc2:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055bc5:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x8055bc7:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055bca:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055bcc:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8055bcf:	pushl	%edx [REG]
	pushl	%edx
	# 0x8055bd0:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055bd1:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8055bd6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055bd9:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055bdb:	jne	0x8055be4 [IMM <CODEREF>]
	jne	.label_1389
	# 0x8055bdd:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8055be2:	jmp	0x8055be9 [IMM <CODEREF>]
	jmp	.label_1390
	# 0x8055be4:	movl	$0, %eax [IMM, REG]
.label_1389:
	movl	$0, %eax
	# 0x8055be9:	andl	$1, %eax [IMM, REG]
.label_1390:
	andl	$1, %eax
	# 0x8055bec:	leal	-8(%ebp), %esp [MEM, REG]
	leal	-8(%ebp), %esp
	# 0x8055bef:	popl	%ebx [REG]
	popl	%ebx
	# 0x8055bf0:	popl	%esi [REG]
	popl	%esi
	# 0x8055bf1:	popl	%ebp [REG]
	popl	%ebp
	# 0x8055bf2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055bf3

	# 0x8055bf3:	pushl	%ebp [REG]
	.globl triple_free
	.type triple_free, @function
triple_free:
	pushl	%ebp
	# 0x8055bf4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055bf6:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8055bf9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055bfc:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055bff:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8055c02:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055c04:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055c07:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055c08:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055c0d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055c10:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055c13:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8055c16:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8055c1b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055c1e:	nop	 []
	nop	
	# 0x8055c1f:	leave	 []
	leave	
	# 0x8055c20:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055c21

	# 0x8055c21:	pushl	%ebp [REG]
	.globl adjust_value
	.type adjust_value, @function
adjust_value:
	pushl	%ebp
	# 0x8055c22:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055c24:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055c25:	subl	$0x24, %esp [IMM, REG]
	subl	$0x24, %esp
	# 0x8055c28:	cmpl	$1, 8(%ebp) [IMM, MEM]
	cmpl	$1, 8(%ebp)
	# 0x8055c2c:	je	0x8055d1b [IMM <CODEREF>]
	je	.label_1392
	# 0x8055c32:	fldt	0x8063520 [MEM]
	fldt	label_1399
	# 0x8055c38:	fldt	0xc(%ebp) [MEM]
	fldt	0xc(%ebp)
	# 0x8055c3b:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8055c3d:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055c3f:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055c41:	jbe	0x8055d1b [IMM <CODEREF>]
	jbe	.label_1392
	# 0x8055c47:	fldt	0xc(%ebp) [MEM]
	fldt	0xc(%ebp)
	# 0x8055c4a:	fldt	0x8063530 [MEM]
	fldt	label_1394
	# 0x8055c50:	fxch	%st(1) [REG]
	fxch	%st(1)
	# 0x8055c52:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055c54:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055c56:	jae	0x8055c73 [IMM <CODEREF>]
	jae	.label_1395
	# 0x8055c58:	fldt	0xc(%ebp) [MEM]
	fldt	0xc(%ebp)
	# 0x8055c5b:	fnstcw	-0x1a(%ebp) [MEM]
	fnstcw	-0x1a(%ebp)
	# 0x8055c5e:	movzwl	-0x1a(%ebp), %eax [MEM, REG]
	movzwl	-0x1a(%ebp), %eax
	# 0x8055c62:	movb	$0xc, %ah [IMM, REG]
	movb	$0xc, %ah
	# 0x8055c64:	movw	%ax, -0x1c(%ebp) [REG, MEM]
	movw	%ax, -0x1c(%ebp)
	# 0x8055c68:	fldcw	-0x1c(%ebp) [MEM]
	fldcw	-0x1c(%ebp)
	# 0x8055c6b:	fistpll	-0x10(%ebp) [MEM]
	fistpll	-0x10(%ebp)
	# 0x8055c6e:	fldcw	-0x1a(%ebp) [MEM]
	fldcw	-0x1a(%ebp)
	# 0x8055c71:	jmp	0x8055cad [IMM <CODEREF>]
	jmp	.label_1400
	# 0x8055c73:	fldt	0xc(%ebp) [MEM]
.label_1395:
	fldt	0xc(%ebp)
	# 0x8055c76:	fldt	0x8063530 [MEM]
	fldt	label_1394
	# 0x8055c7c:	fsubrp	%st(1) [REG]
	fsubrp	%st(1)
	# 0x8055c7e:	fnstcw	-0x1a(%ebp) [MEM]
	fnstcw	-0x1a(%ebp)
	# 0x8055c81:	movzwl	-0x1a(%ebp), %ecx [MEM, REG]
	movzwl	-0x1a(%ebp), %ecx
	# 0x8055c85:	movb	$0xc, %ch [IMM, REG]
	movb	$0xc, %ch
	# 0x8055c87:	movw	%cx, -0x1c(%ebp) [REG, MEM]
	movw	%cx, -0x1c(%ebp)
	# 0x8055c8b:	fldcw	-0x1c(%ebp) [MEM]
	fldcw	-0x1c(%ebp)
	# 0x8055c8e:	fistpll	-0x10(%ebp) [MEM]
	fistpll	-0x10(%ebp)
	# 0x8055c91:	fldcw	-0x1a(%ebp) [MEM]
	fldcw	-0x1a(%ebp)
	# 0x8055c94:	movl	-0x10(%ebp), %ecx [MEM, REG]
	movl	-0x10(%ebp), %ecx
	# 0x8055c97:	xorb	$0, %ch [IMM, REG]
	xorb	$0, %ch
	# 0x8055c9a:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8055c9c:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x8055c9f:	xorl	$0x80000000, %ecx [IMM, REG]
	xorl	$0x80000000, %ecx
	# 0x8055ca5:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x8055ca7:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055caa:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x8055cad:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1400:
	movl	-0x10(%ebp), %eax
	# 0x8055cb0:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8055cb3:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8055cb6:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x8055cb9:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x8055cbd:	jne	0x8055ceb [IMM <CODEREF>]
	jne	.label_1397
	# 0x8055cbf:	fildll	-0x10(%ebp) [MEM]
	fildll	-0x10(%ebp)
	# 0x8055cc2:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8055cc6:	jns	0x8055cd0 [IMM <CODEREF>]
	jns	.label_1402
	# 0x8055cc8:	fldt	0x8063540 [MEM]
	fldt	label_1396
	# 0x8055cce:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x8055cd0:	fldt	0xc(%ebp) [MEM]
.label_1402:
	fldt	0xc(%ebp)
	# 0x8055cd3:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055cd5:	jp	0x8055ce2 [IMM <CODEREF>]
	jp	.label_1398
	# 0x8055cd7:	fldt	0xc(%ebp) [MEM]
	fldt	0xc(%ebp)
	# 0x8055cda:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x8055cdc:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x8055cde:	je	0x8055ceb [IMM <CODEREF>]
	je	.label_1397
	# 0x8055ce0:	jmp	0x8055ce4 [IMM <CODEREF>]
	jmp	.label_1391
	# 0x8055ce2:	fstp	%st(0) [REG]
.label_1398:
	fstp	%st(0)
	# 0x8055ce4:	movl	$1, %eax [IMM, REG]
.label_1391:
	movl	$1, %eax
	# 0x8055ce9:	jmp	0x8055cf0 [IMM <CODEREF>]
	jmp	.label_1393
	# 0x8055ceb:	movl	$0, %eax [IMM, REG]
.label_1397:
	movl	$0, %eax
	# 0x8055cf0:	movl	%eax, %ecx [REG, REG]
.label_1393:
	movl	%eax, %ecx
	# 0x8055cf2:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x8055cf4:	sarl	$0x1f, %ebx [IMM, REG]
	sarl	$0x1f, %ebx
	# 0x8055cf7:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8055cfa:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8055cfd:	addl	%eax, %ecx [REG, REG]
	addl	%eax, %ecx
	# 0x8055cff:	adcl	%edx, %ebx [REG, REG]
	adcl	%edx, %ebx
	# 0x8055d01:	movl	%ecx, -0x28(%ebp) [REG, MEM]
	movl	%ecx, -0x28(%ebp)
	# 0x8055d04:	movl	%ebx, -0x24(%ebp) [REG, MEM]
	movl	%ebx, -0x24(%ebp)
	# 0x8055d07:	fildll	-0x28(%ebp) [MEM]
	fildll	-0x28(%ebp)
	# 0x8055d0a:	cmpl	$0, -0x24(%ebp) [IMM, MEM]
	cmpl	$0, -0x24(%ebp)
	# 0x8055d0e:	jns	0x8055d18 [IMM <CODEREF>]
	jns	.label_1401
	# 0x8055d10:	fldt	0x8063540 [MEM]
	fldt	label_1396
	# 0x8055d16:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x8055d18:	fstpt	0xc(%ebp) [MEM]
.label_1401:
	fstpt	0xc(%ebp)
	# 0x8055d1b:	fldt	0xc(%ebp) [MEM]
.label_1392:
	fldt	0xc(%ebp)
	# 0x8055d1e:	addl	$0x24, %esp [IMM, REG]
	addl	$0x24, %esp
	# 0x8055d21:	popl	%ebx [REG]
	popl	%ebx
	# 0x8055d22:	popl	%ebp [REG]
	popl	%ebp
	# 0x8055d23:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055d24

	# 0x8055d24:	pushl	%ebp [REG]
	.globl group_number
	.type group_number, @function
group_number:
	pushl	%ebp
	# 0x8055d25:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055d27:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055d28:	subl	$0x54, %esp [IMM, REG]
	subl	$0x54, %esp
	# 0x8055d2b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055d2e:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x8055d31:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8055d34:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8055d37:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8055d3a:	movl	%eax, -0x54(%ebp) [REG, MEM]
	movl	%eax, -0x54(%ebp)
	# 0x8055d3d:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8055d43:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8055d46:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8055d48:	movl	$0xffffffff, -0x44(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x44(%ebp)
	# 0x8055d4f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055d52:	pushl	-0x54(%ebp) [MEM]
	pushl	-0x54(%ebp)
	# 0x8055d55:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8055d5a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055d5d:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x8055d60:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055d63:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x8055d66:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8055d69:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8055d6c:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x8055d6f:	leal	-0x35(%ebp), %eax [MEM, REG]
	leal	-0x35(%ebp), %eax
	# 0x8055d72:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055d73:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8055d78:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055d7b:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x8055d7e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055d81:	leal	0(%edx, %eax), %ebx [MEM, REG]
	leal	0(%edx, %eax), %ebx
	# 0x8055d84:	movl	-0x50(%ebp), %eax [MEM, REG]
.label_1404:
	movl	-0x50(%ebp), %eax
	# 0x8055d87:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8055d8a:	movb	%al, -0x45(%ebp) [REG, MEM]
	movb	%al, -0x45(%ebp)
	# 0x8055d8d:	cmpb	$0, -0x45(%ebp) [IMM, MEM]
	cmpb	$0, -0x45(%ebp)
	# 0x8055d91:	je	0x8055da9 [IMM <CODEREF>]
	je	.label_1403
	# 0x8055d93:	cmpb	$0x7e, -0x45(%ebp) [IMM, MEM]
	cmpb	$0x7e, -0x45(%ebp)
	# 0x8055d97:	ja	0x8055d9f [IMM <CODEREF>]
	ja	.label_1408
	# 0x8055d99:	movzbl	-0x45(%ebp), %eax [MEM, REG]
	movzbl	-0x45(%ebp), %eax
	# 0x8055d9d:	jmp	0x8055da2 [IMM <CODEREF>]
	jmp	.label_1410
	# 0x8055d9f:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_1408:
	movl	-0x40(%ebp), %eax
	# 0x8055da2:	movl	%eax, -0x44(%ebp) [REG, MEM]
.label_1410:
	movl	%eax, -0x44(%ebp)
	# 0x8055da5:	addl	$1, -0x50(%ebp) [IMM, MEM]
	addl	$1, -0x50(%ebp)
	# 0x8055da9:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_1403:
	movl	-0x40(%ebp), %eax
	# 0x8055dac:	cmpl	-0x44(%ebp), %eax [MEM, REG]
	cmpl	-0x44(%ebp), %eax
	# 0x8055daf:	jae	0x8055db7 [IMM <CODEREF>]
	jae	.label_1405
	# 0x8055db1:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8055db4:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x8055db7:	movl	-0x44(%ebp), %eax [MEM, REG]
.label_1405:
	movl	-0x44(%ebp), %eax
	# 0x8055dba:	negl	%eax [REG]
	negl	%eax
	# 0x8055dbc:	addl	%eax, %ebx [REG, REG]
	addl	%eax, %ebx
	# 0x8055dbe:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x8055dc1:	subl	%eax, -0x40(%ebp) [REG, MEM]
	subl	%eax, -0x40(%ebp)
	# 0x8055dc4:	leal	-0x35(%ebp), %edx [MEM, REG]
	leal	-0x35(%ebp), %edx
	# 0x8055dc7:	movl	-0x40(%ebp), %eax [MEM, REG]
	movl	-0x40(%ebp), %eax
	# 0x8055dca:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8055dcc:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8055dcf:	pushl	-0x44(%ebp) [MEM]
	pushl	-0x44(%ebp)
	# 0x8055dd2:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055dd3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055dd4:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8055dd9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055ddc:	cmpl	$0, -0x40(%ebp) [IMM, MEM]
	cmpl	$0, -0x40(%ebp)
	# 0x8055de0:	jne	0x8055df2 [IMM <CODEREF>]
	jne	.label_1409
	# 0x8055de2:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x8055de4:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x8055de7:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x8055dee:	je	0x8055e15 [IMM <CODEREF>]
	je	.label_1406
	# 0x8055df0:	jmp	0x8055e10 [IMM <CODEREF>]
	jmp	.label_1407
	# 0x8055df2:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1409:
	movl	-0x3c(%ebp), %eax
	# 0x8055df5:	negl	%eax [REG]
	negl	%eax
	# 0x8055df7:	addl	%eax, %ebx [REG, REG]
	addl	%eax, %ebx
	# 0x8055df9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8055dfc:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x8055dff:	pushl	-0x54(%ebp) [MEM]
	pushl	-0x54(%ebp)
	# 0x8055e02:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055e03:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8055e08:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055e0b:	jmp	0x8055d84 [IMM <CODEREF>]
	jmp	.label_1404
	# 0x8055e10:	calll	0x80496d0 [IMM <CODEREF>]
.label_1407:
	calll	__stack_chk_fail
	# 0x8055e15:	movl	-4(%ebp), %ebx [MEM, REG]
.label_1406:
	movl	-4(%ebp), %ebx
	# 0x8055e18:	leave	 []
	leave	
	# 0x8055e19:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8055e1a

	# 0x8055e1a:	pushl	%ebp [REG]
	.globl human_readable
	.type human_readable, @function
human_readable:
	pushl	%ebp
	# 0x8055e1b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8055e1d:	pushl	%edi [REG]
	pushl	%edi
	# 0x8055e1e:	pushl	%esi [REG]
	pushl	%esi
	# 0x8055e1f:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8055e20:	subl	$0xdc, %esp [IMM, REG]
	subl	$0xdc, %esp
	# 0x8055e26:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8055e29:	movl	%eax, -0xd0(%ebp) [REG, MEM]
	movl	%eax, -0xd0(%ebp)
	# 0x8055e2f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8055e32:	movl	%eax, -0xcc(%ebp) [REG, MEM]
	movl	%eax, -0xcc(%ebp)
	# 0x8055e38:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x8055e3b:	movl	%eax, -0xd8(%ebp) [REG, MEM]
	movl	%eax, -0xd8(%ebp)
	# 0x8055e41:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x8055e44:	movl	%eax, -0xd4(%ebp) [REG, MEM]
	movl	%eax, -0xd4(%ebp)
	# 0x8055e4a:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x8055e4d:	movl	%eax, -0xe0(%ebp) [REG, MEM]
	movl	%eax, -0xe0(%ebp)
	# 0x8055e53:	movl	0x24(%ebp), %eax [MEM, REG]
	movl	0x24(%ebp), %eax
	# 0x8055e56:	movl	%eax, -0xdc(%ebp) [REG, MEM]
	movl	%eax, -0xdc(%ebp)
	# 0x8055e5c:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8055e5f:	andl	$3, %eax [IMM, REG]
	andl	$3, %eax
	# 0x8055e62:	movl	%eax, -0x9c(%ebp) [REG, MEM]
	movl	%eax, -0x9c(%ebp)
	# 0x8055e68:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8055e6b:	andl	$0x20, %eax [IMM, REG]
	andl	$0x20, %eax
	# 0x8055e6e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055e70:	je	0x8055e79 [IMM <CODEREF>]
	je	.label_1420
	# 0x8055e72:	movl	$0x400, %eax [IMM, REG]
	movl	$0x400, %eax
	# 0x8055e77:	jmp	0x8055e7e [IMM <CODEREF>]
	jmp	.label_1443
	# 0x8055e79:	movl	$0x3e8, %eax [IMM, REG]
.label_1420:
	movl	$0x3e8, %eax
	# 0x8055e7e:	movl	%eax, -0x98(%ebp) [REG, MEM]
.label_1443:
	movl	%eax, -0x98(%ebp)
	# 0x8055e84:	movl	$0xffffffff, -0xc4(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0xc4(%ebp)
	# 0x8055e8e:	movl	$8, -0x94(%ebp) [IMM, MEM]
	movl	$8, -0x94(%ebp)
	# 0x8055e98:	movl	$0x80634a9, -0xb0(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1447, -176(%ebp)
	# 0x8055ea2:	movl	$1, -0xac(%ebp) [IMM, MEM]
	movl	$1, -0xac(%ebp)
	# 0x8055eac:	movl	$0x80634ab, -0x90(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1448, -144(%ebp)
	# 0x8055eb6:	movl	$0x80634ab, -0xa8(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1448, -168(%ebp)
	# 0x8055ec0:	calll	0x8049aa0 [IMM <CODEREF>]
	calll	localeconv
	# 0x8055ec5:	movl	%eax, -0x8c(%ebp) [REG, MEM]
	movl	%eax, -0x8c(%ebp)
	# 0x8055ecb:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8055ed1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055ed3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055ed6:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055ed7:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8055edc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055edf:	movl	%eax, -0x88(%ebp) [REG, MEM]
	movl	%eax, -0x88(%ebp)
	# 0x8055ee5:	cmpl	$0, -0x88(%ebp) [IMM, MEM]
	cmpl	$0, -0x88(%ebp)
	# 0x8055eec:	je	0x8055f11 [IMM <CODEREF>]
	je	.label_1452
	# 0x8055eee:	cmpl	$0x10, -0x88(%ebp) [IMM, MEM]
	cmpl	$0x10, -0x88(%ebp)
	# 0x8055ef5:	ja	0x8055f11 [IMM <CODEREF>]
	ja	.label_1452
	# 0x8055ef7:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8055efd:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8055eff:	movl	%eax, -0xb0(%ebp) [REG, MEM]
	movl	%eax, -0xb0(%ebp)
	# 0x8055f05:	movl	-0x88(%ebp), %eax [MEM, REG]
	movl	-0x88(%ebp), %eax
	# 0x8055f0b:	movl	%eax, -0xac(%ebp) [REG, MEM]
	movl	%eax, -0xac(%ebp)
	# 0x8055f11:	movl	-0x8c(%ebp), %eax [MEM, REG]
.label_1452:
	movl	-0x8c(%ebp), %eax
	# 0x8055f17:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8055f1a:	movl	%eax, -0x90(%ebp) [REG, MEM]
	movl	%eax, -0x90(%ebp)
	# 0x8055f20:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8055f26:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055f29:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8055f2c:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055f2d:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8055f32:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055f35:	cmpl	$0x10, %eax [IMM, REG]
	cmpl	$0x10, %eax
	# 0x8055f38:	ja	0x8055f49 [IMM <CODEREF>]
	ja	.label_1428
	# 0x8055f3a:	movl	-0x8c(%ebp), %eax [MEM, REG]
	movl	-0x8c(%ebp), %eax
	# 0x8055f40:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8055f43:	movl	%eax, -0xa8(%ebp) [REG, MEM]
	movl	%eax, -0xa8(%ebp)
	# 0x8055f49:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1428:
	movl	0x10(%ebp), %eax
	# 0x8055f4c:	addl	$0x287, %eax [IMM, REG]
	addl	$0x287, %eax
	# 0x8055f51:	movl	%eax, -0xbc(%ebp) [REG, MEM]
	movl	%eax, -0xbc(%ebp)
	# 0x8055f57:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x8055f5d:	movl	%eax, -0xc0(%ebp) [REG, MEM]
	movl	%eax, -0xc0(%ebp)
	# 0x8055f63:	movl	-0xe0(%ebp), %eax [MEM, REG]
	movl	-0xe0(%ebp), %eax
	# 0x8055f69:	movl	-0xdc(%ebp), %edx [MEM, REG]
	movl	-0xdc(%ebp), %edx
	# 0x8055f6f:	cmpl	-0xd4(%ebp), %edx [MEM, REG]
	cmpl	-0xd4(%ebp), %edx
	# 0x8055f75:	ja	0x8056058 [IMM <CODEREF>]
	ja	.label_1435
	# 0x8055f7b:	cmpl	-0xd4(%ebp), %edx [MEM, REG]
	cmpl	-0xd4(%ebp), %edx
	# 0x8055f81:	jb	0x8055f8f [IMM <CODEREF>]
	jb	.label_1446
	# 0x8055f83:	cmpl	-0xd8(%ebp), %eax [MEM, REG]
	cmpl	-0xd8(%ebp), %eax
	# 0x8055f89:	ja	0x8056058 [IMM <CODEREF>]
	ja	.label_1435
	# 0x8055f8f:	movl	-0xd8(%ebp), %eax [MEM, REG]
.label_1446:
	movl	-0xd8(%ebp), %eax
	# 0x8055f95:	movl	-0xd4(%ebp), %edx [MEM, REG]
	movl	-0xd4(%ebp), %edx
	# 0x8055f9b:	pushl	-0xdc(%ebp) [MEM]
	pushl	-0xdc(%ebp)
	# 0x8055fa1:	pushl	-0xe0(%ebp) [MEM]
	pushl	-0xe0(%ebp)
	# 0x8055fa7:	pushl	%edx [REG]
	pushl	%edx
	# 0x8055fa8:	pushl	%eax [REG]
	pushl	%eax
	# 0x8055fa9:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x8055fae:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055fb1:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x8055fb3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8055fb5:	jne	0x80561a6 [IMM <CODEREF>]
	jne	.label_1418
	# 0x8055fbb:	pushl	-0xdc(%ebp) [MEM]
	pushl	-0xdc(%ebp)
	# 0x8055fc1:	pushl	-0xe0(%ebp) [MEM]
	pushl	-0xe0(%ebp)
	# 0x8055fc7:	pushl	-0xd4(%ebp) [MEM]
	pushl	-0xd4(%ebp)
	# 0x8055fcd:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x8055fd3:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x8055fd8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8055fdb:	movl	%eax, -0x68(%ebp) [REG, MEM]
	movl	%eax, -0x68(%ebp)
	# 0x8055fde:	movl	%edx, -0x64(%ebp) [REG, MEM]
	movl	%edx, -0x64(%ebp)
	# 0x8055fe1:	movl	-0xcc(%ebp), %eax [MEM, REG]
	movl	-0xcc(%ebp), %eax
	# 0x8055fe7:	imull	-0x68(%ebp), %eax [MEM, REG]
	imull	-0x68(%ebp), %eax
	# 0x8055feb:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8055fed:	movl	-0x64(%ebp), %eax [MEM, REG]
	movl	-0x64(%ebp), %eax
	# 0x8055ff0:	imull	-0xd0(%ebp), %eax [MEM, REG]
	imull	-0xd0(%ebp), %eax
	# 0x8055ff7:	leal	0(%edx, %eax), %ecx [MEM, REG]
	leal	0(%edx, %eax), %ecx
	# 0x8055ffa:	movl	-0x68(%ebp), %eax [MEM, REG]
	movl	-0x68(%ebp), %eax
	# 0x8055ffd:	mull	-0xd0(%ebp) [MEM]
	mull	-0xd0(%ebp)
	# 0x8056003:	addl	%edx, %ecx [REG, REG]
	addl	%edx, %ecx
	# 0x8056005:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x8056007:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x805600a:	movl	%edx, -0x74(%ebp) [REG, MEM]
	movl	%edx, -0x74(%ebp)
	# 0x805600d:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x8056010:	movl	%edx, -0x74(%ebp) [REG, MEM]
	movl	%edx, -0x74(%ebp)
	# 0x8056013:	pushl	-0x64(%ebp) [MEM]
	pushl	-0x64(%ebp)
	# 0x8056016:	pushl	-0x68(%ebp) [MEM]
	pushl	-0x68(%ebp)
	# 0x8056019:	pushl	-0x74(%ebp) [MEM]
	pushl	-0x74(%ebp)
	# 0x805601c:	pushl	-0x78(%ebp) [MEM]
	pushl	-0x78(%ebp)
	# 0x805601f:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x8056024:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056027:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x8056029:	xorl	-0xcc(%ebp), %ecx [MEM, REG]
	xorl	-0xcc(%ebp), %ecx
	# 0x805602f:	xorl	-0xd0(%ebp), %eax [MEM, REG]
	xorl	-0xd0(%ebp), %eax
	# 0x8056035:	orl	%ecx, %eax [REG, REG]
	orl	%ecx, %eax
	# 0x8056037:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056039:	jne	0x80561a6 [IMM <CODEREF>]
	jne	.label_1418
	# 0x805603f:	movl	$0, -0xc8(%ebp) [IMM, MEM]
	movl	$0, -0xc8(%ebp)
	# 0x8056049:	movl	$0, -0xb4(%ebp) [IMM, MEM]
	movl	$0, -0xb4(%ebp)
	# 0x8056053:	jmp	0x805641c [IMM <CODEREF>]
	jmp	.label_1430
	# 0x8056058:	movl	-0xd4(%ebp), %eax [MEM, REG]
.label_1435:
	movl	-0xd4(%ebp), %eax
	# 0x805605e:	orl	-0xd8(%ebp), %eax [MEM, REG]
	orl	-0xd8(%ebp), %eax
	# 0x8056064:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056066:	je	0x80561a6 [IMM <CODEREF>]
	je	.label_1418
	# 0x805606c:	movl	-0xe0(%ebp), %eax [MEM, REG]
	movl	-0xe0(%ebp), %eax
	# 0x8056072:	movl	-0xdc(%ebp), %edx [MEM, REG]
	movl	-0xdc(%ebp), %edx
	# 0x8056078:	pushl	-0xd4(%ebp) [MEM]
	pushl	-0xd4(%ebp)
	# 0x805607e:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x8056084:	pushl	%edx [REG]
	pushl	%edx
	# 0x8056085:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056086:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x805608b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805608e:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x8056090:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056092:	jne	0x80561a6 [IMM <CODEREF>]
	jne	.label_1418
	# 0x8056098:	pushl	-0xd4(%ebp) [MEM]
	pushl	-0xd4(%ebp)
	# 0x805609e:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x80560a4:	pushl	-0xdc(%ebp) [MEM]
	pushl	-0xdc(%ebp)
	# 0x80560aa:	pushl	-0xe0(%ebp) [MEM]
	pushl	-0xe0(%ebp)
	# 0x80560b0:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x80560b5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80560b8:	movl	%eax, -0x60(%ebp) [REG, MEM]
	movl	%eax, -0x60(%ebp)
	# 0x80560bb:	movl	%edx, -0x5c(%ebp) [REG, MEM]
	movl	%edx, -0x5c(%ebp)
	# 0x80560be:	movl	-0xd0(%ebp), %eax [MEM, REG]
	movl	-0xd0(%ebp), %eax
	# 0x80560c4:	movl	-0xcc(%ebp), %edx [MEM, REG]
	movl	-0xcc(%ebp), %edx
	# 0x80560ca:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x80560cd:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x80560d0:	pushl	%edx [REG]
	pushl	%edx
	# 0x80560d1:	pushl	%eax [REG]
	pushl	%eax
	# 0x80560d2:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x80560d7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80560da:	imull	$0xa, %edx, %ebx [IMM, REG, REG]
	imull	$0xa, %edx, %ebx
	# 0x80560dd:	imull	$0, %eax, %ecx [IMM, REG, REG]
	imull	$0, %eax, %ecx
	# 0x80560e0:	addl	%ebx, %ecx [REG, REG]
	addl	%ebx, %ecx
	# 0x80560e2:	movl	$0xa, %ebx [IMM, REG]
	movl	$0xa, %ebx
	# 0x80560e7:	mull	%ebx [REG]
	mull	%ebx
	# 0x80560e9:	addl	%edx, %ecx [REG, REG]
	addl	%edx, %ecx
	# 0x80560eb:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x80560ed:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x80560f0:	movl	%edx, -0x54(%ebp) [REG, MEM]
	movl	%edx, -0x54(%ebp)
	# 0x80560f3:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x80560f6:	movl	%edx, -0x54(%ebp) [REG, MEM]
	movl	%edx, -0x54(%ebp)
	# 0x80560f9:	movl	-0x58(%ebp), %eax [MEM, REG]
	movl	-0x58(%ebp), %eax
	# 0x80560fc:	movl	-0x54(%ebp), %edx [MEM, REG]
	movl	-0x54(%ebp), %edx
	# 0x80560ff:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x8056102:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8056105:	pushl	%edx [REG]
	pushl	%edx
	# 0x8056106:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056107:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x805610c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805610f:	shldl	$1, %eax, %edx [IMM, REG, REG]
	shldl	$1, %eax, %edx
	# 0x8056113:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8056115:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x8056118:	movl	%edx, -0x4c(%ebp) [REG, MEM]
	movl	%edx, -0x4c(%ebp)
	# 0x805611b:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x805611e:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8056121:	pushl	-0xcc(%ebp) [MEM]
	pushl	-0xcc(%ebp)
	# 0x8056127:	pushl	-0xd0(%ebp) [MEM]
	pushl	-0xd0(%ebp)
	# 0x805612d:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x8056132:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056135:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x8056138:	movl	%edx, -0x74(%ebp) [REG, MEM]
	movl	%edx, -0x74(%ebp)
	# 0x805613b:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x805613e:	pushl	-0x60(%ebp) [MEM]
	pushl	-0x60(%ebp)
	# 0x8056141:	pushl	-0x54(%ebp) [MEM]
	pushl	-0x54(%ebp)
	# 0x8056144:	pushl	-0x58(%ebp) [MEM]
	pushl	-0x58(%ebp)
	# 0x8056147:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x805614c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805614f:	movl	%eax, -0xc8(%ebp) [REG, MEM]
	movl	%eax, -0xc8(%ebp)
	# 0x8056155:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x8056158:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805615b:	cmpl	-0x5c(%ebp), %edx [MEM, REG]
	cmpl	-0x5c(%ebp), %edx
	# 0x805615e:	ja	0x805617a [IMM <CODEREF>]
	ja	.label_1437
	# 0x8056160:	cmpl	-0x5c(%ebp), %edx [MEM, REG]
	cmpl	-0x5c(%ebp), %edx
	# 0x8056163:	jb	0x805616a [IMM <CODEREF>]
	jb	.label_1440
	# 0x8056165:	cmpl	-0x60(%ebp), %eax [MEM, REG]
	cmpl	-0x60(%ebp), %eax
	# 0x8056168:	jae	0x805617a [IMM <CODEREF>]
	jae	.label_1437
	# 0x805616a:	movl	-0x50(%ebp), %eax [MEM, REG]
.label_1440:
	movl	-0x50(%ebp), %eax
	# 0x805616d:	orl	-0x4c(%ebp), %eax [MEM, REG]
	orl	-0x4c(%ebp), %eax
	# 0x8056170:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056172:	setne	%al [REG]
	setne	%al
	# 0x8056175:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8056178:	jmp	0x805619b [IMM <CODEREF>]
	jmp	.label_1438
	# 0x805617a:	movl	-0x60(%ebp), %eax [MEM, REG]
.label_1437:
	movl	-0x60(%ebp), %eax
	# 0x805617d:	movl	-0x5c(%ebp), %edx [MEM, REG]
	movl	-0x5c(%ebp), %edx
	# 0x8056180:	cmpl	-0x4c(%ebp), %edx [MEM, REG]
	cmpl	-0x4c(%ebp), %edx
	# 0x8056183:	ja	0x8056196 [IMM <CODEREF>]
	ja	.label_1445
	# 0x8056185:	cmpl	-0x4c(%ebp), %edx [MEM, REG]
	cmpl	-0x4c(%ebp), %edx
	# 0x8056188:	jb	0x805618f [IMM <CODEREF>]
	jb	.label_1450
	# 0x805618a:	cmpl	-0x50(%ebp), %eax [MEM, REG]
	cmpl	-0x50(%ebp), %eax
	# 0x805618d:	jae	0x8056196 [IMM <CODEREF>]
	jae	.label_1445
	# 0x805618f:	movl	$3, %eax [IMM, REG]
.label_1450:
	movl	$3, %eax
	# 0x8056194:	jmp	0x805619b [IMM <CODEREF>]
	jmp	.label_1438
	# 0x8056196:	movl	$2, %eax [IMM, REG]
.label_1445:
	movl	$2, %eax
	# 0x805619b:	movl	%eax, -0xb4(%ebp) [REG, MEM]
.label_1438:
	movl	%eax, -0xb4(%ebp)
	# 0x80561a1:	jmp	0x805641c [IMM <CODEREF>]
	jmp	.label_1430
	# 0x80561a6:	fildll	-0xe0(%ebp) [MEM]
.label_1418:
	fildll	-0xe0(%ebp)
	# 0x80561ac:	cmpl	$0, -0xdc(%ebp) [IMM, MEM]
	cmpl	$0, -0xdc(%ebp)
	# 0x80561b3:	jns	0x80561bd [IMM <CODEREF>]
	jns	.label_1456
	# 0x80561b5:	fldt	0x8063540 [MEM]
	fldt	label_1396
	# 0x80561bb:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x80561bd:	fstpt	-0x38(%ebp) [MEM]
.label_1456:
	fstpt	-0x38(%ebp)
	# 0x80561c0:	fildll	-0xd0(%ebp) [MEM]
	fildll	-0xd0(%ebp)
	# 0x80561c6:	cmpl	$0, -0xcc(%ebp) [IMM, MEM]
	cmpl	$0, -0xcc(%ebp)
	# 0x80561cd:	jns	0x80561d7 [IMM <CODEREF>]
	jns	.label_1462
	# 0x80561cf:	fldt	0x8063540 [MEM]
	fldt	label_1396
	# 0x80561d5:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x80561d7:	fildll	-0xd8(%ebp) [MEM]
.label_1462:
	fildll	-0xd8(%ebp)
	# 0x80561dd:	cmpl	$0, -0xd4(%ebp) [IMM, MEM]
	cmpl	$0, -0xd4(%ebp)
	# 0x80561e4:	jns	0x80561ee [IMM <CODEREF>]
	jns	.label_1413
	# 0x80561e6:	fldt	0x8063540 [MEM]
	fldt	label_1396
	# 0x80561ec:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x80561ee:	fldt	-0x38(%ebp) [MEM]
.label_1413:
	fldt	-0x38(%ebp)
	# 0x80561f1:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x80561f3:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80561f5:	fstpt	-0x28(%ebp) [MEM]
	fstpt	-0x28(%ebp)
	# 0x80561f8:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x80561fb:	andl	$0x10, %eax [IMM, REG]
	andl	$0x10, %eax
	# 0x80561fe:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056200:	jne	0x8056256 [IMM <CODEREF>]
	jne	.label_1470
	# 0x8056202:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x8056205:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x8056208:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805620b:	pushl	-0x9c(%ebp) [MEM]
	pushl	-0x9c(%ebp)
	# 0x8056211:	calll	0x8055c21 [IMM <CODEREF>]
	calll	adjust_value
	# 0x8056216:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056219:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805621c:	leal	-0xc(%esp), %esp [MEM, REG]
	leal	-0xc(%esp), %esp
	# 0x8056220:	fstpt	0(%esp) [MEM]
	fstpt	0(%esp)
	# 0x8056223:	pushl	$0x80634ac [IMM <DATAREF>]
	pushl	$label_1419
	# 0x8056228:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805622b:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x8056230:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8056233:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056236:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8056239:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805623e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056241:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x8056247:	movl	$0, -0xa0(%ebp) [IMM, MEM]
	movl	$0, -0xa0(%ebp)
	# 0x8056251:	jmp	0x80563c9 [IMM <CODEREF>]
	jmp	.label_1429
	# 0x8056256:	fld1	 []
.label_1470:
	fld1	
	# 0x8056258:	fstpt	-0x48(%ebp) [MEM]
	fstpt	-0x48(%ebp)
	# 0x805625b:	movl	$0, -0xc4(%ebp) [IMM, MEM]
	movl	$0, -0xc4(%ebp)
	# 0x8056265:	movl	-0x98(%ebp), %eax [MEM, REG]
.label_1461:
	movl	-0x98(%ebp), %eax
	# 0x805626b:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056270:	movl	%eax, -0xe8(%ebp) [REG, MEM]
	movl	%eax, -0xe8(%ebp)
	# 0x8056276:	movl	%edx, -0xe4(%ebp) [REG, MEM]
	movl	%edx, -0xe4(%ebp)
	# 0x805627c:	fildll	-0xe8(%ebp) [MEM]
	fildll	-0xe8(%ebp)
	# 0x8056282:	fldt	-0x48(%ebp) [MEM]
	fldt	-0x48(%ebp)
	# 0x8056285:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x8056287:	fstpt	-0x48(%ebp) [MEM]
	fstpt	-0x48(%ebp)
	# 0x805628a:	addl	$1, -0xc4(%ebp) [IMM, MEM]
	addl	$1, -0xc4(%ebp)
	# 0x8056291:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x8056297:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805629c:	movl	%eax, -0xe8(%ebp) [REG, MEM]
	movl	%eax, -0xe8(%ebp)
	# 0x80562a2:	movl	%edx, -0xe4(%ebp) [REG, MEM]
	movl	%edx, -0xe4(%ebp)
	# 0x80562a8:	fildll	-0xe8(%ebp) [MEM]
	fildll	-0xe8(%ebp)
	# 0x80562ae:	fldt	-0x48(%ebp) [MEM]
	fldt	-0x48(%ebp)
	# 0x80562b1:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x80562b3:	fldt	-0x28(%ebp) [MEM]
	fldt	-0x28(%ebp)
	# 0x80562b6:	fucomip	%st(1) [REG]
	fucomip	%st(1)
	# 0x80562b8:	fstp	%st(0) [REG]
	fstp	%st(0)
	# 0x80562ba:	jb	0x80562ca [IMM <CODEREF>]
	jb	.label_1439
	# 0x80562bc:	movl	-0xc4(%ebp), %eax [MEM, REG]
	movl	-0xc4(%ebp), %eax
	# 0x80562c2:	cmpl	-0x94(%ebp), %eax [MEM, REG]
	cmpl	-0x94(%ebp), %eax
	# 0x80562c8:	jl	0x8056265 [IMM <CODEREF>]
	jl	.label_1461
	# 0x80562ca:	fldt	-0x28(%ebp) [MEM]
.label_1439:
	fldt	-0x28(%ebp)
	# 0x80562cd:	fldt	-0x48(%ebp) [MEM]
	fldt	-0x48(%ebp)
	# 0x80562d0:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x80562d2:	fstpt	-0x28(%ebp) [MEM]
	fstpt	-0x28(%ebp)
	# 0x80562d5:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x80562d8:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x80562db:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x80562de:	pushl	-0x9c(%ebp) [MEM]
	pushl	-0x9c(%ebp)
	# 0x80562e4:	calll	0x8055c21 [IMM <CODEREF>]
	calll	adjust_value
	# 0x80562e9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80562ec:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80562ef:	leal	-0xc(%esp), %esp [MEM, REG]
	leal	-0xc(%esp), %esp
	# 0x80562f3:	fstpt	0(%esp) [MEM]
	fstpt	0(%esp)
	# 0x80562f6:	pushl	$0x80634b2 [IMM <DATAREF>]
	pushl	$label_1469
	# 0x80562fb:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80562fe:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x8056303:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8056306:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056309:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805630c:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8056311:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056314:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x805631a:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x8056320:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8056323:	movl	%eax, -0xa0(%ebp) [REG, MEM]
	movl	%eax, -0xa0(%ebp)
	# 0x8056329:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805632c:	andl	$0x20, %eax [IMM, REG]
	andl	$0x20, %eax
	# 0x805632f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056331:	sete	%al [REG]
	sete	%al
	# 0x8056334:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x8056337:	movl	-0xa0(%ebp), %eax [MEM, REG]
	movl	-0xa0(%ebp), %eax
	# 0x805633d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805633f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8056342:	cmpl	-0xa4(%ebp), %eax [MEM, REG]
	cmpl	-0xa4(%ebp), %eax
	# 0x8056348:	jb	0x8056369 [IMM <CODEREF>]
	jb	.label_1417
	# 0x805634a:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805634d:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x8056350:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056352:	je	0x80563c9 [IMM <CODEREF>]
	je	.label_1429
	# 0x8056354:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x805635a:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805635d:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8056360:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8056362:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056365:	cmpb	$0x30, %al [IMM, REG]
	cmpb	$0x30, %al
	# 0x8056367:	jne	0x80563c9 [IMM <CODEREF>]
	jne	.label_1429
	# 0x8056369:	fldt	-0x28(%ebp) [MEM]
.label_1417:
	fldt	-0x28(%ebp)
	# 0x805636c:	fldt	0x8063550 [MEM]
	fldt	label_1441
	# 0x8056372:	fmulp	%st(1) [REG]
	fmulp	%st(1)
	# 0x8056374:	leal	-0xc(%esp), %esp [MEM, REG]
	leal	-0xc(%esp), %esp
	# 0x8056378:	fstpt	0(%esp) [MEM]
	fstpt	0(%esp)
	# 0x805637b:	pushl	-0x9c(%ebp) [MEM]
	pushl	-0x9c(%ebp)
	# 0x8056381:	calll	0x8055c21 [IMM <CODEREF>]
	calll	adjust_value
	# 0x8056386:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056389:	fldt	0x8063550 [MEM]
	fldt	label_1441
	# 0x805638f:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x8056391:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056394:	leal	-0xc(%esp), %esp [MEM, REG]
	leal	-0xc(%esp), %esp
	# 0x8056398:	fstpt	0(%esp) [MEM]
	fstpt	0(%esp)
	# 0x805639b:	pushl	$0x80634ac [IMM <DATAREF>]
	pushl	$label_1419
	# 0x80563a0:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80563a3:	calll	0x8049a90 [IMM <CODEREF>]
	calll	sprintf
	# 0x80563a8:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80563ab:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80563ae:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80563b1:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x80563b6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80563b9:	movl	%eax, -0xa4(%ebp) [REG, MEM]
	movl	%eax, -0xa4(%ebp)
	# 0x80563bf:	movl	$0, -0xa0(%ebp) [IMM, MEM]
	movl	$0, -0xa0(%ebp)
	# 0x80563c9:	movl	-0xa4(%ebp), %eax [MEM, REG]
.label_1429:
	movl	-0xa4(%ebp), %eax
	# 0x80563cf:	negl	%eax [REG]
	negl	%eax
	# 0x80563d1:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80563d3:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x80563d9:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80563db:	movl	%eax, -0xc0(%ebp) [REG, MEM]
	movl	%eax, -0xc0(%ebp)
	# 0x80563e1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80563e4:	pushl	-0xa4(%ebp) [MEM]
	pushl	-0xa4(%ebp)
	# 0x80563ea:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80563ed:	pushl	-0xc0(%ebp) [MEM]
	pushl	-0xc0(%ebp)
	# 0x80563f3:	calll	0x80495e0 [IMM <CODEREF>]
	calll	memmove
	# 0x80563f8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80563fb:	movl	-0xa4(%ebp), %eax [MEM, REG]
	movl	-0xa4(%ebp), %eax
	# 0x8056401:	subl	-0xa0(%ebp), %eax [MEM, REG]
	subl	-0xa0(%ebp), %eax
	# 0x8056407:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056409:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x805640f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8056411:	movl	%eax, -0xb8(%ebp) [REG, MEM]
	movl	%eax, -0xb8(%ebp)
	# 0x8056417:	jmp	0x80567d5 [IMM <CODEREF>]
	jmp	.label_1471
	# 0x805641c:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1430:
	movl	0x14(%ebp), %eax
	# 0x805641f:	andl	$0x10, %eax [IMM, REG]
	andl	$0x10, %eax
	# 0x8056422:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056424:	je	0x8056670 [IMM <CODEREF>]
	je	.label_1421
	# 0x805642a:	movl	$0, -0xc4(%ebp) [IMM, MEM]
	movl	$0, -0xc4(%ebp)
	# 0x8056434:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x805643a:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805643f:	cmpl	-0x74(%ebp), %edx [MEM, REG]
	cmpl	-0x74(%ebp), %edx
	# 0x8056442:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x8056448:	cmpl	-0x74(%ebp), %edx [MEM, REG]
	cmpl	-0x74(%ebp), %edx
	# 0x805644b:	jb	0x8056456 [IMM <CODEREF>]
	jb	.label_1434
	# 0x805644d:	cmpl	-0x78(%ebp), %eax [MEM, REG]
	cmpl	-0x78(%ebp), %eax
	# 0x8056450:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x8056456:	movl	-0x98(%ebp), %ecx [MEM, REG]
.label_1434:
	movl	-0x98(%ebp), %ecx
	# 0x805645c:	movl	$0, %ebx [IMM, REG]
	movl	$0, %ebx
	# 0x8056461:	movl	-0x78(%ebp), %eax [MEM, REG]
	movl	-0x78(%ebp), %eax
	# 0x8056464:	movl	-0x74(%ebp), %edx [MEM, REG]
	movl	-0x74(%ebp), %edx
	# 0x8056467:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8056468:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8056469:	pushl	%edx [REG]
	pushl	%edx
	# 0x805646a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805646b:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x8056470:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056473:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056475:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8056477:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805647a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805647c:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x805647e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056480:	movl	-0xc8(%ebp), %eax [MEM, REG]
	movl	-0xc8(%ebp), %eax
	# 0x8056486:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8056488:	movl	%eax, -0x84(%ebp) [REG, MEM]
	movl	%eax, -0x84(%ebp)
	# 0x805648e:	movl	-0x84(%ebp), %eax [MEM, REG]
	movl	-0x84(%ebp), %eax
	# 0x8056494:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056499:	divl	-0x98(%ebp) [MEM]
	divl	-0x98(%ebp)
	# 0x805649f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80564a1:	leal	0(%eax, %eax), %edx [MEM, REG]
	leal	0(%eax, %eax), %edx
	# 0x80564a4:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x80564aa:	sarl	$1, %eax [IMM, REG]
	sarl	$1, %eax
	# 0x80564ac:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80564ae:	movl	%eax, -0x80(%ebp) [REG, MEM]
	movl	%eax, -0x80(%ebp)
	# 0x80564b1:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x80564b7:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80564bc:	pushl	%edx [REG]
	pushl	%edx
	# 0x80564bd:	pushl	%eax [REG]
	pushl	%eax
	# 0x80564be:	pushl	-0x74(%ebp) [MEM]
	pushl	-0x74(%ebp)
	# 0x80564c1:	pushl	-0x78(%ebp) [MEM]
	pushl	-0x78(%ebp)
	# 0x80564c4:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x80564c9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80564cc:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x80564cf:	movl	%edx, -0x74(%ebp) [REG, MEM]
	movl	%edx, -0x74(%ebp)
	# 0x80564d2:	movl	-0x84(%ebp), %eax [MEM, REG]
	movl	-0x84(%ebp), %eax
	# 0x80564d8:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80564dd:	divl	-0x98(%ebp) [MEM]
	divl	-0x98(%ebp)
	# 0x80564e3:	movl	%eax, -0xc8(%ebp) [REG, MEM]
	movl	%eax, -0xc8(%ebp)
	# 0x80564e9:	movl	-0x80(%ebp), %eax [MEM, REG]
	movl	-0x80(%ebp), %eax
	# 0x80564ec:	cmpl	-0x98(%ebp), %eax [MEM, REG]
	cmpl	-0x98(%ebp), %eax
	# 0x80564f2:	jae	0x8056509 [IMM <CODEREF>]
	jae	.label_1460
	# 0x80564f4:	movl	-0xb4(%ebp), %edx [MEM, REG]
	movl	-0xb4(%ebp), %edx
	# 0x80564fa:	movl	-0x80(%ebp), %eax [MEM, REG]
	movl	-0x80(%ebp), %eax
	# 0x80564fd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80564ff:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056501:	setne	%al [REG]
	setne	%al
	# 0x8056504:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8056507:	jmp	0x8056528 [IMM <CODEREF>]
	jmp	.label_1458
	# 0x8056509:	movl	-0xb4(%ebp), %edx [MEM, REG]
.label_1460:
	movl	-0xb4(%ebp), %edx
	# 0x805650f:	movl	-0x80(%ebp), %eax [MEM, REG]
	movl	-0x80(%ebp), %eax
	# 0x8056512:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8056514:	cmpl	-0x98(%ebp), %eax [MEM, REG]
	cmpl	-0x98(%ebp), %eax
	# 0x805651a:	jbe	0x8056523 [IMM <CODEREF>]
	jbe	.label_1412
	# 0x805651c:	movl	$3, %eax [IMM, REG]
	movl	$3, %eax
	# 0x8056521:	jmp	0x8056528 [IMM <CODEREF>]
	jmp	.label_1458
	# 0x8056523:	movl	$2, %eax [IMM, REG]
.label_1412:
	movl	$2, %eax
	# 0x8056528:	movl	%eax, -0xb4(%ebp) [REG, MEM]
.label_1458:
	movl	%eax, -0xb4(%ebp)
	# 0x805652e:	addl	$1, -0xc4(%ebp) [IMM, MEM]
	addl	$1, -0xc4(%ebp)
	# 0x8056535:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x805653b:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056540:	cmpl	-0x74(%ebp), %edx [MEM, REG]
	cmpl	-0x74(%ebp), %edx
	# 0x8056543:	ja	0x8056561 [IMM <CODEREF>]
	ja	.label_1425
	# 0x8056545:	cmpl	-0x74(%ebp), %edx [MEM, REG]
	cmpl	-0x74(%ebp), %edx
	# 0x8056548:	jb	0x805654f [IMM <CODEREF>]
	jb	.label_1433
	# 0x805654a:	cmpl	-0x78(%ebp), %eax [MEM, REG]
	cmpl	-0x78(%ebp), %eax
	# 0x805654d:	ja	0x8056561 [IMM <CODEREF>]
	ja	.label_1425
	# 0x805654f:	movl	-0xc4(%ebp), %eax [MEM, REG]
.label_1433:
	movl	-0xc4(%ebp), %eax
	# 0x8056555:	cmpl	-0x94(%ebp), %eax [MEM, REG]
	cmpl	-0x94(%ebp), %eax
	# 0x805655b:	jl	0x8056456 [IMM <CODEREF>]
	jl	.label_1434
	# 0x8056561:	cmpl	$0, -0x74(%ebp) [IMM, MEM]
.label_1425:
	cmpl	$0, -0x74(%ebp)
	# 0x8056565:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x805656b:	cmpl	$0, -0x74(%ebp) [IMM, MEM]
	cmpl	$0, -0x74(%ebp)
	# 0x805656f:	jb	0x805657b [IMM <CODEREF>]
	jb	.label_1442
	# 0x8056571:	cmpl	$9, -0x78(%ebp) [IMM, MEM]
	cmpl	$9, -0x78(%ebp)
	# 0x8056575:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x805657b:	cmpl	$1, -0x9c(%ebp) [IMM, MEM]
.label_1442:
	cmpl	$1, -0x9c(%ebp)
	# 0x8056582:	jne	0x805659f [IMM <CODEREF>]
	jne	.label_1468
	# 0x8056584:	movl	-0xc8(%ebp), %eax [MEM, REG]
	movl	-0xc8(%ebp), %eax
	# 0x805658a:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805658d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805658f:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x8056595:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8056597:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x805659a:	setg	%al [REG]
	setg	%al
	# 0x805659d:	jmp	0x80565c0 [IMM <CODEREF>]
	jmp	.label_1449
	# 0x805659f:	cmpl	$0, -0x9c(%ebp) [IMM, MEM]
.label_1468:
	cmpl	$0, -0x9c(%ebp)
	# 0x80565a6:	jne	0x80565b8 [IMM <CODEREF>]
	jne	.label_1454
	# 0x80565a8:	cmpl	$0, -0xb4(%ebp) [IMM, MEM]
	cmpl	$0, -0xb4(%ebp)
	# 0x80565af:	jle	0x80565b8 [IMM <CODEREF>]
	jle	.label_1454
	# 0x80565b1:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80565b6:	jmp	0x80565bd [IMM <CODEREF>]
	jmp	.label_1427
	# 0x80565b8:	movl	$0, %eax [IMM, REG]
.label_1454:
	movl	$0, %eax
	# 0x80565bd:	andl	$1, %eax [IMM, REG]
.label_1427:
	andl	$1, %eax
	# 0x80565c0:	testb	%al, %al [REG, REG]
.label_1449:
	testb	%al, %al
	# 0x80565c2:	je	0x80565f0 [IMM <CODEREF>]
	je	.label_1453
	# 0x80565c4:	addl	$1, -0xc8(%ebp) [IMM, MEM]
	addl	$1, -0xc8(%ebp)
	# 0x80565cb:	movl	$0, -0xb4(%ebp) [IMM, MEM]
	movl	$0, -0xb4(%ebp)
	# 0x80565d5:	cmpl	$0xa, -0xc8(%ebp) [IMM, MEM]
	cmpl	$0xa, -0xc8(%ebp)
	# 0x80565dc:	jne	0x80565f0 [IMM <CODEREF>]
	jne	.label_1453
	# 0x80565de:	addl	$1, -0x78(%ebp) [IMM, MEM]
	addl	$1, -0x78(%ebp)
	# 0x80565e2:	adcl	$0, -0x74(%ebp) [IMM, MEM]
	adcl	$0, -0x74(%ebp)
	# 0x80565e6:	movl	$0, -0xc8(%ebp) [IMM, MEM]
	movl	$0, -0xc8(%ebp)
	# 0x80565f0:	cmpl	$0, -0x74(%ebp) [IMM, MEM]
.label_1453:
	cmpl	$0, -0x74(%ebp)
	# 0x80565f4:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x80565f6:	cmpl	$0, -0x74(%ebp) [IMM, MEM]
	cmpl	$0, -0x74(%ebp)
	# 0x80565fa:	jb	0x8056602 [IMM <CODEREF>]
	jb	.label_1451
	# 0x80565fc:	cmpl	$9, -0x78(%ebp) [IMM, MEM]
	cmpl	$9, -0x78(%ebp)
	# 0x8056600:	ja	0x8056670 [IMM <CODEREF>]
	ja	.label_1421
	# 0x8056602:	cmpl	$0, -0xc8(%ebp) [IMM, MEM]
.label_1451:
	cmpl	$0, -0xc8(%ebp)
	# 0x8056609:	jne	0x8056615 [IMM <CODEREF>]
	jne	.label_1414
	# 0x805660b:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805660e:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x8056611:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056613:	jne	0x8056670 [IMM <CODEREF>]
	jne	.label_1421
	# 0x8056615:	subl	$1, -0xc0(%ebp) [IMM, MEM]
.label_1414:
	subl	$1, -0xc0(%ebp)
	# 0x805661c:	movl	-0xc8(%ebp), %eax [MEM, REG]
	movl	-0xc8(%ebp), %eax
	# 0x8056622:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x8056625:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056627:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x805662d:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805662f:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x8056635:	negl	%eax [REG]
	negl	%eax
	# 0x8056637:	addl	%eax, -0xc0(%ebp) [REG, MEM]
	addl	%eax, -0xc0(%ebp)
	# 0x805663d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8056640:	pushl	-0xac(%ebp) [MEM]
	pushl	-0xac(%ebp)
	# 0x8056646:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x805664c:	pushl	-0xc0(%ebp) [MEM]
	pushl	-0xc0(%ebp)
	# 0x8056652:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8056657:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805665a:	movl	$0, -0xb4(%ebp) [IMM, MEM]
	movl	$0, -0xb4(%ebp)
	# 0x8056664:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x805666a:	movl	%eax, -0xc8(%ebp) [REG, MEM]
	movl	%eax, -0xc8(%ebp)
	# 0x8056670:	cmpl	$1, -0x9c(%ebp) [IMM, MEM]
.label_1421:
	cmpl	$1, -0x9c(%ebp)
	# 0x8056677:	jne	0x80566ae [IMM <CODEREF>]
	jne	.label_1455
	# 0x8056679:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x805667f:	cltd	 []
	cltd	
	# 0x8056680:	movl	-0x78(%ebp), %ecx [MEM, REG]
	movl	-0x78(%ebp), %ecx
	# 0x8056683:	andl	$1, %ecx [IMM, REG]
	andl	$1, %ecx
	# 0x8056686:	movl	%ecx, %esi [REG, REG]
	movl	%ecx, %esi
	# 0x8056688:	movl	-0x74(%ebp), %ecx [MEM, REG]
	movl	-0x74(%ebp), %ecx
	# 0x805668b:	andl	$0, %ecx [IMM, REG]
	andl	$0, %ecx
	# 0x805668e:	movl	%ecx, %edi [REG, REG]
	movl	%ecx, %edi
	# 0x8056690:	addl	%esi, %eax [REG, REG]
	addl	%esi, %eax
	# 0x8056692:	adcl	%edi, %edx [REG, REG]
	adcl	%edi, %edx
	# 0x8056694:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x8056696:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056698:	setne	%al [REG]
	setne	%al
	# 0x805669b:	movzbl	%al, %edx [REG, REG]
	movzbl	%al, %edx
	# 0x805669e:	movl	-0xc8(%ebp), %eax [MEM, REG]
	movl	-0xc8(%ebp), %eax
	# 0x80566a4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80566a6:	cmpl	$5, %eax [IMM, REG]
	cmpl	$5, %eax
	# 0x80566a9:	setg	%al [REG]
	setg	%al
	# 0x80566ac:	jmp	0x80566d8 [IMM <CODEREF>]
	jmp	.label_1444
	# 0x80566ae:	cmpl	$0, -0x9c(%ebp) [IMM, MEM]
.label_1455:
	cmpl	$0, -0x9c(%ebp)
	# 0x80566b5:	jne	0x80566d0 [IMM <CODEREF>]
	jne	.label_1436
	# 0x80566b7:	movl	-0xc8(%ebp), %edx [MEM, REG]
	movl	-0xc8(%ebp), %edx
	# 0x80566bd:	movl	-0xb4(%ebp), %eax [MEM, REG]
	movl	-0xb4(%ebp), %eax
	# 0x80566c3:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80566c5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80566c7:	jle	0x80566d0 [IMM <CODEREF>]
	jle	.label_1436
	# 0x80566c9:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80566ce:	jmp	0x80566d5 [IMM <CODEREF>]
	jmp	.label_1464
	# 0x80566d0:	movl	$0, %eax [IMM, REG]
.label_1436:
	movl	$0, %eax
	# 0x80566d5:	andl	$1, %eax [IMM, REG]
.label_1464:
	andl	$1, %eax
	# 0x80566d8:	testb	%al, %al [REG, REG]
.label_1444:
	testb	%al, %al
	# 0x80566da:	je	0x8056777 [IMM <CODEREF>]
	je	.label_1415
	# 0x80566e0:	addl	$1, -0x78(%ebp) [IMM, MEM]
	addl	$1, -0x78(%ebp)
	# 0x80566e4:	adcl	$0, -0x74(%ebp) [IMM, MEM]
	adcl	$0, -0x74(%ebp)
	# 0x80566e8:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x80566eb:	andl	$0x10, %eax [IMM, REG]
	andl	$0x10, %eax
	# 0x80566ee:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80566f0:	je	0x8056777 [IMM <CODEREF>]
	je	.label_1415
	# 0x80566f6:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x80566fc:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056701:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x8056703:	xorl	-0x74(%ebp), %ecx [MEM, REG]
	xorl	-0x74(%ebp), %ecx
	# 0x8056706:	xorl	-0x78(%ebp), %eax [MEM, REG]
	xorl	-0x78(%ebp), %eax
	# 0x8056709:	orl	%ecx, %eax [REG, REG]
	orl	%ecx, %eax
	# 0x805670b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805670d:	jne	0x8056777 [IMM <CODEREF>]
	jne	.label_1415
	# 0x805670f:	movl	-0xc4(%ebp), %eax [MEM, REG]
	movl	-0xc4(%ebp), %eax
	# 0x8056715:	cmpl	-0x94(%ebp), %eax [MEM, REG]
	cmpl	-0x94(%ebp), %eax
	# 0x805671b:	jge	0x8056777 [IMM <CODEREF>]
	jge	.label_1415
	# 0x805671d:	addl	$1, -0xc4(%ebp) [IMM, MEM]
	addl	$1, -0xc4(%ebp)
	# 0x8056724:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8056727:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x805672a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805672c:	jne	0x8056769 [IMM <CODEREF>]
	jne	.label_1422
	# 0x805672e:	subl	$1, -0xc0(%ebp) [IMM, MEM]
	subl	$1, -0xc0(%ebp)
	# 0x8056735:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x805673b:	movb	$0x30, 0(%eax) [IMM, MEM]
	movb	$0x30, 0(%eax)
	# 0x805673e:	movl	-0xac(%ebp), %eax [MEM, REG]
	movl	-0xac(%ebp), %eax
	# 0x8056744:	negl	%eax [REG]
	negl	%eax
	# 0x8056746:	addl	%eax, -0xc0(%ebp) [REG, MEM]
	addl	%eax, -0xc0(%ebp)
	# 0x805674c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805674f:	pushl	-0xac(%ebp) [MEM]
	pushl	-0xac(%ebp)
	# 0x8056755:	pushl	-0xb0(%ebp) [MEM]
	pushl	-0xb0(%ebp)
	# 0x805675b:	pushl	-0xc0(%ebp) [MEM]
	pushl	-0xc0(%ebp)
	# 0x8056761:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8056766:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056769:	movl	$1, -0x78(%ebp) [IMM, MEM]
.label_1422:
	movl	$1, -0x78(%ebp)
	# 0x8056770:	movl	$0, -0x74(%ebp) [IMM, MEM]
	movl	$0, -0x74(%ebp)
	# 0x8056777:	movl	-0xc0(%ebp), %eax [MEM, REG]
.label_1415:
	movl	-0xc0(%ebp), %eax
	# 0x805677d:	movl	%eax, -0xb8(%ebp) [REG, MEM]
	movl	%eax, -0xb8(%ebp)
	# 0x8056783:	movl	-0x78(%ebp), %eax [MEM, REG]
.label_1463:
	movl	-0x78(%ebp), %eax
	# 0x8056786:	movl	-0x74(%ebp), %edx [MEM, REG]
	movl	-0x74(%ebp), %edx
	# 0x8056789:	pushl	$0 [IMM]
	pushl	$0
	# 0x805678b:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x805678d:	pushl	%edx [REG]
	pushl	%edx
	# 0x805678e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805678f:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x8056794:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056797:	movl	%eax, -0x7c(%ebp) [REG, MEM]
	movl	%eax, -0x7c(%ebp)
	# 0x805679a:	subl	$1, -0xc0(%ebp) [IMM, MEM]
	subl	$1, -0xc0(%ebp)
	# 0x80567a1:	movl	-0x7c(%ebp), %eax [MEM, REG]
	movl	-0x7c(%ebp), %eax
	# 0x80567a4:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x80567a7:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80567a9:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x80567af:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x80567b1:	movl	-0x78(%ebp), %eax [MEM, REG]
	movl	-0x78(%ebp), %eax
	# 0x80567b4:	movl	-0x74(%ebp), %edx [MEM, REG]
	movl	-0x74(%ebp), %edx
	# 0x80567b7:	pushl	$0 [IMM]
	pushl	$0
	# 0x80567b9:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x80567bb:	pushl	%edx [REG]
	pushl	%edx
	# 0x80567bc:	pushl	%eax [REG]
	pushl	%eax
	# 0x80567bd:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x80567c2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80567c5:	movl	%eax, -0x78(%ebp) [REG, MEM]
	movl	%eax, -0x78(%ebp)
	# 0x80567c8:	movl	%edx, -0x74(%ebp) [REG, MEM]
	movl	%edx, -0x74(%ebp)
	# 0x80567cb:	movl	-0x74(%ebp), %eax [MEM, REG]
	movl	-0x74(%ebp), %eax
	# 0x80567ce:	orl	-0x78(%ebp), %eax [MEM, REG]
	orl	-0x78(%ebp), %eax
	# 0x80567d1:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80567d3:	jne	0x8056783 [IMM <CODEREF>]
	jne	.label_1463
	# 0x80567d5:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1471:
	movl	0x14(%ebp), %eax
	# 0x80567d8:	andl	$4, %eax [IMM, REG]
	andl	$4, %eax
	# 0x80567db:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80567dd:	je	0x8056810 [IMM <CODEREF>]
	je	.label_1466
	# 0x80567df:	movl	-0xb8(%ebp), %edx [MEM, REG]
	movl	-0xb8(%ebp), %edx
	# 0x80567e5:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x80567eb:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80567ed:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80567ef:	pushl	-0xa8(%ebp) [MEM]
	pushl	-0xa8(%ebp)
	# 0x80567f5:	pushl	-0x90(%ebp) [MEM]
	pushl	-0x90(%ebp)
	# 0x80567fb:	pushl	%eax [REG]
	pushl	%eax
	# 0x80567fc:	pushl	-0xc0(%ebp) [MEM]
	pushl	-0xc0(%ebp)
	# 0x8056802:	calll	0x8055d24 [IMM <CODEREF>]
	calll	group_number
	# 0x8056807:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805680a:	movl	%eax, -0xc0(%ebp) [REG, MEM]
	movl	%eax, -0xc0(%ebp)
	# 0x8056810:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1466:
	movl	0x14(%ebp), %eax
	# 0x8056813:	andl	$0x80, %eax [IMM, REG]
	andl	$0x80, %eax
	# 0x8056818:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805681a:	je	0x805695b [IMM <CODEREF>]
	je	.label_1416
	# 0x8056820:	cmpl	$0, -0xc4(%ebp) [IMM, MEM]
	cmpl	$0, -0xc4(%ebp)
	# 0x8056827:	jns	0x80568a7 [IMM <CODEREF>]
	jns	.label_1423
	# 0x8056829:	movl	$0, -0xc4(%ebp) [IMM, MEM]
	movl	$0, -0xc4(%ebp)
	# 0x8056833:	movl	$1, -0x70(%ebp) [IMM, MEM]
	movl	$1, -0x70(%ebp)
	# 0x805683a:	movl	$0, -0x6c(%ebp) [IMM, MEM]
	movl	$0, -0x6c(%ebp)
	# 0x8056841:	jmp	0x8056886 [IMM <CODEREF>]
	jmp	.label_1426
	# 0x8056843:	addl	$1, -0xc4(%ebp) [IMM, MEM]
.label_1424:
	addl	$1, -0xc4(%ebp)
	# 0x805684a:	movl	-0xc4(%ebp), %eax [MEM, REG]
	movl	-0xc4(%ebp), %eax
	# 0x8056850:	cmpl	-0x94(%ebp), %eax [MEM, REG]
	cmpl	-0x94(%ebp), %eax
	# 0x8056856:	je	0x80568a6 [IMM <CODEREF>]
	je	.label_1432
	# 0x8056858:	movl	-0x98(%ebp), %eax [MEM, REG]
	movl	-0x98(%ebp), %eax
	# 0x805685e:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056863:	movl	-0x6c(%ebp), %ecx [MEM, REG]
	movl	-0x6c(%ebp), %ecx
	# 0x8056866:	movl	%ecx, %ebx [REG, REG]
	movl	%ecx, %ebx
	# 0x8056868:	imull	%eax, %ebx [REG, REG]
	imull	%eax, %ebx
	# 0x805686b:	movl	-0x70(%ebp), %ecx [MEM, REG]
	movl	-0x70(%ebp), %ecx
	# 0x805686e:	imull	%edx, %ecx [REG, REG]
	imull	%edx, %ecx
	# 0x8056871:	addl	%ebx, %ecx [REG, REG]
	addl	%ebx, %ecx
	# 0x8056873:	mull	-0x70(%ebp) [MEM]
	mull	-0x70(%ebp)
	# 0x8056876:	addl	%edx, %ecx [REG, REG]
	addl	%edx, %ecx
	# 0x8056878:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x805687a:	movl	%eax, -0x70(%ebp) [REG, MEM]
	movl	%eax, -0x70(%ebp)
	# 0x805687d:	movl	%edx, -0x6c(%ebp) [REG, MEM]
	movl	%edx, -0x6c(%ebp)
	# 0x8056880:	movl	%eax, -0x70(%ebp) [REG, MEM]
	movl	%eax, -0x70(%ebp)
	# 0x8056883:	movl	%edx, -0x6c(%ebp) [REG, MEM]
	movl	%edx, -0x6c(%ebp)
	# 0x8056886:	movl	-0x70(%ebp), %eax [MEM, REG]
.label_1426:
	movl	-0x70(%ebp), %eax
	# 0x8056889:	movl	-0x6c(%ebp), %edx [MEM, REG]
	movl	-0x6c(%ebp), %edx
	# 0x805688c:	cmpl	-0xdc(%ebp), %edx [MEM, REG]
	cmpl	-0xdc(%ebp), %edx
	# 0x8056892:	jb	0x8056843 [IMM <CODEREF>]
	jb	.label_1424
	# 0x8056894:	cmpl	-0xdc(%ebp), %edx [MEM, REG]
	cmpl	-0xdc(%ebp), %edx
	# 0x805689a:	ja	0x80568a7 [IMM <CODEREF>]
	ja	.label_1423
	# 0x805689c:	cmpl	-0xe0(%ebp), %eax [MEM, REG]
	cmpl	-0xe0(%ebp), %eax
	# 0x80568a2:	jb	0x8056843 [IMM <CODEREF>]
	jb	.label_1424
	# 0x80568a4:	jmp	0x80568a7 [IMM <CODEREF>]
	jmp	.label_1423
	# 0x80568a6:	nop	 []
.label_1432:
	nop	
	# 0x80568a7:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1423:
	movl	0x14(%ebp), %eax
	# 0x80568aa:	andl	$0x100, %eax [IMM, REG]
	andl	$0x100, %eax
	# 0x80568af:	orl	-0xc4(%ebp), %eax [MEM, REG]
	orl	-0xc4(%ebp), %eax
	# 0x80568b5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80568b7:	je	0x80568d5 [IMM <CODEREF>]
	je	.label_1457
	# 0x80568b9:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x80568bc:	andl	$0x40, %eax [IMM, REG]
	andl	$0x40, %eax
	# 0x80568bf:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80568c1:	je	0x80568d5 [IMM <CODEREF>]
	je	.label_1457
	# 0x80568c3:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x80568c9:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80568cc:	movl	%edx, -0xbc(%ebp) [REG, MEM]
	movl	%edx, -0xbc(%ebp)
	# 0x80568d2:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x80568d5:	cmpl	$0, -0xc4(%ebp) [IMM, MEM]
.label_1457:
	cmpl	$0, -0xc4(%ebp)
	# 0x80568dc:	je	0x8056918 [IMM <CODEREF>]
	je	.label_1431
	# 0x80568de:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x80568e4:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x80568e7:	movl	%edx, -0xbc(%ebp) [REG, MEM]
	movl	%edx, -0xbc(%ebp)
	# 0x80568ed:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x80568f0:	andl	$0x20, %edx [IMM, REG]
	andl	$0x20, %edx
	# 0x80568f3:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x80568f5:	jne	0x8056900 [IMM <CODEREF>]
	jne	.label_1467
	# 0x80568f7:	cmpl	$1, -0xc4(%ebp) [IMM, MEM]
	cmpl	$1, -0xc4(%ebp)
	# 0x80568fe:	je	0x8056911 [IMM <CODEREF>]
	je	.label_1465
	# 0x8056900:	movl	-0xc4(%ebp), %edx [MEM, REG]
.label_1467:
	movl	-0xc4(%ebp), %edx
	# 0x8056906:	addl	$0x80634a0, %edx [IMM <DATAREF>, REG]
	addl	$power_letter,  %edx
	# 0x805690c:	movzbl	0(%edx), %edx [MEM, REG]
	movzbl	0(%edx), %edx
	# 0x805690f:	jmp	0x8056916 [IMM <CODEREF>]
	jmp	.label_1411
	# 0x8056911:	movl	$0x6b, %edx [IMM, REG]
.label_1465:
	movl	$0x6b, %edx
	# 0x8056916:	movb	%dl, 0(%eax) [REG, MEM]
.label_1411:
	movb	%dl, 0(%eax)
	# 0x8056918:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1431:
	movl	0x14(%ebp), %eax
	# 0x805691b:	andl	$0x100, %eax [IMM, REG]
	andl	$0x100, %eax
	# 0x8056920:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056922:	je	0x805695b [IMM <CODEREF>]
	je	.label_1416
	# 0x8056924:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8056927:	andl	$0x20, %eax [IMM, REG]
	andl	$0x20, %eax
	# 0x805692a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805692c:	je	0x8056949 [IMM <CODEREF>]
	je	.label_1459
	# 0x805692e:	cmpl	$0, -0xc4(%ebp) [IMM, MEM]
	cmpl	$0, -0xc4(%ebp)
	# 0x8056935:	je	0x8056949 [IMM <CODEREF>]
	je	.label_1459
	# 0x8056937:	movl	-0xbc(%ebp), %eax [MEM, REG]
	movl	-0xbc(%ebp), %eax
	# 0x805693d:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8056940:	movl	%edx, -0xbc(%ebp) [REG, MEM]
	movl	%edx, -0xbc(%ebp)
	# 0x8056946:	movb	$0x69, 0(%eax) [IMM, MEM]
	movb	$0x69, 0(%eax)
	# 0x8056949:	movl	-0xbc(%ebp), %eax [MEM, REG]
.label_1459:
	movl	-0xbc(%ebp), %eax
	# 0x805694f:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8056952:	movl	%edx, -0xbc(%ebp) [REG, MEM]
	movl	%edx, -0xbc(%ebp)
	# 0x8056958:	movb	$0x42, 0(%eax) [IMM, MEM]
	movb	$0x42, 0(%eax)
	# 0x805695b:	movl	-0xbc(%ebp), %eax [MEM, REG]
.label_1416:
	movl	-0xbc(%ebp), %eax
	# 0x8056961:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8056964:	movl	-0xc0(%ebp), %eax [MEM, REG]
	movl	-0xc0(%ebp), %eax
	# 0x805696a:	leal	-0xc(%ebp), %esp [MEM, REG]
	leal	-0xc(%ebp), %esp
	# 0x805696d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805696e:	popl	%esi [REG]
	popl	%esi
	# 0x805696f:	popl	%edi [REG]
	popl	%edi
	# 0x8056970:	popl	%ebp [REG]
	popl	%ebp
	# 0x8056971:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056972

	# 0x8056972:	pushl	%ebp [REG]
	.globl default_block_size
	.type default_block_size, @function
default_block_size:
	pushl	%ebp
	# 0x8056973:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056975:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056978:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805697b:	pushl	$0x80634e0 [IMM <DATAREF>]
	pushl	$label_1472
	# 0x8056980:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x8056985:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056988:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805698a:	je	0x8056998 [IMM <CODEREF>]
	je	.label_1474
	# 0x805698c:	movl	$0x200, %eax [IMM, REG]
	movl	$0x200, %eax
	# 0x8056991:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x8056996:	jmp	0x80569a2 [IMM <CODEREF>]
	jmp	.label_1473
	# 0x8056998:	movl	$0x400, %eax [IMM, REG]
.label_1474:
	movl	$0x400, %eax
	# 0x805699d:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x80569a2:	leave	 []
.label_1473:
	leave	
	# 0x80569a3:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80569a4

	# 0x80569a4:	pushl	%ebp [REG]
	.globl humblock
	.type humblock, @function
humblock:
	pushl	%ebp
	# 0x80569a5:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80569a7:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x80569aa:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80569ad:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x80569b0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80569b3:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x80569b6:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x80569b9:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x80569bc:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x80569c2:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80569c5:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x80569c7:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x80569ce:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x80569d2:	jne	0x8056a18 [IMM <CODEREF>]
	jne	.label_1484
	# 0x80569d4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80569d7:	pushl	$0x80634f0 [IMM <DATAREF>]
	pushl	$label_1481
	# 0x80569dc:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x80569e1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80569e4:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x80569e7:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x80569eb:	jne	0x8056a18 [IMM <CODEREF>]
	jne	.label_1484
	# 0x80569ed:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80569f0:	pushl	$0x80634fb [IMM <DATAREF>]
	pushl	$label_1488
	# 0x80569f5:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x80569fa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80569fd:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8056a00:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
	cmpl	$0, -0x2c(%ebp)
	# 0x8056a04:	jne	0x8056a18 [IMM <CODEREF>]
	jne	.label_1484
	# 0x8056a06:	calll	0x8056972 [IMM <CODEREF>]
	calll	default_block_size
	# 0x8056a0b:	movl	-0x30(%ebp), %ecx [MEM, REG]
	movl	-0x30(%ebp), %ecx
	# 0x8056a0e:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x8056a10:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x8056a13:	jmp	0x8056afd [IMM <CODEREF>]
	jmp	.label_1476
	# 0x8056a18:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1484:
	movl	-0x2c(%ebp), %eax
	# 0x8056a1b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056a1e:	cmpb	$0x27, %al [IMM, REG]
	cmpb	$0x27, %al
	# 0x8056a20:	jne	0x8056a2a [IMM <CODEREF>]
	jne	.label_1482
	# 0x8056a22:	orl	$4, -0x18(%ebp) [IMM, MEM]
	orl	$4, -0x18(%ebp)
	# 0x8056a26:	addl	$1, -0x2c(%ebp) [IMM, MEM]
	addl	$1, -0x2c(%ebp)
	# 0x8056a2a:	pushl	$4 [IMM]
.label_1482:
	pushl	$4
	# 0x8056a2c:	pushl	$0x80634d8 [IMM <DATAREF>]
	pushl	$block_size_opts
	# 0x8056a31:	pushl	$0x80634cc [IMM <DATAREF>]
	pushl	$block_size_args
	# 0x8056a36:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8056a39:	calll	0x8052a26 [IMM <CODEREF>]
	calll	argmatch
	# 0x8056a3e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056a41:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8056a44:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x8056a48:	js	0x8056a6c [IMM <CODEREF>]
	js	.label_1489
	# 0x8056a4a:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056a4d:	movl	0x80634d8(, %eax, 4), %eax [MEM, REG]
	movl	block_size_opts(, %eax, 4),  %eax
	# 0x8056a54:	orl	%eax, -0x18(%ebp) [REG, MEM]
	orl	%eax, -0x18(%ebp)
	# 0x8056a57:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8056a5a:	movl	$1, 0(%eax) [IMM, MEM]
	movl	$1, 0(%eax)
	# 0x8056a60:	movl	$0, 4(%eax) [IMM, MEM]
	movl	$0, 4(%eax)
	# 0x8056a67:	jmp	0x8056afd [IMM <CODEREF>]
	jmp	.label_1476
	# 0x8056a6c:	subl	$0xc, %esp [IMM, REG]
.label_1489:
	subl	$0xc, %esp
	# 0x8056a6f:	pushl	$0x8063505 [IMM <DATAREF>]
	pushl	$label_1487
	# 0x8056a74:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8056a77:	pushl	$0 [IMM]
	pushl	$0
	# 0x8056a79:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x8056a7c:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056a7d:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8056a80:	calll	0x805d00c [IMM <CODEREF>]
	calll	xstrtoumax
	# 0x8056a85:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8056a88:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056a8b:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8056a8f:	je	0x8056ae6 [IMM <CODEREF>]
	je	.label_1477
	# 0x8056a91:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x8056a94:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x8056a9a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056a9d:	jmp	0x8056b0a [IMM <CODEREF>]
	jmp	.label_1480
	# 0x8056a9f:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1485:
	movl	-0x1c(%ebp), %eax
	# 0x8056aa2:	cmpl	%eax, -0x2c(%ebp) [REG, MEM]
	cmpl	%eax, -0x2c(%ebp)
	# 0x8056aa5:	jne	0x8056ae2 [IMM <CODEREF>]
	jne	.label_1483
	# 0x8056aa7:	orl	$0x80, -0x18(%ebp) [IMM, MEM]
	orl	$0x80, -0x18(%ebp)
	# 0x8056aae:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8056ab1:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8056ab4:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056ab7:	cmpb	$0x42, %al [IMM, REG]
	cmpb	$0x42, %al
	# 0x8056ab9:	jne	0x8056ac2 [IMM <CODEREF>]
	jne	.label_1486
	# 0x8056abb:	orl	$0x100, -0x18(%ebp) [IMM, MEM]
	orl	$0x100, -0x18(%ebp)
	# 0x8056ac2:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1486:
	movl	-0x1c(%ebp), %eax
	# 0x8056ac5:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8056ac8:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056acb:	cmpb	$0x42, %al [IMM, REG]
	cmpb	$0x42, %al
	# 0x8056acd:	jne	0x8056adc [IMM <CODEREF>]
	jne	.label_1475
	# 0x8056acf:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8056ad2:	subl	$2, %eax [IMM, REG]
	subl	$2, %eax
	# 0x8056ad5:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056ad8:	cmpb	$0x69, %al [IMM, REG]
	cmpb	$0x69, %al
	# 0x8056ada:	jne	0x8056afc [IMM <CODEREF>]
	jne	.label_1479
	# 0x8056adc:	orl	$0x20, -0x18(%ebp) [IMM, MEM]
.label_1475:
	orl	$0x20, -0x18(%ebp)
	# 0x8056ae0:	jmp	0x8056afc [IMM <CODEREF>]
	jmp	.label_1479
	# 0x8056ae2:	addl	$1, -0x2c(%ebp) [IMM, MEM]
.label_1483:
	addl	$1, -0x2c(%ebp)
	# 0x8056ae6:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1477:
	movl	-0x2c(%ebp), %eax
	# 0x8056ae9:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056aec:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x8056aee:	jle	0x8056a9f [IMM <CODEREF>]
	jle	.label_1485
	# 0x8056af0:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8056af3:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056af6:	cmpb	$0x39, %al [IMM, REG]
	cmpb	$0x39, %al
	# 0x8056af8:	jg	0x8056a9f [IMM <CODEREF>]
	jg	.label_1485
	# 0x8056afa:	jmp	0x8056afd [IMM <CODEREF>]
	jmp	.label_1476
	# 0x8056afc:	nop	 []
.label_1479:
	nop	
	# 0x8056afd:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1476:
	movl	-0x34(%ebp), %eax
	# 0x8056b00:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x8056b03:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8056b05:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8056b0a:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_1480:
	movl	-0xc(%ebp), %edx
	# 0x8056b0d:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x8056b14:	je	0x8056b1b [IMM <CODEREF>]
	je	.label_1478
	# 0x8056b16:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8056b1b:	leave	 []
.label_1478:
	leave	
	# 0x8056b1c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056b1d

	# 0x8056b1d:	pushl	%ebp [REG]
	.globl human_options
	.type human_options, @function
human_options:
	pushl	%ebp
	# 0x8056b1e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056b20:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8056b23:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8056b26:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8056b29:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8056b2c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056b2f:	calll	0x80569a4 [IMM <CODEREF>]
	calll	humblock
	# 0x8056b34:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056b37:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8056b3a:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8056b3d:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x8056b40:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8056b42:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x8056b44:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056b46:	jne	0x8056b5c [IMM <CODEREF>]
	jne	.label_1490
	# 0x8056b48:	calll	0x8056972 [IMM <CODEREF>]
	calll	default_block_size
	# 0x8056b4d:	movl	0x10(%ebp), %ecx [MEM, REG]
	movl	0x10(%ebp), %ecx
	# 0x8056b50:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x8056b52:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x8056b55:	movl	$4, -0xc(%ebp) [IMM, MEM]
	movl	$4, -0xc(%ebp)
	# 0x8056b5c:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1490:
	movl	-0xc(%ebp), %eax
	# 0x8056b5f:	leave	 []
	leave	
	# 0x8056b60:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056b61

	# 0x8056b61:	pushl	%ebp [REG]
	.globl getuser
	.type getuser, @function
getuser:
	pushl	%ebp
	# 0x8056b62:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056b64:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8056b67:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8056b6e:	movl	0x806b3e4, %eax [MEM, REG]
	movl	user_alist,  %eax
	# 0x8056b73:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8056b76:	jmp	0x8056b93 [IMM <CODEREF>]
	jmp	.label_1491
	# 0x8056b78:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1495:
	movl	-0x18(%ebp), %eax
	# 0x8056b7b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8056b7d:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x8056b80:	jne	0x8056b8a [IMM <CODEREF>]
	jne	.label_1498
	# 0x8056b82:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8056b85:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8056b88:	jmp	0x8056b99 [IMM <CODEREF>]
	jmp	.label_1492
	# 0x8056b8a:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1498:
	movl	-0x18(%ebp), %eax
	# 0x8056b8d:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056b90:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8056b93:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
.label_1491:
	cmpl	$0, -0x18(%ebp)
	# 0x8056b97:	jne	0x8056b78 [IMM <CODEREF>]
	jne	.label_1495
	# 0x8056b99:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
.label_1492:
	cmpl	$0, -0x14(%ebp)
	# 0x8056b9d:	jne	0x8056c19 [IMM <CODEREF>]
	jne	.label_1497
	# 0x8056b9f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056ba2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056ba5:	calll	0x8049560 [IMM <CODEREF>]
	calll	getpwuid
	# 0x8056baa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056bad:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056bb0:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8056bb4:	je	0x8056bbd [IMM <CODEREF>]
	je	.label_1500
	# 0x8056bb6:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056bb9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8056bbb:	jmp	0x8056bc2 [IMM <CODEREF>]
	jmp	.label_1496
	# 0x8056bbd:	movl	$0x806355c, %eax [IMM <DATAREF>, REG]
.label_1500:
	movl	$label_1494,  %eax
	# 0x8056bc2:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_1496:
	movl	%eax, -0xc(%ebp)
	# 0x8056bc5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056bc8:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8056bcb:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8056bd0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056bd3:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x8056bd6:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x8056bd9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056bdc:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056bdd:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x8056be2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056be5:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8056be8:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056beb:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8056bee:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8056bf0:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056bf3:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056bf6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056bf9:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8056bfc:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056bfd:	calll	0x80497d0 [IMM <CODEREF>]
	calll	strcpy
	# 0x8056c02:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056c05:	movl	0x806b3e4, %edx [MEM, REG]
	movl	user_alist,  %edx
	# 0x8056c0b:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056c0e:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056c11:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056c14:	movl	%eax, 0x806b3e4 [REG, MEM]
	movl	%eax, user_alist
	# 0x8056c19:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1497:
	movl	-0x14(%ebp), %eax
	# 0x8056c1c:	movzbl	8(%eax), %eax [MEM, REG]
	movzbl	8(%eax), %eax
	# 0x8056c20:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8056c22:	je	0x8056c2c [IMM <CODEREF>]
	je	.label_1499
	# 0x8056c24:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056c27:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056c2a:	jmp	0x8056c31 [IMM <CODEREF>]
	jmp	.label_1493
	# 0x8056c2c:	movl	$0, %eax [IMM, REG]
.label_1499:
	movl	$0, %eax
	# 0x8056c31:	leave	 []
.label_1493:
	leave	
	# 0x8056c32:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056c33
	.globl getuidbyname
	.type getuidbyname, @function
getuidbyname:

	# 0x8056c33:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8056c34:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056c36:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8056c39:	movl	0x806b3e4, %eax [MEM, REG]
	movl	user_alist,  %eax
	# 0x8056c3e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056c41:	jmp	0x8056c7e [IMM <CODEREF>]
	jmp	.label_1507
	# 0x8056c43:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1508:
	movl	-0x10(%ebp), %eax
	# 0x8056c46:	movzbl	8(%eax), %edx [MEM, REG]
	movzbl	8(%eax), %edx
	# 0x8056c4a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8056c4d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056c50:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x8056c52:	jne	0x8056c75 [IMM <CODEREF>]
	jne	.label_1501
	# 0x8056c54:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056c57:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056c5a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056c5d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056c60:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056c61:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8056c66:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056c69:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056c6b:	jne	0x8056c75 [IMM <CODEREF>]
	jne	.label_1501
	# 0x8056c6d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056c70:	jmp	0x8056d5d [IMM <CODEREF>]
	jmp	.label_1506
	# 0x8056c75:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1501:
	movl	-0x10(%ebp), %eax
	# 0x8056c78:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056c7b:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056c7e:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1507:
	cmpl	$0, -0x10(%ebp)
	# 0x8056c82:	jne	0x8056c43 [IMM <CODEREF>]
	jne	.label_1508
	# 0x8056c84:	movl	0x806b3e8, %eax [MEM, REG]
	movl	nouser_alist,  %eax
	# 0x8056c89:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056c8c:	jmp	0x8056ccb [IMM <CODEREF>]
	jmp	.label_1502
	# 0x8056c8e:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1503:
	movl	-0x10(%ebp), %eax
	# 0x8056c91:	movzbl	8(%eax), %edx [MEM, REG]
	movzbl	8(%eax), %edx
	# 0x8056c95:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8056c98:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056c9b:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x8056c9d:	jne	0x8056cc2 [IMM <CODEREF>]
	jne	.label_1504
	# 0x8056c9f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056ca2:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056ca5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056ca8:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056cab:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056cac:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8056cb1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056cb4:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056cb6:	jne	0x8056cc2 [IMM <CODEREF>]
	jne	.label_1504
	# 0x8056cb8:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8056cbd:	jmp	0x8056d5d [IMM <CODEREF>]
	jmp	.label_1506
	# 0x8056cc2:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1504:
	movl	-0x10(%ebp), %eax
	# 0x8056cc5:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056cc8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056ccb:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1502:
	cmpl	$0, -0x10(%ebp)
	# 0x8056ccf:	jne	0x8056c8e [IMM <CODEREF>]
	jne	.label_1503
	# 0x8056cd1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056cd4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056cd7:	calll	0x8049520 [IMM <CODEREF>]
	calll	getpwnam
	# 0x8056cdc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056cdf:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8056ce2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056ce5:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056ce8:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8056ced:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056cf0:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x8056cf3:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x8056cf6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056cf9:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056cfa:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x8056cff:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056d02:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056d05:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d08:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056d0b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056d0e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056d11:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056d12:	calll	0x80497d0 [IMM <CODEREF>]
	calll	strcpy
	# 0x8056d17:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056d1a:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8056d1e:	je	0x8056d44 [IMM <CODEREF>]
	je	.label_1505
	# 0x8056d20:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056d23:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8056d26:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d29:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8056d2b:	movl	0x806b3e4, %edx [MEM, REG]
	movl	user_alist,  %edx
	# 0x8056d31:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d34:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056d37:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d3a:	movl	%eax, 0x806b3e4 [REG, MEM]
	movl	%eax, user_alist
	# 0x8056d3f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d42:	jmp	0x8056d5d [IMM <CODEREF>]
	jmp	.label_1506
	# 0x8056d44:	movl	0x806b3e8, %edx [MEM, REG]
.label_1505:
	movl	nouser_alist,  %edx
	# 0x8056d4a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d4d:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056d50:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056d53:	movl	%eax, 0x806b3e8 [REG, MEM]
	movl	%eax, nouser_alist
	# 0x8056d58:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8056d5d:	leave	 []
.label_1506:
	leave	
	# 0x8056d5e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056d5f

	# 0x8056d5f:	pushl	%ebp [REG]
	.globl getgroup
	.type getgroup, @function
getgroup:
	pushl	%ebp
	# 0x8056d60:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056d62:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8056d65:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8056d6c:	movl	0x806b3ec, %eax [MEM, REG]
	movl	group_alist,  %eax
	# 0x8056d71:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8056d74:	jmp	0x8056d91 [IMM <CODEREF>]
	jmp	.label_1517
	# 0x8056d76:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1513:
	movl	-0x18(%ebp), %eax
	# 0x8056d79:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8056d7b:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x8056d7e:	jne	0x8056d88 [IMM <CODEREF>]
	jne	.label_1515
	# 0x8056d80:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8056d83:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8056d86:	jmp	0x8056d97 [IMM <CODEREF>]
	jmp	.label_1509
	# 0x8056d88:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1515:
	movl	-0x18(%ebp), %eax
	# 0x8056d8b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056d8e:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8056d91:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
.label_1517:
	cmpl	$0, -0x18(%ebp)
	# 0x8056d95:	jne	0x8056d76 [IMM <CODEREF>]
	jne	.label_1513
	# 0x8056d97:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
.label_1509:
	cmpl	$0, -0x14(%ebp)
	# 0x8056d9b:	jne	0x8056e17 [IMM <CODEREF>]
	jne	.label_1516
	# 0x8056d9d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056da0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056da3:	calll	0x8049b80 [IMM <CODEREF>]
	calll	getgrgid
	# 0x8056da8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056dab:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056dae:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x8056db2:	je	0x8056dbb [IMM <CODEREF>]
	je	.label_1511
	# 0x8056db4:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056db7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8056db9:	jmp	0x8056dc0 [IMM <CODEREF>]
	jmp	.label_1514
	# 0x8056dbb:	movl	$0x806355c, %eax [IMM <DATAREF>, REG]
.label_1511:
	movl	$label_1494,  %eax
	# 0x8056dc0:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_1514:
	movl	%eax, -0xc(%ebp)
	# 0x8056dc3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056dc6:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8056dc9:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8056dce:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056dd1:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x8056dd4:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x8056dd7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056dda:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056ddb:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x8056de0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056de3:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8056de6:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056de9:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8056dec:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8056dee:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056df1:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056df4:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056df7:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x8056dfa:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056dfb:	calll	0x80497d0 [IMM <CODEREF>]
	calll	strcpy
	# 0x8056e00:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056e03:	movl	0x806b3ec, %edx [MEM, REG]
	movl	group_alist,  %edx
	# 0x8056e09:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056e0c:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056e0f:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056e12:	movl	%eax, 0x806b3ec [REG, MEM]
	movl	%eax, group_alist
	# 0x8056e17:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1516:
	movl	-0x14(%ebp), %eax
	# 0x8056e1a:	movzbl	8(%eax), %eax [MEM, REG]
	movzbl	8(%eax), %eax
	# 0x8056e1e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x8056e20:	je	0x8056e2a [IMM <CODEREF>]
	je	.label_1512
	# 0x8056e22:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8056e25:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056e28:	jmp	0x8056e2f [IMM <CODEREF>]
	jmp	.label_1510
	# 0x8056e2a:	movl	$0, %eax [IMM, REG]
.label_1512:
	movl	$0, %eax
	# 0x8056e2f:	leave	 []
.label_1510:
	leave	
	# 0x8056e30:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056e31
	.globl getgidbyname
	.type getgidbyname, @function
getgidbyname:

	# 0x8056e31:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x8056e32:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056e34:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8056e37:	movl	0x806b3ec, %eax [MEM, REG]
	movl	group_alist,  %eax
	# 0x8056e3c:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056e3f:	jmp	0x8056e7c [IMM <CODEREF>]
	jmp	.label_1524
	# 0x8056e41:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1525:
	movl	-0x10(%ebp), %eax
	# 0x8056e44:	movzbl	8(%eax), %edx [MEM, REG]
	movzbl	8(%eax), %edx
	# 0x8056e48:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8056e4b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056e4e:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x8056e50:	jne	0x8056e73 [IMM <CODEREF>]
	jne	.label_1518
	# 0x8056e52:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056e55:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056e58:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056e5b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056e5e:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056e5f:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8056e64:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056e67:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056e69:	jne	0x8056e73 [IMM <CODEREF>]
	jne	.label_1518
	# 0x8056e6b:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056e6e:	jmp	0x8056f5b [IMM <CODEREF>]
	jmp	.label_1520
	# 0x8056e73:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1518:
	movl	-0x10(%ebp), %eax
	# 0x8056e76:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056e79:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056e7c:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1524:
	cmpl	$0, -0x10(%ebp)
	# 0x8056e80:	jne	0x8056e41 [IMM <CODEREF>]
	jne	.label_1525
	# 0x8056e82:	movl	0x806b3f0, %eax [MEM, REG]
	movl	nogroup_alist,  %eax
	# 0x8056e87:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056e8a:	jmp	0x8056ec9 [IMM <CODEREF>]
	jmp	.label_1519
	# 0x8056e8c:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1521:
	movl	-0x10(%ebp), %eax
	# 0x8056e8f:	movzbl	8(%eax), %edx [MEM, REG]
	movzbl	8(%eax), %edx
	# 0x8056e93:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8056e96:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8056e99:	cmpb	%al, %dl [REG, REG]
	cmpb	%al, %dl
	# 0x8056e9b:	jne	0x8056ec0 [IMM <CODEREF>]
	jne	.label_1522
	# 0x8056e9d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056ea0:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056ea3:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056ea6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056ea9:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056eaa:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x8056eaf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056eb2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056eb4:	jne	0x8056ec0 [IMM <CODEREF>]
	jne	.label_1522
	# 0x8056eb6:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8056ebb:	jmp	0x8056f5b [IMM <CODEREF>]
	jmp	.label_1520
	# 0x8056ec0:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1522:
	movl	-0x10(%ebp), %eax
	# 0x8056ec3:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x8056ec6:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056ec9:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_1519:
	cmpl	$0, -0x10(%ebp)
	# 0x8056ecd:	jne	0x8056e8c [IMM <CODEREF>]
	jne	.label_1521
	# 0x8056ecf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056ed2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056ed5:	calll	0x8049b40 [IMM <CODEREF>]
	calll	getgrnam
	# 0x8056eda:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056edd:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8056ee0:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056ee3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056ee6:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8056eeb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056eee:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x8056ef1:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x8056ef4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8056ef7:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056ef8:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x8056efd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056f00:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8056f03:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f06:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x8056f09:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8056f0c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8056f0f:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056f10:	calll	0x80497d0 [IMM <CODEREF>]
	calll	strcpy
	# 0x8056f15:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056f18:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x8056f1c:	je	0x8056f42 [IMM <CODEREF>]
	je	.label_1523
	# 0x8056f1e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056f21:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x8056f24:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f27:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8056f29:	movl	0x806b3ec, %edx [MEM, REG]
	movl	group_alist,  %edx
	# 0x8056f2f:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f32:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056f35:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f38:	movl	%eax, 0x806b3ec [REG, MEM]
	movl	%eax, group_alist
	# 0x8056f3d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f40:	jmp	0x8056f5b [IMM <CODEREF>]
	jmp	.label_1520
	# 0x8056f42:	movl	0x806b3f0, %edx [MEM, REG]
.label_1523:
	movl	nogroup_alist,  %edx
	# 0x8056f48:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f4b:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x8056f4e:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8056f51:	movl	%eax, 0x806b3f0 [REG, MEM]
	movl	%eax, nogroup_alist
	# 0x8056f56:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8056f5b:	leave	 []
.label_1520:
	leave	
	# 0x8056f5c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8056f5d

	# 0x8056f5d:	pushl	%ebp [REG]
	.globl imaxtostr
	.type imaxtostr, @function
imaxtostr:
	pushl	%ebp
	# 0x8056f5e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8056f60:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8056f63:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8056f66:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8056f69:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8056f6c:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8056f6f:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8056f72:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x8056f75:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8056f78:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056f7b:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8056f7e:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x8056f82:	jns	0x8056fdc [IMM <CODEREF>]
	jns	.label_1527
	# 0x8056f84:	subl	$1, -0xc(%ebp) [IMM, MEM]
.label_1528:
	subl	$1, -0xc(%ebp)
	# 0x8056f88:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8056f8b:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8056f8e:	pushl	$0 [IMM]
	pushl	$0
	# 0x8056f90:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8056f92:	pushl	%edx [REG]
	pushl	%edx
	# 0x8056f93:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056f94:	calll	0x805e6f0 [IMM <CODEREF>]
	calll	__moddi3
	# 0x8056f99:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056f9c:	movl	$0x30, %edx [IMM, REG]
	movl	$0x30, %edx
	# 0x8056fa1:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8056fa3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8056fa5:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056fa7:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056faa:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8056fac:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8056faf:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8056fb2:	pushl	$0 [IMM]
	pushl	$0
	# 0x8056fb4:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8056fb6:	pushl	%edx [REG]
	pushl	%edx
	# 0x8056fb7:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056fb8:	calll	0x805e580 [IMM <CODEREF>]
	calll	__divdi3
	# 0x8056fbd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056fc0:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8056fc3:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x8056fc6:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8056fc9:	orl	-0x20(%ebp), %eax [MEM, REG]
	orl	-0x20(%ebp), %eax
	# 0x8056fcc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8056fce:	jne	0x8056f84 [IMM <CODEREF>]
	jne	.label_1528
	# 0x8056fd0:	subl	$1, -0xc(%ebp) [IMM, MEM]
	subl	$1, -0xc(%ebp)
	# 0x8056fd4:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056fd7:	movb	$0x2d, 0(%eax) [IMM, MEM]
	movb	$0x2d, 0(%eax)
	# 0x8056fda:	jmp	0x8057022 [IMM <CODEREF>]
	jmp	.label_1526
	# 0x8056fdc:	subl	$1, -0xc(%ebp) [IMM, MEM]
.label_1527:
	subl	$1, -0xc(%ebp)
	# 0x8056fe0:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8056fe3:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8056fe6:	pushl	$0 [IMM]
	pushl	$0
	# 0x8056fe8:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8056fea:	pushl	%edx [REG]
	pushl	%edx
	# 0x8056feb:	pushl	%eax [REG]
	pushl	%eax
	# 0x8056fec:	calll	0x805e6f0 [IMM <CODEREF>]
	calll	__moddi3
	# 0x8056ff1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8056ff4:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x8056ff7:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8056ff9:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8056ffc:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8056ffe:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8057001:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8057004:	pushl	$0 [IMM]
	pushl	$0
	# 0x8057006:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8057008:	pushl	%edx [REG]
	pushl	%edx
	# 0x8057009:	pushl	%eax [REG]
	pushl	%eax
	# 0x805700a:	calll	0x805e580 [IMM <CODEREF>]
	calll	__divdi3
	# 0x805700f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057012:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057015:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x8057018:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805701b:	orl	-0x20(%ebp), %eax [MEM, REG]
	orl	-0x20(%ebp), %eax
	# 0x805701e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057020:	jne	0x8056fdc [IMM <CODEREF>]
	jne	.label_1527
	# 0x8057022:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1526:
	movl	-0xc(%ebp), %eax
	# 0x8057025:	leave	 []
	leave	
	# 0x8057026:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057027

	# 0x8057027:	pushl	%ebp [REG]
	.globl umaxtostr
	.type umaxtostr, @function
umaxtostr:
	pushl	%ebp
	# 0x8057028:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805702a:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805702d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057030:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057033:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057036:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057039:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805703c:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805703f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8057042:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8057045:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8057048:	subl	$1, -0xc(%ebp) [IMM, MEM]
.label_1529:
	subl	$1, -0xc(%ebp)
	# 0x805704c:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805704f:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8057052:	pushl	$0 [IMM]
	pushl	$0
	# 0x8057054:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8057056:	pushl	%edx [REG]
	pushl	%edx
	# 0x8057057:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057058:	calll	0x805e9e0 [IMM <CODEREF>]
	calll	__umoddi3
	# 0x805705d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057060:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x8057063:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8057065:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8057068:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805706a:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805706d:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8057070:	pushl	$0 [IMM]
	pushl	$0
	# 0x8057072:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x8057074:	pushl	%edx [REG]
	pushl	%edx
	# 0x8057075:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057076:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x805707b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805707e:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057081:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x8057084:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8057087:	orl	-0x20(%ebp), %eax [MEM, REG]
	orl	-0x20(%ebp), %eax
	# 0x805708a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805708c:	jne	0x8057048 [IMM <CODEREF>]
	jne	.label_1529
	# 0x805708e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x8057091:	leave	 []
	leave	
	# 0x8057092:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057093

	# 0x8057093:	pushl	%ebp [REG]
	.globl wc_ensure_printable
	.type wc_ensure_printable, @function
wc_ensure_printable:
	pushl	%ebp
	# 0x8057094:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057096:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x8057099:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x805709d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80570a0:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80570a3:	jmp	0x80570cb [IMM <CODEREF>]
	jmp	.label_1531
	# 0x80570a5:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1532:
	movl	-0xc(%ebp), %eax
	# 0x80570a8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80570aa:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80570ad:	pushl	%eax [REG]
	pushl	%eax
	# 0x80570ae:	calll	0x8049760 [IMM <CODEREF>]
	calll	iswprint
	# 0x80570b3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80570b6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80570b8:	jne	0x80570c7 [IMM <CODEREF>]
	jne	.label_1530
	# 0x80570ba:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x80570bd:	movl	$0xfffd, 0(%eax) [IMM, MEM]
	movl	$0xfffd, 0(%eax)
	# 0x80570c3:	movb	$1, -0xd(%ebp) [IMM, MEM]
	movb	$1, -0xd(%ebp)
	# 0x80570c7:	addl	$4, -0xc(%ebp) [IMM, MEM]
.label_1530:
	addl	$4, -0xc(%ebp)
	# 0x80570cb:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1531:
	movl	-0xc(%ebp), %eax
	# 0x80570ce:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80570d0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80570d2:	jne	0x80570a5 [IMM <CODEREF>]
	jne	.label_1532
	# 0x80570d4:	movzbl	-0xd(%ebp), %eax [MEM, REG]
	movzbl	-0xd(%ebp), %eax
	# 0x80570d8:	leave	 []
	leave	
	# 0x80570d9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80570da

	# 0x80570da:	pushl	%ebp [REG]
	.globl wc_truncate
	.type wc_truncate, @function
wc_truncate:
	pushl	%ebp
	# 0x80570db:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80570dd:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x80570e0:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x80570e7:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x80570ee:	jmp	0x8057131 [IMM <CODEREF>]
	jmp	.label_1535
	# 0x80570f0:	movl	8(%ebp), %eax [MEM, REG]
.label_1533:
	movl	8(%ebp), %eax
	# 0x80570f3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80570f5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80570f8:	pushl	%eax [REG]
	pushl	%eax
	# 0x80570f9:	calll	0x80495d0 [IMM <CODEREF>]
	calll	wcwidth
	# 0x80570fe:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057101:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8057104:	cmpl	$-1, -0xc(%ebp) [IMM, MEM]
	cmpl	$-1, -0xc(%ebp)
	# 0x8057108:	jne	0x805711a [IMM <CODEREF>]
	jne	.label_1537
	# 0x805710a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805710d:	movl	$0xfffd, 0(%eax) [IMM, MEM]
	movl	$0xfffd, 0(%eax)
	# 0x8057113:	movl	$1, -0xc(%ebp) [IMM, MEM]
	movl	$1, -0xc(%ebp)
	# 0x805711a:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_1537:
	movl	-0xc(%ebp), %edx
	# 0x805711d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8057120:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057122:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x8057125:	ja	0x805713c [IMM <CODEREF>]
	ja	.label_1534
	# 0x8057127:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805712a:	addl	%eax, -0x10(%ebp) [REG, MEM]
	addl	%eax, -0x10(%ebp)
	# 0x805712d:	addl	$4, 8(%ebp) [IMM, MEM]
	addl	$4, 8(%ebp)
	# 0x8057131:	movl	8(%ebp), %eax [MEM, REG]
.label_1535:
	movl	8(%ebp), %eax
	# 0x8057134:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057136:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057138:	jne	0x80570f0 [IMM <CODEREF>]
	jne	.label_1533
	# 0x805713a:	jmp	0x805713d [IMM <CODEREF>]
	jmp	.label_1536
	# 0x805713c:	nop	 []
.label_1534:
	nop	
	# 0x805713d:	movl	8(%ebp), %eax [MEM, REG]
.label_1536:
	movl	8(%ebp), %eax
	# 0x8057140:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x8057146:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8057149:	leave	 []
	leave	
	# 0x805714a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805714b

	# 0x805714b:	pushl	%ebp [REG]
	.globl mbs_align_pad
	.type mbs_align_pad, @function
mbs_align_pad:
	pushl	%ebp
	# 0x805714c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805714e:	jmp	0x805715c [IMM <CODEREF>]
	jmp	.label_1539
	# 0x8057150:	movl	8(%ebp), %eax [MEM, REG]
.label_1538:
	movl	8(%ebp), %eax
	# 0x8057153:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8057156:	movl	%edx, 8(%ebp) [REG, MEM]
	movl	%edx, 8(%ebp)
	# 0x8057159:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x805715c:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1539:
	movl	0x10(%ebp), %eax
	# 0x805715f:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8057162:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x8057165:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057167:	je	0x8057171 [IMM <CODEREF>]
	je	.label_1540
	# 0x8057169:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805716c:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805716f:	jb	0x8057150 [IMM <CODEREF>]
	jb	.label_1538
	# 0x8057171:	movl	8(%ebp), %eax [MEM, REG]
.label_1540:
	movl	8(%ebp), %eax
	# 0x8057174:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x8057177:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805717a:	popl	%ebp [REG]
	popl	%ebp
	# 0x805717b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805717c

	# 0x805717c:	pushl	%ebp [REG]
	.globl mbsalign
	.type mbsalign, @function
mbsalign:
	pushl	%ebp
	# 0x805717d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805717f:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x8057182:	movl	$0xffffffff, -0x3c(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x3c(%ebp)
	# 0x8057189:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805718c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805718f:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8057194:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057197:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805719a:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805719d:	movl	$0, -0x34(%ebp) [IMM, MEM]
	movl	$0, -0x34(%ebp)
	# 0x80571a4:	movl	$0, -0x30(%ebp) [IMM, MEM]
	movl	$0, -0x30(%ebp)
	# 0x80571ab:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80571ae:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x80571b1:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x80571b4:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x80571b7:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x80571ba:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x80571bd:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x80571c0:	movl	$0, -0x20(%ebp) [IMM, MEM]
	movl	$0, -0x20(%ebp)
	# 0x80571c7:	movb	$0, -0x3e(%ebp) [IMM, MEM]
	movb	$0, -0x3e(%ebp)
	# 0x80571cb:	movb	$0, -0x3d(%ebp) [IMM, MEM]
	movb	$0, -0x3d(%ebp)
	# 0x80571cf:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x80571d2:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x80571d5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80571d7:	jne	0x80572a6 [IMM <CODEREF>]
	jne	.label_1544
	# 0x80571dd:	calll	0x80497c0 [IMM <CODEREF>]
	calll	__ctype_get_mb_cur_max
	# 0x80571e2:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x80571e5:	jbe	0x80572a6 [IMM <CODEREF>]
	jbe	.label_1544
	# 0x80571eb:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80571ee:	pushl	$0 [IMM]
	pushl	$0
	# 0x80571f0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80571f3:	pushl	$0 [IMM]
	pushl	$0
	# 0x80571f5:	calll	0x8049a60 [IMM <CODEREF>]
	calll	mbstowcs
	# 0x80571fa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80571fd:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8057200:	cmpl	$-1, -0x14(%ebp) [IMM, MEM]
	cmpl	$-1, -0x14(%ebp)
	# 0x8057204:	jne	0x8057219 [IMM <CODEREF>]
	jne	.label_1556
	# 0x8057206:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x8057209:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805720c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805720e:	je	0x8057454 [IMM <CODEREF>]
	je	.label_1542
	# 0x8057214:	jmp	0x8057339 [IMM <CODEREF>]
	jmp	.label_1541
	# 0x8057219:	addl	$1, -0x14(%ebp) [IMM, MEM]
.label_1556:
	addl	$1, -0x14(%ebp)
	# 0x805721d:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8057220:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8057223:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057226:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057227:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x805722c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805722f:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x8057232:	cmpl	$0, -0x30(%ebp) [IMM, MEM]
	cmpl	$0, -0x30(%ebp)
	# 0x8057236:	jne	0x805724b [IMM <CODEREF>]
	jne	.label_1545
	# 0x8057238:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x805723b:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805723e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057240:	je	0x8057457 [IMM <CODEREF>]
	je	.label_1548
	# 0x8057246:	jmp	0x8057339 [IMM <CODEREF>]
	jmp	.label_1541
	# 0x805724b:	subl	$4, %esp [IMM, REG]
.label_1545:
	subl	$4, %esp
	# 0x805724e:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8057251:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057254:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8057257:	calll	0x8049a60 [IMM <CODEREF>]
	calll	mbstowcs
	# 0x805725c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805725f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057261:	je	0x80572a6 [IMM <CODEREF>]
	je	.label_1544
	# 0x8057263:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x8057266:	addl	$0x3fffffff, %eax [IMM, REG]
	addl	$0x3fffffff, %eax
	# 0x805726b:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057272:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8057275:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057277:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805727d:	movb	$1, -0x3d(%ebp) [IMM, MEM]
	movb	$1, -0x3d(%ebp)
	# 0x8057281:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057284:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8057287:	calll	0x8057093 [IMM <CODEREF>]
	calll	wc_ensure_printable
	# 0x805728c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805728f:	movb	%al, -0x3e(%ebp) [REG, MEM]
	movb	%al, -0x3e(%ebp)
	# 0x8057292:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8057295:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8057298:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805729b:	calll	0x8049a00 [IMM <CODEREF>]
	calll	wcswidth
	# 0x80572a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80572a3:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x80572a6:	cmpb	$0, -0x3d(%ebp) [IMM, MEM]
.label_1544:
	cmpb	$0, -0x3d(%ebp)
	# 0x80572aa:	je	0x8057339 [IMM <CODEREF>]
	je	.label_1541
	# 0x80572b0:	cmpb	$0, -0x3e(%ebp) [IMM, MEM]
	cmpb	$0, -0x3e(%ebp)
	# 0x80572b4:	jne	0x80572c0 [IMM <CODEREF>]
	jne	.label_1546
	# 0x80572b6:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x80572b9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80572bb:	cmpl	-0x28(%ebp), %eax [MEM, REG]
	cmpl	-0x28(%ebp), %eax
	# 0x80572be:	jae	0x8057339 [IMM <CODEREF>]
	jae	.label_1541
	# 0x80572c0:	cmpb	$0, -0x3e(%ebp) [IMM, MEM]
.label_1546:
	cmpb	$0, -0x3e(%ebp)
	# 0x80572c4:	je	0x80572de [IMM <CODEREF>]
	je	.label_1551
	# 0x80572c6:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80572c9:	pushl	$0 [IMM]
	pushl	$0
	# 0x80572cb:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x80572ce:	pushl	$0 [IMM]
	pushl	$0
	# 0x80572d0:	calll	0x80497f0 [IMM <CODEREF>]
	calll	wcstombs
	# 0x80572d5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80572d8:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80572db:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x80572de:	subl	$0xc, %esp [IMM, REG]
.label_1551:
	subl	$0xc, %esp
	# 0x80572e1:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x80572e4:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x80572e9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80572ec:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x80572ef:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
	cmpl	$0, -0x34(%ebp)
	# 0x80572f3:	jne	0x8057305 [IMM <CODEREF>]
	jne	.label_1558
	# 0x80572f5:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x80572f8:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x80572fb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80572fd:	je	0x805745a [IMM <CODEREF>]
	je	.label_1559
	# 0x8057303:	jmp	0x8057339 [IMM <CODEREF>]
	jmp	.label_1541
	# 0x8057305:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1558:
	movl	-0x34(%ebp), %eax
	# 0x8057308:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805730b:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805730e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057310:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8057313:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057314:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8057317:	calll	0x80570da [IMM <CODEREF>]
	calll	wc_truncate
	# 0x805731c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805731f:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8057322:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057325:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x8057328:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805732b:	pushl	-0x34(%ebp) [MEM]
	pushl	-0x34(%ebp)
	# 0x805732e:	calll	0x80497f0 [IMM <CODEREF>]
	calll	wcstombs
	# 0x8057333:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057336:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8057339:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1541:
	movl	0x14(%ebp), %eax
	# 0x805733c:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805733e:	cmpl	-0x28(%ebp), %eax [MEM, REG]
	cmpl	-0x28(%ebp), %eax
	# 0x8057341:	jae	0x8057351 [IMM <CODEREF>]
	jae	.label_1549
	# 0x8057343:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8057346:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057348:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805734b:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x805734e:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8057351:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1549:
	movl	0x14(%ebp), %eax
	# 0x8057354:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057356:	cmpl	-0x28(%ebp), %eax [MEM, REG]
	cmpl	-0x28(%ebp), %eax
	# 0x8057359:	jbe	0x8057366 [IMM <CODEREF>]
	jbe	.label_1553
	# 0x805735b:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805735e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057360:	subl	-0x28(%ebp), %eax [MEM, REG]
	subl	-0x28(%ebp), %eax
	# 0x8057363:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057366:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1553:
	movl	0x14(%ebp), %eax
	# 0x8057369:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805736c:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805736e:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x8057371:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057373:	je	0x805737c [IMM <CODEREF>]
	je	.label_1557
	# 0x8057375:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8057378:	je	0x805738b [IMM <CODEREF>]
	je	.label_1550
	# 0x805737a:	jmp	0x805739a [IMM <CODEREF>]
	jmp	.label_1560
	# 0x805737c:	movl	$0, -0x1c(%ebp) [IMM, MEM]
.label_1557:
	movl	$0, -0x1c(%ebp)
	# 0x8057383:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8057386:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8057389:	jmp	0x80573b5 [IMM <CODEREF>]
	jmp	.label_1543
	# 0x805738b:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1550:
	movl	-0x20(%ebp), %eax
	# 0x805738e:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057391:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x8057398:	jmp	0x80573b5 [IMM <CODEREF>]
	jmp	.label_1543
	# 0x805739a:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1560:
	movl	-0x20(%ebp), %eax
	# 0x805739d:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x805739f:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80573a1:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80573a4:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x80573a7:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80573a9:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80573ac:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80573af:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x80573b1:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80573b4:	nop	 []
	nop	
	# 0x80573b5:	movl	0x1c(%ebp), %eax [MEM, REG]
.label_1543:
	movl	0x1c(%ebp), %eax
	# 0x80573b8:	andl	$4, %eax [IMM, REG]
	andl	$4, %eax
	# 0x80573bb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80573bd:	je	0x80573c6 [IMM <CODEREF>]
	je	.label_1547
	# 0x80573bf:	movl	$0, -0x1c(%ebp) [IMM, MEM]
	movl	$0, -0x1c(%ebp)
	# 0x80573c6:	movl	0x1c(%ebp), %eax [MEM, REG]
.label_1547:
	movl	0x1c(%ebp), %eax
	# 0x80573c9:	andl	$8, %eax [IMM, REG]
	andl	$8, %eax
	# 0x80573cc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80573ce:	je	0x80573d7 [IMM <CODEREF>]
	je	.label_1555
	# 0x80573d0:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x80573d7:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
.label_1555:
	cmpl	$0, 0x10(%ebp)
	# 0x80573db:	je	0x8057442 [IMM <CODEREF>]
	je	.label_1554
	# 0x80573dd:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x80573e0:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x80573e3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80573e6:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80573e8:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80573eb:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80573ee:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x80573f1:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x80573f4:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80573f7:	calll	0x805714b [IMM <CODEREF>]
	calll	mbs_align_pad
	# 0x80573fc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80573ff:	movl	%eax, 0xc(%ebp) [REG, MEM]
	movl	%eax, 0xc(%ebp)
	# 0x8057402:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x8057405:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057408:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805740a:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805740c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805740f:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x8057412:	cmpl	%eax, -0xc(%ebp) [REG, MEM]
	cmpl	%eax, -0xc(%ebp)
	# 0x8057415:	cmovbel	-0xc(%ebp), %eax [MEM, REG]
	cmovbel	-0xc(%ebp), %eax
	# 0x8057419:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805741c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805741d:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x8057420:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8057423:	calll	0x80499f0 [IMM <CODEREF>]
	calll	mempcpy
	# 0x8057428:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805742b:	movl	%eax, 0xc(%ebp) [REG, MEM]
	movl	%eax, 0xc(%ebp)
	# 0x805742e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057431:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x8057434:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x8057437:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805743a:	calll	0x805714b [IMM <CODEREF>]
	calll	mbs_align_pad
	# 0x805743f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057442:	movl	-0x1c(%ebp), %edx [MEM, REG]
.label_1554:
	movl	-0x1c(%ebp), %edx
	# 0x8057445:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8057448:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805744a:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805744d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805744f:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x8057452:	jmp	0x805745b [IMM <CODEREF>]
	jmp	.label_1552
	# 0x8057454:	nop	 []
.label_1542:
	nop	
	# 0x8057455:	jmp	0x805745b [IMM <CODEREF>]
	jmp	.label_1552
	# 0x8057457:	nop	 []
.label_1548:
	nop	
	# 0x8057458:	jmp	0x805745b [IMM <CODEREF>]
	jmp	.label_1552
	# 0x805745a:	nop	 []
.label_1559:
	nop	
	# 0x805745b:	subl	$0xc, %esp [IMM, REG]
.label_1552:
	subl	$0xc, %esp
	# 0x805745e:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x8057461:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8057466:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057469:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805746c:	pushl	-0x34(%ebp) [MEM]
	pushl	-0x34(%ebp)
	# 0x805746f:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x8057474:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057477:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805747a:	leave	 []
	leave	
	# 0x805747b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805747c
	.globl ambsalign
	.type ambsalign, @function
ambsalign:

	# 0x805747c:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805747d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805747f:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8057482:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057485:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057487:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805748a:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805748d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805748f:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057492:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8057495:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8057498:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x805749f:	jmp	0x8057529 [IMM <CODEREF>]
	jmp	.label_1562
	# 0x80574a4:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1563:
	movl	-0x18(%ebp), %eax
	# 0x80574a7:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80574aa:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x80574ad:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80574b0:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x80574b3:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x80574b6:	calll	0x8049860 [IMM <CODEREF>]
	calll	realloc
	# 0x80574bb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80574be:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80574c1:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x80574c5:	jne	0x80574de [IMM <CODEREF>]
	jne	.label_1564
	# 0x80574c7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80574ca:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x80574cd:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x80574d2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80574d5:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x80574dc:	jmp	0x8057535 [IMM <CODEREF>]
	jmp	.label_1561
	# 0x80574de:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1564:
	movl	-0xc(%ebp), %eax
	# 0x80574e1:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x80574e4:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80574e7:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x80574ea:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80574ec:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80574ef:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x80574f2:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80574f5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x80574f8:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x80574fb:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x80574fe:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057501:	calll	0x805717c [IMM <CODEREF>]
	calll	mbsalign
	# 0x8057506:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8057509:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805750c:	cmpl	$-1, -0x18(%ebp) [IMM, MEM]
	cmpl	$-1, -0x18(%ebp)
	# 0x8057510:	jne	0x8057529 [IMM <CODEREF>]
	jne	.label_1562
	# 0x8057512:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057515:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8057518:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805751d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057520:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x8057527:	jmp	0x8057535 [IMM <CODEREF>]
	jmp	.label_1561
	# 0x8057529:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_1562:
	movl	-0x18(%ebp), %eax
	# 0x805752c:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x805752f:	jae	0x80574a4 [IMM <CODEREF>]
	jae	.label_1563
	# 0x8057535:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_1561:
	movl	-0x14(%ebp), %eax
	# 0x8057538:	leave	 []
	leave	
	# 0x8057539:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805753a

	# 0x805753a:	pushl	%ebp [REG]
	.globl gnu_mbswidth
	.type gnu_mbswidth, @function
gnu_mbswidth:
	pushl	%ebp
	# 0x805753b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805753d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8057540:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057543:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057546:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805754b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805754e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057551:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8057554:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057555:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057558:	calll	0x8057562 [IMM <CODEREF>]
	calll	mbsnwidth
	# 0x805755d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057560:	leave	 []
	leave	
	# 0x8057561:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057562

	# 0x8057562:	pushl	%ebp [REG]
	.globl mbsnwidth
	.type mbsnwidth, @function
mbsnwidth:
	pushl	%ebp
	# 0x8057563:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057565:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x8057568:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805756b:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805756e:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8057574:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8057577:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8057579:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805757c:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805757f:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x8057582:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057585:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057587:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805758a:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x8057591:	calll	0x80497c0 [IMM <CODEREF>]
	calll	__ctype_get_mb_cur_max
	# 0x8057596:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8057599:	jbe	0x8057788 [IMM <CODEREF>]
	jbe	.label_1570
	# 0x805759f:	jmp	0x80576fc [IMM <CODEREF>]
	jmp	.label_1579
	# 0x80575a4:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1589:
	movl	-0x28(%ebp), %eax
	# 0x80575a7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x80575aa:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x80575ad:	cmpl	$0x3f, %eax [IMM, REG]
	cmpl	$0x3f, %eax
	# 0x80575b0:	jg	0x80575c1 [IMM <CODEREF>]
	jg	.label_1574
	# 0x80575b2:	cmpl	$0x25, %eax [IMM, REG]
	cmpl	$0x25, %eax
	# 0x80575b5:	jge	0x80575d3 [IMM <CODEREF>]
	jge	.label_1575
	# 0x80575b7:	subl	$0x20, %eax [IMM, REG]
	subl	$0x20, %eax
	# 0x80575ba:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x80575bd:	ja	0x80575e0 [IMM <CODEREF>]
	ja	.label_1578
	# 0x80575bf:	jmp	0x80575d3 [IMM <CODEREF>]
	jmp	.label_1575
	# 0x80575c1:	cmpl	$0x41, %eax [IMM, REG]
.label_1574:
	cmpl	$0x41, %eax
	# 0x80575c4:	jl	0x80575e0 [IMM <CODEREF>]
	jl	.label_1578
	# 0x80575c6:	cmpl	$0x5f, %eax [IMM, REG]
	cmpl	$0x5f, %eax
	# 0x80575c9:	jle	0x80575d3 [IMM <CODEREF>]
	jle	.label_1575
	# 0x80575cb:	subl	$0x61, %eax [IMM, REG]
	subl	$0x61, %eax
	# 0x80575ce:	cmpl	$0x1d, %eax [IMM, REG]
	cmpl	$0x1d, %eax
	# 0x80575d1:	ja	0x80575e0 [IMM <CODEREF>]
	ja	.label_1578
	# 0x80575d3:	addl	$1, -0x28(%ebp) [IMM, MEM]
.label_1575:
	addl	$1, -0x28(%ebp)
	# 0x80575d7:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x80575db:	jmp	0x80576fc [IMM <CODEREF>]
	jmp	.label_1579
	# 0x80575e0:	subl	$4, %esp [IMM, REG]
.label_1578:
	subl	$4, %esp
	# 0x80575e3:	pushl	$8 [IMM]
	pushl	$8
	# 0x80575e5:	pushl	$0 [IMM]
	pushl	$0
	# 0x80575e7:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x80575ea:	pushl	%eax [REG]
	pushl	%eax
	# 0x80575eb:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80575f0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80575f3:	movl	-0x1c(%ebp), %edx [MEM, REG]
.label_1573:
	movl	-0x1c(%ebp), %edx
	# 0x80575f6:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x80575f9:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80575fb:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80575fd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80575ff:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x8057602:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057603:	pushl	%edx [REG]
	pushl	%edx
	# 0x8057604:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x8057607:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x805760a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805760b:	calll	0x805d3ec [IMM <CODEREF>]
	calll	rpl_mbrtowc
	# 0x8057610:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057613:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057616:	cmpl	$-1, -0x20(%ebp) [IMM, MEM]
	cmpl	$-1, -0x20(%ebp)
	# 0x805761a:	jne	0x805763d [IMM <CODEREF>]
	jne	.label_1566
	# 0x805761c:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805761f:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8057622:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057624:	jne	0x8057633 [IMM <CODEREF>]
	jne	.label_1571
	# 0x8057626:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x805762a:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x805762e:	jmp	0x80576fb [IMM <CODEREF>]
	jmp	.label_1576
	# 0x8057633:	movl	$0xffffffff, %eax [IMM, REG]
.label_1571:
	movl	$0xffffffff, %eax
	# 0x8057638:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x805763d:	cmpl	$-2, -0x20(%ebp) [IMM, MEM]
.label_1566:
	cmpl	$-2, -0x20(%ebp)
	# 0x8057641:	jne	0x8057666 [IMM <CODEREF>]
	jne	.label_1580
	# 0x8057643:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057646:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8057649:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805764b:	jne	0x805765c [IMM <CODEREF>]
	jne	.label_1581
	# 0x805764d:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x8057650:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8057653:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x8057657:	jmp	0x80576fb [IMM <CODEREF>]
	jmp	.label_1576
	# 0x805765c:	movl	$0xffffffff, %eax [IMM, REG]
.label_1581:
	movl	$0xffffffff, %eax
	# 0x8057661:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x8057666:	cmpl	$0, -0x20(%ebp) [IMM, MEM]
.label_1580:
	cmpl	$0, -0x20(%ebp)
	# 0x805766a:	jne	0x8057673 [IMM <CODEREF>]
	jne	.label_1586
	# 0x805766c:	movl	$1, -0x20(%ebp) [IMM, MEM]
	movl	$1, -0x20(%ebp)
	# 0x8057673:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1586:
	movl	-0x2c(%ebp), %eax
	# 0x8057676:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057679:	pushl	%eax [REG]
	pushl	%eax
	# 0x805767a:	calll	0x80495d0 [IMM <CODEREF>]
	calll	wcwidth
	# 0x805767f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057682:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8057685:	cmpl	$0, -0x18(%ebp) [IMM, MEM]
	cmpl	$0, -0x18(%ebp)
	# 0x8057689:	js	0x80576a4 [IMM <CODEREF>]
	js	.label_1590
	# 0x805768b:	movl	$0x7fffffff, %eax [IMM, REG]
	movl	$0x7fffffff, %eax
	# 0x8057690:	subl	-0x24(%ebp), %eax [MEM, REG]
	subl	-0x24(%ebp), %eax
	# 0x8057693:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x8057696:	jl	0x8057795 [IMM <CODEREF>]
	jl	.label_1568
	# 0x805769c:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805769f:	addl	%eax, -0x24(%ebp) [REG, MEM]
	addl	%eax, -0x24(%ebp)
	# 0x80576a2:	jmp	0x80576de [IMM <CODEREF>]
	jmp	.label_1577
	# 0x80576a4:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1590:
	movl	0x10(%ebp), %eax
	# 0x80576a7:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x80576aa:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80576ac:	jne	0x80576d4 [IMM <CODEREF>]
	jne	.label_1572
	# 0x80576ae:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80576b1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80576b4:	pushl	%eax [REG]
	pushl	%eax
	# 0x80576b5:	calll	0x8049710 [IMM <CODEREF>]
	calll	iswcntrl
	# 0x80576ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80576bd:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80576bf:	jne	0x80576de [IMM <CODEREF>]
	jne	.label_1577
	# 0x80576c1:	cmpl	$0x7fffffff, -0x24(%ebp) [IMM, MEM]
	cmpl	$0x7fffffff, -0x24(%ebp)
	# 0x80576c8:	je	0x8057798 [IMM <CODEREF>]
	je	.label_1585
	# 0x80576ce:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x80576d2:	jmp	0x80576de [IMM <CODEREF>]
	jmp	.label_1577
	# 0x80576d4:	movl	$0xffffffff, %eax [IMM, REG]
.label_1572:
	movl	$0xffffffff, %eax
	# 0x80576d9:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x80576de:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1577:
	movl	-0x20(%ebp), %eax
	# 0x80576e1:	addl	%eax, -0x28(%ebp) [REG, MEM]
	addl	%eax, -0x28(%ebp)
	# 0x80576e4:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x80576e7:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x80576ea:	pushl	%eax [REG]
	pushl	%eax
	# 0x80576eb:	calll	0x8049630 [IMM <CODEREF>]
	calll	mbsinit
	# 0x80576f0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80576f3:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80576f5:	je	0x80575f3 [IMM <CODEREF>]
	je	.label_1573
	# 0x80576fb:	nop	 []
.label_1576:
	nop	
	# 0x80576fc:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1579:
	movl	-0x28(%ebp), %eax
	# 0x80576ff:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x8057702:	jb	0x80575a4 [IMM <CODEREF>]
	jb	.label_1589
	# 0x8057708:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805770b:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x8057710:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1567:
	movl	-0x28(%ebp), %eax
	# 0x8057713:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8057716:	movl	%edx, -0x28(%ebp) [REG, MEM]
	movl	%edx, -0x28(%ebp)
	# 0x8057719:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805771c:	movb	%al, -0x2d(%ebp) [REG, MEM]
	movb	%al, -0x2d(%ebp)
	# 0x805771f:	calll	0x8049ba0 [IMM <CODEREF>]
	calll	__ctype_b_loc
	# 0x8057724:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057726:	movzbl	-0x2d(%ebp), %edx [MEM, REG]
	movzbl	-0x2d(%ebp), %edx
	# 0x805772a:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x805772c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805772e:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x8057731:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x8057734:	andl	$0x4000, %eax [IMM, REG]
	andl	$0x4000, %eax
	# 0x8057739:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805773b:	je	0x805774c [IMM <CODEREF>]
	je	.label_1584
	# 0x805773d:	cmpl	$0x7fffffff, -0x24(%ebp) [IMM, MEM]
	cmpl	$0x7fffffff, -0x24(%ebp)
	# 0x8057744:	je	0x805779b [IMM <CODEREF>]
	je	.label_1587
	# 0x8057746:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x805774a:	jmp	0x8057788 [IMM <CODEREF>]
	jmp	.label_1570
	# 0x805774c:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1584:
	movl	0x10(%ebp), %eax
	# 0x805774f:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x8057752:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057754:	jne	0x8057781 [IMM <CODEREF>]
	jne	.label_1583
	# 0x8057756:	calll	0x8049ba0 [IMM <CODEREF>]
	calll	__ctype_b_loc
	# 0x805775b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805775d:	movzbl	-0x2d(%ebp), %edx [MEM, REG]
	movzbl	-0x2d(%ebp), %edx
	# 0x8057761:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x8057763:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057765:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x8057768:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x805776b:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x805776e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057770:	jne	0x8057788 [IMM <CODEREF>]
	jne	.label_1570
	# 0x8057772:	cmpl	$0x7fffffff, -0x24(%ebp) [IMM, MEM]
	cmpl	$0x7fffffff, -0x24(%ebp)
	# 0x8057779:	je	0x805779e [IMM <CODEREF>]
	je	.label_1588
	# 0x805777b:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x805777f:	jmp	0x8057788 [IMM <CODEREF>]
	jmp	.label_1570
	# 0x8057781:	movl	$0xffffffff, %eax [IMM, REG]
.label_1583:
	movl	$0xffffffff, %eax
	# 0x8057786:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x8057788:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1570:
	movl	-0x28(%ebp), %eax
	# 0x805778b:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x805778e:	jb	0x8057710 [IMM <CODEREF>]
	jb	.label_1567
	# 0x8057790:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x8057793:	jmp	0x80577a4 [IMM <CODEREF>]
	jmp	.label_1565
	# 0x8057795:	nop	 []
.label_1568:
	nop	
	# 0x8057796:	jmp	0x805779f [IMM <CODEREF>]
	jmp	.label_1569
	# 0x8057798:	nop	 []
.label_1585:
	nop	
	# 0x8057799:	jmp	0x805779f [IMM <CODEREF>]
	jmp	.label_1569
	# 0x805779b:	nop	 []
.label_1587:
	nop	
	# 0x805779c:	jmp	0x805779f [IMM <CODEREF>]
	jmp	.label_1569
	# 0x805779e:	nop	 []
.label_1588:
	nop	
	# 0x805779f:	movl	$0x7fffffff, %eax [IMM, REG]
.label_1569:
	movl	$0x7fffffff, %eax
	# 0x80577a4:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_1565:
	movl	-0xc(%ebp), %ecx
	# 0x80577a7:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x80577ae:	je	0x80577b5 [IMM <CODEREF>]
	je	.label_1582
	# 0x80577b0:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x80577b5:	leave	 []
.label_1582:
	leave	
	# 0x80577b6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80577b7

	# 0x80577b7:	pushl	%ebp [REG]
	.globl mpsort_into_tmp
	.type mpsort_into_tmp, @function
mpsort_into_tmp:
	pushl	%ebp
	# 0x80577b8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80577ba:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x80577bd:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80577c0:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x80577c2:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x80577c5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80577c8:	subl	-0x14(%ebp), %eax [MEM, REG]
	subl	-0x14(%ebp), %eax
	# 0x80577cb:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x80577ce:	movl	$0, -0x28(%ebp) [IMM, MEM]
	movl	$0, -0x28(%ebp)
	# 0x80577d5:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80577d8:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x80577db:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80577de:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x80577e1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80577e4:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x80577e7:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x80577ea:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x80577f1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80577f4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80577f6:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x80577f9:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80577fc:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x80577ff:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057800:	calll	0x80578fa [IMM <CODEREF>]
	calll	mpsort_with_tmp
	# 0x8057805:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057808:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805780b:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805780e:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8057811:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057814:	calll	0x80578fa [IMM <CODEREF>]
	calll	mpsort_with_tmp
	# 0x8057819:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805781c:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x805781f:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057826:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057829:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805782b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805782d:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057830:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8057833:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x805783a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805783d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805783f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057841:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x8057844:	subl	$8, %esp [IMM, REG]
.label_1591:
	subl	$8, %esp
	# 0x8057847:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805784a:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805784d:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8057850:	calll	*%eax [REG]
	calll	*%eax
	# 0x8057852:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057855:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057857:	jg	0x8057897 [IMM <CODEREF>]
	jg	.label_1593
	# 0x8057859:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805785c:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x805785f:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x8057862:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8057865:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8057867:	addl	$1, -0x28(%ebp) [IMM, MEM]
	addl	$1, -0x28(%ebp)
	# 0x805786b:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x805786e:	cmpl	-0x24(%ebp), %eax [MEM, REG]
	cmpl	-0x24(%ebp), %eax
	# 0x8057871:	jne	0x8057881 [IMM <CODEREF>]
	jne	.label_1595
	# 0x8057873:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x8057876:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8057879:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805787c:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805787f:	jmp	0x80578cb [IMM <CODEREF>]
	jmp	.label_1594
	# 0x8057881:	movl	-0x28(%ebp), %eax [MEM, REG]
.label_1595:
	movl	-0x28(%ebp), %eax
	# 0x8057884:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x805788b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805788e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057890:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057892:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057895:	jmp	0x8057844 [IMM <CODEREF>]
	jmp	.label_1591
	# 0x8057897:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1593:
	movl	0x10(%ebp), %eax
	# 0x805789a:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x805789d:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x80578a0:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x80578a3:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80578a5:	addl	$1, -0x20(%ebp) [IMM, MEM]
	addl	$1, -0x20(%ebp)
	# 0x80578a9:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80578ac:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x80578af:	je	0x80578ca [IMM <CODEREF>]
	je	.label_1592
	# 0x80578b1:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x80578b4:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x80578bb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80578be:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80578c0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80578c2:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x80578c5:	jmp	0x8057844 [IMM <CODEREF>]
	jmp	.label_1591
	# 0x80578ca:	nop	 []
.label_1592:
	nop	
	# 0x80578cb:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_1594:
	movl	-0x24(%ebp), %eax
	# 0x80578ce:	subl	-0x28(%ebp), %eax [MEM, REG]
	subl	-0x28(%ebp), %eax
	# 0x80578d1:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x80578d8:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x80578db:	leal	0(, %eax, 4), %ecx [MEM, REG]
	leal	0(, %eax, 4), %ecx
	# 0x80578e2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80578e5:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x80578e7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80578ea:	pushl	%edx [REG]
	pushl	%edx
	# 0x80578eb:	pushl	%eax [REG]
	pushl	%eax
	# 0x80578ec:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80578ef:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x80578f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80578f7:	nop	 []
	nop	
	# 0x80578f8:	leave	 []
	leave	
	# 0x80578f9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x80578fa

	# 0x80578fa:	pushl	%ebp [REG]
	.globl mpsort_with_tmp
	.type mpsort_with_tmp, @function
mpsort_with_tmp:
	pushl	%ebp
	# 0x80578fb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x80578fd:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80578fe:	subl	$0x34, %esp [IMM, REG]
	subl	$0x34, %esp
	# 0x8057901:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x8057905:	ja	0x8057953 [IMM <CODEREF>]
	ja	.label_1602
	# 0x8057907:	cmpl	$2, 0xc(%ebp) [IMM, MEM]
	cmpl	$2, 0xc(%ebp)
	# 0x805790b:	jne	0x8057ac3 [IMM <CODEREF>]
	jne	.label_1597
	# 0x8057911:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057914:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057916:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057919:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805791c:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805791f:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057922:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8057925:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x8057928:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805792b:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805792e:	calll	*%eax [REG]
	calll	*%eax
	# 0x8057930:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057933:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057935:	jle	0x8057ac3 [IMM <CODEREF>]
	jle	.label_1597
	# 0x805793b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805793e:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x8057941:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x8057943:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057946:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x8057949:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805794c:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805794e:	jmp	0x8057ac3 [IMM <CODEREF>]
	jmp	.label_1597
	# 0x8057953:	movl	0xc(%ebp), %eax [MEM, REG]
.label_1602:
	movl	0xc(%ebp), %eax
	# 0x8057956:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x8057958:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805795b:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805795e:	subl	-0x18(%ebp), %eax [MEM, REG]
	subl	-0x18(%ebp), %eax
	# 0x8057961:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x8057964:	movl	$0, -0x30(%ebp) [IMM, MEM]
	movl	$0, -0x30(%ebp)
	# 0x805796b:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805796e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x8057971:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8057974:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x8057977:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805797a:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805797d:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x8057980:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057987:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805798a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805798c:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805798f:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8057992:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x8057995:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057996:	calll	0x80578fa [IMM <CODEREF>]
	calll	mpsort_with_tmp
	# 0x805799b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805799e:	cmpl	$1, -0x18(%ebp) [IMM, MEM]
	cmpl	$1, -0x18(%ebp)
	# 0x80579a2:	ja	0x80579b0 [IMM <CODEREF>]
	ja	.label_1603
	# 0x80579a4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80579a7:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x80579a9:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x80579ac:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x80579ae:	jmp	0x80579c4 [IMM <CODEREF>]
	jmp	.label_1596
	# 0x80579b0:	pushl	0x14(%ebp) [MEM]
.label_1603:
	pushl	0x14(%ebp)
	# 0x80579b3:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x80579b6:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x80579b9:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x80579bc:	calll	0x80577b7 [IMM <CODEREF>]
	calll	mpsort_into_tmp
	# 0x80579c1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80579c4:	movl	-0x30(%ebp), %eax [MEM, REG]
.label_1596:
	movl	-0x30(%ebp), %eax
	# 0x80579c7:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x80579ce:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x80579d1:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80579d3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80579d5:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x80579d8:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x80579db:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x80579e2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x80579e5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x80579e7:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x80579e9:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x80579ec:	movl	$0, -0x34(%ebp) [IMM, MEM]
	movl	$0, -0x34(%ebp)
	# 0x80579f3:	subl	$8, %esp [IMM, REG]
.label_1599:
	subl	$8, %esp
	# 0x80579f6:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x80579f9:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x80579fc:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x80579ff:	calll	*%eax [REG]
	calll	*%eax
	# 0x8057a01:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057a04:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057a06:	jg	0x8057a48 [IMM <CODEREF>]
	jg	.label_1601
	# 0x8057a08:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x8057a0b:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8057a0e:	movl	%edx, -0x34(%ebp) [REG, MEM]
	movl	%edx, -0x34(%ebp)
	# 0x8057a11:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057a18:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057a1b:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8057a1d:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x8057a20:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x8057a22:	addl	$1, -0x30(%ebp) [IMM, MEM]
	addl	$1, -0x30(%ebp)
	# 0x8057a26:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8057a29:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x8057a2c:	je	0x8057ac2 [IMM <CODEREF>]
	je	.label_1598
	# 0x8057a32:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8057a35:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057a3c:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057a3f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057a41:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057a43:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8057a46:	jmp	0x80579f3 [IMM <CODEREF>]
	jmp	.label_1599
	# 0x8057a48:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1601:
	movl	-0x34(%ebp), %eax
	# 0x8057a4b:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8057a4e:	movl	%edx, -0x34(%ebp) [REG, MEM]
	movl	%edx, -0x34(%ebp)
	# 0x8057a51:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057a58:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057a5b:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8057a5d:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x8057a60:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x8057a62:	addl	$1, -0x2c(%ebp) [IMM, MEM]
	addl	$1, -0x2c(%ebp)
	# 0x8057a66:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x8057a69:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x8057a6c:	jne	0x8057aa9 [IMM <CODEREF>]
	jne	.label_1600
	# 0x8057a6e:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x8057a71:	subl	-0x30(%ebp), %eax [MEM, REG]
	subl	-0x30(%ebp), %eax
	# 0x8057a74:	leal	0(, %eax, 4), %ecx [MEM, REG]
	leal	0(, %eax, 4), %ecx
	# 0x8057a7b:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x8057a7e:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057a85:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057a88:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8057a8a:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x8057a8d:	leal	0(, %eax, 4), %ebx [MEM, REG]
	leal	0(, %eax, 4), %ebx
	# 0x8057a94:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057a97:	addl	%ebx, %eax [REG, REG]
	addl	%ebx, %eax
	# 0x8057a99:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057a9c:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x8057a9d:	pushl	%edx [REG]
	pushl	%edx
	# 0x8057a9e:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057a9f:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8057aa4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057aa7:	jmp	0x8057ac3 [IMM <CODEREF>]
	jmp	.label_1597
	# 0x8057aa9:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1600:
	movl	-0x2c(%ebp), %eax
	# 0x8057aac:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057ab3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057ab6:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057ab8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057aba:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8057abd:	jmp	0x80579f3 [IMM <CODEREF>]
	jmp	.label_1599
	# 0x8057ac2:	nop	 []
.label_1598:
	nop	
	# 0x8057ac3:	nop	 []
.label_1597:
	nop	
	# 0x8057ac4:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8057ac7:	leave	 []
	leave	
	# 0x8057ac8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057ac9

	# 0x8057ac9:	pushl	%ebp [REG]
	.globl mpsort
	.type mpsort, @function
mpsort:
	pushl	%ebp
	# 0x8057aca:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057acc:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8057acf:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057ad2:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x8057ad9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057adc:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057ade:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x8057ae1:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057ae2:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8057ae5:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x8057ae8:	calll	0x80578fa [IMM <CODEREF>]
	calll	mpsort_with_tmp
	# 0x8057aed:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057af0:	nop	 []
	nop	
	# 0x8057af1:	leave	 []
	leave	
	# 0x8057af2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057af3

	# 0x8057af3:	pushl	%ebp [REG]
	.globl memcpy_lowcase
	.type memcpy_lowcase, @function
memcpy_lowcase:
	pushl	%ebp
	# 0x8057af4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057af6:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8057af7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057afa:	jmp	0x8057b21 [IMM <CODEREF>]
	jmp	.label_1605
	# 0x8057afc:	movl	8(%ebp), %edx [MEM, REG]
.label_1604:
	movl	8(%ebp), %edx
	# 0x8057aff:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057b02:	leal	0(%edx, %eax), %ebx [MEM, REG]
	leal	0(%edx, %eax), %ebx
	# 0x8057b05:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x8057b08:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057b0b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057b0d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057b10:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8057b13:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057b16:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057b17:	calll	0x8049650 [IMM <CODEREF>]
	calll	tolower
	# 0x8057b1c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057b1f:	movb	%al, 0(%ebx) [REG, MEM]
	movb	%al, 0(%ebx)
	# 0x8057b21:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1605:
	movl	0x10(%ebp), %eax
	# 0x8057b24:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8057b27:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x8057b2a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057b2c:	jne	0x8057afc [IMM <CODEREF>]
	jne	.label_1604
	# 0x8057b2e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057b31:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8057b34:	leave	 []
	leave	
	# 0x8057b35:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057b36

	# 0x8057b36:	pushl	%ebp [REG]
	.globl memcpy_uppcase
	.type memcpy_uppcase, @function
memcpy_uppcase:
	pushl	%ebp
	# 0x8057b37:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057b39:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8057b3a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057b3d:	jmp	0x8057b64 [IMM <CODEREF>]
	jmp	.label_1607
	# 0x8057b3f:	movl	8(%ebp), %edx [MEM, REG]
.label_1606:
	movl	8(%ebp), %edx
	# 0x8057b42:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057b45:	leal	0(%edx, %eax), %ebx [MEM, REG]
	leal	0(%edx, %eax), %ebx
	# 0x8057b48:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x8057b4b:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057b4e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057b50:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057b53:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8057b56:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x8057b59:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057b5a:	calll	0x8049a40 [IMM <CODEREF>]
	calll	toupper
	# 0x8057b5f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057b62:	movb	%al, 0(%ebx) [REG, MEM]
	movb	%al, 0(%ebx)
	# 0x8057b64:	movl	0x10(%ebp), %eax [MEM, REG]
.label_1607:
	movl	0x10(%ebp), %eax
	# 0x8057b67:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x8057b6a:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x8057b6d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8057b6f:	jne	0x8057b3f [IMM <CODEREF>]
	jne	.label_1606
	# 0x8057b71:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057b74:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x8057b77:	leave	 []
	leave	
	# 0x8057b78:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057b79

	# 0x8057b79:	pushl	%ebp [REG]
	.globl iso_week_days
	.type iso_week_days, @function
iso_week_days:
	pushl	%ebp
	# 0x8057b7a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057b7c:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x8057b7f:	movl	$0x17a, -4(%ebp) [IMM, MEM]
	movl	$0x17a, -4(%ebp)
	# 0x8057b86:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057b89:	subl	0xc(%ebp), %eax [MEM, REG]
	subl	0xc(%ebp), %eax
	# 0x8057b8c:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x8057b8f:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x8057b92:	leal	0(%edx, %eax), %ecx [MEM, REG]
	leal	0(%edx, %eax), %ecx
	# 0x8057b95:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x8057b9a:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8057b9c:	imull	%edx [REG]
	imull	%edx
	# 0x8057b9e:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8057ba1:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x8057ba4:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8057ba6:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8057ba8:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8057bab:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8057bad:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8057baf:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8057bb1:	shll	$3, %edx [IMM, REG]
	shll	$3, %edx
	# 0x8057bb4:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8057bb6:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8057bb8:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8057bba:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8057bbd:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8057bbf:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8057bc1:	addl	$3, %eax [IMM, REG]
	addl	$3, %eax
	# 0x8057bc4:	leave	 []
	leave	
	# 0x8057bc5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057bc6

	# 0x8057bc6:	pushl	%ebp [REG]
	.globl nstrftime
	.type nstrftime, @function
nstrftime:
	pushl	%ebp
	# 0x8057bc7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057bc9:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x8057bcc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x8057bcf:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x8057bd2:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x8057bd5:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x8057bd8:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x8057bdb:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x8057bde:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x8057be1:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x8057be4:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8057bea:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8057bed:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8057bef:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x8057bf3:	pushl	0x1c(%ebp) [MEM]
	pushl	0x1c(%ebp)
	# 0x8057bf6:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x8057bf9:	leal	-0xd(%ebp), %eax [MEM, REG]
	leal	-0xd(%ebp), %eax
	# 0x8057bfc:	pushl	%eax [REG]
	pushl	%eax
	# 0x8057bfd:	pushl	$0 [IMM]
	pushl	$0
	# 0x8057bff:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x8057c02:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x8057c05:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x8057c08:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x8057c0b:	calll	0x8057c26 [IMM <CODEREF>]
	calll	__strftime_internal
	# 0x8057c10:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x8057c13:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x8057c16:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x8057c1d:	je	0x8057c24 [IMM <CODEREF>]
	je	.label_1608
	# 0x8057c1f:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x8057c24:	leave	 []
.label_1608:
	leave	
	# 0x8057c25:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x8057c26

	# 0x8057c26:	pushl	%ebp [REG]
	.globl __strftime_internal
	.type __strftime_internal, @function
__strftime_internal:
	pushl	%ebp
	# 0x8057c27:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x8057c29:	pushl	%esi [REG]
	pushl	%esi
	# 0x8057c2a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8057c2b:	subl	$0x5c0, %esp [IMM, REG]
	subl	$0x5c0, %esp
	# 0x8057c31:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x8057c34:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x8057c37:	movl	%edx, -0x5ac(%ebp) [REG, MEM]
	movl	%edx, -0x5ac(%ebp)
	# 0x8057c3d:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x8057c40:	movl	%edx, -0x5b0(%ebp) [REG, MEM]
	movl	%edx, -0x5b0(%ebp)
	# 0x8057c46:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x8057c49:	movl	%edx, -0x5b4(%ebp) [REG, MEM]
	movl	%edx, -0x5b4(%ebp)
	# 0x8057c4f:	movb	%al, -0x5b8(%ebp) [REG, MEM]
	movb	%al, -0x5b8(%ebp)
	# 0x8057c55:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x8057c58:	movl	%eax, -0x5bc(%ebp) [REG, MEM]
	movl	%eax, -0x5bc(%ebp)
	# 0x8057c5e:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x8057c61:	movl	%eax, -0x5c0(%ebp) [REG, MEM]
	movl	%eax, -0x5c0(%ebp)
	# 0x8057c67:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x8057c6d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x8057c70:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x8057c72:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8057c78:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8057c7b:	movl	%eax, -0x59c(%ebp) [REG, MEM]
	movl	%eax, -0x59c(%ebp)
	# 0x8057c81:	movl	$0, -0x594(%ebp) [IMM, MEM]
	movl	$0, -0x594(%ebp)
	# 0x8057c8b:	movl	-0x5ac(%ebp), %eax [MEM, REG]
	movl	-0x5ac(%ebp), %eax
	# 0x8057c91:	movl	%eax, -0x590(%ebp) [REG, MEM]
	movl	%eax, -0x590(%ebp)
	# 0x8057c97:	movl	$0, -0x598(%ebp) [IMM, MEM]
	movl	$0, -0x598(%ebp)
	# 0x8057ca1:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8057ca7:	movl	0x28(%eax), %eax [MEM, REG]
	movl	0x28(%eax), %eax
	# 0x8057caa:	movl	%eax, -0x598(%ebp) [REG, MEM]
	movl	%eax, -0x598(%ebp)
	# 0x8057cb0:	cmpl	$0, -0x598(%ebp) [IMM, MEM]
	cmpl	$0, -0x598(%ebp)
	# 0x8057cb7:	jne	0x8057cc3 [IMM <CODEREF>]
	jne	.label_1616
	# 0x8057cb9:	movl	$0x8063560, -0x598(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1646, -1432(%ebp)
	# 0x8057cc3:	cmpl	$0xc, -0x59c(%ebp) [IMM, MEM]
.label_1616:
	cmpl	$0xc, -0x59c(%ebp)
	# 0x8057cca:	jle	0x8057cd5 [IMM <CODEREF>]
	jle	.label_1648
	# 0x8057ccc:	subl	$0xc, -0x59c(%ebp) [IMM, MEM]
	subl	$0xc, -0x59c(%ebp)
	# 0x8057cd3:	jmp	0x8057ce8 [IMM <CODEREF>]
	jmp	.label_1652
	# 0x8057cd5:	cmpl	$0, -0x59c(%ebp) [IMM, MEM]
.label_1648:
	cmpl	$0, -0x59c(%ebp)
	# 0x8057cdc:	jne	0x8057ce8 [IMM <CODEREF>]
	jne	.label_1652
	# 0x8057cde:	movl	$0xc, -0x59c(%ebp) [IMM, MEM]
	movl	$0xc, -0x59c(%ebp)
	# 0x8057ce8:	movl	-0x5b0(%ebp), %eax [MEM, REG]
.label_1652:
	movl	-0x5b0(%ebp), %eax
	# 0x8057cee:	movl	%eax, -0x58c(%ebp) [REG, MEM]
	movl	%eax, -0x58c(%ebp)
	# 0x8057cf4:	jmp	0x805a075 [IMM <CODEREF>]
	jmp	.label_1658
	# 0x8057cf9:	movl	$0, -0x588(%ebp) [IMM, MEM]
.label_1747:
	movl	$0, -0x588(%ebp)
	# 0x8057d03:	movl	$0, -0x580(%ebp) [IMM, MEM]
	movl	$0, -0x580(%ebp)
	# 0x8057d0d:	movl	$0xffffffff, -0x568(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x568(%ebp)
	# 0x8057d17:	movb	$0, -0x5a0(%ebp) [IMM, MEM]
	movb	$0, -0x5a0(%ebp)
	# 0x8057d1e:	movzbl	-0x5b8(%ebp), %eax [MEM, REG]
	movzbl	-0x5b8(%ebp), %eax
	# 0x8057d25:	movb	%al, -0x59f(%ebp) [REG, MEM]
	movb	%al, -0x59f(%ebp)
	# 0x8057d2b:	movb	$0, -0x59e(%ebp) [IMM, MEM]
	movb	$0, -0x59e(%ebp)
	# 0x8057d32:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057d38:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057d3b:	cmpb	$0x25, %al [IMM, REG]
	cmpb	$0x25, %al
	# 0x8057d3d:	je	0x8057e53 [IMM <CODEREF>]
	je	.label_1661
	# 0x8057d43:	movl	$1, -0x450(%ebp) [IMM, MEM]
	movl	$1, -0x450(%ebp)
	# 0x8057d4d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8057d52:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8057d59:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8057d60:	movl	%eax, -0x44c(%ebp) [REG, MEM]
	movl	%eax, -0x44c(%ebp)
	# 0x8057d66:	movl	-0x44c(%ebp), %eax [MEM, REG]
	movl	-0x44c(%ebp), %eax
	# 0x8057d6c:	cmpl	%eax, -0x450(%ebp) [REG, MEM]
	cmpl	%eax, -0x450(%ebp)
	# 0x8057d72:	cmovael	-0x450(%ebp), %eax [MEM, REG]
	cmovael	-0x450(%ebp), %eax
	# 0x8057d79:	movl	%eax, -0x448(%ebp) [REG, MEM]
	movl	%eax, -0x448(%ebp)
	# 0x8057d7f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8057d82:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8057d88:	cmpl	-0x448(%ebp), %eax [MEM, REG]
	cmpl	-0x448(%ebp), %eax
	# 0x8057d8e:	ja	0x8057d9a [IMM <CODEREF>]
	ja	.label_1670
	# 0x8057d90:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8057d95:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8057d9a:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1670:
	cmpl	$0, -0x590(%ebp)
	# 0x8057da1:	je	0x8057e42 [IMM <CODEREF>]
	je	.label_1686
	# 0x8057da7:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8057dae:	jne	0x8057e25 [IMM <CODEREF>]
	jne	.label_1687
	# 0x8057db0:	movl	-0x450(%ebp), %eax [MEM, REG]
	movl	-0x450(%ebp), %eax
	# 0x8057db6:	cmpl	-0x44c(%ebp), %eax [MEM, REG]
	cmpl	-0x44c(%ebp), %eax
	# 0x8057dbc:	jae	0x8057e25 [IMM <CODEREF>]
	jae	.label_1687
	# 0x8057dbe:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8057dc4:	subl	-0x450(%ebp), %eax [MEM, REG]
	subl	-0x450(%ebp), %eax
	# 0x8057dca:	movl	%eax, -0x444(%ebp) [REG, MEM]
	movl	%eax, -0x444(%ebp)
	# 0x8057dd0:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8057dd7:	jne	0x8057e00 [IMM <CODEREF>]
	jne	.label_1691
	# 0x8057dd9:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8057ddc:	pushl	-0x444(%ebp) [MEM]
	pushl	-0x444(%ebp)
	# 0x8057de2:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8057de4:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8057dea:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8057def:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057df2:	movl	-0x444(%ebp), %eax [MEM, REG]
	movl	-0x444(%ebp), %eax
	# 0x8057df8:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8057dfe:	jmp	0x8057e25 [IMM <CODEREF>]
	jmp	.label_1687
	# 0x8057e00:	subl	$4, %esp [IMM, REG]
.label_1691:
	subl	$4, %esp
	# 0x8057e03:	pushl	-0x444(%ebp) [MEM]
	pushl	-0x444(%ebp)
	# 0x8057e09:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8057e0b:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8057e11:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8057e16:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8057e19:	movl	-0x444(%ebp), %eax [MEM, REG]
	movl	-0x444(%ebp), %eax
	# 0x8057e1f:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8057e25:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1687:
	movl	-0x58c(%ebp), %eax
	# 0x8057e2b:	movzbl	0(%eax), %edx [MEM, REG]
	movzbl	0(%eax), %edx
	# 0x8057e2e:	movl	-0x590(%ebp), %eax [MEM, REG]
	movl	-0x590(%ebp), %eax
	# 0x8057e34:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8057e36:	movl	-0x450(%ebp), %eax [MEM, REG]
	movl	-0x450(%ebp), %eax
	# 0x8057e3c:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8057e42:	movl	-0x448(%ebp), %eax [MEM, REG]
.label_1686:
	movl	-0x448(%ebp), %eax
	# 0x8057e48:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8057e4e:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x8057e53:	addl	$1, -0x58c(%ebp) [IMM, MEM]
.label_1661:
	addl	$1, -0x58c(%ebp)
	# 0x8057e5a:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057e60:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057e63:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057e66:	cmpl	$0x30, %eax [IMM, REG]
	cmpl	$0x30, %eax
	# 0x8057e69:	je	0x8057e88 [IMM <CODEREF>]
	je	.label_1699
	# 0x8057e6b:	cmpl	$0x30, %eax [IMM, REG]
	cmpl	$0x30, %eax
	# 0x8057e6e:	jg	0x8057e7c [IMM <CODEREF>]
	jg	.label_1638
	# 0x8057e70:	cmpl	$0x23, %eax [IMM, REG]
	cmpl	$0x23, %eax
	# 0x8057e73:	je	0x8057ea5 [IMM <CODEREF>]
	je	.label_1720
	# 0x8057e75:	cmpl	$0x2d, %eax [IMM, REG]
	cmpl	$0x2d, %eax
	# 0x8057e78:	je	0x8057e88 [IMM <CODEREF>]
	je	.label_1699
	# 0x8057e7a:	jmp	0x8057eae [IMM <CODEREF>]
	jmp	.label_1737
	# 0x8057e7c:	cmpl	$0x5e, %eax [IMM, REG]
.label_1638:
	cmpl	$0x5e, %eax
	# 0x8057e7f:	je	0x8057e9c [IMM <CODEREF>]
	je	.label_1722
	# 0x8057e81:	cmpl	$0x5f, %eax [IMM, REG]
	cmpl	$0x5f, %eax
	# 0x8057e84:	je	0x8057e88 [IMM <CODEREF>]
	je	.label_1699
	# 0x8057e86:	jmp	0x8057eae [IMM <CODEREF>]
	jmp	.label_1737
	# 0x8057e88:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1699:
	movl	-0x58c(%ebp), %eax
	# 0x8057e8e:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057e91:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057e94:	movl	%eax, -0x588(%ebp) [REG, MEM]
	movl	%eax, -0x588(%ebp)
	# 0x8057e9a:	jmp	0x8057ec9 [IMM <CODEREF>]
	jmp	.label_1724
	# 0x8057e9c:	movb	$1, -0x59f(%ebp) [IMM, MEM]
.label_1722:
	movb	$1, -0x59f(%ebp)
	# 0x8057ea3:	jmp	0x8057ec9 [IMM <CODEREF>]
	jmp	.label_1724
	# 0x8057ea5:	movb	$1, -0x59e(%ebp) [IMM, MEM]
.label_1720:
	movb	$1, -0x59e(%ebp)
	# 0x8057eac:	jmp	0x8057ec9 [IMM <CODEREF>]
	jmp	.label_1724
	# 0x8057eae:	nop	 []
.label_1737:
	nop	
	# 0x8057eaf:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057eb5:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057eb8:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057ebb:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8057ebe:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x8057ec1:	ja	0x8057f52 [IMM <CODEREF>]
	ja	.label_1728
	# 0x8057ec7:	jmp	0x8057ecb [IMM <CODEREF>]
	jmp	.label_1731
	# 0x8057ec9:	jmp	0x8057e53 [IMM <CODEREF>]
.label_1724:
	jmp	.label_1661
	# 0x8057ecb:	movl	$0, -0x568(%ebp) [IMM, MEM]
.label_1731:
	movl	$0, -0x568(%ebp)
	# 0x8057ed5:	cmpl	$0xccccccc, -0x568(%ebp) [IMM, MEM]
.label_1751:
	cmpl	$0xccccccc, -0x568(%ebp)
	# 0x8057edf:	jg	0x8057f01 [IMM <CODEREF>]
	jg	.label_1735
	# 0x8057ee1:	cmpl	$0xccccccc, -0x568(%ebp) [IMM, MEM]
	cmpl	$0xccccccc, -0x568(%ebp)
	# 0x8057eeb:	jne	0x8057f0d [IMM <CODEREF>]
	jne	.label_1738
	# 0x8057eed:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057ef3:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057ef6:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057ef9:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8057efc:	cmpl	$7, %eax [IMM, REG]
	cmpl	$7, %eax
	# 0x8057eff:	jle	0x8057f0d [IMM <CODEREF>]
	jle	.label_1738
	# 0x8057f01:	movl	$0x7fffffff, -0x568(%ebp) [IMM, MEM]
.label_1735:
	movl	$0x7fffffff, -0x568(%ebp)
	# 0x8057f0b:	jmp	0x8057f37 [IMM <CODEREF>]
	jmp	.label_1743
	# 0x8057f0d:	movl	-0x568(%ebp), %edx [MEM, REG]
.label_1738:
	movl	-0x568(%ebp), %edx
	# 0x8057f13:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8057f15:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8057f18:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8057f1a:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8057f1c:	movl	%eax, -0x568(%ebp) [REG, MEM]
	movl	%eax, -0x568(%ebp)
	# 0x8057f22:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057f28:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057f2b:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057f2e:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8057f31:	addl	%eax, -0x568(%ebp) [REG, MEM]
	addl	%eax, -0x568(%ebp)
	# 0x8057f37:	addl	$1, -0x58c(%ebp) [IMM, MEM]
.label_1743:
	addl	$1, -0x58c(%ebp)
	# 0x8057f3e:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8057f44:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057f47:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057f4a:	subl	$0x30, %eax [IMM, REG]
	subl	$0x30, %eax
	# 0x8057f4d:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x8057f50:	jbe	0x8057ed5 [IMM <CODEREF>]
	jbe	.label_1751
	# 0x8057f52:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1728:
	movl	-0x58c(%ebp), %eax
	# 0x8057f58:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057f5b:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057f5e:	cmpl	$0x45, %eax [IMM, REG]
	cmpl	$0x45, %eax
	# 0x8057f61:	je	0x8057f68 [IMM <CODEREF>]
	je	.label_1754
	# 0x8057f63:	cmpl	$0x4f, %eax [IMM, REG]
	cmpl	$0x4f, %eax
	# 0x8057f66:	jne	0x8057f85 [IMM <CODEREF>]
	jne	.label_1755
	# 0x8057f68:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1754:
	movl	-0x58c(%ebp), %eax
	# 0x8057f6e:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8057f71:	movl	%edx, -0x58c(%ebp) [REG, MEM]
	movl	%edx, -0x58c(%ebp)
	# 0x8057f77:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057f7a:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057f7d:	movl	%eax, -0x584(%ebp) [REG, MEM]
	movl	%eax, -0x584(%ebp)
	# 0x8057f83:	jmp	0x8057f90 [IMM <CODEREF>]
	jmp	.label_1757
	# 0x8057f85:	movl	$0, -0x584(%ebp) [IMM, MEM]
.label_1755:
	movl	$0, -0x584(%ebp)
	# 0x8057f8f:	nop	 []
	nop	
	# 0x8057f90:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1757:
	movl	-0x58c(%ebp), %eax
	# 0x8057f96:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8057f99:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8057f9c:	movl	%eax, -0x560(%ebp) [REG, MEM]
	movl	%eax, -0x560(%ebp)
	# 0x8057fa2:	cmpl	$0x7a, -0x560(%ebp) [IMM, MEM]
	cmpl	$0x7a, -0x560(%ebp)
	# 0x8057fa9:	ja	0x8059e9f [IMM <CODEREF>]
	ja	.label_1645
	# 0x8057faf:	movl	-0x560(%ebp), %eax [MEM, REG]
	movl	-0x560(%ebp), %eax
	# 0x8057fb5:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8057fb8:	addl	$0x8063584, %eax [IMM <DATAREF>, REG]
	addl	$label_1763,  %eax
	# 0x8057fbd:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8057fbf:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x8057fc1:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
.label_2440:
	cmpl	$0, -0x584(%ebp)
	# 0x8057fc8:	jne	0x8059e5c [IMM <CODEREF>]
	jne	.label_1769
	# 0x8057fce:	movl	$1, -0x540(%ebp) [IMM, MEM]
	movl	$1, -0x540(%ebp)
	# 0x8057fd8:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8057fdd:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8057fe4:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8057feb:	movl	%eax, -0x53c(%ebp) [REG, MEM]
	movl	%eax, -0x53c(%ebp)
	# 0x8057ff1:	movl	-0x53c(%ebp), %eax [MEM, REG]
	movl	-0x53c(%ebp), %eax
	# 0x8057ff7:	cmpl	%eax, -0x540(%ebp) [REG, MEM]
	cmpl	%eax, -0x540(%ebp)
	# 0x8057ffd:	cmovael	-0x540(%ebp), %eax [MEM, REG]
	cmovael	-0x540(%ebp), %eax
	# 0x8058004:	movl	%eax, -0x538(%ebp) [REG, MEM]
	movl	%eax, -0x538(%ebp)
	# 0x805800a:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805800d:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058013:	cmpl	-0x538(%ebp), %eax [MEM, REG]
	cmpl	-0x538(%ebp), %eax
	# 0x8058019:	ja	0x8058025 [IMM <CODEREF>]
	ja	.label_1710
	# 0x805801b:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058020:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058025:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1710:
	cmpl	$0, -0x590(%ebp)
	# 0x805802c:	je	0x80580cd [IMM <CODEREF>]
	je	.label_1615
	# 0x8058032:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058039:	jne	0x80580b0 [IMM <CODEREF>]
	jne	.label_1619
	# 0x805803b:	movl	-0x540(%ebp), %eax [MEM, REG]
	movl	-0x540(%ebp), %eax
	# 0x8058041:	cmpl	-0x53c(%ebp), %eax [MEM, REG]
	cmpl	-0x53c(%ebp), %eax
	# 0x8058047:	jae	0x80580b0 [IMM <CODEREF>]
	jae	.label_1619
	# 0x8058049:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x805804f:	subl	-0x540(%ebp), %eax [MEM, REG]
	subl	-0x540(%ebp), %eax
	# 0x8058055:	movl	%eax, -0x534(%ebp) [REG, MEM]
	movl	%eax, -0x534(%ebp)
	# 0x805805b:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058062:	jne	0x805808b [IMM <CODEREF>]
	jne	sub_805808b
	.section	.text
	.align	32
	#Procedure 0x8058064
	.globl sub_8058064
	.type sub_8058064, @function
sub_8058064:

	# 0x8058064:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058067:	pushl	-0x534(%ebp) [MEM]
	pushl	-0x534(%ebp)
	# 0x805806d:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805806f:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058075:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805807a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805807d:	movl	-0x534(%ebp), %eax [MEM, REG]
	movl	-0x534(%ebp), %eax
	# 0x8058083:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058089:	jmp	0x80580b0 [IMM <CODEREF>]
	jmp	.label_1619
	.section	.text
	.align	32
	#Procedure 0x805808b

	# 0x805808b:	subl	$4, %esp [IMM, REG]
	.globl sub_805808b
	.type sub_805808b, @function
sub_805808b:
	subl	$4, %esp
	# 0x805808e:	pushl	-0x534(%ebp) [MEM]
	pushl	-0x534(%ebp)
	# 0x8058094:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8058096:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805809c:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80580a1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80580a4:	movl	-0x534(%ebp), %eax [MEM, REG]
	movl	-0x534(%ebp), %eax
	# 0x80580aa:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80580b0:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1619:
	movl	-0x58c(%ebp), %eax
	# 0x80580b6:	movzbl	0(%eax), %edx [MEM, REG]
	movzbl	0(%eax), %edx
	# 0x80580b9:	movl	-0x590(%ebp), %eax [MEM, REG]
	movl	-0x590(%ebp), %eax
	# 0x80580bf:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x80580c1:	movl	-0x540(%ebp), %eax [MEM, REG]
	movl	-0x540(%ebp), %eax
	# 0x80580c7:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80580cd:	movl	-0x538(%ebp), %eax [MEM, REG]
.label_1615:
	movl	-0x538(%ebp), %eax
	# 0x80580d3:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x80580d9:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x80580de:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
.label_2461:
	cmpl	$0, -0x584(%ebp)
	# 0x80580e5:	jne	0x8059e5f [IMM <CODEREF>]
	jne	.label_1655
	# 0x80580eb:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
	cmpb	$0, -0x59e(%ebp)
	# 0x80580f2:	je	0x8058314 [IMM <CODEREF>]
	je	.label_1659
	# 0x80580f8:	movb	$1, -0x59f(%ebp) [IMM, MEM]
	movb	$1, -0x59f(%ebp)
	# 0x80580ff:	movb	$0, -0x5a0(%ebp) [IMM, MEM]
	movb	$0, -0x5a0(%ebp)
	# 0x8058106:	jmp	0x8058314 [IMM <CODEREF>]
	jmp	.label_1659
	# 0x805810b:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
.label_2442:
	cmpl	$0, -0x584(%ebp)
	# 0x8058112:	jne	0x8059e62 [IMM <CODEREF>]
	jne	.label_1663
	# 0x8058118:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
	cmpb	$0, -0x59e(%ebp)
	# 0x805811f:	je	0x8058317 [IMM <CODEREF>]
	je	.label_1666
	# 0x8058125:	movb	$1, -0x59f(%ebp) [IMM, MEM]
	movb	$1, -0x59f(%ebp)
	# 0x805812c:	movb	$0, -0x5a0(%ebp) [IMM, MEM]
	movb	$0, -0x5a0(%ebp)
	# 0x8058133:	jmp	0x8058317 [IMM <CODEREF>]
	jmp	.label_1666
	# 0x8058138:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
.label_2462:
	cmpb	$0, -0x59e(%ebp)
	# 0x805813f:	je	0x805814f [IMM <CODEREF>]
	je	.label_1667
	# 0x8058141:	movb	$1, -0x59f(%ebp) [IMM, MEM]
	movb	$1, -0x59f(%ebp)
	# 0x8058148:	movb	$0, -0x5a0(%ebp) [IMM, MEM]
	movb	$0, -0x5a0(%ebp)
	# 0x805814f:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_1667:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058156:	jne	0x805831a [IMM <CODEREF>]
	jne	.label_1674
	# 0x805815c:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8058161:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2443:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058168:	je	0x8059e65 [IMM <CODEREF>]
	je	.label_1642
	# 0x805816e:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
	cmpb	$0, -0x59e(%ebp)
	# 0x8058175:	je	0x805831d [IMM <CODEREF>]
	je	.label_1656
	# 0x805817b:	movb	$1, -0x59f(%ebp) [IMM, MEM]
	movb	$1, -0x59f(%ebp)
	# 0x8058182:	movb	$0, -0x5a0(%ebp) [IMM, MEM]
	movb	$0, -0x5a0(%ebp)
	# 0x8058189:	jmp	0x805831d [IMM <CODEREF>]
	jmp	.label_1656
	# 0x805818e:	cmpl	$0x4f, -0x584(%ebp) [IMM, MEM]
.label_2463:
	cmpl	$0x4f, -0x584(%ebp)
	# 0x8058195:	jne	0x8058320 [IMM <CODEREF>]
	jne	.label_1684
	# 0x805819b:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x80581a0:	movzbl	-0x59f(%ebp), %eax [MEM, REG]
.label_1650:
	movzbl	-0x59f(%ebp), %eax
	# 0x80581a7:	pushl	0x24(%ebp) [MEM]
	pushl	0x24(%ebp)
	# 0x80581aa:	pushl	-0x5c0(%ebp) [MEM]
	pushl	-0x5c0(%ebp)
	# 0x80581b0:	pushl	-0x5bc(%ebp) [MEM]
	pushl	-0x5bc(%ebp)
	# 0x80581b6:	pushl	%eax [REG]
	pushl	%eax
	# 0x80581b7:	pushl	-0x5b4(%ebp) [MEM]
	pushl	-0x5b4(%ebp)
	# 0x80581bd:	pushl	-0x570(%ebp) [MEM]
	pushl	-0x570(%ebp)
	# 0x80581c3:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x80581c5:	pushl	$0 [IMM]
	pushl	$0
	# 0x80581c7:	calll	0x8057c26 [IMM <CODEREF>]
	calll	__strftime_internal
	# 0x80581cc:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80581cf:	movl	%eax, -0x530(%ebp) [REG, MEM]
	movl	%eax, -0x530(%ebp)
	# 0x80581d5:	movl	-0x530(%ebp), %eax [MEM, REG]
	movl	-0x530(%ebp), %eax
	# 0x80581db:	movl	%eax, -0x52c(%ebp) [REG, MEM]
	movl	%eax, -0x52c(%ebp)
	# 0x80581e1:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80581e6:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x80581ed:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x80581f4:	movl	%eax, -0x528(%ebp) [REG, MEM]
	movl	%eax, -0x528(%ebp)
	# 0x80581fa:	movl	-0x528(%ebp), %eax [MEM, REG]
	movl	-0x528(%ebp), %eax
	# 0x8058200:	cmpl	%eax, -0x52c(%ebp) [REG, MEM]
	cmpl	%eax, -0x52c(%ebp)
	# 0x8058206:	cmovael	-0x52c(%ebp), %eax [MEM, REG]
	cmovael	-0x52c(%ebp), %eax
	# 0x805820d:	movl	%eax, -0x524(%ebp) [REG, MEM]
	movl	%eax, -0x524(%ebp)
	# 0x8058213:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8058216:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x805821c:	cmpl	-0x524(%ebp), %eax [MEM, REG]
	cmpl	-0x524(%ebp), %eax
	# 0x8058222:	ja	0x805822e [IMM <CODEREF>]
	ja	.label_1700
	# 0x8058224:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058229:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x805822e:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1700:
	cmpl	$0, -0x590(%ebp)
	# 0x8058235:	je	0x8058300 [IMM <CODEREF>]
	je	.label_1712
	# 0x805823b:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058242:	jne	0x80582b9 [IMM <CODEREF>]
	jne	.label_1714
	# 0x8058244:	movl	-0x52c(%ebp), %eax [MEM, REG]
	movl	-0x52c(%ebp), %eax
	# 0x805824a:	cmpl	-0x528(%ebp), %eax [MEM, REG]
	cmpl	-0x528(%ebp), %eax
	# 0x8058250:	jae	0x80582b9 [IMM <CODEREF>]
	jae	.label_1714
	# 0x8058252:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058258:	subl	-0x52c(%ebp), %eax [MEM, REG]
	subl	-0x52c(%ebp), %eax
	# 0x805825e:	movl	%eax, -0x520(%ebp) [REG, MEM]
	movl	%eax, -0x520(%ebp)
	# 0x8058264:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x805826b:	jne	0x8058294 [IMM <CODEREF>]
	jne	sub_8058294
	.section	.text
	.align	32
	#Procedure 0x805826d
	.globl sub_805826d
	.type sub_805826d, @function
sub_805826d:

	# 0x805826d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058270:	pushl	-0x520(%ebp) [MEM]
	pushl	-0x520(%ebp)
	# 0x8058276:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058278:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805827e:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058283:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058286:	movl	-0x520(%ebp), %eax [MEM, REG]
	movl	-0x520(%ebp), %eax
	# 0x805828c:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058292:	jmp	0x80582b9 [IMM <CODEREF>]
	jmp	.label_1714
	.section	.text
	.align	32
	#Procedure 0x8058294

	# 0x8058294:	subl	$4, %esp [IMM, REG]
	.globl sub_8058294
	.type sub_8058294, @function
sub_8058294:
	subl	$4, %esp
	# 0x8058297:	pushl	-0x520(%ebp) [MEM]
	pushl	-0x520(%ebp)
	# 0x805829d:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x805829f:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80582a5:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80582aa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80582ad:	movl	-0x520(%ebp), %eax [MEM, REG]
	movl	-0x520(%ebp), %eax
	# 0x80582b3:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80582b9:	movzbl	-0x59f(%ebp), %edx [MEM, REG]
.label_1714:
	movzbl	-0x59f(%ebp), %edx
	# 0x80582c0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x80582c3:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x80582c9:	pushl	0x24(%ebp) [MEM]
	pushl	0x24(%ebp)
	# 0x80582cc:	pushl	-0x5c0(%ebp) [MEM]
	pushl	-0x5c0(%ebp)
	# 0x80582d2:	pushl	-0x5bc(%ebp) [MEM]
	pushl	-0x5bc(%ebp)
	# 0x80582d8:	pushl	%edx [REG]
	pushl	%edx
	# 0x80582d9:	pushl	-0x5b4(%ebp) [MEM]
	pushl	-0x5b4(%ebp)
	# 0x80582df:	pushl	-0x570(%ebp) [MEM]
	pushl	-0x570(%ebp)
	# 0x80582e5:	pushl	%eax [REG]
	pushl	%eax
	# 0x80582e6:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80582ec:	calll	0x8057c26 [IMM <CODEREF>]
	calll	__strftime_internal
	# 0x80582f1:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x80582f4:	movl	-0x52c(%ebp), %eax [MEM, REG]
	movl	-0x52c(%ebp), %eax
	# 0x80582fa:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058300:	movl	-0x524(%ebp), %eax [MEM, REG]
.label_1712:
	movl	-0x524(%ebp), %eax
	# 0x8058306:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x805830c:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x8058311:	nop	 []
.label_2473:
	nop	
	# 0x8058312:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058314:	nop	 []
.label_1659:
	nop	
	# 0x8058315:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058317:	nop	 []
.label_1666:
	nop	
	# 0x8058318:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x805831a:	nop	 []
.label_1674:
	nop	
	# 0x805831b:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x805831d:	nop	 []
.label_1656:
	nop	
	# 0x805831e:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058320:	nop	 []
.label_1684:
	nop	
	# 0x8058321:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058323:	nop	 []
.label_1675:
	nop	
	# 0x8058324:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058326:	nop	 []
.label_1702:
	nop	
	# 0x8058327:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058329:	nop	 []
.label_1736:
	nop	
	# 0x805832a:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x805832c:	nop	 []
.label_1701:
	nop	
	# 0x805832d:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x805832f:	nop	 []
.label_1611:
	nop	
	# 0x8058330:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058332:	nop	 []
.label_1681:
	nop	
	# 0x8058333:	jmp	0x8058336 [IMM <CODEREF>]
	jmp	.label_1729
	# 0x8058335:	nop	 []
.label_1692:
	nop	
	# 0x8058336:	leal	-0x411(%ebp), %eax [MEM, REG]
.label_1729:
	leal	-0x411(%ebp), %eax
	# 0x805833c:	movl	%eax, -0x55c(%ebp) [REG, MEM]
	movl	%eax, -0x55c(%ebp)
	# 0x8058342:	movl	-0x55c(%ebp), %eax [MEM, REG]
	movl	-0x55c(%ebp), %eax
	# 0x8058348:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805834b:	movl	%edx, -0x55c(%ebp) [REG, MEM]
	movl	%edx, -0x55c(%ebp)
	# 0x8058351:	movb	$0x20, 0(%eax) [IMM, MEM]
	movb	$0x20, 0(%eax)
	# 0x8058354:	movl	-0x55c(%ebp), %eax [MEM, REG]
	movl	-0x55c(%ebp), %eax
	# 0x805835a:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805835d:	movl	%edx, -0x55c(%ebp) [REG, MEM]
	movl	%edx, -0x55c(%ebp)
	# 0x8058363:	movb	$0x25, 0(%eax) [IMM, MEM]
	movb	$0x25, 0(%eax)
	# 0x8058366:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
	cmpl	$0, -0x584(%ebp)
	# 0x805836d:	je	0x8058386 [IMM <CODEREF>]
	je	.label_1750
	# 0x805836f:	movl	-0x55c(%ebp), %eax [MEM, REG]
	movl	-0x55c(%ebp), %eax
	# 0x8058375:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x8058378:	movl	%edx, -0x55c(%ebp) [REG, MEM]
	movl	%edx, -0x55c(%ebp)
	# 0x805837e:	movl	-0x584(%ebp), %edx [MEM, REG]
	movl	-0x584(%ebp), %edx
	# 0x8058384:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8058386:	movl	-0x55c(%ebp), %eax [MEM, REG]
.label_1750:
	movl	-0x55c(%ebp), %eax
	# 0x805838c:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805838f:	movl	%edx, -0x55c(%ebp) [REG, MEM]
	movl	%edx, -0x55c(%ebp)
	# 0x8058395:	movl	-0x560(%ebp), %edx [MEM, REG]
	movl	-0x560(%ebp), %edx
	# 0x805839b:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805839d:	movl	-0x55c(%ebp), %eax [MEM, REG]
	movl	-0x55c(%ebp), %eax
	# 0x80583a3:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x80583a6:	pushl	-0x5b4(%ebp) [MEM]
	pushl	-0x5b4(%ebp)
	# 0x80583ac:	leal	-0x411(%ebp), %eax [MEM, REG]
	leal	-0x411(%ebp), %eax
	# 0x80583b2:	pushl	%eax [REG]
	pushl	%eax
	# 0x80583b3:	pushl	$0x400 [IMM]
	pushl	$0x400
	# 0x80583b8:	leal	-0x40c(%ebp), %eax [MEM, REG]
	leal	-0x40c(%ebp), %eax
	# 0x80583be:	pushl	%eax [REG]
	pushl	%eax
	# 0x80583bf:	calll	0x80498d0 [IMM <CODEREF>]
	calll	strftime
	# 0x80583c4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80583c7:	movl	%eax, -0x4fc(%ebp) [REG, MEM]
	movl	%eax, -0x4fc(%ebp)
	# 0x80583cd:	cmpl	$0, -0x4fc(%ebp) [IMM, MEM]
	cmpl	$0, -0x4fc(%ebp)
	# 0x80583d4:	je	0x805a06a [IMM <CODEREF>]
	je	.label_1671
	# 0x80583da:	movl	-0x4fc(%ebp), %eax [MEM, REG]
	movl	-0x4fc(%ebp), %eax
	# 0x80583e0:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x80583e3:	movl	%eax, -0x4f8(%ebp) [REG, MEM]
	movl	%eax, -0x4f8(%ebp)
	# 0x80583e9:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80583ee:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x80583f5:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x80583fc:	movl	%eax, -0x4f4(%ebp) [REG, MEM]
	movl	%eax, -0x4f4(%ebp)
	# 0x8058402:	movl	-0x4f4(%ebp), %eax [MEM, REG]
	movl	-0x4f4(%ebp), %eax
	# 0x8058408:	cmpl	%eax, -0x4f8(%ebp) [REG, MEM]
	cmpl	%eax, -0x4f8(%ebp)
	# 0x805840e:	cmovael	-0x4f8(%ebp), %eax [MEM, REG]
	cmovael	-0x4f8(%ebp), %eax
	# 0x8058415:	movl	%eax, -0x4f0(%ebp) [REG, MEM]
	movl	%eax, -0x4f0(%ebp)
	# 0x805841b:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805841e:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058424:	cmpl	-0x4f0(%ebp), %eax [MEM, REG]
	cmpl	-0x4f0(%ebp), %eax
	# 0x805842a:	ja	0x8058436 [IMM <CODEREF>]
	ja	.label_1772
	# 0x805842c:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058431:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058436:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1772:
	cmpl	$0, -0x590(%ebp)
	# 0x805843d:	je	0x8058546 [IMM <CODEREF>]
	je	.label_1621
	# 0x8058443:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x805844a:	jne	0x80584c1 [IMM <CODEREF>]
	jne	.label_1623
	# 0x805844c:	movl	-0x4f8(%ebp), %eax [MEM, REG]
	movl	-0x4f8(%ebp), %eax
	# 0x8058452:	cmpl	-0x4f4(%ebp), %eax [MEM, REG]
	cmpl	-0x4f4(%ebp), %eax
	# 0x8058458:	jae	0x80584c1 [IMM <CODEREF>]
	jae	.label_1623
	# 0x805845a:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058460:	subl	-0x4f8(%ebp), %eax [MEM, REG]
	subl	-0x4f8(%ebp), %eax
	# 0x8058466:	movl	%eax, -0x4ec(%ebp) [REG, MEM]
	movl	%eax, -0x4ec(%ebp)
	# 0x805846c:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058473:	jne	0x805849c [IMM <CODEREF>]
	jne	sub_805849c
	.section	.text
	.align	32
	#Procedure 0x8058475
	.globl sub_8058475
	.type sub_8058475, @function
sub_8058475:

	# 0x8058475:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058478:	pushl	-0x4ec(%ebp) [MEM]
	pushl	-0x4ec(%ebp)
	# 0x805847e:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058480:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058486:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805848b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805848e:	movl	-0x4ec(%ebp), %eax [MEM, REG]
	movl	-0x4ec(%ebp), %eax
	# 0x8058494:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x805849a:	jmp	0x80584c1 [IMM <CODEREF>]
	jmp	.label_1623
	.section	.text
	.align	32
	#Procedure 0x805849c

	# 0x805849c:	subl	$4, %esp [IMM, REG]
	.globl sub_805849c
	.type sub_805849c, @function
sub_805849c:
	subl	$4, %esp
	# 0x805849f:	pushl	-0x4ec(%ebp) [MEM]
	pushl	-0x4ec(%ebp)
	# 0x80584a5:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x80584a7:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80584ad:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80584b2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80584b5:	movl	-0x4ec(%ebp), %eax [MEM, REG]
	movl	-0x4ec(%ebp), %eax
	# 0x80584bb:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80584c1:	cmpb	$0, -0x5a0(%ebp) [IMM, MEM]
.label_1623:
	cmpb	$0, -0x5a0(%ebp)
	# 0x80584c8:	je	0x80584ed [IMM <CODEREF>]
	je	.label_1647
	# 0x80584ca:	leal	-0x40c(%ebp), %eax [MEM, REG]
	leal	-0x40c(%ebp), %eax
	# 0x80584d0:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80584d3:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x80584d6:	pushl	-0x4f8(%ebp) [MEM]
	pushl	-0x4f8(%ebp)
	# 0x80584dc:	pushl	%eax [REG]
	pushl	%eax
	# 0x80584dd:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80584e3:	calll	0x8057af3 [IMM <CODEREF>]
	calll	memcpy_lowcase
	# 0x80584e8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80584eb:	jmp	0x805853a [IMM <CODEREF>]
	jmp	.label_1664
	# 0x80584ed:	cmpb	$0, -0x59f(%ebp) [IMM, MEM]
.label_1647:
	cmpb	$0, -0x59f(%ebp)
	# 0x80584f4:	je	0x8058519 [IMM <CODEREF>]
	je	.label_1660
	# 0x80584f6:	leal	-0x40c(%ebp), %eax [MEM, REG]
	leal	-0x40c(%ebp), %eax
	# 0x80584fc:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80584ff:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058502:	pushl	-0x4f8(%ebp) [MEM]
	pushl	-0x4f8(%ebp)
	# 0x8058508:	pushl	%eax [REG]
	pushl	%eax
	# 0x8058509:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805850f:	calll	0x8057b36 [IMM <CODEREF>]
	calll	memcpy_uppcase
	# 0x8058514:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058517:	jmp	0x805853a [IMM <CODEREF>]
	jmp	.label_1664
	# 0x8058519:	leal	-0x40c(%ebp), %eax [MEM, REG]
.label_1660:
	leal	-0x40c(%ebp), %eax
	# 0x805851f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8058522:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058525:	pushl	-0x4f8(%ebp) [MEM]
	pushl	-0x4f8(%ebp)
	# 0x805852b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805852c:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058532:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8058537:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805853a:	movl	-0x4f8(%ebp), %eax [MEM, REG]
.label_1664:
	movl	-0x4f8(%ebp), %eax
	# 0x8058540:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058546:	movl	-0x4f0(%ebp), %eax [MEM, REG]
.label_1621:
	movl	-0x4f0(%ebp), %eax
	# 0x805854c:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058552:	jmp	0x805a06a [IMM <CODEREF>]
	jmp	.label_1671
	# 0x8058557:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2444:
	cmpl	$0x45, -0x584(%ebp)
	# 0x805855e:	je	0x8058323 [IMM <CODEREF>]
	je	.label_1675
	# 0x8058564:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805856a:	movl	0x14(%eax), %ecx [MEM, REG]
	movl	0x14(%eax), %ecx
	# 0x805856d:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x8058572:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8058574:	imull	%edx [REG]
	imull	%edx
	# 0x8058576:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x8058579:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805857b:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x805857e:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8058580:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8058582:	addl	$0x13, %eax [IMM, REG]
	addl	$0x13, %eax
	# 0x8058585:	movl	%eax, -0x51c(%ebp) [REG, MEM]
	movl	%eax, -0x51c(%ebp)
	# 0x805858b:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058591:	movl	0x14(%eax), %ecx [MEM, REG]
	movl	0x14(%eax), %ecx
	# 0x8058594:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x8058599:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805859b:	imull	%edx [REG]
	imull	%edx
	# 0x805859d:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x80585a0:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80585a2:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80585a5:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80585a7:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80585a9:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x80585ac:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x80585ae:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80585b0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80585b2:	jns	0x80585c4 [IMM <CODEREF>]
	jns	.label_1677
	# 0x80585b4:	cmpl	$0, -0x51c(%ebp) [IMM, MEM]
	cmpl	$0, -0x51c(%ebp)
	# 0x80585bb:	jle	0x80585c4 [IMM <CODEREF>]
	jle	.label_1677
	# 0x80585bd:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x80585c2:	jmp	0x80585c9 [IMM <CODEREF>]
	jmp	.label_1690
	# 0x80585c4:	movl	$0, %eax [IMM, REG]
.label_1677:
	movl	$0, %eax
	# 0x80585c9:	subl	%eax, -0x51c(%ebp) [REG, MEM]
.label_1690:
	subl	%eax, -0x51c(%ebp)
	# 0x80585cf:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x80585d9:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80585df:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80585e2:	cmpl	$0xfffff894, %eax [IMM, REG]
	cmpl	$0xfffff894, %eax
	# 0x80585e7:	setl	%al [REG]
	setl	%al
	# 0x80585ea:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x80585f0:	movl	-0x51c(%ebp), %eax [MEM, REG]
	movl	-0x51c(%ebp), %eax
	# 0x80585f6:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x80585fc:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x8058601:	cmpl	$0x4f, -0x584(%ebp) [IMM, MEM]
.label_2478:
	cmpl	$0x4f, -0x584(%ebp)
	# 0x8058608:	jne	0x8058326 [IMM <CODEREF>]
	jne	.label_1702
	# 0x805860e:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8058613:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
.label_2445:
	cmpl	$0, -0x584(%ebp)
	# 0x805861a:	jne	0x8059e68 [IMM <CODEREF>]
	jne	.label_1705
	# 0x8058620:	movl	$0x8063561, -0x570(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1708, -1392(%ebp)
	# 0x805862a:	jmp	0x80581a0 [IMM <CODEREF>]
	jmp	.label_1650
	# 0x805862f:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2464:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058636:	je	0x8059e6b [IMM <CODEREF>]
	je	.label_1713
	# 0x805863c:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8058646:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805864c:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805864f:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8058655:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8058657:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2465:
	cmpl	$0x45, -0x584(%ebp)
	# 0x805865e:	je	0x8059e6e [IMM <CODEREF>]
	je	.label_1717
	# 0x8058664:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x805866e:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058674:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x8058677:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x805867d:	jmp	0x8058688 [IMM <CODEREF>]
	jmp	.label_1718
	# 0x805867f:	movb	$1, -0x5a1(%ebp) [IMM, MEM]
.label_1665:
	movb	$1, -0x5a1(%ebp)
	# 0x8058686:	jmp	0x80586d0 [IMM <CODEREF>]
	jmp	.label_1723
	# 0x8058688:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
.label_1718:
	cmpl	$0x30, -0x588(%ebp)
	# 0x805868f:	je	0x80586a4 [IMM <CODEREF>]
	je	.label_1610
	# 0x8058691:	cmpl	$0x2d, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x2d, -0x588(%ebp)
	# 0x8058698:	je	0x80586a4 [IMM <CODEREF>]
	je	.label_1610
	# 0x805869a:	movl	$0x5f, -0x588(%ebp) [IMM, MEM]
	movl	$0x5f, -0x588(%ebp)
	# 0x80586a4:	movl	-0x57c(%ebp), %eax [MEM, REG]
.label_1610:
	movl	-0x57c(%ebp), %eax
	# 0x80586aa:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x80586ad:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x80586b3:	movl	-0x57c(%ebp), %eax [MEM, REG]
	movl	-0x57c(%ebp), %eax
	# 0x80586b9:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x80586bf:	movb	$0, -0x5a1(%ebp) [IMM, MEM]
.label_1620:
	movb	$0, -0x5a1(%ebp)
	# 0x80586c6:	movl	$0, -0x574(%ebp) [IMM, MEM]
	movl	$0, -0x574(%ebp)
	# 0x80586d0:	cmpl	$0x4f, -0x584(%ebp) [IMM, MEM]
.label_1723:
	cmpl	$0x4f, -0x584(%ebp)
	# 0x80586d7:	jne	0x80586eb [IMM <CODEREF>]
	jne	.label_1733
	# 0x80586d9:	movzbl	-0x5a2(%ebp), %eax [MEM, REG]
	movzbl	-0x5a2(%ebp), %eax
	# 0x80586e0:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x80586e3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x80586e5:	jne	0x8058329 [IMM <CODEREF>]
	jne	.label_1736
	# 0x80586eb:	leal	-0x40c(%ebp), %eax [MEM, REG]
.label_1733:
	leal	-0x40c(%ebp), %eax
	# 0x80586f1:	addl	$0xe, %eax [IMM, REG]
	addl	$0xe, %eax
	# 0x80586f4:	movl	%eax, -0x56c(%ebp) [REG, MEM]
	movl	%eax, -0x56c(%ebp)
	# 0x80586fa:	cmpb	$0, -0x5a2(%ebp) [IMM, MEM]
	cmpb	$0, -0x5a2(%ebp)
	# 0x8058701:	je	0x8058709 [IMM <CODEREF>]
	je	.label_1740
	# 0x8058703:	negl	-0x578(%ebp) [MEM]
	negl	-0x578(%ebp)
	# 0x8058709:	movl	-0x574(%ebp), %eax [MEM, REG]
.label_1740:
	movl	-0x574(%ebp), %eax
	# 0x805870f:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x8058712:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8058714:	je	0x8058726 [IMM <CODEREF>]
	je	.label_1745
	# 0x8058716:	subl	$1, -0x56c(%ebp) [IMM, MEM]
	subl	$1, -0x56c(%ebp)
	# 0x805871d:	movl	-0x56c(%ebp), %eax [MEM, REG]
	movl	-0x56c(%ebp), %eax
	# 0x8058723:	movb	$0x3a, 0(%eax) [IMM, MEM]
	movb	$0x3a, 0(%eax)
	# 0x8058726:	sarl	$1, -0x574(%ebp) [IMM, MEM]
.label_1745:
	sarl	$1, -0x574(%ebp)
	# 0x805872c:	subl	$1, -0x56c(%ebp) [IMM, MEM]
	subl	$1, -0x56c(%ebp)
	# 0x8058733:	movl	-0x578(%ebp), %ecx [MEM, REG]
	movl	-0x578(%ebp), %ecx
	# 0x8058739:	movl	$0xcccccccd, %edx [IMM, REG]
	movl	$0xcccccccd, %edx
	# 0x805873e:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8058740:	mull	%edx [REG]
	mull	%edx
	# 0x8058742:	shrl	$3, %edx [IMM, REG]
	shrl	$3, %edx
	# 0x8058745:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8058747:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805874a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805874c:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x805874e:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8058750:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x8058752:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8058754:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x8058757:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058759:	movl	-0x56c(%ebp), %eax [MEM, REG]
	movl	-0x56c(%ebp), %eax
	# 0x805875f:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8058761:	movl	-0x578(%ebp), %eax [MEM, REG]
	movl	-0x578(%ebp), %eax
	# 0x8058767:	movl	$0xcccccccd, %edx [IMM, REG]
	movl	$0xcccccccd, %edx
	# 0x805876c:	mull	%edx [REG]
	mull	%edx
	# 0x805876e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8058770:	shrl	$3, %eax [IMM, REG]
	shrl	$3, %eax
	# 0x8058773:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8058779:	cmpl	$0, -0x578(%ebp) [IMM, MEM]
	cmpl	$0, -0x578(%ebp)
	# 0x8058780:	jne	0x8058709 [IMM <CODEREF>]
	jne	.label_1740
	# 0x8058782:	cmpl	$0, -0x574(%ebp) [IMM, MEM]
	cmpl	$0, -0x574(%ebp)
	# 0x8058789:	jne	0x8058709 [IMM <CODEREF>]
	jne	.label_1740
	# 0x805878f:	movl	-0x580(%ebp), %eax [MEM, REG]
.label_1779:
	movl	-0x580(%ebp), %eax
	# 0x8058795:	cmpl	-0x568(%ebp), %eax [MEM, REG]
	cmpl	-0x568(%ebp), %eax
	# 0x805879b:	jge	0x80587a9 [IMM <CODEREF>]
	jge	.label_1760
	# 0x805879d:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x80587a3:	movl	%eax, -0x580(%ebp) [REG, MEM]
	movl	%eax, -0x580(%ebp)
	# 0x80587a9:	cmpb	$0, -0x5a2(%ebp) [IMM, MEM]
.label_1760:
	cmpb	$0, -0x5a2(%ebp)
	# 0x80587b0:	je	0x80587b9 [IMM <CODEREF>]
	je	.label_1762
	# 0x80587b2:	movl	$0x2d, %eax [IMM, REG]
	movl	$0x2d, %eax
	# 0x80587b7:	jmp	0x80587ce [IMM <CODEREF>]
	jmp	.label_1711
	# 0x80587b9:	cmpb	$0, -0x5a1(%ebp) [IMM, MEM]
.label_1762:
	cmpb	$0, -0x5a1(%ebp)
	# 0x80587c0:	je	0x80587c9 [IMM <CODEREF>]
	je	.label_1766
	# 0x80587c2:	movl	$0x2b, %eax [IMM, REG]
	movl	$0x2b, %eax
	# 0x80587c7:	jmp	0x80587ce [IMM <CODEREF>]
	jmp	.label_1711
	# 0x80587c9:	movl	$0, %eax [IMM, REG]
.label_1766:
	movl	$0, %eax
	# 0x80587ce:	movb	%al, -0x59d(%ebp) [REG, MEM]
.label_1711:
	movb	%al, -0x59d(%ebp)
	# 0x80587d4:	cmpl	$0x2d, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x2d, -0x588(%ebp)
	# 0x80587db:	jne	0x80588fc [IMM <CODEREF>]
	jne	.label_1770
	# 0x80587e1:	cmpb	$0, -0x59d(%ebp) [IMM, MEM]
	cmpb	$0, -0x59d(%ebp)
	# 0x80587e8:	je	0x8058d7b [IMM <CODEREF>]
	je	.label_1632
	# 0x80587ee:	movl	$1, -0x4e4(%ebp) [IMM, MEM]
	movl	$1, -0x4e4(%ebp)
	# 0x80587f8:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80587fd:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8058804:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x805880b:	movl	%eax, -0x4e0(%ebp) [REG, MEM]
	movl	%eax, -0x4e0(%ebp)
	# 0x8058811:	movl	-0x4e0(%ebp), %eax [MEM, REG]
	movl	-0x4e0(%ebp), %eax
	# 0x8058817:	cmpl	%eax, -0x4e4(%ebp) [REG, MEM]
	cmpl	%eax, -0x4e4(%ebp)
	# 0x805881d:	cmovael	-0x4e4(%ebp), %eax [MEM, REG]
	cmovael	-0x4e4(%ebp), %eax
	# 0x8058824:	movl	%eax, -0x4dc(%ebp) [REG, MEM]
	movl	%eax, -0x4dc(%ebp)
	# 0x805882a:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805882d:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058833:	cmpl	-0x4dc(%ebp), %eax [MEM, REG]
	cmpl	-0x4dc(%ebp), %eax
	# 0x8058839:	ja	0x8058845 [IMM <CODEREF>]
	ja	.label_1776
	# 0x805883b:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058840:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058845:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1776:
	cmpl	$0, -0x590(%ebp)
	# 0x805884c:	je	0x80588eb [IMM <CODEREF>]
	je	.label_1624
	# 0x8058852:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058859:	jne	0x80588d0 [IMM <CODEREF>]
	jne	.label_1628
	# 0x805885b:	movl	-0x4e4(%ebp), %eax [MEM, REG]
	movl	-0x4e4(%ebp), %eax
	# 0x8058861:	cmpl	-0x4e0(%ebp), %eax [MEM, REG]
	cmpl	-0x4e0(%ebp), %eax
	# 0x8058867:	jae	0x80588d0 [IMM <CODEREF>]
	jae	.label_1628
	# 0x8058869:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x805886f:	subl	-0x4e4(%ebp), %eax [MEM, REG]
	subl	-0x4e4(%ebp), %eax
	# 0x8058875:	movl	%eax, -0x4d8(%ebp) [REG, MEM]
	movl	%eax, -0x4d8(%ebp)
	# 0x805887b:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058882:	jne	0x80588ab [IMM <CODEREF>]
	jne	sub_80588ab
	.section	.text
	.align	32
	#Procedure 0x8058884
	.globl sub_8058884
	.type sub_8058884, @function
sub_8058884:

	# 0x8058884:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058887:	pushl	-0x4d8(%ebp) [MEM]
	pushl	-0x4d8(%ebp)
	# 0x805888d:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805888f:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058895:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805889a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805889d:	movl	-0x4d8(%ebp), %eax [MEM, REG]
	movl	-0x4d8(%ebp), %eax
	# 0x80588a3:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80588a9:	jmp	0x80588d0 [IMM <CODEREF>]
	jmp	.label_1628
	.section	.text
	.align	32
	#Procedure 0x80588ab

	# 0x80588ab:	subl	$4, %esp [IMM, REG]
	.globl sub_80588ab
	.type sub_80588ab, @function
sub_80588ab:
	subl	$4, %esp
	# 0x80588ae:	pushl	-0x4d8(%ebp) [MEM]
	pushl	-0x4d8(%ebp)
	# 0x80588b4:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x80588b6:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80588bc:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80588c1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80588c4:	movl	-0x4d8(%ebp), %eax [MEM, REG]
	movl	-0x4d8(%ebp), %eax
	# 0x80588ca:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80588d0:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1628:
	movl	-0x590(%ebp), %eax
	# 0x80588d6:	movzbl	-0x59d(%ebp), %edx [MEM, REG]
	movzbl	-0x59d(%ebp), %edx
	# 0x80588dd:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x80588df:	movl	-0x4e4(%ebp), %eax [MEM, REG]
	movl	-0x4e4(%ebp), %eax
	# 0x80588e5:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80588eb:	movl	-0x4dc(%ebp), %eax [MEM, REG]
.label_1624:
	movl	-0x4dc(%ebp), %eax
	# 0x80588f1:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x80588f7:	jmp	0x8058d7b [IMM <CODEREF>]
	jmp	.label_1632
	# 0x80588fc:	leal	-0x40c(%ebp), %eax [MEM, REG]
.label_1770:
	leal	-0x40c(%ebp), %eax
	# 0x8058902:	addl	$0xe, %eax [IMM, REG]
	addl	$0xe, %eax
	# 0x8058905:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058907:	movl	-0x56c(%ebp), %eax [MEM, REG]
	movl	-0x56c(%ebp), %eax
	# 0x805890d:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805890f:	movl	-0x580(%ebp), %eax [MEM, REG]
	movl	-0x580(%ebp), %eax
	# 0x8058915:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8058917:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058919:	cmpb	$0, -0x59d(%ebp) [IMM, MEM]
	cmpb	$0, -0x59d(%ebp)
	# 0x8058920:	setne	%al [REG]
	setne	%al
	# 0x8058923:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x8058926:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8058928:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805892a:	movl	%eax, -0x4d4(%ebp) [REG, MEM]
	movl	%eax, -0x4d4(%ebp)
	# 0x8058930:	cmpl	$0, -0x4d4(%ebp) [IMM, MEM]
	cmpl	$0, -0x4d4(%ebp)
	# 0x8058937:	jle	0x8058c65 [IMM <CODEREF>]
	jle	.label_1662
	# 0x805893d:	cmpl	$0x5f, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x5f, -0x588(%ebp)
	# 0x8058944:	jne	0x8058ae6 [IMM <CODEREF>]
	jne	.label_1682
	# 0x805894a:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805894d:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058953:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058955:	movl	-0x4d4(%ebp), %eax [MEM, REG]
	movl	-0x4d4(%ebp), %eax
	# 0x805895b:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805895d:	ja	0x8058969 [IMM <CODEREF>]
	ja	.label_1768
	# 0x805895f:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058964:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058969:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1768:
	cmpl	$0, -0x590(%ebp)
	# 0x8058970:	je	0x8058998 [IMM <CODEREF>]
	je	.label_1679
	# 0x8058972:	movl	-0x4d4(%ebp), %eax [MEM, REG]
	movl	-0x4d4(%ebp), %eax
	.section	.text
	.align	32
	#Procedure 0x8058978
	.globl sub_8058978
	.type sub_8058978, @function
sub_8058978:

	# 0x8058978:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805897b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805897c:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x805897e:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058984:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058989:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805898c:	movl	-0x4d4(%ebp), %eax [MEM, REG]
	movl	-0x4d4(%ebp), %eax
	# 0x8058992:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058998:	movl	-0x4d4(%ebp), %eax [MEM, REG]
.label_1679:
	movl	-0x4d4(%ebp), %eax
	# 0x805899e:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x80589a4:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x80589aa:	cmpl	-0x4d4(%ebp), %eax [MEM, REG]
	cmpl	-0x4d4(%ebp), %eax
	# 0x80589b0:	jle	0x80589c0 [IMM <CODEREF>]
	jle	.label_1685
	# 0x80589b2:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x80589b8:	subl	-0x4d4(%ebp), %eax [MEM, REG]
	subl	-0x4d4(%ebp), %eax
	# 0x80589be:	jmp	0x80589c5 [IMM <CODEREF>]
	jmp	.label_1689
	# 0x80589c0:	movl	$0, %eax [IMM, REG]
.label_1685:
	movl	$0, %eax
	# 0x80589c5:	movl	%eax, -0x568(%ebp) [REG, MEM]
.label_1689:
	movl	%eax, -0x568(%ebp)
	# 0x80589cb:	cmpb	$0, -0x59d(%ebp) [IMM, MEM]
	cmpb	$0, -0x59d(%ebp)
	# 0x80589d2:	je	0x8058d7b [IMM <CODEREF>]
	je	.label_1632
	# 0x80589d8:	movl	$1, -0x4d0(%ebp) [IMM, MEM]
	movl	$1, -0x4d0(%ebp)
	# 0x80589e2:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80589e7:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x80589ee:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x80589f5:	movl	%eax, -0x4cc(%ebp) [REG, MEM]
	movl	%eax, -0x4cc(%ebp)
	# 0x80589fb:	movl	-0x4cc(%ebp), %eax [MEM, REG]
	movl	-0x4cc(%ebp), %eax
	# 0x8058a01:	cmpl	%eax, -0x4d0(%ebp) [REG, MEM]
	cmpl	%eax, -0x4d0(%ebp)
	# 0x8058a07:	cmovael	-0x4d0(%ebp), %eax [MEM, REG]
	cmovael	-0x4d0(%ebp), %eax
	# 0x8058a0e:	movl	%eax, -0x4c8(%ebp) [REG, MEM]
	movl	%eax, -0x4c8(%ebp)
	# 0x8058a14:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8058a17:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058a1d:	cmpl	-0x4c8(%ebp), %eax [MEM, REG]
	cmpl	-0x4c8(%ebp), %eax
	# 0x8058a23:	ja	0x8058a2f [IMM <CODEREF>]
	ja	.label_1696
	# 0x8058a25:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058a2a:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058a2f:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1696:
	cmpl	$0, -0x590(%ebp)
	# 0x8058a36:	je	0x8058ad5 [IMM <CODEREF>]
	je	.label_1727
	# 0x8058a3c:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058a43:	jne	0x8058aba [IMM <CODEREF>]
	jne	.label_1715
	# 0x8058a45:	movl	-0x4d0(%ebp), %eax [MEM, REG]
	movl	-0x4d0(%ebp), %eax
	# 0x8058a4b:	cmpl	-0x4cc(%ebp), %eax [MEM, REG]
	cmpl	-0x4cc(%ebp), %eax
	# 0x8058a51:	jae	0x8058aba [IMM <CODEREF>]
	jae	.label_1715
	# 0x8058a53:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058a59:	subl	-0x4d0(%ebp), %eax [MEM, REG]
	subl	-0x4d0(%ebp), %eax
	# 0x8058a5f:	movl	%eax, -0x4c4(%ebp) [REG, MEM]
	movl	%eax, -0x4c4(%ebp)
	# 0x8058a65:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058a6c:	jne	0x8058a95 [IMM <CODEREF>]
	jne	.label_1704
	# 0x8058a6e:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058a71:	pushl	-0x4c4(%ebp) [MEM]
	pushl	-0x4c4(%ebp)
	# 0x8058a77:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058a79:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058a7f:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058a84:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058a87:	movl	-0x4c4(%ebp), %eax [MEM, REG]
	movl	-0x4c4(%ebp), %eax
	# 0x8058a8d:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058a93:	jmp	0x8058aba [IMM <CODEREF>]
	jmp	.label_1715
	# 0x8058a95:	subl	$4, %esp [IMM, REG]
.label_1704:
	subl	$4, %esp
	# 0x8058a98:	pushl	-0x4c4(%ebp) [MEM]
	pushl	-0x4c4(%ebp)
	# 0x8058a9e:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8058aa0:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058aa6:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058aab:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058aae:	movl	-0x4c4(%ebp), %eax [MEM, REG]
	movl	-0x4c4(%ebp), %eax
	# 0x8058ab4:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058aba:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1715:
	movl	-0x590(%ebp), %eax
	# 0x8058ac0:	movzbl	-0x59d(%ebp), %edx [MEM, REG]
	movzbl	-0x59d(%ebp), %edx
	# 0x8058ac7:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8058ac9:	movl	-0x4d0(%ebp), %eax [MEM, REG]
	movl	-0x4d0(%ebp), %eax
	# 0x8058acf:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058ad5:	movl	-0x4c8(%ebp), %eax [MEM, REG]
.label_1727:
	movl	-0x4c8(%ebp), %eax
	# 0x8058adb:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058ae1:	jmp	0x8058d7b [IMM <CODEREF>]
	jmp	.label_1632
	# 0x8058ae6:	movl	0xc(%ebp), %eax [MEM, REG]
.label_1682:
	movl	0xc(%ebp), %eax
	# 0x8058ae9:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058aef:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058af1:	movl	-0x580(%ebp), %eax [MEM, REG]
	movl	-0x580(%ebp), %eax
	# 0x8058af7:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8058af9:	ja	0x8058b05 [IMM <CODEREF>]
	ja	.label_1739
	# 0x8058afb:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058b00:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058b05:	cmpb	$0, -0x59d(%ebp) [IMM, MEM]
.label_1739:
	cmpb	$0, -0x59d(%ebp)
	# 0x8058b0c:	je	0x8058c1b [IMM <CODEREF>]
	je	.label_1744
	# 0x8058b12:	movl	$1, -0x4c0(%ebp) [IMM, MEM]
	movl	$1, -0x4c0(%ebp)
	# 0x8058b1c:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058b21:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8058b28:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8058b2f:	movl	%eax, -0x4bc(%ebp) [REG, MEM]
	movl	%eax, -0x4bc(%ebp)
	# 0x8058b35:	movl	-0x4bc(%ebp), %eax [MEM, REG]
	movl	-0x4bc(%ebp), %eax
	# 0x8058b3b:	cmpl	%eax, -0x4c0(%ebp) [REG, MEM]
	cmpl	%eax, -0x4c0(%ebp)
	# 0x8058b41:	cmovael	-0x4c0(%ebp), %eax [MEM, REG]
	cmovael	-0x4c0(%ebp), %eax
	# 0x8058b48:	movl	%eax, -0x4b8(%ebp) [REG, MEM]
	movl	%eax, -0x4b8(%ebp)
	# 0x8058b4e:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8058b51:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058b57:	cmpl	-0x4b8(%ebp), %eax [MEM, REG]
	cmpl	-0x4b8(%ebp), %eax
	# 0x8058b5d:	ja	0x8058b69 [IMM <CODEREF>]
	ja	.label_1746
	# 0x8058b5f:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058b64:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058b69:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1746:
	cmpl	$0, -0x590(%ebp)
	# 0x8058b70:	je	0x8058c0f [IMM <CODEREF>]
	je	.label_1758
	# 0x8058b76:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058b7d:	jne	0x8058bf4 [IMM <CODEREF>]
	jne	.label_1759
	# 0x8058b7f:	movl	-0x4c0(%ebp), %eax [MEM, REG]
	movl	-0x4c0(%ebp), %eax
	# 0x8058b85:	cmpl	-0x4bc(%ebp), %eax [MEM, REG]
	cmpl	-0x4bc(%ebp), %eax
	# 0x8058b8b:	jae	0x8058bf4 [IMM <CODEREF>]
	jae	.label_1759
	# 0x8058b8d:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058b93:	subl	-0x4c0(%ebp), %eax [MEM, REG]
	subl	-0x4c0(%ebp), %eax
	# 0x8058b99:	movl	%eax, -0x4b4(%ebp) [REG, MEM]
	movl	%eax, -0x4b4(%ebp)
	# 0x8058b9f:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058ba6:	jne	0x8058bcf [IMM <CODEREF>]
	jne	sub_8058bcf
	.section	.text
	.align	32
	#Procedure 0x8058ba8
	.globl sub_8058ba8
	.type sub_8058ba8, @function
sub_8058ba8:

	# 0x8058ba8:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058bab:	pushl	-0x4b4(%ebp) [MEM]
	pushl	-0x4b4(%ebp)
	# 0x8058bb1:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058bb3:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058bb9:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058bbe:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058bc1:	movl	-0x4b4(%ebp), %eax [MEM, REG]
	movl	-0x4b4(%ebp), %eax
	# 0x8058bc7:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058bcd:	jmp	0x8058bf4 [IMM <CODEREF>]
	jmp	.label_1759
	.section	.text
	.align	32
	#Procedure 0x8058bcf

	# 0x8058bcf:	subl	$4, %esp [IMM, REG]
	.globl sub_8058bcf
	.type sub_8058bcf, @function
sub_8058bcf:
	subl	$4, %esp
	# 0x8058bd2:	pushl	-0x4b4(%ebp) [MEM]
	pushl	-0x4b4(%ebp)
	# 0x8058bd8:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8058bda:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058be0:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058be5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058be8:	movl	-0x4b4(%ebp), %eax [MEM, REG]
	movl	-0x4b4(%ebp), %eax
	# 0x8058bee:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058bf4:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1759:
	movl	-0x590(%ebp), %eax
	# 0x8058bfa:	movzbl	-0x59d(%ebp), %edx [MEM, REG]
	movzbl	-0x59d(%ebp), %edx
	# 0x8058c01:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8058c03:	movl	-0x4c0(%ebp), %eax [MEM, REG]
	movl	-0x4c0(%ebp), %eax
	# 0x8058c09:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058c0f:	movl	-0x4b8(%ebp), %eax [MEM, REG]
.label_1758:
	movl	-0x4b8(%ebp), %eax
	# 0x8058c15:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058c1b:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1744:
	cmpl	$0, -0x590(%ebp)
	# 0x8058c22:	je	0x8058c4a [IMM <CODEREF>]
	je	.label_1612
	# 0x8058c24:	movl	-0x4d4(%ebp), %eax [MEM, REG]
	movl	-0x4d4(%ebp), %eax
	# 0x8058c2a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058c2d:	pushl	%eax [REG]
	pushl	%eax
	# 0x8058c2e:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058c30:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058c36:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058c3b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058c3e:	movl	-0x4d4(%ebp), %eax [MEM, REG]
	movl	-0x4d4(%ebp), %eax
	# 0x8058c44:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058c4a:	movl	-0x4d4(%ebp), %eax [MEM, REG]
.label_1612:
	movl	-0x4d4(%ebp), %eax
	# 0x8058c50:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058c56:	movl	$0, -0x568(%ebp) [IMM, MEM]
	movl	$0, -0x568(%ebp)
	# 0x8058c60:	jmp	0x8058d7b [IMM <CODEREF>]
	jmp	.label_1632
	# 0x8058c65:	cmpb	$0, -0x59d(%ebp) [IMM, MEM]
.label_1662:
	cmpb	$0, -0x59d(%ebp)
	# 0x8058c6c:	je	0x8058d7b [IMM <CODEREF>]
	je	.label_1632
	# 0x8058c72:	movl	$1, -0x4b0(%ebp) [IMM, MEM]
	movl	$1, -0x4b0(%ebp)
	# 0x8058c7c:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058c81:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8058c88:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8058c8f:	movl	%eax, -0x4ac(%ebp) [REG, MEM]
	movl	%eax, -0x4ac(%ebp)
	# 0x8058c95:	movl	-0x4ac(%ebp), %eax [MEM, REG]
	movl	-0x4ac(%ebp), %eax
	# 0x8058c9b:	cmpl	%eax, -0x4b0(%ebp) [REG, MEM]
	cmpl	%eax, -0x4b0(%ebp)
	# 0x8058ca1:	cmovael	-0x4b0(%ebp), %eax [MEM, REG]
	cmovael	-0x4b0(%ebp), %eax
	# 0x8058ca8:	movl	%eax, -0x4a8(%ebp) [REG, MEM]
	movl	%eax, -0x4a8(%ebp)
	# 0x8058cae:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8058cb1:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058cb7:	cmpl	-0x4a8(%ebp), %eax [MEM, REG]
	cmpl	-0x4a8(%ebp), %eax
	# 0x8058cbd:	ja	0x8058cc9 [IMM <CODEREF>]
	ja	.label_1635
	# 0x8058cbf:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058cc4:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058cc9:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1635:
	cmpl	$0, -0x590(%ebp)
	# 0x8058cd0:	je	0x8058d6f [IMM <CODEREF>]
	je	.label_1651
	# 0x8058cd6:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058cdd:	jne	0x8058d54 [IMM <CODEREF>]
	jne	.label_1654
	# 0x8058cdf:	movl	-0x4b0(%ebp), %eax [MEM, REG]
	movl	-0x4b0(%ebp), %eax
	# 0x8058ce5:	cmpl	-0x4ac(%ebp), %eax [MEM, REG]
	cmpl	-0x4ac(%ebp), %eax
	# 0x8058ceb:	jae	0x8058d54 [IMM <CODEREF>]
	jae	.label_1654
	# 0x8058ced:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058cf3:	subl	-0x4b0(%ebp), %eax [MEM, REG]
	subl	-0x4b0(%ebp), %eax
	# 0x8058cf9:	movl	%eax, -0x4a4(%ebp) [REG, MEM]
	movl	%eax, -0x4a4(%ebp)
	# 0x8058cff:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058d06:	jne	0x8058d2f [IMM <CODEREF>]
	jne	sub_8058d2f
	.section	.text
	.align	32
	#Procedure 0x8058d08
	.globl sub_8058d08
	.type sub_8058d08, @function
sub_8058d08:

	# 0x8058d08:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058d0b:	pushl	-0x4a4(%ebp) [MEM]
	pushl	-0x4a4(%ebp)
	# 0x8058d11:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058d13:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058d19:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058d1e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058d21:	movl	-0x4a4(%ebp), %eax [MEM, REG]
	movl	-0x4a4(%ebp), %eax
	# 0x8058d27:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058d2d:	jmp	0x8058d54 [IMM <CODEREF>]
	jmp	.label_1654
	.section	.text
	.align	32
	#Procedure 0x8058d2f

	# 0x8058d2f:	subl	$4, %esp [IMM, REG]
	.globl sub_8058d2f
	.type sub_8058d2f, @function
sub_8058d2f:
	subl	$4, %esp
	# 0x8058d32:	pushl	-0x4a4(%ebp) [MEM]
	pushl	-0x4a4(%ebp)
	# 0x8058d38:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8058d3a:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058d40:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058d45:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058d48:	movl	-0x4a4(%ebp), %eax [MEM, REG]
	movl	-0x4a4(%ebp), %eax
	# 0x8058d4e:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058d54:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1654:
	movl	-0x590(%ebp), %eax
	# 0x8058d5a:	movzbl	-0x59d(%ebp), %edx [MEM, REG]
	movzbl	-0x59d(%ebp), %edx
	# 0x8058d61:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x8058d63:	movl	-0x4b0(%ebp), %eax [MEM, REG]
	movl	-0x4b0(%ebp), %eax
	# 0x8058d69:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058d6f:	movl	-0x4a8(%ebp), %eax [MEM, REG]
.label_1651:
	movl	-0x4a8(%ebp), %eax
	# 0x8058d75:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058d7b:	leal	-0x40c(%ebp), %eax [MEM, REG]
.label_1632:
	leal	-0x40c(%ebp), %eax
	# 0x8058d81:	addl	$0xe, %eax [IMM, REG]
	addl	$0xe, %eax
	# 0x8058d84:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8058d86:	movl	-0x56c(%ebp), %eax [MEM, REG]
	movl	-0x56c(%ebp), %eax
	# 0x8058d8c:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8058d8e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8058d90:	movl	%eax, -0x4a0(%ebp) [REG, MEM]
	movl	%eax, -0x4a0(%ebp)
	# 0x8058d96:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058d9b:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8058da2:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8058da9:	movl	%eax, -0x49c(%ebp) [REG, MEM]
	movl	%eax, -0x49c(%ebp)
	# 0x8058daf:	movl	-0x49c(%ebp), %eax [MEM, REG]
	movl	-0x49c(%ebp), %eax
	# 0x8058db5:	cmpl	%eax, -0x4a0(%ebp) [REG, MEM]
	cmpl	%eax, -0x4a0(%ebp)
	# 0x8058dbb:	cmovael	-0x4a0(%ebp), %eax [MEM, REG]
	cmovael	-0x4a0(%ebp), %eax
	# 0x8058dc2:	movl	%eax, -0x498(%ebp) [REG, MEM]
	movl	%eax, -0x498(%ebp)
	# 0x8058dc8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8058dcb:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8058dd1:	cmpl	-0x498(%ebp), %eax [MEM, REG]
	cmpl	-0x498(%ebp), %eax
	# 0x8058dd7:	ja	0x8058de3 [IMM <CODEREF>]
	ja	.label_1683
	# 0x8058dd9:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8058dde:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8058de3:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1683:
	cmpl	$0, -0x590(%ebp)
	# 0x8058dea:	je	0x8058ee7 [IMM <CODEREF>]
	je	.label_1697
	# 0x8058df0:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8058df7:	jne	0x8058e6e [IMM <CODEREF>]
	jne	.label_1698
	# 0x8058df9:	movl	-0x4a0(%ebp), %eax [MEM, REG]
	movl	-0x4a0(%ebp), %eax
	# 0x8058dff:	cmpl	-0x49c(%ebp), %eax [MEM, REG]
	cmpl	-0x49c(%ebp), %eax
	# 0x8058e05:	jae	0x8058e6e [IMM <CODEREF>]
	jae	.label_1698
	# 0x8058e07:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8058e0d:	subl	-0x4a0(%ebp), %eax [MEM, REG]
	subl	-0x4a0(%ebp), %eax
	# 0x8058e13:	movl	%eax, -0x494(%ebp) [REG, MEM]
	movl	%eax, -0x494(%ebp)
	# 0x8058e19:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8058e20:	jne	0x8058e49 [IMM <CODEREF>]
	jne	.label_1703
	# 0x8058e22:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058e25:	pushl	-0x494(%ebp) [MEM]
	pushl	-0x494(%ebp)
	# 0x8058e2b:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8058e2d:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058e33:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058e38:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058e3b:	movl	-0x494(%ebp), %eax [MEM, REG]
	movl	-0x494(%ebp), %eax
	# 0x8058e41:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058e47:	jmp	0x8058e6e [IMM <CODEREF>]
	jmp	.label_1698
	# 0x8058e49:	subl	$4, %esp [IMM, REG]
.label_1703:
	subl	$4, %esp
	# 0x8058e4c:	pushl	-0x494(%ebp) [MEM]
	pushl	-0x494(%ebp)
	# 0x8058e52:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8058e54:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058e5a:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8058e5f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058e62:	movl	-0x494(%ebp), %eax [MEM, REG]
	movl	-0x494(%ebp), %eax
	# 0x8058e68:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058e6e:	cmpb	$0, -0x5a0(%ebp) [IMM, MEM]
.label_1698:
	cmpb	$0, -0x5a0(%ebp)
	# 0x8058e75:	je	0x8058e96 [IMM <CODEREF>]
	je	.label_1719
	# 0x8058e77:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058e7a:	pushl	-0x4a0(%ebp) [MEM]
	pushl	-0x4a0(%ebp)
	# 0x8058e80:	pushl	-0x56c(%ebp) [MEM]
	pushl	-0x56c(%ebp)
	# 0x8058e86:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058e8c:	calll	0x8057af3 [IMM <CODEREF>]
	calll	memcpy_lowcase
	# 0x8058e91:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058e94:	jmp	0x8058edb [IMM <CODEREF>]
	jmp	.label_1629
	# 0x8058e96:	cmpb	$0, -0x59f(%ebp) [IMM, MEM]
.label_1719:
	cmpb	$0, -0x59f(%ebp)
	# 0x8058e9d:	je	0x8058ebe [IMM <CODEREF>]
	je	.label_1725
	# 0x8058e9f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8058ea2:	pushl	-0x4a0(%ebp) [MEM]
	pushl	-0x4a0(%ebp)
	# 0x8058ea8:	pushl	-0x56c(%ebp) [MEM]
	pushl	-0x56c(%ebp)
	# 0x8058eae:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058eb4:	calll	0x8057b36 [IMM <CODEREF>]
	calll	memcpy_uppcase
	# 0x8058eb9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058ebc:	jmp	0x8058edb [IMM <CODEREF>]
	jmp	.label_1629
	# 0x8058ebe:	subl	$4, %esp [IMM, REG]
.label_1725:
	subl	$4, %esp
	# 0x8058ec1:	pushl	-0x4a0(%ebp) [MEM]
	pushl	-0x4a0(%ebp)
	# 0x8058ec7:	pushl	-0x56c(%ebp) [MEM]
	pushl	-0x56c(%ebp)
	# 0x8058ecd:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8058ed3:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8058ed8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8058edb:	movl	-0x4a0(%ebp), %eax [MEM, REG]
.label_1629:
	movl	-0x4a0(%ebp), %eax
	# 0x8058ee1:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8058ee7:	movl	-0x498(%ebp), %eax [MEM, REG]
.label_1697:
	movl	-0x498(%ebp), %eax
	# 0x8058eed:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8058ef3:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x8058ef8:	cmpl	$0, -0x584(%ebp) [IMM, MEM]
.label_2446:
	cmpl	$0, -0x584(%ebp)
	# 0x8058eff:	jne	0x8059e71 [IMM <CODEREF>]
	jne	.label_1741
	# 0x8058f05:	movl	$0x806356a, -0x570(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1649, -1392(%ebp)
	# 0x8058f0f:	jmp	0x80581a0 [IMM <CODEREF>]
	jmp	.label_1650
	# 0x8058f14:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2448:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058f1b:	je	0x8059e74 [IMM <CODEREF>]
	je	.label_1721
	# 0x8058f21:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8058f2b:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058f31:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8058f34:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8058f3a:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8058f3f:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2449:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058f46:	je	0x8059e77 [IMM <CODEREF>]
	je	.label_1752
	# 0x8058f4c:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8058f56:	movl	-0x59c(%ebp), %eax [MEM, REG]
	movl	-0x59c(%ebp), %eax
	# 0x8058f5c:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8058f62:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8058f67:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2467:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058f6e:	je	0x8059e7a [IMM <CODEREF>]
	je	.label_1756
	# 0x8058f74:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8058f7e:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058f84:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x8058f87:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8058f8d:	jmp	0x8058688 [IMM <CODEREF>]
	jmp	.label_1718
	# 0x8058f92:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2468:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058f99:	je	0x8059e7d [IMM <CODEREF>]
	je	.label_1761
	# 0x8058f9f:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8058fa9:	movl	-0x59c(%ebp), %eax [MEM, REG]
	movl	-0x59c(%ebp), %eax
	# 0x8058faf:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8058fb5:	jmp	0x8058688 [IMM <CODEREF>]
	jmp	.label_1718
	# 0x8058fba:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2466:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8058fc1:	je	0x8059e80 [IMM <CODEREF>]
	je	.label_1767
	# 0x8058fc7:	movl	$3, -0x580(%ebp) [IMM, MEM]
	movl	$3, -0x580(%ebp)
	# 0x8058fd1:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058fd7:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x8058fda:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x8058fdd:	setl	%al [REG]
	setl	%al
	# 0x8058fe0:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x8058fe6:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8058fec:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x8058fef:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8058ff2:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8058ff8:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x8058ffd:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2450:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8059004:	je	0x8059e83 [IMM <CODEREF>]
	je	.label_1778
	# 0x805900a:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8059014:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805901a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805901d:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059023:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8059028:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2469:
	cmpl	$0x45, -0x584(%ebp)
	# 0x805902f:	je	0x8059e86 [IMM <CODEREF>]
	je	.label_1617
	# 0x8059035:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x805903f:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059045:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x8059048:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x805904b:	setl	%al [REG]
	setl	%al
	# 0x805904e:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x8059054:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805905a:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x805905d:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8059060:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059066:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x805906b:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2451:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8059072:	je	0x8059e89 [IMM <CODEREF>]
	je	.label_1634
	# 0x8059078:	movl	0x24(%ebp), %eax [MEM, REG]
	movl	0x24(%ebp), %eax
	# 0x805907b:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059081:	cmpl	$-1, -0x568(%ebp) [IMM, MEM]
	cmpl	$-1, -0x568(%ebp)
	# 0x8059088:	jne	0x8059096 [IMM <CODEREF>]
	jne	.label_1637
	# 0x805908a:	movl	$9, -0x568(%ebp) [IMM, MEM]
	movl	$9, -0x568(%ebp)
	# 0x8059094:	jmp	0x80590d5 [IMM <CODEREF>]
	jmp	.label_1641
	# 0x8059096:	movl	-0x568(%ebp), %eax [MEM, REG]
.label_1637:
	movl	-0x568(%ebp), %eax
	# 0x805909c:	movl	%eax, -0x558(%ebp) [REG, MEM]
	movl	%eax, -0x558(%ebp)
	# 0x80590a2:	jmp	0x80590cc [IMM <CODEREF>]
	jmp	.label_1644
	# 0x80590a4:	movl	-0x57c(%ebp), %ecx [MEM, REG]
.label_1636:
	movl	-0x57c(%ebp), %ecx
	# 0x80590aa:	movl	$0x66666667, %edx [IMM, REG]
	movl	$0x66666667, %edx
	# 0x80590af:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80590b1:	imull	%edx [REG]
	imull	%edx
	# 0x80590b3:	sarl	$2, %edx [IMM, REG]
	sarl	$2, %edx
	# 0x80590b6:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80590b8:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80590bb:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80590bd:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80590bf:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x80590c5:	addl	$1, -0x558(%ebp) [IMM, MEM]
	addl	$1, -0x558(%ebp)
	# 0x80590cc:	cmpl	$8, -0x558(%ebp) [IMM, MEM]
.label_1644:
	cmpl	$8, -0x558(%ebp)
	# 0x80590d3:	jle	0x80590a4 [IMM <CODEREF>]
	jle	.label_1636
	# 0x80590d5:	movl	-0x568(%ebp), %eax [MEM, REG]
.label_1641:
	movl	-0x568(%ebp), %eax
	# 0x80590db:	movl	%eax, -0x580(%ebp) [REG, MEM]
	movl	%eax, -0x580(%ebp)
	# 0x80590e1:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x80590e6:	movl	$1, -0x490(%ebp) [IMM, MEM]
.label_2470:
	movl	$1, -0x490(%ebp)
	# 0x80590f0:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x80590f5:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x80590fc:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8059103:	movl	%eax, -0x48c(%ebp) [REG, MEM]
	movl	%eax, -0x48c(%ebp)
	# 0x8059109:	movl	-0x48c(%ebp), %eax [MEM, REG]
	movl	-0x48c(%ebp), %eax
	# 0x805910f:	cmpl	%eax, -0x490(%ebp) [REG, MEM]
	cmpl	%eax, -0x490(%ebp)
	# 0x8059115:	cmovael	-0x490(%ebp), %eax [MEM, REG]
	cmovael	-0x490(%ebp), %eax
	# 0x805911c:	movl	%eax, -0x488(%ebp) [REG, MEM]
	movl	%eax, -0x488(%ebp)
	# 0x8059122:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8059125:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x805912b:	cmpl	-0x488(%ebp), %eax [MEM, REG]
	cmpl	-0x488(%ebp), %eax
	# 0x8059131:	ja	0x805913d [IMM <CODEREF>]
	ja	.label_1657
	# 0x8059133:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059138:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x805913d:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1657:
	cmpl	$0, -0x590(%ebp)
	# 0x8059144:	je	0x80591dd [IMM <CODEREF>]
	je	.label_1668
	# 0x805914a:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8059151:	jne	0x80591c8 [IMM <CODEREF>]
	jne	.label_1672
	# 0x8059153:	movl	-0x490(%ebp), %eax [MEM, REG]
	movl	-0x490(%ebp), %eax
	# 0x8059159:	cmpl	-0x48c(%ebp), %eax [MEM, REG]
	cmpl	-0x48c(%ebp), %eax
	# 0x805915f:	jae	0x80591c8 [IMM <CODEREF>]
	jae	.label_1672
	# 0x8059161:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8059167:	subl	-0x490(%ebp), %eax [MEM, REG]
	subl	-0x490(%ebp), %eax
	# 0x805916d:	movl	%eax, -0x484(%ebp) [REG, MEM]
	movl	%eax, -0x484(%ebp)
	# 0x8059173:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x805917a:	jne	0x80591a3 [IMM <CODEREF>]
	jne	sub_80591a3
	.section	.text
	.align	32
	#Procedure 0x805917c
	.globl sub_805917c
	.type sub_805917c, @function
sub_805917c:

	# 0x805917c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805917f:	pushl	-0x484(%ebp) [MEM]
	pushl	-0x484(%ebp)
	# 0x8059185:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8059187:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805918d:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8059192:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059195:	movl	-0x484(%ebp), %eax [MEM, REG]
	movl	-0x484(%ebp), %eax
	# 0x805919b:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80591a1:	jmp	0x80591c8 [IMM <CODEREF>]
	jmp	.label_1672
	.section	.text
	.align	32
	#Procedure 0x80591a3

	# 0x80591a3:	subl	$4, %esp [IMM, REG]
	.globl sub_80591a3
	.type sub_80591a3, @function
sub_80591a3:
	subl	$4, %esp
	# 0x80591a6:	pushl	-0x484(%ebp) [MEM]
	pushl	-0x484(%ebp)
	# 0x80591ac:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x80591ae:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80591b4:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80591b9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80591bc:	movl	-0x484(%ebp), %eax [MEM, REG]
	movl	-0x484(%ebp), %eax
	# 0x80591c2:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80591c8:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1672:
	movl	-0x590(%ebp), %eax
	# 0x80591ce:	movb	$0xa, 0(%eax) [IMM, MEM]
	movb	$0xa, 0(%eax)
	# 0x80591d1:	movl	-0x490(%ebp), %eax [MEM, REG]
	movl	-0x490(%ebp), %eax
	# 0x80591d7:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80591dd:	movl	-0x488(%ebp), %eax [MEM, REG]
.label_1668:
	movl	-0x488(%ebp), %eax
	# 0x80591e3:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x80591e9:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x80591ee:	movb	$1, -0x5a0(%ebp) [IMM, MEM]
.label_2452:
	movb	$1, -0x5a0(%ebp)
	# 0x80591f5:	movl	$0x70, -0x560(%ebp) [IMM, MEM]
	movl	$0x70, -0x560(%ebp)
	# 0x80591ff:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
.label_2471:
	cmpb	$0, -0x59e(%ebp)
	# 0x8059206:	je	0x805832c [IMM <CODEREF>]
	je	.label_1701
	# 0x805920c:	movb	$0, -0x59f(%ebp) [IMM, MEM]
	movb	$0, -0x59f(%ebp)
	# 0x8059213:	movb	$1, -0x5a0(%ebp) [IMM, MEM]
	movb	$1, -0x5a0(%ebp)
	# 0x805921a:	jmp	0x805832c [IMM <CODEREF>]
	jmp	.label_1701
	# 0x805921f:	movl	$1, -0x580(%ebp) [IMM, MEM]
.label_2472:
	movl	$1, -0x580(%ebp)
	# 0x8059229:	movb	$0, -0x5a2(%ebp) [IMM, MEM]
	movb	$0, -0x5a2(%ebp)
	# 0x8059230:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059236:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x8059239:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805923b:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805923e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059240:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8059242:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059244:	sarl	$5, %eax [IMM, REG]
	sarl	$5, %eax
	# 0x8059247:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805924a:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059250:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x8059255:	movl	$0x8063573, -0x570(%ebp) [IMM <DATAREF>, MEM]
.label_2453:
	movl	$label_1716, -1392(%ebp)
	# 0x805925f:	jmp	0x80581a0 [IMM <CODEREF>]
	jmp	.label_1650
	# 0x8059264:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2454:
	cmpl	$0x45, -0x584(%ebp)
	# 0x805926b:	je	0x8059e8c [IMM <CODEREF>]
	je	.label_1742
	# 0x8059271:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x805927b:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059281:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x8059283:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059289:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x805928e:	movl	-0x5b4(%ebp), %eax [MEM, REG]
.label_2474:
	movl	-0x5b4(%ebp), %eax
	# 0x8059294:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x8059296:	movl	%edx, -0x440(%ebp) [REG, MEM]
	movl	%edx, -0x440(%ebp)
	# 0x805929c:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805929f:	movl	%edx, -0x43c(%ebp) [REG, MEM]
	movl	%edx, -0x43c(%ebp)
	# 0x80592a5:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x80592a8:	movl	%edx, -0x438(%ebp) [REG, MEM]
	movl	%edx, -0x438(%ebp)
	# 0x80592ae:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x80592b1:	movl	%edx, -0x434(%ebp) [REG, MEM]
	movl	%edx, -0x434(%ebp)
	# 0x80592b7:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x80592ba:	movl	%edx, -0x430(%ebp) [REG, MEM]
	movl	%edx, -0x430(%ebp)
	# 0x80592c0:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x80592c3:	movl	%edx, -0x42c(%ebp) [REG, MEM]
	movl	%edx, -0x42c(%ebp)
	# 0x80592c9:	movl	0x18(%eax), %edx [MEM, REG]
	movl	0x18(%eax), %edx
	# 0x80592cc:	movl	%edx, -0x428(%ebp) [REG, MEM]
	movl	%edx, -0x428(%ebp)
	# 0x80592d2:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x80592d5:	movl	%edx, -0x424(%ebp) [REG, MEM]
	movl	%edx, -0x424(%ebp)
	# 0x80592db:	movl	0x20(%eax), %edx [MEM, REG]
	movl	0x20(%eax), %edx
	# 0x80592de:	movl	%edx, -0x420(%ebp) [REG, MEM]
	movl	%edx, -0x420(%ebp)
	# 0x80592e4:	movl	0x24(%eax), %edx [MEM, REG]
	movl	0x24(%eax), %edx
	# 0x80592e7:	movl	%edx, -0x41c(%ebp) [REG, MEM]
	movl	%edx, -0x41c(%ebp)
	# 0x80592ed:	movl	0x28(%eax), %eax [MEM, REG]
	movl	0x28(%eax), %eax
	# 0x80592f0:	movl	%eax, -0x418(%ebp) [REG, MEM]
	movl	%eax, -0x418(%ebp)
	.section	.text
	.align	32
	#Procedure 0x80592f6
	.globl sub_80592f6
	.type sub_80592f6, @function
sub_80592f6:

	# 0x80592f6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80592f9:	leal	-0x440(%ebp), %eax [MEM, REG]
	leal	-0x440(%ebp), %eax
	# 0x80592ff:	pushl	%eax [REG]
	pushl	%eax
	# 0x8059300:	pushl	-0x5c0(%ebp) [MEM]
	pushl	-0x5c0(%ebp)
	# 0x8059306:	calll	0x805def6 [IMM <CODEREF>]
	calll	mktime_z
	# 0x805930b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805930e:	movl	%eax, -0x554(%ebp) [REG, MEM]
	movl	%eax, -0x554(%ebp)
	# 0x8059314:	leal	-0x40c(%ebp), %eax [MEM, REG]
	leal	-0x40c(%ebp), %eax
	# 0x805931a:	addl	$0xe, %eax [IMM, REG]
	addl	$0xe, %eax
	# 0x805931d:	movl	%eax, -0x56c(%ebp) [REG, MEM]
	movl	%eax, -0x56c(%ebp)
	# 0x8059323:	movl	-0x554(%ebp), %eax [MEM, REG]
	movl	-0x554(%ebp), %eax
	# 0x8059329:	shrl	$0x1f, %eax [IMM, REG]
	shrl	$0x1f, %eax
	# 0x805932c:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x8059332:	movl	-0x554(%ebp), %ecx [MEM, REG]
.label_1781:
	movl	-0x554(%ebp), %ecx
	# 0x8059338:	movl	$0x66666667, %edx [IMM, REG]
	movl	$0x66666667, %edx
	# 0x805933d:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805933f:	imull	%edx [REG]
	imull	%edx
	# 0x8059341:	sarl	$2, %edx [IMM, REG]
	sarl	$2, %edx
	# 0x8059344:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059346:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059349:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805934b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805934d:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x8059350:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059352:	addl	%eax, %eax [REG, REG]
	addl	%eax, %eax
	# 0x8059354:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059356:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059358:	movl	%eax, -0x4e8(%ebp) [REG, MEM]
	movl	%eax, -0x4e8(%ebp)
	# 0x805935e:	movl	-0x554(%ebp), %ecx [MEM, REG]
	movl	-0x554(%ebp), %ecx
	# 0x8059364:	movl	$0x66666667, %edx [IMM, REG]
	movl	$0x66666667, %edx
	# 0x8059369:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805936b:	imull	%edx [REG]
	imull	%edx
	# 0x805936d:	sarl	$2, %edx [IMM, REG]
	sarl	$2, %edx
	# 0x8059370:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059372:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059375:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059377:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059379:	movl	%eax, -0x554(%ebp) [REG, MEM]
	movl	%eax, -0x554(%ebp)
	# 0x805937f:	subl	$1, -0x56c(%ebp) [IMM, MEM]
	subl	$1, -0x56c(%ebp)
	# 0x8059386:	cmpb	$0, -0x5a2(%ebp) [IMM, MEM]
	cmpb	$0, -0x5a2(%ebp)
	# 0x805938d:	je	0x80593a2 [IMM <CODEREF>]
	je	.label_1780
	# 0x805938f:	movl	-0x4e8(%ebp), %eax [MEM, REG]
	movl	-0x4e8(%ebp), %eax
	# 0x8059395:	movl	$0x30, %edx [IMM, REG]
	movl	$0x30, %edx
	# 0x805939a:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805939c:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805939e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80593a0:	jmp	0x80593ad [IMM <CODEREF>]
	jmp	.label_1782
	# 0x80593a2:	movl	-0x4e8(%ebp), %eax [MEM, REG]
.label_1780:
	movl	-0x4e8(%ebp), %eax
	# 0x80593a8:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x80593ab:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80593ad:	movl	-0x56c(%ebp), %eax [MEM, REG]
.label_1782:
	movl	-0x56c(%ebp), %eax
	# 0x80593b3:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x80593b5:	cmpl	$0, -0x554(%ebp) [IMM, MEM]
	cmpl	$0, -0x554(%ebp)
	# 0x80593bc:	jne	0x8059332 [IMM <CODEREF>]
	jne	.label_1781
	# 0x80593c2:	movl	$1, -0x580(%ebp) [IMM, MEM]
	movl	$1, -0x580(%ebp)
	# 0x80593cc:	movb	$0, -0x5a1(%ebp) [IMM, MEM]
	movb	$0, -0x5a1(%ebp)
	# 0x80593d3:	nop	 []
	nop	
	# 0x80593d4:	jmp	0x805878f [IMM <CODEREF>]
	jmp	.label_1779
	# 0x80593d9:	cmpl	$0x4f, -0x584(%ebp) [IMM, MEM]
.label_2458:
	cmpl	$0x4f, -0x584(%ebp)
	# 0x80593e0:	jne	0x805832f [IMM <CODEREF>]
	jne	.label_1611
	# 0x80593e6:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x80593eb:	movl	$0x8063579, -0x570(%ebp) [IMM <DATAREF>, MEM]
.label_2455:
	movl	$label_1775, -1392(%ebp)
	# 0x80593f5:	jmp	0x80581a0 [IMM <CODEREF>]
	jmp	.label_1650
	# 0x80593fa:	movl	$1, -0x480(%ebp) [IMM, MEM]
.label_2475:
	movl	$1, -0x480(%ebp)
	# 0x8059404:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059409:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8059410:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8059417:	movl	%eax, -0x47c(%ebp) [REG, MEM]
	movl	%eax, -0x47c(%ebp)
	# 0x805941d:	movl	-0x47c(%ebp), %eax [MEM, REG]
	movl	-0x47c(%ebp), %eax
	# 0x8059423:	cmpl	%eax, -0x480(%ebp) [REG, MEM]
	cmpl	%eax, -0x480(%ebp)
	# 0x8059429:	cmovael	-0x480(%ebp), %eax [MEM, REG]
	cmovael	-0x480(%ebp), %eax
	# 0x8059430:	movl	%eax, -0x478(%ebp) [REG, MEM]
	movl	%eax, -0x478(%ebp)
	# 0x8059436:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8059439:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x805943f:	cmpl	-0x478(%ebp), %eax [MEM, REG]
	cmpl	-0x478(%ebp), %eax
	# 0x8059445:	ja	0x8059451 [IMM <CODEREF>]
	ja	.label_1777
	# 0x8059447:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805944c:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8059451:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1777:
	cmpl	$0, -0x590(%ebp)
	# 0x8059458:	je	0x80594f1 [IMM <CODEREF>]
	je	.label_1627
	# 0x805945e:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8059465:	jne	0x80594dc [IMM <CODEREF>]
	jne	.label_1630
	# 0x8059467:	movl	-0x480(%ebp), %eax [MEM, REG]
	movl	-0x480(%ebp), %eax
	# 0x805946d:	cmpl	-0x47c(%ebp), %eax [MEM, REG]
	cmpl	-0x47c(%ebp), %eax
	# 0x8059473:	jae	0x80594dc [IMM <CODEREF>]
	jae	.label_1630
	# 0x8059475:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x805947b:	subl	-0x480(%ebp), %eax [MEM, REG]
	subl	-0x480(%ebp), %eax
	# 0x8059481:	movl	%eax, -0x474(%ebp) [REG, MEM]
	movl	%eax, -0x474(%ebp)
	# 0x8059487:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x805948e:	jne	0x80594b7 [IMM <CODEREF>]
	jne	sub_80594b7
	.section	.text
	.align	32
	#Procedure 0x8059490
	.globl sub_8059490
	.type sub_8059490, @function
sub_8059490:

	# 0x8059490:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059493:	pushl	-0x474(%ebp) [MEM]
	pushl	-0x474(%ebp)
	# 0x8059499:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805949b:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80594a1:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80594a6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80594a9:	movl	-0x474(%ebp), %eax [MEM, REG]
	movl	-0x474(%ebp), %eax
	# 0x80594af:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80594b5:	jmp	0x80594dc [IMM <CODEREF>]
	jmp	.label_1630
	.section	.text
	.align	32
	#Procedure 0x80594b7

	# 0x80594b7:	subl	$4, %esp [IMM, REG]
	.globl sub_80594b7
	.type sub_80594b7, @function
sub_80594b7:
	subl	$4, %esp
	# 0x80594ba:	pushl	-0x474(%ebp) [MEM]
	pushl	-0x474(%ebp)
	# 0x80594c0:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x80594c2:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x80594c8:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x80594cd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80594d0:	movl	-0x474(%ebp), %eax [MEM, REG]
	movl	-0x474(%ebp), %eax
	# 0x80594d6:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80594dc:	movl	-0x590(%ebp), %eax [MEM, REG]
.label_1630:
	movl	-0x590(%ebp), %eax
	# 0x80594e2:	movb	$9, 0(%eax) [IMM, MEM]
	movb	$9, 0(%eax)
	# 0x80594e5:	movl	-0x480(%ebp), %eax [MEM, REG]
	movl	-0x480(%ebp), %eax
	# 0x80594eb:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x80594f1:	movl	-0x478(%ebp), %eax [MEM, REG]
.label_1627:
	movl	-0x478(%ebp), %eax
	# 0x80594f7:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x80594fd:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x8059502:	movl	$1, -0x580(%ebp) [IMM, MEM]
.label_2476:
	movl	$1, -0x580(%ebp)
	# 0x805950c:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059512:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x8059515:	leal	6(%eax), %ecx [MEM, REG]
	leal	6(%eax), %ecx
	# 0x8059518:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x805951d:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805951f:	imull	%edx [REG]
	imull	%edx
	# 0x8059521:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059524:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x8059527:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059529:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805952b:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x805952e:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059530:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059532:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059534:	shll	$3, %edx [IMM, REG]
	shll	$3, %edx
	# 0x8059537:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059539:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805953b:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x805953d:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x8059540:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059546:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x805954b:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2456:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8059552:	je	0x8059e8f [IMM <CODEREF>]
	je	.label_1673
	# 0x8059558:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x8059562:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059568:	movl	0x1c(%eax), %edx [MEM, REG]
	movl	0x1c(%eax), %edx
	# 0x805956b:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059571:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x8059574:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059576:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059578:	leal	7(%eax), %ecx [MEM, REG]
	leal	7(%eax), %ecx
	# 0x805957b:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x8059580:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059582:	imull	%edx [REG]
	imull	%edx
	# 0x8059584:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059587:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x805958a:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805958c:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805958e:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059591:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059593:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059595:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x805959b:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x80595a0:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2447:
	cmpl	$0x45, -0x584(%ebp)
	# 0x80595a7:	je	0x8059e92 [IMM <CODEREF>]
	je	.label_1693
	# 0x80595ad:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80595b3:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x80595b6:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80595bc:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80595bf:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80595c1:	jns	0x80595ca [IMM <CODEREF>]
	jns	.label_1688
	# 0x80595c3:	movl	$0x12c, %eax [IMM, REG]
	movl	$0x12c, %eax
	# 0x80595c8:	jmp	0x80595cf [IMM <CODEREF>]
	jmp	.label_1694
	# 0x80595ca:	movl	$0xffffff9c, %eax [IMM, REG]
.label_1688:
	movl	$0xffffff9c, %eax
	# 0x80595cf:	addl	%edx, %eax [REG, REG]
.label_1694:
	addl	%edx, %eax
	# 0x80595d1:	movl	%eax, -0x508(%ebp) [REG, MEM]
	movl	%eax, -0x508(%ebp)
	# 0x80595d7:	movl	$0, -0x550(%ebp) [IMM, MEM]
	movl	$0, -0x550(%ebp)
	# 0x80595e1:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80595e7:	movl	0x18(%eax), %edx [MEM, REG]
	movl	0x18(%eax), %edx
	# 0x80595ea:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80595f0:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	.section	.text
	.align	32
	#Procedure 0x80595f3
	.globl sub_80595f3
	.type sub_80595f3, @function
sub_80595f3:

	# 0x80595f3:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80595f6:	pushl	%edx [REG]
	pushl	%edx
	# 0x80595f7:	pushl	%eax [REG]
	pushl	%eax
	# 0x80595f8:	calll	0x8057b79 [IMM <CODEREF>]
	calll	iso_week_days
	# 0x80595fd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059600:	movl	%eax, -0x54c(%ebp) [REG, MEM]
	movl	%eax, -0x54c(%ebp)
	# 0x8059606:	cmpl	$0, -0x54c(%ebp) [IMM, MEM]
	cmpl	$0, -0x54c(%ebp)
	# 0x805960d:	jns	0x80596bf [IMM <CODEREF>]
	jns	.label_1795
	# 0x8059613:	movl	$0xffffffff, -0x550(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x550(%ebp)
	# 0x805961d:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059623:	movl	0x18(%eax), %ebx [MEM, REG]
	movl	0x18(%eax), %ebx
	# 0x8059626:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805962c:	movl	0x1c(%eax), %esi [MEM, REG]
	movl	0x1c(%eax), %esi
	# 0x805962f:	movl	-0x508(%ebp), %eax [MEM, REG]
	movl	-0x508(%ebp), %eax
	# 0x8059635:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x8059638:	andl	$3, %eax [IMM, REG]
	andl	$3, %eax
	# 0x805963b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805963d:	jne	0x805969b [IMM <CODEREF>]
	jne	.label_1788
	# 0x805963f:	movl	-0x508(%ebp), %eax [MEM, REG]
	movl	-0x508(%ebp), %eax
	# 0x8059645:	leal	-1(%eax), %ecx [MEM, REG]
	leal	-1(%eax), %ecx
	# 0x8059648:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x805964d:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805964f:	imull	%edx [REG]
	imull	%edx
	# 0x8059651:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x8059654:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059656:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059659:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805965b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805965d:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x8059660:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059662:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059664:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8059666:	jne	0x8059694 [IMM <CODEREF>]
	jne	.label_1790
	# 0x8059668:	movl	-0x508(%ebp), %eax [MEM, REG]
	movl	-0x508(%ebp), %eax
	# 0x805966e:	leal	-1(%eax), %ecx [MEM, REG]
	leal	-1(%eax), %ecx
	# 0x8059671:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x8059676:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059678:	imull	%edx [REG]
	imull	%edx
	# 0x805967a:	sarl	$7, %edx [IMM, REG]
	sarl	$7, %edx
	# 0x805967d:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805967f:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059682:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059684:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059686:	imull	$0x190, %eax, %eax [IMM, REG, REG]
	imull	$0x190, %eax, %eax
	# 0x805968c:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x805968e:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059690:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8059692:	jne	0x805969b [IMM <CODEREF>]
	jne	.label_1788
	# 0x8059694:	movl	$1, %eax [IMM, REG]
.label_1790:
	movl	$1, %eax
	# 0x8059699:	jmp	0x80596a0 [IMM <CODEREF>]
	jmp	.label_1789
	# 0x805969b:	movl	$0, %eax [IMM, REG]
.label_1788:
	movl	$0, %eax
	# 0x80596a0:	addl	$0x16d, %eax [IMM, REG]
.label_1789:
	addl	$0x16d, %eax
	# 0x80596a5:	addl	%esi, %eax [REG, REG]
	addl	%esi, %eax
	# 0x80596a7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x80596aa:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x80596ab:	pushl	%eax [REG]
	pushl	%eax
	# 0x80596ac:	calll	0x8057b79 [IMM <CODEREF>]
	calll	iso_week_days
	# 0x80596b1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x80596b4:	movl	%eax, -0x54c(%ebp) [REG, MEM]
	movl	%eax, -0x54c(%ebp)
	# 0x80596ba:	jmp	0x8059774 [IMM <CODEREF>]
	jmp	.label_1786
	# 0x80596bf:	movl	-0x5b4(%ebp), %eax [MEM, REG]
.label_1795:
	movl	-0x5b4(%ebp), %eax
	# 0x80596c5:	movl	0x18(%eax), %ebx [MEM, REG]
	movl	0x18(%eax), %ebx
	# 0x80596c8:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80596ce:	movl	0x1c(%eax), %esi [MEM, REG]
	movl	0x1c(%eax), %esi
	# 0x80596d1:	movl	-0x508(%ebp), %eax [MEM, REG]
	movl	-0x508(%ebp), %eax
	# 0x80596d7:	andl	$3, %eax [IMM, REG]
	andl	$3, %eax
	# 0x80596da:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x80596dc:	jne	0x8059734 [IMM <CODEREF>]
	jne	.label_1784
	# 0x80596de:	movl	-0x508(%ebp), %ecx [MEM, REG]
	movl	-0x508(%ebp), %ecx
	# 0x80596e4:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x80596e9:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80596eb:	imull	%edx [REG]
	imull	%edx
	# 0x80596ed:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x80596f0:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80596f2:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80596f5:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80596f7:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80596f9:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x80596fc:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x80596fe:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059700:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8059702:	jne	0x805972d [IMM <CODEREF>]
	jne	.label_1794
	# 0x8059704:	movl	-0x508(%ebp), %ecx [MEM, REG]
	movl	-0x508(%ebp), %ecx
	# 0x805970a:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x805970f:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059711:	imull	%edx [REG]
	imull	%edx
	# 0x8059713:	sarl	$7, %edx [IMM, REG]
	sarl	$7, %edx
	# 0x8059716:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059718:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x805971b:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805971d:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805971f:	imull	$0x190, %eax, %eax [IMM, REG, REG]
	imull	$0x190, %eax, %eax
	# 0x8059725:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059727:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059729:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805972b:	jne	0x8059734 [IMM <CODEREF>]
	jne	.label_1784
	# 0x805972d:	movl	$1, %eax [IMM, REG]
.label_1794:
	movl	$1, %eax
	# 0x8059732:	jmp	0x8059739 [IMM <CODEREF>]
	jmp	.label_1792
	# 0x8059734:	movl	$0, %eax [IMM, REG]
.label_1784:
	movl	$0, %eax
	# 0x8059739:	addl	$0x16d, %eax [IMM, REG]
.label_1792:
	addl	$0x16d, %eax
	# 0x805973e:	subl	%eax, %esi [REG, REG]
	subl	%eax, %esi
	# 0x8059740:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x8059742:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x8059745:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x8059746:	pushl	%eax [REG]
	pushl	%eax
	# 0x8059747:	calll	0x8057b79 [IMM <CODEREF>]
	calll	iso_week_days
	# 0x805974c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805974f:	movl	%eax, -0x504(%ebp) [REG, MEM]
	movl	%eax, -0x504(%ebp)
	# 0x8059755:	cmpl	$0, -0x504(%ebp) [IMM, MEM]
	cmpl	$0, -0x504(%ebp)
	# 0x805975c:	js	0x8059774 [IMM <CODEREF>]
	js	.label_1786
	# 0x805975e:	movl	$1, -0x550(%ebp) [IMM, MEM]
	movl	$1, -0x550(%ebp)
	# 0x8059768:	movl	-0x504(%ebp), %eax [MEM, REG]
	movl	-0x504(%ebp), %eax
	# 0x805976e:	movl	%eax, -0x54c(%ebp) [REG, MEM]
	movl	%eax, -0x54c(%ebp)
	# 0x8059774:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1786:
	movl	-0x58c(%ebp), %eax
	# 0x805977a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805977d:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x8059780:	cmpl	$0x47, %eax [IMM, REG]
	cmpl	$0x47, %eax
	# 0x8059783:	je	0x805983f [IMM <CODEREF>]
	je	.label_1793
	# 0x8059789:	cmpl	$0x67, %eax [IMM, REG]
	cmpl	$0x67, %eax
	# 0x805978c:	jne	0x805988b [IMM <CODEREF>]
	jne	.label_1785
	# 0x8059792:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059798:	movl	0x14(%eax), %ecx [MEM, REG]
	movl	0x14(%eax), %ecx
	# 0x805979b:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x80597a0:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597a2:	imull	%edx [REG]
	imull	%edx
	# 0x80597a4:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x80597a7:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597a9:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80597ac:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80597ae:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80597b0:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x80597b3:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x80597b5:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597b7:	movl	-0x550(%ebp), %edx [MEM, REG]
	movl	-0x550(%ebp), %edx
	# 0x80597bd:	leal	0(%eax, %edx), %ecx [MEM, REG]
	leal	0(%eax, %edx), %ecx
	# 0x80597c0:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x80597c5:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597c7:	imull	%edx [REG]
	imull	%edx
	# 0x80597c9:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x80597cc:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597ce:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80597d1:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80597d3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80597d5:	movl	%eax, -0x500(%ebp) [REG, MEM]
	movl	%eax, -0x500(%ebp)
	# 0x80597db:	movl	-0x500(%ebp), %eax [MEM, REG]
	movl	-0x500(%ebp), %eax
	# 0x80597e1:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x80597e4:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x80597e6:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80597e8:	movl	%eax, -0x500(%ebp) [REG, MEM]
	movl	%eax, -0x500(%ebp)
	# 0x80597ee:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x80597f8:	cmpl	$0, -0x500(%ebp) [IMM, MEM]
	cmpl	$0, -0x500(%ebp)
	# 0x80597ff:	jns	0x805982e [IMM <CODEREF>]
	jns	.label_1787
	# 0x8059801:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059807:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x805980a:	movl	$0xfffff894, %eax [IMM, REG]
	movl	$0xfffff894, %eax
	# 0x805980f:	subl	-0x550(%ebp), %eax [MEM, REG]
	subl	-0x550(%ebp), %eax
	# 0x8059815:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x8059817:	jge	0x8059823 [IMM <CODEREF>]
	jge	.label_1783
	# 0x8059819:	movl	-0x500(%ebp), %eax [MEM, REG]
	movl	-0x500(%ebp), %eax
	# 0x805981f:	negl	%eax [REG]
	negl	%eax
	# 0x8059821:	jmp	0x8059834 [IMM <CODEREF>]
	jmp	.label_1791
	# 0x8059823:	movl	-0x500(%ebp), %eax [MEM, REG]
.label_1783:
	movl	-0x500(%ebp), %eax
	# 0x8059829:	addl	$0x64, %eax [IMM, REG]
	addl	$0x64, %eax
	# 0x805982c:	jmp	0x8059834 [IMM <CODEREF>]
	jmp	.label_1791
	# 0x805982e:	movl	-0x500(%ebp), %eax [MEM, REG]
.label_1787:
	movl	-0x500(%ebp), %eax
	# 0x8059834:	movl	%eax, -0x57c(%ebp) [REG, MEM]
.label_1791:
	movl	%eax, -0x57c(%ebp)
	# 0x805983a:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x805983f:	movl	$4, -0x580(%ebp) [IMM, MEM]
.label_1793:
	movl	$4, -0x580(%ebp)
	# 0x8059849:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805984f:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x8059852:	movl	$0xfffff894, %eax [IMM, REG]
	movl	$0xfffff894, %eax
	# 0x8059857:	subl	-0x550(%ebp), %eax [MEM, REG]
	subl	-0x550(%ebp), %eax
	# 0x805985d:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805985f:	setl	%al [REG]
	setl	%al
	# 0x8059862:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x8059868:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805986e:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8059871:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059873:	movl	-0x550(%ebp), %eax [MEM, REG]
	movl	-0x550(%ebp), %eax
	# 0x8059879:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805987b:	addl	$0x76c, %eax [IMM, REG]
	addl	$0x76c, %eax
	# 0x8059880:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059886:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x805988b:	movl	$2, -0x580(%ebp) [IMM, MEM]
.label_1785:
	movl	$2, -0x580(%ebp)
	# 0x8059895:	movl	-0x54c(%ebp), %ecx [MEM, REG]
	movl	-0x54c(%ebp), %ecx
	# 0x805989b:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x80598a0:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80598a2:	imull	%edx [REG]
	imull	%edx
	# 0x80598a4:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x80598a7:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x80598aa:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x80598ac:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80598ae:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80598b1:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80598b3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80598b5:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x80598b8:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x80598be:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x80598c3:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2457:
	cmpl	$0x45, -0x584(%ebp)
	# 0x80598ca:	je	0x8059e95 [IMM <CODEREF>]
	je	.label_1643
	# 0x80598d0:	movl	$2, -0x580(%ebp) [IMM, MEM]
	movl	$2, -0x580(%ebp)
	# 0x80598da:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80598e0:	movl	0x1c(%eax), %ebx [MEM, REG]
	movl	0x1c(%eax), %ebx
	# 0x80598e3:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80598e9:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x80598ec:	leal	6(%eax), %ecx [MEM, REG]
	leal	6(%eax), %ecx
	# 0x80598ef:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x80598f4:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80598f6:	imull	%edx [REG]
	imull	%edx
	# 0x80598f8:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x80598fb:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x80598fe:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059900:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059902:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059905:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059907:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059909:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805990b:	shll	$3, %edx [IMM, REG]
	shll	$3, %edx
	# 0x805990e:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059910:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059912:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8059914:	subl	%eax, %ebx [REG, REG]
	subl	%eax, %ebx
	# 0x8059916:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x8059918:	leal	7(%eax), %ecx [MEM, REG]
	leal	7(%eax), %ecx
	# 0x805991b:	movl	$0x92492493, %edx [IMM, REG]
	movl	$0x92492493, %edx
	# 0x8059920:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059922:	imull	%edx [REG]
	imull	%edx
	# 0x8059924:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059927:	sarl	$2, %eax [IMM, REG]
	sarl	$2, %eax
	# 0x805992a:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805992c:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805992e:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059931:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059933:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059935:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x805993b:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8059940:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2477:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8059947:	je	0x8059e98 [IMM <CODEREF>]
	je	.label_1669
	# 0x805994d:	movl	$1, -0x580(%ebp) [IMM, MEM]
	movl	$1, -0x580(%ebp)
	# 0x8059957:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x805995d:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x8059960:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059966:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x805996b:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2459:
	cmpl	$0x45, -0x584(%ebp)
	# 0x8059972:	je	0x8058332 [IMM <CODEREF>]
	je	.label_1681
	# 0x8059978:	cmpl	$0x4f, -0x584(%ebp) [IMM, MEM]
	cmpl	$0x4f, -0x584(%ebp)
	# 0x805997f:	je	0x8059e9b [IMM <CODEREF>]
	je	.label_1653
	# 0x8059985:	movl	$4, -0x580(%ebp) [IMM, MEM]
	movl	$4, -0x580(%ebp)
	# 0x805998f:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059995:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8059998:	cmpl	$0xfffff894, %eax [IMM, REG]
	cmpl	$0xfffff894, %eax
	# 0x805999d:	setl	%al [REG]
	setl	%al
	# 0x80599a0:	movb	%al, -0x5a2(%ebp) [REG, MEM]
	movb	%al, -0x5a2(%ebp)
	# 0x80599a6:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80599ac:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x80599af:	addl	$0x76c, %eax [IMM, REG]
	addl	$0x76c, %eax
	# 0x80599b4:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x80599ba:	jmp	0x80586bf [IMM <CODEREF>]
	jmp	.label_1620
	# 0x80599bf:	cmpl	$0x45, -0x584(%ebp) [IMM, MEM]
.label_2479:
	cmpl	$0x45, -0x584(%ebp)
	# 0x80599c6:	je	0x8058335 [IMM <CODEREF>]
	je	.label_1692
	# 0x80599cc:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x80599d2:	movl	0x14(%eax), %ecx [MEM, REG]
	movl	0x14(%eax), %ecx
	# 0x80599d5:	movl	$0x51eb851f, %edx [IMM, REG]
	movl	$0x51eb851f, %edx
	# 0x80599da:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80599dc:	imull	%edx [REG]
	imull	%edx
	# 0x80599de:	sarl	$5, %edx [IMM, REG]
	sarl	$5, %edx
	# 0x80599e1:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80599e3:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x80599e6:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x80599e8:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x80599ea:	movl	%eax, -0x548(%ebp) [REG, MEM]
	movl	%eax, -0x548(%ebp)
	# 0x80599f0:	movl	-0x548(%ebp), %eax [MEM, REG]
	movl	-0x548(%ebp), %eax
	# 0x80599f6:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x80599f9:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x80599fb:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x80599fd:	movl	%eax, -0x548(%ebp) [REG, MEM]
	movl	%eax, -0x548(%ebp)
	# 0x8059a03:	cmpl	$0, -0x548(%ebp) [IMM, MEM]
	cmpl	$0, -0x548(%ebp)
	# 0x8059a0a:	jns	0x8059a35 [IMM <CODEREF>]
	jns	.label_1695
	# 0x8059a0c:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059a12:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x8059a15:	cmpl	$0xfffff894, %eax [IMM, REG]
	cmpl	$0xfffff894, %eax
	# 0x8059a1a:	jge	0x8059a26 [IMM <CODEREF>]
	jge	.label_1625
	# 0x8059a1c:	movl	-0x548(%ebp), %eax [MEM, REG]
	movl	-0x548(%ebp), %eax
	# 0x8059a22:	negl	%eax [REG]
	negl	%eax
	# 0x8059a24:	jmp	0x8059a2f [IMM <CODEREF>]
	jmp	.label_1707
	# 0x8059a26:	movl	-0x548(%ebp), %eax [MEM, REG]
.label_1625:
	movl	-0x548(%ebp), %eax
	# 0x8059a2c:	addl	$0x64, %eax [IMM, REG]
	addl	$0x64, %eax
	# 0x8059a2f:	movl	%eax, -0x548(%ebp) [REG, MEM]
.label_1707:
	movl	%eax, -0x548(%ebp)
	# 0x8059a35:	movl	$2, -0x580(%ebp) [IMM, MEM]
.label_1695:
	movl	$2, -0x580(%ebp)
	# 0x8059a3f:	movl	-0x548(%ebp), %eax [MEM, REG]
	movl	-0x548(%ebp), %eax
	# 0x8059a45:	movl	%eax, -0x57c(%ebp) [REG, MEM]
	movl	%eax, -0x57c(%ebp)
	# 0x8059a4b:	jmp	0x80586a4 [IMM <CODEREF>]
	jmp	.label_1610
	# 0x8059a50:	cmpb	$0, -0x59e(%ebp) [IMM, MEM]
.label_2460:
	cmpb	$0, -0x59e(%ebp)
	# 0x8059a57:	je	0x8059a67 [IMM <CODEREF>]
	je	sub_8059a67
	# 0x8059a59:	movb	$0, -0x59f(%ebp) [IMM, MEM]
	movb	$0, -0x59f(%ebp)
	# 0x8059a60:	movb	$1, -0x5a0(%ebp) [IMM, MEM]
	movb	$1, -0x5a0(%ebp)
	.section	.text
	.align	32
	#Procedure 0x8059a67

	# 0x8059a67:	subl	$0xc, %esp [IMM, REG]
	.globl sub_8059a67
	.type sub_8059a67, @function
sub_8059a67:
	subl	$0xc, %esp
	# 0x8059a6a:	pushl	-0x598(%ebp) [MEM]
	pushl	-0x598(%ebp)
	# 0x8059a70:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x8059a75:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059a78:	movl	%eax, -0x470(%ebp) [REG, MEM]
	movl	%eax, -0x470(%ebp)
	# 0x8059a7e:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059a83:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8059a8a:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8059a91:	movl	%eax, -0x46c(%ebp) [REG, MEM]
	movl	%eax, -0x46c(%ebp)
	# 0x8059a97:	movl	-0x46c(%ebp), %eax [MEM, REG]
	movl	-0x46c(%ebp), %eax
	# 0x8059a9d:	cmpl	%eax, -0x470(%ebp) [REG, MEM]
	cmpl	%eax, -0x470(%ebp)
	# 0x8059aa3:	cmovael	-0x470(%ebp), %eax [MEM, REG]
	cmovael	-0x470(%ebp), %eax
	# 0x8059aaa:	movl	%eax, -0x468(%ebp) [REG, MEM]
	movl	%eax, -0x468(%ebp)
	# 0x8059ab0:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8059ab3:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8059ab9:	cmpl	-0x468(%ebp), %eax [MEM, REG]
	cmpl	-0x468(%ebp), %eax
	# 0x8059abf:	ja	0x8059acb [IMM <CODEREF>]
	ja	.label_1800
	# 0x8059ac1:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059ac6:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8059acb:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1800:
	cmpl	$0, -0x590(%ebp)
	# 0x8059ad2:	je	0x8059bcf [IMM <CODEREF>]
	je	.label_1797
	# 0x8059ad8:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8059adf:	jne	0x8059b56 [IMM <CODEREF>]
	jne	.label_1796
	# 0x8059ae1:	movl	-0x470(%ebp), %eax [MEM, REG]
	movl	-0x470(%ebp), %eax
	# 0x8059ae7:	cmpl	-0x46c(%ebp), %eax [MEM, REG]
	cmpl	-0x46c(%ebp), %eax
	# 0x8059aed:	jae	0x8059b56 [IMM <CODEREF>]
	jae	.label_1796
	# 0x8059aef:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8059af5:	subl	-0x470(%ebp), %eax [MEM, REG]
	subl	-0x470(%ebp), %eax
	# 0x8059afb:	movl	%eax, -0x464(%ebp) [REG, MEM]
	movl	%eax, -0x464(%ebp)
	# 0x8059b01:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8059b08:	jne	0x8059b31 [IMM <CODEREF>]
	jne	.label_1799
	# 0x8059b0a:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059b0d:	pushl	-0x464(%ebp) [MEM]
	pushl	-0x464(%ebp)
	# 0x8059b13:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8059b15:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059b1b:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8059b20:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059b23:	movl	-0x464(%ebp), %eax [MEM, REG]
	movl	-0x464(%ebp), %eax
	# 0x8059b29:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8059b2f:	jmp	0x8059b56 [IMM <CODEREF>]
	jmp	.label_1796
	# 0x8059b31:	subl	$4, %esp [IMM, REG]
.label_1799:
	subl	$4, %esp
	# 0x8059b34:	pushl	-0x464(%ebp) [MEM]
	pushl	-0x464(%ebp)
	# 0x8059b3a:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8059b3c:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059b42:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8059b47:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059b4a:	movl	-0x464(%ebp), %eax [MEM, REG]
	movl	-0x464(%ebp), %eax
	# 0x8059b50:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8059b56:	cmpb	$0, -0x5a0(%ebp) [IMM, MEM]
.label_1796:
	cmpb	$0, -0x5a0(%ebp)
	# 0x8059b5d:	je	0x8059b7e [IMM <CODEREF>]
	je	.label_1801
	# 0x8059b5f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059b62:	pushl	-0x470(%ebp) [MEM]
	pushl	-0x470(%ebp)
	# 0x8059b68:	pushl	-0x598(%ebp) [MEM]
	pushl	-0x598(%ebp)
	# 0x8059b6e:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059b74:	calll	0x8057af3 [IMM <CODEREF>]
	calll	memcpy_lowcase
	# 0x8059b79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059b7c:	jmp	0x8059bc3 [IMM <CODEREF>]
	jmp	.label_1798
	# 0x8059b7e:	cmpb	$0, -0x59f(%ebp) [IMM, MEM]
.label_1801:
	cmpb	$0, -0x59f(%ebp)
	# 0x8059b85:	je	0x8059ba6 [IMM <CODEREF>]
	je	.label_1802
	# 0x8059b87:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059b8a:	pushl	-0x470(%ebp) [MEM]
	pushl	-0x470(%ebp)
	# 0x8059b90:	pushl	-0x598(%ebp) [MEM]
	pushl	-0x598(%ebp)
	# 0x8059b96:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059b9c:	calll	0x8057b36 [IMM <CODEREF>]
	calll	memcpy_uppcase
	# 0x8059ba1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059ba4:	jmp	0x8059bc3 [IMM <CODEREF>]
	jmp	.label_1798
	# 0x8059ba6:	subl	$4, %esp [IMM, REG]
.label_1802:
	subl	$4, %esp
	# 0x8059ba9:	pushl	-0x470(%ebp) [MEM]
	pushl	-0x470(%ebp)
	# 0x8059baf:	pushl	-0x598(%ebp) [MEM]
	pushl	-0x598(%ebp)
	# 0x8059bb5:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059bbb:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x8059bc0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059bc3:	movl	-0x470(%ebp), %eax [MEM, REG]
.label_1798:
	movl	-0x470(%ebp), %eax
	# 0x8059bc9:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8059bcf:	movl	-0x468(%ebp), %eax [MEM, REG]
.label_1797:
	movl	-0x468(%ebp), %eax
	# 0x8059bd5:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x8059bdb:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x8059be0:	movl	$1, -0x564(%ebp) [IMM, MEM]
.label_2441:
	movl	$1, -0x564(%ebp)
	# 0x8059bea:	jmp	0x8059bf3 [IMM <CODEREF>]
	jmp	.label_1773
	# 0x8059bec:	addl	$1, -0x564(%ebp) [IMM, MEM]
.label_1765:
	addl	$1, -0x564(%ebp)
	# 0x8059bf3:	movl	-0x58c(%ebp), %edx [MEM, REG]
.label_1773:
	movl	-0x58c(%ebp), %edx
	# 0x8059bf9:	movl	-0x564(%ebp), %eax [MEM, REG]
	movl	-0x564(%ebp), %eax
	# 0x8059bff:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059c01:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8059c04:	cmpb	$0x3a, %al [IMM, REG]
	cmpb	$0x3a, %al
	# 0x8059c06:	je	0x8059bec [IMM <CODEREF>]
	je	.label_1765
	# 0x8059c08:	movl	-0x58c(%ebp), %edx [MEM, REG]
	movl	-0x58c(%ebp), %edx
	# 0x8059c0e:	movl	-0x564(%ebp), %eax [MEM, REG]
	movl	-0x564(%ebp), %eax
	# 0x8059c14:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059c16:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8059c19:	cmpb	$0x7a, %al [IMM, REG]
	cmpb	$0x7a, %al
	# 0x8059c1b:	jne	0x8059e9e [IMM <CODEREF>]
	jne	.label_1609
	# 0x8059c21:	movl	-0x564(%ebp), %eax [MEM, REG]
	movl	-0x564(%ebp), %eax
	# 0x8059c27:	addl	%eax, -0x58c(%ebp) [REG, MEM]
	addl	%eax, -0x58c(%ebp)
	# 0x8059c2d:	jmp	0x8059c39 [IMM <CODEREF>]
	jmp	.label_1614
	# 0x8059c2f:	movl	$0, -0x564(%ebp) [IMM, MEM]
.label_2480:
	movl	$0, -0x564(%ebp)
	# 0x8059c39:	movl	-0x5b4(%ebp), %eax [MEM, REG]
.label_1614:
	movl	-0x5b4(%ebp), %eax
	# 0x8059c3f:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x8059c42:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x8059c44:	js	0x805a06d [IMM <CODEREF>]
	js	.label_1622
	# 0x8059c4a:	movl	-0x5b4(%ebp), %eax [MEM, REG]
	movl	-0x5b4(%ebp), %eax
	# 0x8059c50:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x8059c53:	movl	%eax, -0x518(%ebp) [REG, MEM]
	movl	%eax, -0x518(%ebp)
	# 0x8059c59:	cmpl	$0, -0x518(%ebp) [IMM, MEM]
	cmpl	$0, -0x518(%ebp)
	# 0x8059c60:	js	0x8059c78 [IMM <CODEREF>]
	js	.label_1626
	# 0x8059c62:	cmpl	$0, -0x518(%ebp) [IMM, MEM]
	cmpl	$0, -0x518(%ebp)
	# 0x8059c69:	jne	0x8059c7f [IMM <CODEREF>]
	jne	.label_1631
	# 0x8059c6b:	movl	-0x598(%ebp), %eax [MEM, REG]
	movl	-0x598(%ebp), %eax
	# 0x8059c71:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8059c74:	cmpb	$0x2d, %al [IMM, REG]
	cmpb	$0x2d, %al
	# 0x8059c76:	jne	0x8059c7f [IMM <CODEREF>]
	jne	.label_1631
	# 0x8059c78:	movl	$1, %eax [IMM, REG]
.label_1626:
	movl	$1, %eax
	# 0x8059c7d:	jmp	0x8059c84 [IMM <CODEREF>]
	jmp	.label_1734
	# 0x8059c7f:	movl	$0, %eax [IMM, REG]
.label_1631:
	movl	$0, %eax
	# 0x8059c84:	movb	%al, -0x5a2(%ebp) [REG, MEM]
.label_1734:
	movb	%al, -0x5a2(%ebp)
	# 0x8059c8a:	andb	$1, -0x5a2(%ebp) [IMM, MEM]
	andb	$1, -0x5a2(%ebp)
	# 0x8059c91:	movl	-0x518(%ebp), %ecx [MEM, REG]
	movl	-0x518(%ebp), %ecx
	# 0x8059c97:	movl	$0x91a2b3c5, %edx [IMM, REG]
	movl	$0x91a2b3c5, %edx
	# 0x8059c9c:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059c9e:	imull	%edx [REG]
	imull	%edx
	# 0x8059ca0:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059ca3:	sarl	$0xb, %eax [IMM, REG]
	sarl	$0xb, %eax
	# 0x8059ca6:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059ca8:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059caa:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059cad:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059caf:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059cb1:	movl	%eax, -0x514(%ebp) [REG, MEM]
	movl	%eax, -0x514(%ebp)
	# 0x8059cb7:	movl	-0x518(%ebp), %ecx [MEM, REG]
	movl	-0x518(%ebp), %ecx
	# 0x8059cbd:	movl	$0x88888889, %edx [IMM, REG]
	movl	$0x88888889, %edx
	# 0x8059cc2:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059cc4:	imull	%edx [REG]
	imull	%edx
	# 0x8059cc6:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059cc9:	sarl	$5, %eax [IMM, REG]
	sarl	$5, %eax
	# 0x8059ccc:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059cce:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059cd0:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059cd3:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x8059cd5:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059cd7:	movl	$0x88888889, %edx [IMM, REG]
	movl	$0x88888889, %edx
	# 0x8059cdc:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059cde:	imull	%edx [REG]
	imull	%edx
	# 0x8059ce0:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059ce3:	sarl	$5, %eax [IMM, REG]
	sarl	$5, %eax
	# 0x8059ce6:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059ce8:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059cea:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059ced:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059cef:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059cf1:	movl	%eax, -0x510(%ebp) [REG, MEM]
	movl	%eax, -0x510(%ebp)
	# 0x8059cf7:	movl	-0x510(%ebp), %eax [MEM, REG]
	movl	-0x510(%ebp), %eax
	# 0x8059cfd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059cff:	leal	0(, %edx, 4), %eax [MEM, REG]
	leal	0(, %edx, 4), %eax
	# 0x8059d06:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059d08:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059d0a:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x8059d0d:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8059d0f:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059d11:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059d13:	movl	%eax, -0x510(%ebp) [REG, MEM]
	movl	%eax, -0x510(%ebp)
	# 0x8059d19:	movl	-0x518(%ebp), %ecx [MEM, REG]
	movl	-0x518(%ebp), %ecx
	# 0x8059d1f:	movl	$0x88888889, %edx [IMM, REG]
	movl	$0x88888889, %edx
	# 0x8059d24:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059d26:	imull	%edx [REG]
	imull	%edx
	# 0x8059d28:	leal	0(%edx, %ecx), %eax [MEM, REG]
	leal	0(%edx, %ecx), %eax
	# 0x8059d2b:	sarl	$5, %eax [IMM, REG]
	sarl	$5, %eax
	# 0x8059d2e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059d30:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059d32:	sarl	$0x1f, %eax [IMM, REG]
	sarl	$0x1f, %eax
	# 0x8059d35:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x8059d37:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059d39:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059d3b:	leal	0(, %edx, 4), %eax [MEM, REG]
	leal	0(, %edx, 4), %eax
	# 0x8059d42:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059d44:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x8059d46:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x8059d49:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x8059d4b:	subl	%eax, %ecx [REG, REG]
	subl	%eax, %ecx
	# 0x8059d4d:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x8059d4f:	movl	%eax, -0x50c(%ebp) [REG, MEM]
	movl	%eax, -0x50c(%ebp)
	# 0x8059d55:	movl	-0x564(%ebp), %eax [MEM, REG]
	movl	-0x564(%ebp), %eax
	# 0x8059d5b:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8059d5e:	je	0x8059da9 [IMM <CODEREF>]
	je	.label_1639
	# 0x8059d60:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x8059d63:	jb	0x8059d78 [IMM <CODEREF>]
	jb	.label_1676
	# 0x8059d65:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x8059d68:	je	0x8059dda [IMM <CODEREF>]
	je	.label_1678
	# 0x8059d6a:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x8059d6d:	je	0x8059e18 [IMM <CODEREF>]
	je	.label_1680
	# 0x8059d73:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059d78:	movl	$5, -0x580(%ebp) [IMM, MEM]
.label_1676:
	movl	$5, -0x580(%ebp)
	# 0x8059d82:	movl	$0, -0x574(%ebp) [IMM, MEM]
	movl	$0, -0x574(%ebp)
	# 0x8059d8c:	movl	-0x514(%ebp), %eax [MEM, REG]
	movl	-0x514(%ebp), %eax
	# 0x8059d92:	imull	$0x64, %eax, %edx [IMM, REG, REG]
	imull	$0x64, %eax, %edx
	# 0x8059d95:	movl	-0x510(%ebp), %eax [MEM, REG]
	movl	-0x510(%ebp), %eax
	# 0x8059d9b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059d9d:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059da3:	jmp	0x805867f [IMM <CODEREF>]
	jmp	.label_1665
	# 0x8059da8:	nop	 []
.label_1709:
	nop	
	# 0x8059da9:	movl	$6, -0x580(%ebp) [IMM, MEM]
.label_1639:
	movl	$6, -0x580(%ebp)
	# 0x8059db3:	movl	$4, -0x574(%ebp) [IMM, MEM]
	movl	$4, -0x574(%ebp)
	# 0x8059dbd:	movl	-0x514(%ebp), %eax [MEM, REG]
	movl	-0x514(%ebp), %eax
	# 0x8059dc3:	imull	$0x64, %eax, %edx [IMM, REG, REG]
	imull	$0x64, %eax, %edx
	# 0x8059dc6:	movl	-0x510(%ebp), %eax [MEM, REG]
	movl	-0x510(%ebp), %eax
	# 0x8059dcc:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059dce:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059dd4:	jmp	0x805867f [IMM <CODEREF>]
	jmp	.label_1665
	# 0x8059dd9:	nop	 []
.label_1706:
	nop	
	# 0x8059dda:	movl	$9, -0x580(%ebp) [IMM, MEM]
.label_1678:
	movl	$9, -0x580(%ebp)
	# 0x8059de4:	movl	$0x14, -0x574(%ebp) [IMM, MEM]
	movl	$0x14, -0x574(%ebp)
	# 0x8059dee:	movl	-0x514(%ebp), %eax [MEM, REG]
	movl	-0x514(%ebp), %eax
	# 0x8059df4:	imull	$0x2710, %eax, %edx [IMM, REG, REG]
	imull	$0x2710, %eax, %edx
	# 0x8059dfa:	movl	-0x510(%ebp), %eax [MEM, REG]
	movl	-0x510(%ebp), %eax
	# 0x8059e00:	imull	$0x64, %eax, %eax [IMM, REG, REG]
	imull	$0x64, %eax, %eax
	# 0x8059e03:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x8059e05:	movl	-0x50c(%ebp), %eax [MEM, REG]
	movl	-0x50c(%ebp), %eax
	# 0x8059e0b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059e0d:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059e13:	jmp	0x805867f [IMM <CODEREF>]
	jmp	.label_1665
	# 0x8059e18:	cmpl	$0, -0x50c(%ebp) [IMM, MEM]
.label_1680:
	cmpl	$0, -0x50c(%ebp)
	# 0x8059e1f:	jne	0x8059dd9 [IMM <CODEREF>]
	jne	.label_1706
	# 0x8059e21:	cmpl	$0, -0x510(%ebp) [IMM, MEM]
	cmpl	$0, -0x510(%ebp)
	# 0x8059e28:	jne	0x8059da8 [IMM <CODEREF>]
	jne	.label_1709
	# 0x8059e2e:	movl	$3, -0x580(%ebp) [IMM, MEM]
	movl	$3, -0x580(%ebp)
	# 0x8059e38:	movl	$0, -0x574(%ebp) [IMM, MEM]
	movl	$0, -0x574(%ebp)
	# 0x8059e42:	movl	-0x514(%ebp), %eax [MEM, REG]
	movl	-0x514(%ebp), %eax
	# 0x8059e48:	movl	%eax, -0x578(%ebp) [REG, MEM]
	movl	%eax, -0x578(%ebp)
	# 0x8059e4e:	jmp	0x805867f [IMM <CODEREF>]
	jmp	.label_1665
	# 0x8059e53:	subl	$1, -0x58c(%ebp) [IMM, MEM]
.label_2439:
	subl	$1, -0x58c(%ebp)
	# 0x8059e5a:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e5c:	nop	 []
.label_1769:
	nop	
	# 0x8059e5d:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e5f:	nop	 []
.label_1655:
	nop	
	# 0x8059e60:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e62:	nop	 []
.label_1663:
	nop	
	# 0x8059e63:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e65:	nop	 []
.label_1642:
	nop	
	# 0x8059e66:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e68:	nop	 []
.label_1705:
	nop	
	# 0x8059e69:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e6b:	nop	 []
.label_1713:
	nop	
	# 0x8059e6c:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e6e:	nop	 []
.label_1717:
	nop	
	# 0x8059e6f:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e71:	nop	 []
.label_1741:
	nop	
	# 0x8059e72:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e74:	nop	 []
.label_1721:
	nop	
	# 0x8059e75:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e77:	nop	 []
.label_1752:
	nop	
	# 0x8059e78:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e7a:	nop	 []
.label_1756:
	nop	
	# 0x8059e7b:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e7d:	nop	 []
.label_1761:
	nop	
	# 0x8059e7e:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e80:	nop	 []
.label_1767:
	nop	
	# 0x8059e81:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e83:	nop	 []
.label_1778:
	nop	
	# 0x8059e84:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e86:	nop	 []
.label_1617:
	nop	
	# 0x8059e87:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e89:	nop	 []
.label_1634:
	nop	
	# 0x8059e8a:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e8c:	nop	 []
.label_1742:
	nop	
	# 0x8059e8d:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e8f:	nop	 []
.label_1673:
	nop	
	# 0x8059e90:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e92:	nop	 []
.label_1693:
	nop	
	# 0x8059e93:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e95:	nop	 []
.label_1643:
	nop	
	# 0x8059e96:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e98:	nop	 []
.label_1669:
	nop	
	# 0x8059e99:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e9b:	nop	 []
.label_1653:
	nop	
	# 0x8059e9c:	jmp	0x8059e9f [IMM <CODEREF>]
	jmp	.label_1645
	# 0x8059e9e:	nop	 []
.label_1609:
	nop	
	# 0x8059e9f:	movl	$1, -0x544(%ebp) [IMM, MEM]
.label_1645:
	movl	$1, -0x544(%ebp)
	# 0x8059ea9:	jmp	0x8059eb2 [IMM <CODEREF>]
	jmp	.label_1726
	# 0x8059eab:	addl	$1, -0x544(%ebp) [IMM, MEM]
.label_1730:
	addl	$1, -0x544(%ebp)
	# 0x8059eb2:	movl	$1, %eax [IMM, REG]
.label_1726:
	movl	$1, %eax
	# 0x8059eb7:	subl	-0x544(%ebp), %eax [MEM, REG]
	subl	-0x544(%ebp), %eax
	# 0x8059ebd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059ebf:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8059ec5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059ec7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x8059eca:	cmpb	$0x25, %al [IMM, REG]
	cmpb	$0x25, %al
	# 0x8059ecc:	jne	0x8059eab [IMM <CODEREF>]
	jne	.label_1730
	# 0x8059ece:	movl	-0x544(%ebp), %eax [MEM, REG]
	movl	-0x544(%ebp), %eax
	# 0x8059ed4:	movl	%eax, -0x460(%ebp) [REG, MEM]
	movl	%eax, -0x460(%ebp)
	# 0x8059eda:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059edf:	cmpl	$0, -0x568(%ebp) [IMM, MEM]
	cmpl	$0, -0x568(%ebp)
	# 0x8059ee6:	cmovnsl	-0x568(%ebp), %eax [MEM, REG]
	cmovnsl	-0x568(%ebp), %eax
	# 0x8059eed:	movl	%eax, -0x45c(%ebp) [REG, MEM]
	movl	%eax, -0x45c(%ebp)
	# 0x8059ef3:	movl	-0x45c(%ebp), %eax [MEM, REG]
	movl	-0x45c(%ebp), %eax
	# 0x8059ef9:	cmpl	%eax, -0x460(%ebp) [REG, MEM]
	cmpl	%eax, -0x460(%ebp)
	# 0x8059eff:	cmovael	-0x460(%ebp), %eax [MEM, REG]
	cmovael	-0x460(%ebp), %eax
	# 0x8059f06:	movl	%eax, -0x458(%ebp) [REG, MEM]
	movl	%eax, -0x458(%ebp)
	# 0x8059f0c:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x8059f0f:	subl	-0x594(%ebp), %eax [MEM, REG]
	subl	-0x594(%ebp), %eax
	# 0x8059f15:	cmpl	-0x458(%ebp), %eax [MEM, REG]
	cmpl	-0x458(%ebp), %eax
	# 0x8059f1b:	ja	0x8059f27 [IMM <CODEREF>]
	ja	.label_1732
	# 0x8059f1d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x8059f22:	jmp	0x805a0a4 [IMM <CODEREF>]
	jmp	.label_1618
	# 0x8059f27:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
.label_1732:
	cmpl	$0, -0x590(%ebp)
	# 0x8059f2e:	je	0x805a05b [IMM <CODEREF>]
	je	.label_1748
	# 0x8059f34:	cmpl	$0, -0x580(%ebp) [IMM, MEM]
	cmpl	$0, -0x580(%ebp)
	# 0x8059f3b:	jne	0x8059fb2 [IMM <CODEREF>]
	jne	.label_1749
	# 0x8059f3d:	movl	-0x460(%ebp), %eax [MEM, REG]
	movl	-0x460(%ebp), %eax
	# 0x8059f43:	cmpl	-0x45c(%ebp), %eax [MEM, REG]
	cmpl	-0x45c(%ebp), %eax
	# 0x8059f49:	jae	0x8059fb2 [IMM <CODEREF>]
	jae	.label_1749
	# 0x8059f4b:	movl	-0x568(%ebp), %eax [MEM, REG]
	movl	-0x568(%ebp), %eax
	# 0x8059f51:	subl	-0x460(%ebp), %eax [MEM, REG]
	subl	-0x460(%ebp), %eax
	# 0x8059f57:	movl	%eax, -0x454(%ebp) [REG, MEM]
	movl	%eax, -0x454(%ebp)
	# 0x8059f5d:	cmpl	$0x30, -0x588(%ebp) [IMM, MEM]
	cmpl	$0x30, -0x588(%ebp)
	# 0x8059f64:	jne	0x8059f8d [IMM <CODEREF>]
	jne	.label_1753
	# 0x8059f66:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059f69:	pushl	-0x454(%ebp) [MEM]
	pushl	-0x454(%ebp)
	# 0x8059f6f:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x8059f71:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059f77:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8059f7c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059f7f:	movl	-0x454(%ebp), %eax [MEM, REG]
	movl	-0x454(%ebp), %eax
	# 0x8059f85:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8059f8b:	jmp	0x8059fb2 [IMM <CODEREF>]
	jmp	.label_1749
	# 0x8059f8d:	subl	$4, %esp [IMM, REG]
.label_1753:
	subl	$4, %esp
	# 0x8059f90:	pushl	-0x454(%ebp) [MEM]
	pushl	-0x454(%ebp)
	# 0x8059f96:	pushl	$0x20 [IMM]
	pushl	$0x20
	# 0x8059f98:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059f9e:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x8059fa3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059fa6:	movl	-0x454(%ebp), %eax [MEM, REG]
	movl	-0x454(%ebp), %eax
	# 0x8059fac:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x8059fb2:	cmpb	$0, -0x5a0(%ebp) [IMM, MEM]
.label_1749:
	cmpb	$0, -0x5a0(%ebp)
	# 0x8059fb9:	je	0x8059fea [IMM <CODEREF>]
	je	.label_1764
	# 0x8059fbb:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8059fc0:	subl	-0x544(%ebp), %eax [MEM, REG]
	subl	-0x544(%ebp), %eax
	# 0x8059fc6:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x8059fc8:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x8059fce:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x8059fd0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x8059fd3:	pushl	-0x460(%ebp) [MEM]
	pushl	-0x460(%ebp)
	# 0x8059fd9:	pushl	%eax [REG]
	pushl	%eax
	# 0x8059fda:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x8059fe0:	calll	0x8057af3 [IMM <CODEREF>]
	calll	memcpy_lowcase
	# 0x8059fe5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x8059fe8:	jmp	0x805a04f [IMM <CODEREF>]
	jmp	.label_1613
	# 0x8059fea:	cmpb	$0, -0x59f(%ebp) [IMM, MEM]
.label_1764:
	cmpb	$0, -0x59f(%ebp)
	# 0x8059ff1:	je	0x805a022 [IMM <CODEREF>]
	je	.label_1774
	# 0x8059ff3:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x8059ff8:	subl	-0x544(%ebp), %eax [MEM, REG]
	subl	-0x544(%ebp), %eax
	# 0x8059ffe:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805a000:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x805a006:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a008:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805a00b:	pushl	-0x460(%ebp) [MEM]
	pushl	-0x460(%ebp)
	# 0x805a011:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a012:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805a018:	calll	0x8057b36 [IMM <CODEREF>]
	calll	memcpy_uppcase
	# 0x805a01d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a020:	jmp	0x805a04f [IMM <CODEREF>]
	jmp	.label_1613
	# 0x805a022:	movl	$1, %eax [IMM, REG]
.label_1774:
	movl	$1, %eax
	# 0x805a027:	subl	-0x544(%ebp), %eax [MEM, REG]
	subl	-0x544(%ebp), %eax
	# 0x805a02d:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805a02f:	movl	-0x58c(%ebp), %eax [MEM, REG]
	movl	-0x58c(%ebp), %eax
	# 0x805a035:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a037:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805a03a:	pushl	-0x460(%ebp) [MEM]
	pushl	-0x460(%ebp)
	# 0x805a040:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a041:	pushl	-0x590(%ebp) [MEM]
	pushl	-0x590(%ebp)
	# 0x805a047:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805a04c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a04f:	movl	-0x460(%ebp), %eax [MEM, REG]
.label_1613:
	movl	-0x460(%ebp), %eax
	# 0x805a055:	addl	%eax, -0x590(%ebp) [REG, MEM]
	addl	%eax, -0x590(%ebp)
	# 0x805a05b:	movl	-0x458(%ebp), %eax [MEM, REG]
.label_1748:
	movl	-0x458(%ebp), %eax
	# 0x805a061:	addl	%eax, -0x594(%ebp) [REG, MEM]
	addl	%eax, -0x594(%ebp)
	# 0x805a067:	nop	 []
	nop	
	# 0x805a068:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x805a06a:	nop	 []
.label_1671:
	nop	
	# 0x805a06b:	jmp	0x805a06e [IMM <CODEREF>]
	jmp	.label_1633
	# 0x805a06d:	nop	 []
.label_1622:
	nop	
	# 0x805a06e:	addl	$1, -0x58c(%ebp) [IMM, MEM]
.label_1633:
	addl	$1, -0x58c(%ebp)
	# 0x805a075:	movl	-0x58c(%ebp), %eax [MEM, REG]
.label_1658:
	movl	-0x58c(%ebp), %eax
	# 0x805a07b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a07e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a080:	jne	0x8057cf9 [IMM <CODEREF>]
	jne	.label_1747
	# 0x805a086:	cmpl	$0, -0x590(%ebp) [IMM, MEM]
	cmpl	$0, -0x590(%ebp)
	# 0x805a08d:	je	0x805a09e [IMM <CODEREF>]
	je	.label_1640
	# 0x805a08f:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805a093:	je	0x805a09e [IMM <CODEREF>]
	je	.label_1640
	# 0x805a095:	movl	-0x590(%ebp), %eax [MEM, REG]
	movl	-0x590(%ebp), %eax
	# 0x805a09b:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x805a09e:	movl	-0x594(%ebp), %eax [MEM, REG]
.label_1640:
	movl	-0x594(%ebp), %eax
	# 0x805a0a4:	movl	-0xc(%ebp), %esi [MEM, REG]
.label_1618:
	movl	-0xc(%ebp), %esi
	# 0x805a0a7:	xorl	%gs:0x14, %esi [MEM, REG]
	xorl	%gs:0x14, %esi
	# 0x805a0ae:	je	0x805a0b5 [IMM <CODEREF>]
	je	.label_1771
	# 0x805a0b0:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805a0b5:	leal	-8(%ebp), %esp [MEM, REG]
.label_1771:
	leal	-8(%ebp), %esp
	# 0x805a0b8:	popl	%ebx [REG]
	popl	%ebx
	# 0x805a0b9:	popl	%esi [REG]
	popl	%esi
	# 0x805a0ba:	popl	%ebp [REG]
	popl	%ebp
	# 0x805a0bb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a0bc

	# 0x805a0bc:	pushl	%ebp [REG]
	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	pushl	%ebp
	# 0x805a0bd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a0bf:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805a0c2:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a0c6:	jne	0x805a0e4 [IMM <CODEREF>]
	jne	.label_1804
	# 0x805a0c8:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x805a0cd:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a0ce:	pushl	$0x37 [IMM]
	pushl	$0x37
	# 0x805a0d0:	pushl	$1 [IMM]
	pushl	$1
	# 0x805a0d2:	pushl	$0x8063770 [IMM <DATAREF>]
	pushl	$label_1803
	# 0x805a0d7:	calll	0x8049790 [IMM <CODEREF>]
	calll	fwrite
	# 0x805a0dc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a0df:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x805a0e4:	subl	$8, %esp [IMM, REG]
.label_1804:
	subl	$8, %esp
	# 0x805a0e7:	pushl	$0x2f [IMM]
	pushl	$0x2f
	# 0x805a0e9:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805a0ec:	calll	0x8049a50 [IMM <CODEREF>]
	calll	strrchr
	# 0x805a0f1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a0f4:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805a0f7:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805a0fb:	je	0x805a105 [IMM <CODEREF>]
	je	.label_1806
	# 0x805a0fd:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a100:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805a103:	jmp	0x805a108 [IMM <CODEREF>]
	jmp	.label_1809
	# 0x805a105:	movl	8(%ebp), %eax [MEM, REG]
.label_1806:
	movl	8(%ebp), %eax
	# 0x805a108:	movl	%eax, -0xc(%ebp) [REG, MEM]
.label_1809:
	movl	%eax, -0xc(%ebp)
	# 0x805a10b:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805a10e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a111:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805a113:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805a115:	cmpl	$6, %eax [IMM, REG]
	cmpl	$6, %eax
	# 0x805a118:	jle	0x805a167 [IMM <CODEREF>]
	jle	.label_1805
	# 0x805a11a:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a11d:	subl	$7, %eax [IMM, REG]
	subl	$7, %eax
	# 0x805a120:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805a123:	pushl	$7 [IMM]
	pushl	$7
	# 0x805a125:	pushl	$0x80637a8 [IMM <DATAREF>]
	pushl	$label_1808
	# 0x805a12a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a12b:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x805a130:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a133:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a135:	jne	0x805a167 [IMM <CODEREF>]
	jne	.label_1805
	# 0x805a137:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a13a:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805a13d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805a140:	pushl	$3 [IMM]
	pushl	$3
	# 0x805a142:	pushl	$0x80637b0 [IMM <DATAREF>]
	pushl	$label_1807
	# 0x805a147:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805a14a:	calll	0x8049af0 [IMM <CODEREF>]
	calll	strncmp
	# 0x805a14f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a152:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a154:	jne	0x805a167 [IMM <CODEREF>]
	jne	.label_1805
	# 0x805a156:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a159:	addl	$3, %eax [IMM, REG]
	addl	$3, %eax
	# 0x805a15c:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805a15f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a162:	movl	%eax, 0x806a380 [REG, MEM]
	movl	%eax, program_invocation_short_name
	# 0x805a167:	movl	8(%ebp), %eax [MEM, REG]
.label_1805:
	movl	8(%ebp), %eax
	# 0x805a16a:	movl	%eax, 0x806b3f4 [REG, MEM]
	movl	%eax, program_name
	# 0x805a16f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a172:	movl	%eax, 0x806a390 [REG, MEM]
	movl	%eax, program_invocation_name
	# 0x805a177:	nop	 []
	nop	
	# 0x805a178:	leave	 []
	leave	
	# 0x805a179:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a17a

	# 0x805a17a:	pushl	%ebp [REG]
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:
	pushl	%ebp
	# 0x805a17b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a17d:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805a180:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805a185:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805a187:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805a18a:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a18e:	je	0x805a195 [IMM <CODEREF>]
	je	.label_1811
	# 0x805a190:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a193:	jmp	0x805a19a [IMM <CODEREF>]
	jmp	.label_1810
	# 0x805a195:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1811:
	movl	$default_quoting_options,  %eax
	# 0x805a19a:	subl	$8, %esp [IMM, REG]
.label_1810:
	subl	$8, %esp
	# 0x805a19d:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805a19f:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a1a0:	calll	0x805c6d6 [IMM <CODEREF>]
	calll	xmemdup
	# 0x805a1a5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a1a8:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805a1ab:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805a1b0:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805a1b2:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a1b5:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805a1b7:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a1ba:	leave	 []
	leave	
	# 0x805a1bb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a1bc

	# 0x805a1bc:	pushl	%ebp [REG]
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:
	pushl	%ebp
	# 0x805a1bd:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a1bf:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a1c3:	je	0x805a1ca [IMM <CODEREF>]
	je	.label_1812
	# 0x805a1c5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a1c8:	jmp	0x805a1cf [IMM <CODEREF>]
	jmp	.label_1813
	# 0x805a1ca:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1812:
	movl	$default_quoting_options,  %eax
	# 0x805a1cf:	movl	0(%eax), %eax [MEM, REG]
.label_1813:
	movl	0(%eax), %eax
	# 0x805a1d1:	popl	%ebp [REG]
	popl	%ebp
	# 0x805a1d2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a1d3

	# 0x805a1d3:	pushl	%ebp [REG]
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:
	pushl	%ebp
	# 0x805a1d4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a1d6:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a1da:	je	0x805a1e1 [IMM <CODEREF>]
	je	.label_1814
	# 0x805a1dc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a1df:	jmp	0x805a1e6 [IMM <CODEREF>]
	jmp	.label_1815
	# 0x805a1e1:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1814:
	movl	$default_quoting_options,  %eax
	# 0x805a1e6:	movl	0xc(%ebp), %edx [MEM, REG]
.label_1815:
	movl	0xc(%ebp), %edx
	# 0x805a1e9:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805a1eb:	nop	 []
	nop	
	# 0x805a1ec:	popl	%ebp [REG]
	popl	%ebp
	# 0x805a1ed:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a1ee

	# 0x805a1ee:	pushl	%ebp [REG]
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:
	pushl	%ebp
	# 0x805a1ef:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a1f1:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805a1f2:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x805a1f5:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805a1f8:	movb	%al, -0x18(%ebp) [REG, MEM]
	movb	%al, -0x18(%ebp)
	# 0x805a1fb:	movzbl	-0x18(%ebp), %eax [MEM, REG]
	movzbl	-0x18(%ebp), %eax
	# 0x805a1ff:	movb	%al, -0x11(%ebp) [REG, MEM]
	movb	%al, -0x11(%ebp)
	# 0x805a202:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a206:	je	0x805a20d [IMM <CODEREF>]
	je	.label_1817
	# 0x805a208:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a20b:	jmp	0x805a212 [IMM <CODEREF>]
	jmp	.label_1816
	# 0x805a20d:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1817:
	movl	$default_quoting_options,  %eax
	# 0x805a212:	leal	8(%eax), %edx [MEM, REG]
.label_1816:
	leal	8(%eax), %edx
	# 0x805a215:	movzbl	-0x11(%ebp), %eax [MEM, REG]
	movzbl	-0x11(%ebp), %eax
	# 0x805a219:	shrb	$5, %al [IMM, REG]
	shrb	$5, %al
	# 0x805a21c:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805a21f:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805a222:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a224:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805a227:	movzbl	-0x11(%ebp), %eax [MEM, REG]
	movzbl	-0x11(%ebp), %eax
	# 0x805a22b:	andl	$0x1f, %eax [IMM, REG]
	andl	$0x1f, %eax
	# 0x805a22e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805a231:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a234:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805a236:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a239:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805a23b:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805a23d:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805a23f:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805a242:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805a245:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a248:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805a24a:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805a24d:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805a250:	xorl	-8(%ebp), %eax [MEM, REG]
	xorl	-8(%ebp), %eax
	# 0x805a253:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805a255:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805a258:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805a25a:	shll	%cl, %ebx [REG, REG]
	shll	%cl, %ebx
	# 0x805a25c:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805a25e:	xorl	%eax, %edx [REG, REG]
	xorl	%eax, %edx
	# 0x805a260:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a263:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805a265:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805a268:	addl	$0x14, %esp [IMM, REG]
	addl	$0x14, %esp
	# 0x805a26b:	popl	%ebx [REG]
	popl	%ebx
	# 0x805a26c:	popl	%ebp [REG]
	popl	%ebp
	# 0x805a26d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a26e
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	# 0x805a26e:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805a26f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a271:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805a274:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a278:	jne	0x805a281 [IMM <CODEREF>]
	jne	.label_1818
	# 0x805a27a:	movl	$0x806b400, 8(%ebp) [IMM <DATAREF>, MEM]
	movl	$default_quoting_options, 8(%ebp)
	# 0x805a281:	movl	8(%ebp), %eax [MEM, REG]
.label_1818:
	movl	8(%ebp), %eax
	# 0x805a284:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805a287:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805a28a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a28d:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x805a290:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805a293:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805a296:	leave	 []
	leave	
	# 0x805a297:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a298

	# 0x805a298:	pushl	%ebp [REG]
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:
	pushl	%ebp
	# 0x805a299:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a29b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805a29e:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805a2a2:	jne	0x805a2ab [IMM <CODEREF>]
	jne	.label_1819
	# 0x805a2a4:	movl	$0x806b400, 8(%ebp) [IMM <DATAREF>, MEM]
	movl	$default_quoting_options, 8(%ebp)
	# 0x805a2ab:	movl	8(%ebp), %eax [MEM, REG]
.label_1819:
	movl	8(%ebp), %eax
	# 0x805a2ae:	movl	$0xa, 0(%eax) [IMM, MEM]
	movl	$0xa, 0(%eax)
	# 0x805a2b4:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805a2b8:	je	0x805a2c0 [IMM <CODEREF>]
	je	.label_1821
	# 0x805a2ba:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805a2be:	jne	0x805a2c5 [IMM <CODEREF>]
	jne	.label_1820
	# 0x805a2c0:	calll	0x8049b10 [IMM <CODEREF>]
.label_1821:
	calll	abort
	# 0x805a2c5:	movl	8(%ebp), %eax [MEM, REG]
.label_1820:
	movl	8(%ebp), %eax
	# 0x805a2c8:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x805a2cb:	movl	%edx, 0x28(%eax) [REG, MEM]
	movl	%edx, 0x28(%eax)
	# 0x805a2ce:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a2d1:	movl	0x10(%ebp), %edx [MEM, REG]
	movl	0x10(%ebp), %edx
	# 0x805a2d4:	movl	%edx, 0x2c(%eax) [REG, MEM]
	movl	%edx, 0x2c(%eax)
	# 0x805a2d7:	nop	 []
	nop	
	# 0x805a2d8:	leave	 []
	leave	
	# 0x805a2d9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a2da

	# 0x805a2da:	pushl	%ebp [REG]
	.globl quoting_options_from_style
	.type quoting_options_from_style, @function
quoting_options_from_style:
	pushl	%ebp
	# 0x805a2db:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a2dd:	pushl	%edi [REG]
	pushl	%edi
	# 0x805a2de:	subl	$0x54, %esp [IMM, REG]
	subl	$0x54, %esp
	# 0x805a2e1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a2e4:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805a2e7:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805a2ed:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805a2f0:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805a2f2:	leal	-0x3c(%ebp), %edx [MEM, REG]
	leal	-0x3c(%ebp), %edx
	# 0x805a2f5:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805a2fa:	movl	$0xc, %ecx [IMM, REG]
	movl	$0xc, %ecx
	# 0x805a2ff:	movl	%edx, %edi [REG, REG]
	movl	%edx, %edi
	# 0x805a301:	rep stosl	%eax, %es:(%edi) [MEM]
	rep stosl	%eax, %es:(%edi)
	# 0x805a303:	cmpl	$0xa, 0xc(%ebp) [IMM, MEM]
	cmpl	$0xa, 0xc(%ebp)
	# 0x805a307:	jne	0x805a30e [IMM <CODEREF>]
	jne	.label_1822
	# 0x805a309:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x805a30e:	movl	0xc(%ebp), %eax [MEM, REG]
.label_1822:
	movl	0xc(%ebp), %eax
	# 0x805a311:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805a314:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805a317:	movl	-0x3c(%ebp), %edx [MEM, REG]
	movl	-0x3c(%ebp), %edx
	# 0x805a31a:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805a31c:	movl	-0x38(%ebp), %edx [MEM, REG]
	movl	-0x38(%ebp), %edx
	# 0x805a31f:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805a322:	movl	-0x34(%ebp), %edx [MEM, REG]
	movl	-0x34(%ebp), %edx
	# 0x805a325:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x805a328:	movl	-0x30(%ebp), %edx [MEM, REG]
	movl	-0x30(%ebp), %edx
	# 0x805a32b:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x805a32e:	movl	-0x2c(%ebp), %edx [MEM, REG]
	movl	-0x2c(%ebp), %edx
	# 0x805a331:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x805a334:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805a337:	movl	%edx, 0x14(%eax) [REG, MEM]
	movl	%edx, 0x14(%eax)
	# 0x805a33a:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x805a33d:	movl	%edx, 0x18(%eax) [REG, MEM]
	movl	%edx, 0x18(%eax)
	# 0x805a340:	movl	-0x20(%ebp), %edx [MEM, REG]
	movl	-0x20(%ebp), %edx
	# 0x805a343:	movl	%edx, 0x1c(%eax) [REG, MEM]
	movl	%edx, 0x1c(%eax)
	# 0x805a346:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x805a349:	movl	%edx, 0x20(%eax) [REG, MEM]
	movl	%edx, 0x20(%eax)
	# 0x805a34c:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x805a34f:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x805a352:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805a355:	movl	%edx, 0x28(%eax) [REG, MEM]
	movl	%edx, 0x28(%eax)
	# 0x805a358:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x805a35b:	movl	%edx, 0x2c(%eax) [REG, MEM]
	movl	%edx, 0x2c(%eax)
	# 0x805a35e:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805a361:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x805a364:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805a36b:	je	0x805a372 [IMM <CODEREF>]
	je	.label_1823
	# 0x805a36d:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805a372:	addl	$0x54, %esp [IMM, REG]
.label_1823:
	addl	$0x54, %esp
	# 0x805a375:	popl	%edi [REG]
	popl	%edi
	# 0x805a376:	popl	%ebp [REG]
	popl	%ebp
	# 0x805a377:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805a37a

	# 0x805a37a:	pushl	%ebp [REG]
	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	pushl	%ebp
	# 0x805a37b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a37d:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805a380:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805a383:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805a386:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805a38b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a38e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805a391:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a394:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x805a397:	je	0x805a39e [IMM <CODEREF>]
	je	.label_1830
	# 0x805a399:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805a39c:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a39e:	calll	0x805e348 [IMM <CODEREF>]
.label_1830:
	calll	locale_charset
	# 0x805a3a3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805a3a6:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805a3a9:	pushl	$0x8063888 [IMM <DATAREF>]
	pushl	$label_1824
	# 0x805a3ae:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805a3b1:	calll	0x805e1e3 [IMM <CODEREF>]
	calll	c_strcasecmp
	# 0x805a3b6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a3b9:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a3bb:	jne	0x805a3d5 [IMM <CODEREF>]
	jne	.label_1836
	# 0x805a3bd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a3c0:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a3c3:	cmpb	$0x60, %al [IMM, REG]
	cmpb	$0x60, %al
	# 0x805a3c5:	jne	0x805a3ce [IMM <CODEREF>]
	jne	.label_1837
	# 0x805a3c7:	movl	$0x806388e, %eax [IMM <DATAREF>, REG]
	movl	$label_1828,  %eax
	# 0x805a3cc:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a3ce:	movl	$0x8063892, %eax [IMM <DATAREF>, REG]
.label_1837:
	movl	$label_1832,  %eax
	# 0x805a3d3:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a3d5:	subl	$8, %esp [IMM, REG]
.label_1836:
	subl	$8, %esp
	# 0x805a3d8:	pushl	$0x8063896 [IMM <DATAREF>]
	pushl	$label_1835
	# 0x805a3dd:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805a3e0:	calll	0x805e1e3 [IMM <CODEREF>]
	calll	c_strcasecmp
	# 0x805a3e5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a3e8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a3ea:	jne	0x805a404 [IMM <CODEREF>]
	jne	.label_1838
	# 0x805a3ec:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a3ef:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a3f2:	cmpb	$0x60, %al [IMM, REG]
	cmpb	$0x60, %al
	# 0x805a3f4:	jne	0x805a3fd [IMM <CODEREF>]
	jne	.label_1831
	# 0x805a3f6:	movl	$0x806389e, %eax [IMM <DATAREF>, REG]
	movl	$label_1826,  %eax
	# 0x805a3fb:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a3fd:	movl	$0x80638a2, %eax [IMM <DATAREF>, REG]
.label_1831:
	movl	$label_1833,  %eax
	# 0x805a402:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a404:	cmpl	$9, 0xc(%ebp) [IMM, MEM]
.label_1838:
	cmpl	$9, 0xc(%ebp)
	# 0x805a408:	jne	0x805a411 [IMM <CODEREF>]
	jne	.label_1825
	# 0x805a40a:	movl	$0x80638a5, %eax [IMM <DATAREF>, REG]
	movl	$label_1829,  %eax
	# 0x805a40f:	jmp	0x805a416 [IMM <CODEREF>]
	jmp	.label_1827
	# 0x805a411:	movl	$0x80638a7, %eax [IMM <DATAREF>, REG]
.label_1825:
	movl	$label_1834,  %eax
	# 0x805a416:	leave	 []
.label_1827:
	leave	
	# 0x805a417:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805a418

	# 0x805a418:	pushl	%ebp [REG]
	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	pushl	%ebp
	# 0x805a419:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805a41b:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805a41c:	subl	$0x64, %esp [IMM, REG]
	subl	$0x64, %esp
	# 0x805a41f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805a422:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805a425:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805a428:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x805a42b:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x805a42e:	movl	%eax, -0x54(%ebp) [REG, MEM]
	movl	%eax, -0x54(%ebp)
	# 0x805a431:	movl	0x24(%ebp), %eax [MEM, REG]
	movl	0x24(%ebp), %eax
	# 0x805a434:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x805a437:	movl	0x28(%ebp), %eax [MEM, REG]
	movl	0x28(%ebp), %eax
	# 0x805a43a:	movl	%eax, -0x5c(%ebp) [REG, MEM]
	movl	%eax, -0x5c(%ebp)
	# 0x805a43d:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805a443:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805a446:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805a448:	movl	$0, -0x34(%ebp) [IMM, MEM]
	movl	$0, -0x34(%ebp)
	# 0x805a44f:	movl	$0, -0x30(%ebp) [IMM, MEM]
	movl	$0, -0x30(%ebp)
	# 0x805a456:	movl	$0, -0x2c(%ebp) [IMM, MEM]
	movl	$0, -0x2c(%ebp)
	# 0x805a45d:	movl	$0, -0x28(%ebp) [IMM, MEM]
	movl	$0, -0x28(%ebp)
	# 0x805a464:	movb	$0, -0x48(%ebp) [IMM, MEM]
	movb	$0, -0x48(%ebp)
	# 0x805a468:	calll	0x80497c0 [IMM <CODEREF>]
	calll	__ctype_get_mb_cur_max
	# 0x805a46d:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x805a470:	sete	%al [REG]
	sete	%al
	# 0x805a473:	movb	%al, -0x3d(%ebp) [REG, MEM]
	movb	%al, -0x3d(%ebp)
	# 0x805a476:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x805a479:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x805a47c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a47e:	setne	%al [REG]
	setne	%al
	# 0x805a481:	movb	%al, -0x47(%ebp) [REG, MEM]
	movb	%al, -0x47(%ebp)
	# 0x805a484:	movb	$0, -0x46(%ebp) [IMM, MEM]
	movb	$0, -0x46(%ebp)
	# 0x805a488:	movb	$0, -0x45(%ebp) [IMM, MEM]
	movb	$0, -0x45(%ebp)
	# 0x805a48c:	movb	$1, -0x44(%ebp) [IMM, MEM]
	movb	$1, -0x44(%ebp)
	# 0x805a490:	cmpl	$0xa, 0x18(%ebp) [IMM, MEM]
.label_1917:
	cmpl	$0xa, 0x18(%ebp)
	# 0x805a494:	ja	0x805a5dc [IMM <CODEREF>]
	ja	.label_1879
	# 0x805a49a:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805a49d:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805a4a0:	addl	$0x80638ac, %eax [IMM <DATAREF>, REG]
	addl	$label_1883,  %eax
	# 0x805a4a5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805a4a7:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x805a4a9:	movl	$5, 0x18(%ebp) [IMM, MEM]
.label_2533:
	movl	$5, 0x18(%ebp)
	# 0x805a4b0:	movb	$1, -0x47(%ebp) [IMM, MEM]
	movb	$1, -0x47(%ebp)
	# 0x805a4b4:	movzbl	-0x47(%ebp), %eax [MEM, REG]
.label_2532:
	movzbl	-0x47(%ebp), %eax
	# 0x805a4b8:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805a4bb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a4bd:	je	0x805a4d6 [IMM <CODEREF>]
	je	.label_1889
	# 0x805a4bf:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a4c2:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a4c5:	jae	0x805a4d2 [IMM <CODEREF>]
	jae	.label_1893
	# 0x805a4c7:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a4ca:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a4cd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a4cf:	movb	$0x22, 0(%eax) [IMM, MEM]
	movb	$0x22, 0(%eax)
	# 0x805a4d2:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1893:
	addl	$1, -0x34(%ebp)
	# 0x805a4d6:	movb	$1, -0x48(%ebp) [IMM, MEM]
.label_1889:
	movb	$1, -0x48(%ebp)
	# 0x805a4da:	movl	$0x80638a5, -0x2c(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_1829, -44(%ebp)
	# 0x805a4e1:	movl	$1, -0x28(%ebp) [IMM, MEM]
	movl	$1, -0x28(%ebp)
	# 0x805a4e8:	jmp	0x805a5e1 [IMM <CODEREF>]
	jmp	.label_1900
	# 0x805a4ed:	movb	$1, -0x48(%ebp) [IMM, MEM]
.label_2534:
	movb	$1, -0x48(%ebp)
	# 0x805a4f1:	movb	$0, -0x47(%ebp) [IMM, MEM]
	movb	$0, -0x47(%ebp)
	# 0x805a4f5:	jmp	0x805a5e1 [IMM <CODEREF>]
	jmp	.label_1900
	# 0x805a4fa:	cmpl	$0xa, 0x18(%ebp) [IMM, MEM]
.label_2535:
	cmpl	$0xa, 0x18(%ebp)
	# 0x805a4fe:	je	0x805a52c [IMM <CODEREF>]
	je	.label_1907
	.section	.text
	.align	32
	#Procedure 0x805a500
	.globl sub_805a500
	.type sub_805a500, @function
sub_805a500:

	# 0x805a500:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805a503:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805a506:	pushl	$0x80638a9 [IMM <DATAREF>]
	pushl	$label_1967
	# 0x805a50b:	calll	0x805a37a [IMM <CODEREF>]
	calll	gettext_quote
	# 0x805a510:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a513:	movl	%eax, -0x58(%ebp) [REG, MEM]
	movl	%eax, -0x58(%ebp)
	# 0x805a516:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805a519:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805a51c:	pushl	$0x80638a7 [IMM <DATAREF>]
	pushl	$label_1834
	# 0x805a521:	calll	0x805a37a [IMM <CODEREF>]
	calll	gettext_quote
	# 0x805a526:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a529:	movl	%eax, -0x5c(%ebp) [REG, MEM]
	movl	%eax, -0x5c(%ebp)
	# 0x805a52c:	movzbl	-0x47(%ebp), %eax [MEM, REG]
.label_1907:
	movzbl	-0x47(%ebp), %eax
	# 0x805a530:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805a533:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a535:	je	0x805a569 [IMM <CODEREF>]
	je	.label_1920
	# 0x805a537:	movl	-0x58(%ebp), %eax [MEM, REG]
	movl	-0x58(%ebp), %eax
	# 0x805a53a:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805a53d:	jmp	0x805a55f [IMM <CODEREF>]
	jmp	.label_1921
	# 0x805a53f:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1932:
	movl	-0x34(%ebp), %eax
	# 0x805a542:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a545:	jae	0x805a557 [IMM <CODEREF>]
	jae	.label_1925
	# 0x805a547:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a54a:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a54d:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805a54f:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805a552:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a555:	movb	%al, 0(%edx) [REG, MEM]
	movb	%al, 0(%edx)
	# 0x805a557:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1925:
	addl	$1, -0x34(%ebp)
	# 0x805a55b:	addl	$1, -0x2c(%ebp) [IMM, MEM]
	addl	$1, -0x2c(%ebp)
	# 0x805a55f:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1921:
	movl	-0x2c(%ebp), %eax
	# 0x805a562:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a565:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a567:	jne	0x805a53f [IMM <CODEREF>]
	jne	.label_1932
	# 0x805a569:	movb	$1, -0x48(%ebp) [IMM, MEM]
.label_1920:
	movb	$1, -0x48(%ebp)
	# 0x805a56d:	movl	-0x5c(%ebp), %eax [MEM, REG]
	movl	-0x5c(%ebp), %eax
	# 0x805a570:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805a573:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805a576:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805a579:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805a57e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a581:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805a584:	jmp	0x805a5e1 [IMM <CODEREF>]
	jmp	.label_1900
	# 0x805a586:	movb	$1, -0x48(%ebp) [IMM, MEM]
.label_2530:
	movb	$1, -0x48(%ebp)
	# 0x805a58a:	movb	$1, -0x47(%ebp) [IMM, MEM]
.label_2529:
	movb	$1, -0x47(%ebp)
	# 0x805a58e:	movzbl	-0x47(%ebp), %eax [MEM, REG]
.label_2531:
	movzbl	-0x47(%ebp), %eax
	# 0x805a592:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805a595:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a597:	je	0x805a59d [IMM <CODEREF>]
	je	.label_1944
	# 0x805a599:	movb	$1, -0x48(%ebp) [IMM, MEM]
	movb	$1, -0x48(%ebp)
	# 0x805a59d:	movl	$2, 0x18(%ebp) [IMM, MEM]
.label_1944:
	movl	$2, 0x18(%ebp)
	# 0x805a5a4:	movzbl	-0x47(%ebp), %eax [MEM, REG]
	movzbl	-0x47(%ebp), %eax
	# 0x805a5a8:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805a5ab:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a5ad:	je	0x805a5c6 [IMM <CODEREF>]
	je	.label_1948
	# 0x805a5af:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a5b2:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a5b5:	jae	0x805a5c2 [IMM <CODEREF>]
	jae	.label_1847
	# 0x805a5b7:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a5ba:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a5bd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a5bf:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805a5c2:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1847:
	addl	$1, -0x34(%ebp)
	# 0x805a5c6:	movl	$0x80638a7, -0x2c(%ebp) [IMM <DATAREF>, MEM]
.label_1948:
	movl	$label_1834, -44(%ebp)
	# 0x805a5cd:	movl	$1, -0x28(%ebp) [IMM, MEM]
	movl	$1, -0x28(%ebp)
	# 0x805a5d4:	jmp	0x805a5e1 [IMM <CODEREF>]
	jmp	.label_1900
	# 0x805a5d6:	movb	$0, -0x47(%ebp) [IMM, MEM]
.label_2528:
	movb	$0, -0x47(%ebp)
	# 0x805a5da:	jmp	0x805a5e1 [IMM <CODEREF>]
	jmp	.label_1900
	# 0x805a5dc:	calll	0x8049b10 [IMM <CODEREF>]
.label_1879:
	calll	abort
	# 0x805a5e1:	movl	$0, -0x38(%ebp) [IMM, MEM]
.label_1900:
	movl	$0, -0x38(%ebp)
	# 0x805a5e8:	jmp	0x805ae8d [IMM <CODEREF>]
	jmp	.label_1945
	# 0x805a5ed:	movb	$0, -0x41(%ebp) [IMM, MEM]
.label_1888:
	movb	$0, -0x41(%ebp)
	# 0x805a5f1:	movb	$0, -0x40(%ebp) [IMM, MEM]
	movb	$0, -0x40(%ebp)
	# 0x805a5f5:	movb	$0, -0x3f(%ebp) [IMM, MEM]
	movb	$0, -0x3f(%ebp)
	# 0x805a5f9:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
	cmpb	$0, -0x48(%ebp)
	# 0x805a5fd:	je	0x805a669 [IMM <CODEREF>]
	je	.label_1839
	# 0x805a5ff:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805a603:	je	0x805a669 [IMM <CODEREF>]
	je	.label_1839
	# 0x805a605:	cmpl	$0, -0x28(%ebp) [IMM, MEM]
	cmpl	$0, -0x28(%ebp)
	# 0x805a609:	je	0x805a669 [IMM <CODEREF>]
	je	.label_1839
	# 0x805a60b:	movl	-0x38(%ebp), %edx [MEM, REG]
	movl	-0x38(%ebp), %edx
	# 0x805a60e:	movl	-0x28(%ebp), %eax [MEM, REG]
	movl	-0x28(%ebp), %eax
	# 0x805a611:	leal	0(%edx, %eax), %ebx [MEM, REG]
	leal	0(%edx, %eax), %ebx
	# 0x805a614:	cmpl	$-1, 0x14(%ebp) [IMM, MEM]
	cmpl	$-1, 0x14(%ebp)
	# 0x805a618:	jne	0x805a636 [IMM <CODEREF>]
	jne	.label_1843
	# 0x805a61a:	cmpl	$1, -0x28(%ebp) [IMM, MEM]
	cmpl	$1, -0x28(%ebp)
	# 0x805a61e:	jbe	0x805a636 [IMM <CODEREF>]
	jbe	.label_1843
	# 0x805a620:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805a623:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805a626:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805a62b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a62e:	movl	%eax, 0x14(%ebp) [REG, MEM]
	movl	%eax, 0x14(%ebp)
	# 0x805a631:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805a634:	jmp	0x805a639 [IMM <CODEREF>]
	jmp	.label_1910
	# 0x805a636:	movl	0x14(%ebp), %eax [MEM, REG]
.label_1843:
	movl	0x14(%ebp), %eax
	# 0x805a639:	cmpl	%eax, %ebx [REG, REG]
.label_1910:
	cmpl	%eax, %ebx
	# 0x805a63b:	ja	0x805a669 [IMM <CODEREF>]
	ja	.label_1839
	# 0x805a63d:	movl	-0x50(%ebp), %edx [MEM, REG]
	movl	-0x50(%ebp), %edx
	# 0x805a640:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a643:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a645:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805a648:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805a64b:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805a64e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805a64f:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x805a654:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805a657:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a659:	jne	0x805a669 [IMM <CODEREF>]
	jne	.label_1839
	# 0x805a65b:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a65f:	jne	0x805af86 [IMM <CODEREF>]
	jne	.label_1865
	# 0x805a665:	movb	$1, -0x41(%ebp) [IMM, MEM]
	movb	$1, -0x41(%ebp)
	# 0x805a669:	movl	-0x50(%ebp), %edx [MEM, REG]
.label_1839:
	movl	-0x50(%ebp), %edx
	# 0x805a66c:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a66f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a671:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a674:	movb	%al, -0x43(%ebp) [REG, MEM]
	movb	%al, -0x43(%ebp)
	# 0x805a677:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805a67b:	cmpl	$0x7e, %eax [IMM, REG]
	cmpl	$0x7e, %eax
	# 0x805a67e:	ja	0x805a9f5 [IMM <CODEREF>]
	ja	.label_1868
	# 0x805a684:	movl	0x80638d8(, %eax, 4), %eax [MEM, REG]
	movl	label_1873(, %eax, 4),  %eax
	# 0x805a68b:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x805a68d:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
.label_2536:
	cmpb	$0, -0x48(%ebp)
	# 0x805a691:	je	0x805a782 [IMM <CODEREF>]
	je	.label_1877
	# 0x805a697:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a69b:	jne	0x805af89 [IMM <CODEREF>]
	jne	.label_1881
	# 0x805a6a1:	movb	$1, -0x40(%ebp) [IMM, MEM]
	movb	$1, -0x40(%ebp)
	# 0x805a6a5:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805a6a9:	jne	0x805a6ff [IMM <CODEREF>]
	jne	.label_1884
	# 0x805a6ab:	movzbl	-0x46(%ebp), %eax [MEM, REG]
	movzbl	-0x46(%ebp), %eax
	# 0x805a6af:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805a6b2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a6b4:	je	0x805a6ff [IMM <CODEREF>]
	je	.label_1884
	# 0x805a6b6:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6b9:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a6bc:	jae	0x805a6c9 [IMM <CODEREF>]
	jae	.label_1890
	# 0x805a6be:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a6c1:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6c4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a6c6:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805a6c9:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1890:
	addl	$1, -0x34(%ebp)
	# 0x805a6cd:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6d0:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a6d3:	jae	0x805a6e0 [IMM <CODEREF>]
	jae	.label_1897
	# 0x805a6d5:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a6d8:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6db:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a6dd:	movb	$0x24, 0(%eax) [IMM, MEM]
	movb	$0x24, 0(%eax)
	# 0x805a6e0:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1897:
	addl	$1, -0x34(%ebp)
	# 0x805a6e4:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6e7:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a6ea:	jae	0x805a6f7 [IMM <CODEREF>]
	jae	.label_1902
	# 0x805a6ec:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a6ef:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a6f2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a6f4:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805a6f7:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1902:
	addl	$1, -0x34(%ebp)
	# 0x805a6fb:	movb	$1, -0x46(%ebp) [IMM, MEM]
	movb	$1, -0x46(%ebp)
	# 0x805a6ff:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1884:
	movl	-0x34(%ebp), %eax
	# 0x805a702:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a705:	jae	0x805a712 [IMM <CODEREF>]
	jae	.label_1909
	# 0x805a707:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a70a:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a70d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a70f:	movb	$0x5c, 0(%eax) [IMM, MEM]
	movb	$0x5c, 0(%eax)
	# 0x805a712:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1909:
	addl	$1, -0x34(%ebp)
	# 0x805a716:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805a71a:	je	0x805a779 [IMM <CODEREF>]
	je	.label_1914
	# 0x805a71c:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a71f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805a722:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	.section	.text
	.align	32
	#Procedure 0x805a726
	.globl sub_805a726
	.type sub_805a726, @function
sub_805a726:

	# 0x805a726:	pushl	%edx [REG]
	pushl	%edx
	# 0x805a727:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a72a:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805a72d:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a730:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a732:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a735:	cmpb	$0x2f, %al [IMM, REG]
	cmpb	$0x2f, %al
	# 0x805a737:	jle	0x805a779 [IMM <CODEREF>]
	jle	.label_1914
	# 0x805a739:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a73c:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805a73f:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a742:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a744:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a747:	cmpb	$0x39, %al [IMM, REG]
	cmpb	$0x39, %al
	# 0x805a749:	jg	0x805a779 [IMM <CODEREF>]
	jg	.label_1914
	# 0x805a74b:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a74e:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a751:	jae	0x805a75e [IMM <CODEREF>]
	jae	.label_1968
	# 0x805a753:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a756:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a759:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a75b:	movb	$0x30, 0(%eax) [IMM, MEM]
	movb	$0x30, 0(%eax)
	# 0x805a75e:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1968:
	addl	$1, -0x34(%ebp)
	# 0x805a762:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a765:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a768:	jae	0x805a775 [IMM <CODEREF>]
	jae	.label_1969
	# 0x805a76a:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a76d:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a770:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a772:	movb	$0x30, 0(%eax) [IMM, MEM]
	movb	$0x30, 0(%eax)
	# 0x805a775:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1969:
	addl	$1, -0x34(%ebp)
	# 0x805a779:	movb	$0x30, -0x43(%ebp) [IMM, MEM]
.label_1914:
	movb	$0x30, -0x43(%ebp)
	# 0x805a77d:	jmp	0x805ad28 [IMM <CODEREF>]
	jmp	.label_1937
	# 0x805a782:	movl	0x1c(%ebp), %eax [MEM, REG]
.label_1877:
	movl	0x1c(%ebp), %eax
	# 0x805a785:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805a788:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a78a:	je	0x805ad28 [IMM <CODEREF>]
	je	.label_1937
	# 0x805a790:	jmp	0x805ae89 [IMM <CODEREF>]
	jmp	.label_1870
	# 0x805a795:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2549:
	movl	0x18(%ebp), %eax
	# 0x805a798:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x805a79b:	je	0x805a7a7 [IMM <CODEREF>]
	je	.label_1939
	# 0x805a79d:	cmpl	$5, %eax [IMM, REG]
	cmpl	$5, %eax
	# 0x805a7a0:	je	0x805a7b6 [IMM <CODEREF>]
	je	.label_1953
	# 0x805a7a2:	jmp	0x805a896 [IMM <CODEREF>]
	jmp	.label_1950
	# 0x805a7a7:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
.label_1939:
	cmpb	$0, -0x47(%ebp)
	# 0x805a7ab:	je	0x805a88f [IMM <CODEREF>]
	je	.label_1951
	# 0x805a7b1:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805a7b6:	movl	0x1c(%ebp), %eax [MEM, REG]
.label_1953:
	movl	0x1c(%ebp), %eax
	# 0x805a7b9:	andl	$4, %eax [IMM, REG]
	andl	$4, %eax
	# 0x805a7bc:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805a7be:	je	0x805a895 [IMM <CODEREF>]
	je	.label_1956
	# 0x805a7c4:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a7c7:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x805a7ca:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x805a7cd:	jae	0x805a895 [IMM <CODEREF>]
	jae	.label_1956
	# 0x805a7d3:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a7d6:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805a7d9:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a7dc:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a7de:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a7e1:	cmpb	$0x3f, %al [IMM, REG]
	cmpb	$0x3f, %al
	# 0x805a7e3:	jne	0x805a895 [IMM <CODEREF>]
	jne	.label_1956
	# 0x805a7e9:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a7ec:	leal	2(%eax), %edx [MEM, REG]
	leal	2(%eax), %edx
	# 0x805a7ef:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a7f2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a7f4:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a7f7:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805a7fa:	subl	$0x21, %eax [IMM, REG]
	subl	$0x21, %eax
	# 0x805a7fd:	cmpl	$0x1d, %eax [IMM, REG]
	cmpl	$0x1d, %eax
	# 0x805a800:	ja	0x805a88c [IMM <CODEREF>]
	ja	.label_1962
	# 0x805a806:	movl	0x8063ad4(, %eax, 4), %eax [MEM, REG]
	movl	label_1840(, %eax, 4),  %eax
	# 0x805a80d:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x805a80f:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
.label_2552:
	cmpb	$0, -0x47(%ebp)
	# 0x805a813:	jne	0x805af8c [IMM <CODEREF>]
	jne	.label_1844
	# 0x805a819:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805a81c:	leal	2(%eax), %edx [MEM, REG]
	leal	2(%eax), %edx
	# 0x805a81f:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a822:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a824:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a827:	movb	%al, -0x43(%ebp) [REG, MEM]
	movb	%al, -0x43(%ebp)
	# 0x805a82a:	addl	$2, -0x38(%ebp) [IMM, MEM]
	addl	$2, -0x38(%ebp)
	# 0x805a82e:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a831:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a834:	jae	0x805a841 [IMM <CODEREF>]
	jae	.label_1855
	# 0x805a836:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a839:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a83c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a83e:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x805a841:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1855:
	addl	$1, -0x34(%ebp)
	# 0x805a845:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a848:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a84b:	jae	0x805a858 [IMM <CODEREF>]
	jae	.label_1942
	# 0x805a84d:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a850:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a853:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a855:	movb	$0x22, 0(%eax) [IMM, MEM]
	movb	$0x22, 0(%eax)
	# 0x805a858:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1942:
	addl	$1, -0x34(%ebp)
	# 0x805a85c:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a85f:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a862:	jae	0x805a86f [IMM <CODEREF>]
	jae	.label_1908
	# 0x805a864:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a867:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a86a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a86c:	movb	$0x22, 0(%eax) [IMM, MEM]
	movb	$0x22, 0(%eax)
	# 0x805a86f:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1908:
	addl	$1, -0x34(%ebp)
	# 0x805a873:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a876:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a879:	jae	0x805a886 [IMM <CODEREF>]
	jae	.label_1861
	# 0x805a87b:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a87e:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a881:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a883:	movb	$0x3f, 0(%eax) [IMM, MEM]
	movb	$0x3f, 0(%eax)
	# 0x805a886:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1861:
	addl	$1, -0x34(%ebp)
	# 0x805a88a:	jmp	0x805a88d [IMM <CODEREF>]
	jmp	.label_1874
	# 0x805a88c:	nop	 []
.label_1962:
	nop	
	# 0x805a88d:	jmp	0x805a895 [IMM <CODEREF>]
.label_1874:
	jmp	.label_1956
	# 0x805a88f:	nop	 []
.label_1951:
	nop	
	# 0x805a890:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805a895:	nop	 []
.label_1956:
	nop	
	# 0x805a896:	jmp	0x805ad38 [IMM <CODEREF>]
.label_1950:
	jmp	.label_1878
	# 0x805a89b:	movb	$0x61, -0x42(%ebp) [IMM, MEM]
.label_2537:
	movb	$0x61, -0x42(%ebp)
	# 0x805a89f:	jmp	0x805a907 [IMM <CODEREF>]
	jmp	.label_1871
	# 0x805a8a1:	movb	$0x62, -0x42(%ebp) [IMM, MEM]
.label_2538:
	movb	$0x62, -0x42(%ebp)
	# 0x805a8a5:	jmp	0x805a907 [IMM <CODEREF>]
	jmp	.label_1871
	# 0x805a8a7:	movb	$0x66, -0x42(%ebp) [IMM, MEM]
.label_2542:
	movb	$0x66, -0x42(%ebp)
	# 0x805a8ab:	jmp	0x805a907 [IMM <CODEREF>]
	jmp	.label_1871
	# 0x805a8ad:	movb	$0x6e, -0x42(%ebp) [IMM, MEM]
.label_2540:
	movb	$0x6e, -0x42(%ebp)
	# 0x805a8b1:	jmp	0x805a8f7 [IMM <CODEREF>]
	jmp	.label_1887
	# 0x805a8b3:	movb	$0x72, -0x42(%ebp) [IMM, MEM]
.label_2543:
	movb	$0x72, -0x42(%ebp)
	# 0x805a8b7:	jmp	0x805a8f7 [IMM <CODEREF>]
	jmp	.label_1887
	# 0x805a8b9:	movb	$0x74, -0x42(%ebp) [IMM, MEM]
.label_2539:
	movb	$0x74, -0x42(%ebp)
	# 0x805a8bd:	jmp	0x805a8f7 [IMM <CODEREF>]
	jmp	.label_1887
	# 0x805a8bf:	movb	$0x76, -0x42(%ebp) [IMM, MEM]
.label_2541:
	movb	$0x76, -0x42(%ebp)
	# 0x805a8c3:	jmp	0x805a907 [IMM <CODEREF>]
	jmp	.label_1871
	# 0x805a8c5:	movzbl	-0x43(%ebp), %eax [MEM, REG]
.label_2550:
	movzbl	-0x43(%ebp), %eax
	# 0x805a8c9:	movb	%al, -0x42(%ebp) [REG, MEM]
	movb	%al, -0x42(%ebp)
	# 0x805a8cc:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805a8d0:	jne	0x805a8e1 [IMM <CODEREF>]
	jne	.label_1895
	# 0x805a8d2:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a8d6:	je	0x805ae16 [IMM <CODEREF>]
	je	.label_1961
	# 0x805a8dc:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805a8e1:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
.label_1895:
	cmpb	$0, -0x48(%ebp)
	# 0x805a8e5:	je	0x805a8f7 [IMM <CODEREF>]
	je	.label_1887
	# 0x805a8e7:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a8eb:	je	0x805a8f7 [IMM <CODEREF>]
	je	.label_1887
	# 0x805a8ed:	cmpl	$0, -0x28(%ebp) [IMM, MEM]
	cmpl	$0, -0x28(%ebp)
	# 0x805a8f1:	jne	0x805ae19 [IMM <CODEREF>]
	jne	.label_1898
	# 0x805a8f7:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
.label_1887:
	cmpl	$2, 0x18(%ebp)
	# 0x805a8fb:	jne	0x805a907 [IMM <CODEREF>]
	jne	.label_1871
	# 0x805a8fd:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a901:	jne	0x805af8f [IMM <CODEREF>]
	jne	.label_1963
	# 0x805a907:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
.label_1871:
	cmpb	$0, -0x48(%ebp)
	# 0x805a90b:	je	0x805ad2b [IMM <CODEREF>]
	je	.label_1851
	# 0x805a911:	movzbl	-0x42(%ebp), %eax [MEM, REG]
	movzbl	-0x42(%ebp), %eax
	# 0x805a915:	movb	%al, -0x43(%ebp) [REG, MEM]
	movb	%al, -0x43(%ebp)
	# 0x805a918:	jmp	0x805ad95 [IMM <CODEREF>]
	jmp	.label_1913
	# 0x805a91d:	cmpl	$-1, 0x14(%ebp) [IMM, MEM]
.label_2551:
	cmpl	$-1, 0x14(%ebp)
	# 0x805a921:	jne	0x805a933 [IMM <CODEREF>]
	jne	.label_1916
	# 0x805a923:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805a926:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805a929:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805a92c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805a92e:	setne	%al [REG]
	setne	%al
	# 0x805a931:	jmp	0x805a93a [IMM <CODEREF>]
	jmp	.label_1918
	# 0x805a933:	cmpl	$1, 0x14(%ebp) [IMM, MEM]
.label_1916:
	cmpl	$1, 0x14(%ebp)
	# 0x805a937:	setne	%al [REG]
	setne	%al
	# 0x805a93a:	testb	%al, %al [REG, REG]
.label_1918:
	testb	%al, %al
	# 0x805a93c:	jne	0x805ad2e [IMM <CODEREF>]
	jne	.label_1924
	# 0x805a942:	cmpl	$0, -0x38(%ebp) [IMM, MEM]
.label_2546:
	cmpl	$0, -0x38(%ebp)
	# 0x805a946:	jne	0x805ad31 [IMM <CODEREF>]
	jne	.label_1943
	# 0x805a94c:	movb	$1, -0x3f(%ebp) [IMM, MEM]
.label_2544:
	movb	$1, -0x3f(%ebp)
	# 0x805a950:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
.label_2545:
	cmpl	$2, 0x18(%ebp)
	# 0x805a954:	jne	0x805ad34 [IMM <CODEREF>]
	jne	.label_1931
	# 0x805a95a:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a95e:	je	0x805ad34 [IMM <CODEREF>]
	je	.label_1931
	# 0x805a964:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805a969:	movb	$1, -0x45(%ebp) [IMM, MEM]
.label_2548:
	movb	$1, -0x45(%ebp)
	# 0x805a96d:	movb	$1, -0x3f(%ebp) [IMM, MEM]
	movb	$1, -0x3f(%ebp)
	# 0x805a971:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805a975:	jne	0x805ad37 [IMM <CODEREF>]
	jne	.label_1935
	# 0x805a97b:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805a97f:	jne	0x805af92 [IMM <CODEREF>]
	jne	.label_1938
	# 0x805a985:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805a989:	je	0x805a99e [IMM <CODEREF>]
	je	.label_1940
	# 0x805a98b:	cmpl	$0, -0x30(%ebp) [IMM, MEM]
	cmpl	$0, -0x30(%ebp)
	# 0x805a98f:	jne	0x805a99e [IMM <CODEREF>]
	jne	.label_1940
	# 0x805a991:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805a994:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805a997:	movl	$0, 0xc(%ebp) [IMM, MEM]
	movl	$0, 0xc(%ebp)
	# 0x805a99e:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1940:
	movl	-0x34(%ebp), %eax
	# 0x805a9a1:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a9a4:	jae	0x805a9b1 [IMM <CODEREF>]
	jae	.label_1955
	# 0x805a9a6:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a9a9:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a9ac:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a9ae:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805a9b1:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1955:
	addl	$1, -0x34(%ebp)
	# 0x805a9b5:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a9b8:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a9bb:	jae	0x805a9c8 [IMM <CODEREF>]
	jae	.label_1850
	# 0x805a9bd:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a9c0:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a9c3:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a9c5:	movb	$0x5c, 0(%eax) [IMM, MEM]
	movb	$0x5c, 0(%eax)
	# 0x805a9c8:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1850:
	addl	$1, -0x34(%ebp)
	# 0x805a9cc:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a9cf:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805a9d2:	jae	0x805a9df [IMM <CODEREF>]
	jae	.label_1957
	# 0x805a9d4:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805a9d7:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805a9da:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805a9dc:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805a9df:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1957:
	addl	$1, -0x34(%ebp)
	# 0x805a9e3:	movb	$0, -0x46(%ebp) [IMM, MEM]
	movb	$0, -0x46(%ebp)
	# 0x805a9e7:	jmp	0x805ad37 [IMM <CODEREF>]
	jmp	.label_1935
	# 0x805a9ec:	movb	$1, -0x3f(%ebp) [IMM, MEM]
.label_2547:
	movb	$1, -0x3f(%ebp)
	# 0x805a9f0:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805a9f5:	cmpb	$0, -0x3d(%ebp) [IMM, MEM]
.label_1868:
	cmpb	$0, -0x3d(%ebp)
	# 0x805a9f9:	je	0x805aa29 [IMM <CODEREF>]
	je	.label_1964
	# 0x805a9fb:	movl	$1, -0x24(%ebp) [IMM, MEM]
	movl	$1, -0x24(%ebp)
	# 0x805aa02:	calll	0x8049ba0 [IMM <CODEREF>]
	calll	__ctype_b_loc
	# 0x805aa07:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805aa09:	movzbl	-0x43(%ebp), %edx [MEM, REG]
	movzbl	-0x43(%ebp), %edx
	# 0x805aa0d:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x805aa0f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805aa11:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x805aa14:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x805aa17:	andl	$0x4000, %eax [IMM, REG]
	andl	$0x4000, %eax
	# 0x805aa1c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805aa1e:	setne	%al [REG]
	setne	%al
	# 0x805aa21:	movb	%al, -0x3e(%ebp) [REG, MEM]
	movb	%al, -0x3e(%ebp)
	# 0x805aa24:	jmp	0x805ab67 [IMM <CODEREF>]
	jmp	.label_1841
	# 0x805aa29:	subl	$4, %esp [IMM, REG]
.label_1964:
	subl	$4, %esp
	# 0x805aa2c:	pushl	$8 [IMM]
	pushl	$8
	# 0x805aa2e:	pushl	$0 [IMM]
	pushl	$0
	# 0x805aa30:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x805aa33:	pushl	%eax [REG]
	pushl	%eax
	# 0x805aa34:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805aa39:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805aa3c:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x805aa43:	movb	$1, -0x3e(%ebp) [IMM, MEM]
	movb	$1, -0x3e(%ebp)
	# 0x805aa47:	cmpl	$-1, 0x14(%ebp) [IMM, MEM]
	cmpl	$-1, 0x14(%ebp)
	# 0x805aa4b:	jne	0x805aa5e [IMM <CODEREF>]
	jne	.label_1856
	# 0x805aa4d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805aa50:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805aa53:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805aa58:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805aa5b:	movl	%eax, 0x14(%ebp) [REG, MEM]
	movl	%eax, 0x14(%ebp)
	# 0x805aa5e:	movl	-0x38(%ebp), %edx [MEM, REG]
.label_1856:
	movl	-0x38(%ebp), %edx
	# 0x805aa61:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805aa64:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805aa66:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805aa69:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x805aa6b:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805aa6d:	movl	-0x38(%ebp), %edx [MEM, REG]
	movl	-0x38(%ebp), %edx
	# 0x805aa70:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805aa73:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805aa75:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805aa78:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805aa7a:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x805aa7d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805aa7e:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805aa7f:	pushl	%edx [REG]
	pushl	%edx
	# 0x805aa80:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805aa83:	pushl	%eax [REG]
	pushl	%eax
	# 0x805aa84:	calll	0x805d3ec [IMM <CODEREF>]
	calll	rpl_mbrtowc
	# 0x805aa89:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805aa8c:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805aa8f:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x805aa93:	je	0x805ab63 [IMM <CODEREF>]
	je	.label_1876
	# 0x805aa99:	cmpl	$-1, -0x1c(%ebp) [IMM, MEM]
	cmpl	$-1, -0x1c(%ebp)
	# 0x805aa9d:	jne	0x805aaa8 [IMM <CODEREF>]
	jne	.label_1882
	# 0x805aa9f:	movb	$0, -0x3e(%ebp) [IMM, MEM]
	movb	$0, -0x3e(%ebp)
	# 0x805aaa3:	jmp	0x805ab67 [IMM <CODEREF>]
	jmp	.label_1841
	# 0x805aaa8:	cmpl	$-2, -0x1c(%ebp) [IMM, MEM]
.label_1882:
	cmpl	$-2, -0x1c(%ebp)
	# 0x805aaac:	jne	0x805aae2 [IMM <CODEREF>]
	jne	.label_1886
	# 0x805aaae:	movb	$0, -0x3e(%ebp) [IMM, MEM]
	movb	$0, -0x3e(%ebp)
	# 0x805aab2:	jmp	0x805aab8 [IMM <CODEREF>]
	jmp	.label_1846
	# 0x805aab4:	addl	$1, -0x24(%ebp) [IMM, MEM]
.label_1891:
	addl	$1, -0x24(%ebp)
	# 0x805aab8:	movl	-0x38(%ebp), %edx [MEM, REG]
.label_1846:
	movl	-0x38(%ebp), %edx
	# 0x805aabb:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805aabe:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805aac0:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x805aac3:	jae	0x805ab66 [IMM <CODEREF>]
	jae	.label_1892
	# 0x805aac9:	movl	-0x38(%ebp), %edx [MEM, REG]
	movl	-0x38(%ebp), %edx
	# 0x805aacc:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805aacf:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805aad1:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805aad4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805aad6:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805aad9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805aadb:	jne	0x805aab4 [IMM <CODEREF>]
	jne	.label_1891
	# 0x805aadd:	jmp	0x805ab66 [IMM <CODEREF>]
	jmp	.label_1892
	# 0x805aae2:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
.label_1886:
	cmpb	$0, -0x47(%ebp)
	# 0x805aae6:	je	0x805ab2d [IMM <CODEREF>]
	je	.label_1903
	# 0x805aae8:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805aaec:	jne	0x805ab2d [IMM <CODEREF>]
	jne	.label_1903
	# 0x805aaee:	movl	$1, -0x20(%ebp) [IMM, MEM]
	movl	$1, -0x20(%ebp)
	# 0x805aaf5:	jmp	0x805ab25 [IMM <CODEREF>]
	jmp	.label_1905
	# 0x805aaf7:	movl	-0x38(%ebp), %edx [MEM, REG]
.label_1901:
	movl	-0x38(%ebp), %edx
	# 0x805aafa:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805aafd:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805aaff:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805ab02:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805ab04:	movl	-0x50(%ebp), %eax [MEM, REG]
	movl	-0x50(%ebp), %eax
	# 0x805ab07:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ab09:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805ab0c:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805ab0f:	subl	$0x5b, %eax [IMM, REG]
	subl	$0x5b, %eax
	# 0x805ab12:	cmpl	$0x21, %eax [IMM, REG]
	cmpl	$0x21, %eax
	# 0x805ab15:	ja	0x805ab20 [IMM <CODEREF>]
	ja	.label_1863
	# 0x805ab17:	movl	0x8063b4c(, %eax, 4), %eax [MEM, REG]
	movl	label_1915(, %eax, 4),  %eax
	# 0x805ab1e:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x805ab20:	nop	 []
.label_1863:
	nop	
	# 0x805ab21:	addl	$1, -0x20(%ebp) [IMM, MEM]
	addl	$1, -0x20(%ebp)
	# 0x805ab25:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_1905:
	movl	-0x20(%ebp), %eax
	# 0x805ab28:	cmpl	-0x1c(%ebp), %eax [MEM, REG]
	cmpl	-0x1c(%ebp), %eax
	# 0x805ab2b:	jb	0x805aaf7 [IMM <CODEREF>]
	jb	.label_1901
	# 0x805ab2d:	movl	-0x3c(%ebp), %eax [MEM, REG]
.label_1903:
	movl	-0x3c(%ebp), %eax
	# 0x805ab30:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ab33:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ab34:	calll	0x8049760 [IMM <CODEREF>]
	calll	iswprint
	# 0x805ab39:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ab3c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ab3e:	jne	0x805ab44 [IMM <CODEREF>]
	jne	.label_1923
	# 0x805ab40:	movb	$0, -0x3e(%ebp) [IMM, MEM]
	movb	$0, -0x3e(%ebp)
	# 0x805ab44:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_1923:
	movl	-0x1c(%ebp), %eax
	# 0x805ab47:	addl	%eax, -0x24(%ebp) [REG, MEM]
	addl	%eax, -0x24(%ebp)
	# 0x805ab4a:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ab4d:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x805ab50:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ab51:	calll	0x8049630 [IMM <CODEREF>]
	calll	mbsinit
	# 0x805ab56:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ab59:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ab5b:	je	0x805aa5e [IMM <CODEREF>]
	je	.label_1856
	# 0x805ab61:	jmp	0x805ab67 [IMM <CODEREF>]
	jmp	.label_1841
	# 0x805ab63:	nop	 []
.label_1876:
	nop	
	# 0x805ab64:	jmp	0x805ab67 [IMM <CODEREF>]
	jmp	.label_1841
	# 0x805ab66:	nop	 []
.label_1892:
	nop	
	# 0x805ab67:	movzbl	-0x3e(%ebp), %eax [MEM, REG]
.label_1841:
	movzbl	-0x3e(%ebp), %eax
	# 0x805ab6b:	movb	%al, -0x3f(%ebp) [REG, MEM]
	movb	%al, -0x3f(%ebp)
	# 0x805ab6e:	cmpl	$1, -0x24(%ebp) [IMM, MEM]
	cmpl	$1, -0x24(%ebp)
	# 0x805ab72:	ja	0x805ab8d [IMM <CODEREF>]
	ja	.label_1934
	# 0x805ab74:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
	cmpb	$0, -0x48(%ebp)
	# 0x805ab78:	je	0x805ad38 [IMM <CODEREF>]
	je	.label_1878
	# 0x805ab7e:	movzbl	-0x3e(%ebp), %eax [MEM, REG]
	movzbl	-0x3e(%ebp), %eax
	# 0x805ab82:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ab85:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ab87:	je	0x805ad38 [IMM <CODEREF>]
	je	.label_1878
	# 0x805ab8d:	movl	-0x38(%ebp), %edx [MEM, REG]
.label_1934:
	movl	-0x38(%ebp), %edx
	# 0x805ab90:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805ab93:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ab95:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805ab98:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
.label_1858:
	cmpb	$0, -0x48(%ebp)
	# 0x805ab9c:	je	0x805ac82 [IMM <CODEREF>]
	je	.label_1947
	# 0x805aba2:	movzbl	-0x3e(%ebp), %eax [MEM, REG]
	movzbl	-0x3e(%ebp), %eax
	# 0x805aba6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805aba9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805abab:	je	0x805ac82 [IMM <CODEREF>]
	je	.label_1947
	# 0x805abb1:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805abb5:	jne	0x805af98 [IMM <CODEREF>]
	jne	.label_1849
	# 0x805abbb:	movb	$1, -0x40(%ebp) [IMM, MEM]
	movb	$1, -0x40(%ebp)
	# 0x805abbf:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805abc3:	jne	0x805ac19 [IMM <CODEREF>]
	jne	.label_1867
	# 0x805abc5:	movzbl	-0x46(%ebp), %eax [MEM, REG]
	movzbl	-0x46(%ebp), %eax
	# 0x805abc9:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805abcc:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805abce:	je	0x805ac19 [IMM <CODEREF>]
	je	.label_1867
	# 0x805abd0:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805abd3:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805abd6:	jae	0x805abe3 [IMM <CODEREF>]
	jae	.label_1857
	# 0x805abd8:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805abdb:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805abde:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805abe0:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805abe3:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1857:
	addl	$1, -0x34(%ebp)
	# 0x805abe7:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805abea:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805abed:	jae	0x805abfa [IMM <CODEREF>]
	jae	.label_1960
	# 0x805abef:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805abf2:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805abf5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805abf7:	movb	$0x24, 0(%eax) [IMM, MEM]
	movb	$0x24, 0(%eax)
	# 0x805abfa:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1960:
	addl	$1, -0x34(%ebp)
	# 0x805abfe:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac01:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ac04:	jae	0x805ac11 [IMM <CODEREF>]
	jae	.label_1965
	# 0x805ac06:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ac09:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac0c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ac0e:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805ac11:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1965:
	addl	$1, -0x34(%ebp)
	# 0x805ac15:	movb	$1, -0x46(%ebp) [IMM, MEM]
	movb	$1, -0x46(%ebp)
	# 0x805ac19:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1867:
	movl	-0x34(%ebp), %eax
	# 0x805ac1c:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ac1f:	jae	0x805ac2c [IMM <CODEREF>]
	jae	.label_1912
	# 0x805ac21:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ac24:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac27:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ac29:	movb	$0x5c, 0(%eax) [IMM, MEM]
	movb	$0x5c, 0(%eax)
	# 0x805ac2c:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1912:
	addl	$1, -0x34(%ebp)
	# 0x805ac30:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac33:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ac36:	jae	0x805ac4c [IMM <CODEREF>]
	jae	.label_1852
	# 0x805ac38:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ac3b:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac3e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ac40:	movzbl	-0x43(%ebp), %edx [MEM, REG]
	movzbl	-0x43(%ebp), %edx
	# 0x805ac44:	shrb	$6, %dl [IMM, REG]
	shrb	$6, %dl
	# 0x805ac47:	addl	$0x30, %edx [IMM, REG]
	addl	$0x30, %edx
	# 0x805ac4a:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805ac4c:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1852:
	addl	$1, -0x34(%ebp)
	# 0x805ac50:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac53:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ac56:	jae	0x805ac6f [IMM <CODEREF>]
	jae	.label_1862
	# 0x805ac58:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ac5b:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac5e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ac60:	movzbl	-0x43(%ebp), %edx [MEM, REG]
	movzbl	-0x43(%ebp), %edx
	# 0x805ac64:	shrb	$3, %dl [IMM, REG]
	shrb	$3, %dl
	# 0x805ac67:	andl	$7, %edx [IMM, REG]
	andl	$7, %edx
	# 0x805ac6a:	addl	$0x30, %edx [IMM, REG]
	addl	$0x30, %edx
	# 0x805ac6d:	movb	%dl, 0(%eax) [REG, MEM]
	movb	%dl, 0(%eax)
	# 0x805ac6f:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1862:
	addl	$1, -0x34(%ebp)
	# 0x805ac73:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805ac77:	andl	$7, %eax [IMM, REG]
	andl	$7, %eax
	# 0x805ac7a:	addl	$0x30, %eax [IMM, REG]
	addl	$0x30, %eax
	# 0x805ac7d:	movb	%al, -0x43(%ebp) [REG, MEM]
	movb	%al, -0x43(%ebp)
	# 0x805ac80:	jmp	0x805aca3 [IMM <CODEREF>]
	jmp	.label_1869
	# 0x805ac82:	cmpb	$0, -0x41(%ebp) [IMM, MEM]
.label_1947:
	cmpb	$0, -0x41(%ebp)
	# 0x805ac86:	je	0x805aca3 [IMM <CODEREF>]
	je	.label_1869
	# 0x805ac88:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac8b:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ac8e:	jae	0x805ac9b [IMM <CODEREF>]
	jae	.label_1875
	# 0x805ac90:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ac93:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ac96:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ac98:	movb	$0x5c, 0(%eax) [IMM, MEM]
	movb	$0x5c, 0(%eax)
	# 0x805ac9b:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1875:
	addl	$1, -0x34(%ebp)
	# 0x805ac9f:	movb	$0, -0x41(%ebp) [IMM, MEM]
	movb	$0, -0x41(%ebp)
	# 0x805aca3:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_1869:
	movl	-0x38(%ebp), %eax
	# 0x805aca6:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805aca9:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x805acac:	jae	0x805ad22 [IMM <CODEREF>]
	jae	.label_1885
	# 0x805acae:	cmpb	$0, -0x46(%ebp) [IMM, MEM]
	cmpb	$0, -0x46(%ebp)
	# 0x805acb2:	je	0x805acf1 [IMM <CODEREF>]
	je	.label_1872
	# 0x805acb4:	movzbl	-0x40(%ebp), %eax [MEM, REG]
	movzbl	-0x40(%ebp), %eax
	# 0x805acb8:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805acbb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805acbd:	je	0x805acf1 [IMM <CODEREF>]
	je	.label_1872
	# 0x805acbf:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805acc2:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805acc5:	jae	0x805acd2 [IMM <CODEREF>]
	jae	.label_1853
	# 0x805acc7:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805acca:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805accd:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805accf:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805acd2:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1853:
	addl	$1, -0x34(%ebp)
	# 0x805acd6:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805acd9:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805acdc:	jae	0x805ace9 [IMM <CODEREF>]
	jae	.label_1842
	# 0x805acde:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ace1:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ace4:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ace6:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805ace9:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1842:
	addl	$1, -0x34(%ebp)
	# 0x805aced:	movb	$0, -0x46(%ebp) [IMM, MEM]
	movb	$0, -0x46(%ebp)
	# 0x805acf1:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1872:
	movl	-0x34(%ebp), %eax
	# 0x805acf4:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805acf7:	jae	0x805ad07 [IMM <CODEREF>]
	jae	.label_1906
	# 0x805acf9:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805acfc:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805acff:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805ad01:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805ad05:	movb	%al, 0(%edx) [REG, MEM]
	movb	%al, 0(%edx)
	# 0x805ad07:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1906:
	addl	$1, -0x34(%ebp)
	# 0x805ad0b:	addl	$1, -0x38(%ebp) [IMM, MEM]
	addl	$1, -0x38(%ebp)
	# 0x805ad0f:	movl	-0x50(%ebp), %edx [MEM, REG]
	movl	-0x50(%ebp), %edx
	# 0x805ad12:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805ad15:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ad17:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805ad1a:	movb	%al, -0x43(%ebp) [REG, MEM]
	movb	%al, -0x43(%ebp)
	# 0x805ad1d:	jmp	0x805ab98 [IMM <CODEREF>]
	jmp	.label_1858
	# 0x805ad22:	nop	 []
.label_1885:
	nop	
	# 0x805ad23:	jmp	0x805ae1d [IMM <CODEREF>]
	jmp	.label_1845
	# 0x805ad28:	nop	 []
.label_1937:
	nop	
	# 0x805ad29:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805ad2b:	nop	 []
.label_1851:
	nop	
	# 0x805ad2c:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805ad2e:	nop	 []
.label_1924:
	nop	
	# 0x805ad2f:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805ad31:	nop	 []
.label_1943:
	nop	
	# 0x805ad32:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805ad34:	nop	 []
.label_1931:
	nop	
	# 0x805ad35:	jmp	0x805ad38 [IMM <CODEREF>]
	jmp	.label_1878
	# 0x805ad37:	nop	 []
.label_1935:
	nop	
	# 0x805ad38:	movzbl	-0x48(%ebp), %eax [MEM, REG]
.label_1878:
	movzbl	-0x48(%ebp), %eax
	# 0x805ad3c:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ad3f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ad41:	jne	0x805ad49 [IMM <CODEREF>]
	jne	.label_1922
	# 0x805ad43:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805ad47:	jne	0x805ad54 [IMM <CODEREF>]
	jne	.label_1927
	# 0x805ad49:	movzbl	-0x47(%ebp), %eax [MEM, REG]
.label_1922:
	movzbl	-0x47(%ebp), %eax
	# 0x805ad4d:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ad50:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ad52:	jne	0x805ad86 [IMM <CODEREF>]
	jne	.label_1929
	# 0x805ad54:	cmpl	$0, -0x54(%ebp) [IMM, MEM]
.label_1927:
	cmpl	$0, -0x54(%ebp)
	# 0x805ad58:	je	0x805ad86 [IMM <CODEREF>]
	je	.label_1929
	# 0x805ad5a:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805ad5e:	shrb	$5, %al [IMM, REG]
	shrb	$5, %al
	# 0x805ad61:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805ad64:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x805ad6b:	movl	-0x54(%ebp), %eax [MEM, REG]
	movl	-0x54(%ebp), %eax
	# 0x805ad6e:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ad70:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805ad72:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805ad76:	andl	$0x1f, %eax [IMM, REG]
	andl	$0x1f, %eax
	# 0x805ad79:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805ad7b:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805ad7d:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805ad7f:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805ad82:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ad84:	jne	0x805ad95 [IMM <CODEREF>]
	jne	.label_1913
	# 0x805ad86:	movzbl	-0x41(%ebp), %eax [MEM, REG]
.label_1929:
	movzbl	-0x41(%ebp), %eax
	# 0x805ad8a:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ad8d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ad8f:	jne	0x805ae1c [IMM <CODEREF>]
	jne	.label_1941
	# 0x805ad95:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
.label_1913:
	cmpb	$0, -0x47(%ebp)
	# 0x805ad99:	jne	0x805af9b [IMM <CODEREF>]
	jne	.label_1946
	# 0x805ad9f:	movb	$1, -0x40(%ebp) [IMM, MEM]
	movb	$1, -0x40(%ebp)
	# 0x805ada3:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805ada7:	jne	0x805adfd [IMM <CODEREF>]
	jne	.label_1952
	# 0x805ada9:	movzbl	-0x46(%ebp), %eax [MEM, REG]
	movzbl	-0x46(%ebp), %eax
	# 0x805adad:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805adb0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805adb2:	je	0x805adfd [IMM <CODEREF>]
	je	.label_1952
	# 0x805adb4:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805adb7:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805adba:	jae	0x805adc7 [IMM <CODEREF>]
	jae	.label_1954
	# 0x805adbc:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805adbf:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805adc2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805adc4:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805adc7:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1954:
	addl	$1, -0x34(%ebp)
	# 0x805adcb:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805adce:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805add1:	jae	0x805adde [IMM <CODEREF>]
	jae	.label_1896
	# 0x805add3:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805add6:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805add9:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805addb:	movb	$0x24, 0(%eax) [IMM, MEM]
	movb	$0x24, 0(%eax)
	# 0x805adde:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1896:
	addl	$1, -0x34(%ebp)
	# 0x805ade2:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ade5:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ade8:	jae	0x805adf5 [IMM <CODEREF>]
	jae	.label_1959
	# 0x805adea:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805aded:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805adf0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805adf2:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805adf5:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1959:
	addl	$1, -0x34(%ebp)
	# 0x805adf9:	movb	$1, -0x46(%ebp) [IMM, MEM]
	movb	$1, -0x46(%ebp)
	# 0x805adfd:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1952:
	movl	-0x34(%ebp), %eax
	# 0x805ae00:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ae03:	jae	0x805ae10 [IMM <CODEREF>]
	jae	.label_1966
	# 0x805ae05:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ae08:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae0b:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ae0d:	movb	$0x5c, 0(%eax) [IMM, MEM]
	movb	$0x5c, 0(%eax)
	# 0x805ae10:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1966:
	addl	$1, -0x34(%ebp)
	# 0x805ae14:	jmp	0x805ae1d [IMM <CODEREF>]
	jmp	.label_1845
	# 0x805ae16:	nop	 []
.label_1961:
	nop	
	# 0x805ae17:	jmp	0x805ae1d [IMM <CODEREF>]
	jmp	.label_1845
	# 0x805ae19:	nop	 []
.label_1898:
	nop	
	# 0x805ae1a:	jmp	0x805ae1d [IMM <CODEREF>]
	jmp	.label_1845
	# 0x805ae1c:	nop	 []
.label_1941:
	nop	
	# 0x805ae1d:	cmpb	$0, -0x46(%ebp) [IMM, MEM]
.label_1845:
	cmpb	$0, -0x46(%ebp)
	# 0x805ae21:	je	0x805ae60 [IMM <CODEREF>]
	je	.label_1848
	# 0x805ae23:	movzbl	-0x40(%ebp), %eax [MEM, REG]
	movzbl	-0x40(%ebp), %eax
	# 0x805ae27:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ae2a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ae2c:	je	0x805ae60 [IMM <CODEREF>]
	je	.label_1848
	# 0x805ae2e:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae31:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ae34:	jae	0x805ae41 [IMM <CODEREF>]
	jae	.label_1854
	# 0x805ae36:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ae39:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae3c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ae3e:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805ae41:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1854:
	addl	$1, -0x34(%ebp)
	# 0x805ae45:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae48:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ae4b:	jae	0x805ae58 [IMM <CODEREF>]
	jae	.label_1859
	# 0x805ae4d:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ae50:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae53:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ae55:	movb	$0x27, 0(%eax) [IMM, MEM]
	movb	$0x27, 0(%eax)
	# 0x805ae58:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1859:
	addl	$1, -0x34(%ebp)
	# 0x805ae5c:	movb	$0, -0x46(%ebp) [IMM, MEM]
	movb	$0, -0x46(%ebp)
	# 0x805ae60:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1848:
	movl	-0x34(%ebp), %eax
	# 0x805ae63:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805ae66:	jae	0x805ae76 [IMM <CODEREF>]
	jae	.label_1866
	# 0x805ae68:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805ae6b:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805ae6e:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805ae70:	movzbl	-0x43(%ebp), %eax [MEM, REG]
	movzbl	-0x43(%ebp), %eax
	# 0x805ae74:	movb	%al, 0(%edx) [REG, MEM]
	movb	%al, 0(%edx)
	# 0x805ae76:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1866:
	addl	$1, -0x34(%ebp)
	# 0x805ae7a:	movzbl	-0x3f(%ebp), %eax [MEM, REG]
	movzbl	-0x3f(%ebp), %eax
	# 0x805ae7e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ae81:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ae83:	je	0x805ae89 [IMM <CODEREF>]
	je	.label_1870
	# 0x805ae85:	movb	$0, -0x44(%ebp) [IMM, MEM]
	movb	$0, -0x44(%ebp)
	# 0x805ae89:	addl	$1, -0x38(%ebp) [IMM, MEM]
.label_1870:
	addl	$1, -0x38(%ebp)
	# 0x805ae8d:	cmpl	$-1, 0x14(%ebp) [IMM, MEM]
.label_1945:
	cmpl	$-1, 0x14(%ebp)
	# 0x805ae91:	jne	0x805aea5 [IMM <CODEREF>]
	jne	.label_1930
	# 0x805ae93:	movl	-0x50(%ebp), %edx [MEM, REG]
	movl	-0x50(%ebp), %edx
	# 0x805ae96:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805ae99:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805ae9b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805ae9e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805aea0:	setne	%al [REG]
	setne	%al
	# 0x805aea3:	jmp	0x805aeae [IMM <CODEREF>]
	jmp	.label_1880
	# 0x805aea5:	movl	-0x38(%ebp), %eax [MEM, REG]
.label_1930:
	movl	-0x38(%ebp), %eax
	# 0x805aea8:	cmpl	0x14(%ebp), %eax [MEM, REG]
	cmpl	0x14(%ebp), %eax
	# 0x805aeab:	setne	%al [REG]
	setne	%al
	# 0x805aeae:	testb	%al, %al [REG, REG]
.label_1880:
	testb	%al, %al
	# 0x805aeb0:	jne	0x805a5ed [IMM <CODEREF>]
	jne	.label_1888
	# 0x805aeb6:	cmpl	$0, -0x34(%ebp) [IMM, MEM]
	cmpl	$0, -0x34(%ebp)
	# 0x805aeba:	jne	0x805aecc [IMM <CODEREF>]
	jne	.label_1860
	# 0x805aebc:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
	cmpl	$2, 0x18(%ebp)
	# 0x805aec0:	jne	0x805aecc [IMM <CODEREF>]
	jne	.label_1860
	# 0x805aec2:	cmpb	$0, -0x47(%ebp) [IMM, MEM]
	cmpb	$0, -0x47(%ebp)
	# 0x805aec6:	jne	0x805af9e [IMM <CODEREF>]
	jne	.label_1894
	# 0x805aecc:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
.label_1860:
	cmpl	$2, 0x18(%ebp)
	# 0x805aed0:	jne	0x805af31 [IMM <CODEREF>]
	jne	.label_1899
	# 0x805aed2:	movzbl	-0x47(%ebp), %eax [MEM, REG]
	movzbl	-0x47(%ebp), %eax
	# 0x805aed6:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805aed9:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805aedb:	je	0x805af31 [IMM <CODEREF>]
	je	.label_1899
	# 0x805aedd:	cmpb	$0, -0x45(%ebp) [IMM, MEM]
	cmpb	$0, -0x45(%ebp)
	# 0x805aee1:	je	0x805af31 [IMM <CODEREF>]
	je	.label_1899
	# 0x805aee3:	cmpb	$0, -0x44(%ebp) [IMM, MEM]
	cmpb	$0, -0x44(%ebp)
	# 0x805aee7:	je	0x805af13 [IMM <CODEREF>]
	je	.label_1904
	# 0x805aee9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805aeec:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x805aeef:	pushl	-0x58(%ebp) [MEM]
	pushl	-0x58(%ebp)
	# 0x805aef2:	pushl	-0x54(%ebp) [MEM]
	pushl	-0x54(%ebp)
	# 0x805aef5:	pushl	0x1c(%ebp) [MEM]
	pushl	0x1c(%ebp)
	# 0x805aef8:	pushl	$5 [IMM]
	pushl	$5
	# 0x805aefa:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805aefd:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805af00:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805af03:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805af06:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805af0b:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805af0e:	jmp	0x805afdb [IMM <CODEREF>]
	jmp	.label_1911
	# 0x805af13:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
.label_1904:
	cmpl	$0, 0xc(%ebp)
	# 0x805af17:	jne	0x805af31 [IMM <CODEREF>]
	jne	.label_1899
	# 0x805af19:	cmpl	$0, -0x30(%ebp) [IMM, MEM]
	cmpl	$0, -0x30(%ebp)
	# 0x805af1d:	je	0x805af31 [IMM <CODEREF>]
	je	.label_1899
	# 0x805af1f:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805af22:	movl	%eax, 0xc(%ebp) [REG, MEM]
	movl	%eax, 0xc(%ebp)
	# 0x805af25:	movl	$0, -0x34(%ebp) [IMM, MEM]
	movl	$0, -0x34(%ebp)
	# 0x805af2c:	jmp	0x805a490 [IMM <CODEREF>]
	jmp	.label_1917
	# 0x805af31:	cmpl	$0, -0x2c(%ebp) [IMM, MEM]
.label_1899:
	cmpl	$0, -0x2c(%ebp)
	# 0x805af35:	je	0x805af6e [IMM <CODEREF>]
	je	.label_1919
	# 0x805af37:	movzbl	-0x47(%ebp), %eax [MEM, REG]
	movzbl	-0x47(%ebp), %eax
	# 0x805af3b:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805af3e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805af40:	je	0x805af6e [IMM <CODEREF>]
	je	.label_1919
	# 0x805af42:	jmp	0x805af64 [IMM <CODEREF>]
	jmp	.label_1926
	# 0x805af44:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1933:
	movl	-0x34(%ebp), %eax
	# 0x805af47:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805af4a:	jae	0x805af5c [IMM <CODEREF>]
	jae	.label_1928
	# 0x805af4c:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805af4f:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805af52:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805af54:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805af57:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805af5a:	movb	%al, 0(%edx) [REG, MEM]
	movb	%al, 0(%edx)
	# 0x805af5c:	addl	$1, -0x34(%ebp) [IMM, MEM]
.label_1928:
	addl	$1, -0x34(%ebp)
	# 0x805af60:	addl	$1, -0x2c(%ebp) [IMM, MEM]
	addl	$1, -0x2c(%ebp)
	# 0x805af64:	movl	-0x2c(%ebp), %eax [MEM, REG]
.label_1926:
	movl	-0x2c(%ebp), %eax
	# 0x805af67:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805af6a:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805af6c:	jne	0x805af44 [IMM <CODEREF>]
	jne	.label_1933
	# 0x805af6e:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1919:
	movl	-0x34(%ebp), %eax
	# 0x805af71:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805af74:	jae	0x805af81 [IMM <CODEREF>]
	jae	.label_1936
	# 0x805af76:	movl	-0x4c(%ebp), %edx [MEM, REG]
	movl	-0x4c(%ebp), %edx
	# 0x805af79:	movl	-0x34(%ebp), %eax [MEM, REG]
	movl	-0x34(%ebp), %eax
	# 0x805af7c:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805af7e:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x805af81:	movl	-0x34(%ebp), %eax [MEM, REG]
.label_1936:
	movl	-0x34(%ebp), %eax
	# 0x805af84:	jmp	0x805afdb [IMM <CODEREF>]
	jmp	.label_1911
	# 0x805af86:	nop	 []
.label_1865:
	nop	
	# 0x805af87:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af89:	nop	 []
.label_1881:
	nop	
	# 0x805af8a:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af8c:	nop	 []
.label_1844:
	nop	
	# 0x805af8d:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af8f:	nop	 []
.label_1963:
	nop	
	# 0x805af90:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af92:	nop	 []
.label_1938:
	nop	
	# 0x805af93:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af95:	nop	 []
.label_2553:
	nop	
	# 0x805af96:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af98:	nop	 []
.label_1849:
	nop	
	# 0x805af99:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af9b:	nop	 []
.label_1946:
	nop	
	# 0x805af9c:	jmp	0x805af9f [IMM <CODEREF>]
	jmp	.label_1864
	# 0x805af9e:	nop	 []
.label_1894:
	nop	
	# 0x805af9f:	cmpl	$2, 0x18(%ebp) [IMM, MEM]
.label_1864:
	cmpl	$2, 0x18(%ebp)
	# 0x805afa3:	jne	0x805afb2 [IMM <CODEREF>]
	jne	.label_1949
	# 0x805afa5:	cmpb	$0, -0x48(%ebp) [IMM, MEM]
	cmpb	$0, -0x48(%ebp)
	# 0x805afa9:	je	0x805afb2 [IMM <CODEREF>]
	je	.label_1949
	# 0x805afab:	movl	$4, 0x18(%ebp) [IMM, MEM]
	movl	$4, 0x18(%ebp)
	# 0x805afb2:	movl	0x1c(%ebp), %eax [MEM, REG]
.label_1949:
	movl	0x1c(%ebp), %eax
	# 0x805afb5:	andl	$0xfffffffd, %eax [IMM, REG]
	andl	$0xfffffffd, %eax
	# 0x805afb8:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805afbb:	pushl	-0x5c(%ebp) [MEM]
	pushl	-0x5c(%ebp)
	# 0x805afbe:	pushl	-0x58(%ebp) [MEM]
	pushl	-0x58(%ebp)
	# 0x805afc1:	pushl	$0 [IMM]
	pushl	$0
	# 0x805afc3:	pushl	%eax [REG]
	pushl	%eax
	# 0x805afc4:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805afc7:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805afca:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805afcd:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805afd0:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805afd3:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805afd8:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805afdb:	movl	-0xc(%ebp), %ebx [MEM, REG]
.label_1911:
	movl	-0xc(%ebp), %ebx
	# 0x805afde:	xorl	%gs:0x14, %ebx [MEM, REG]
	xorl	%gs:0x14, %ebx
	# 0x805afe5:	je	0x805afec [IMM <CODEREF>]
	je	.label_1958
	# 0x805afe7:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805afec:	movl	-4(%ebp), %ebx [MEM, REG]
.label_1958:
	movl	-4(%ebp), %ebx
	# 0x805afef:	leave	 []
	leave	
	# 0x805aff0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805aff1

	# 0x805aff1:	pushl	%ebp [REG]
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:
	pushl	%ebp
	# 0x805aff2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805aff4:	pushl	%esi [REG]
	pushl	%esi
	# 0x805aff5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805aff6:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805aff9:	cmpl	$0, 0x18(%ebp) [IMM, MEM]
	cmpl	$0, 0x18(%ebp)
	# 0x805affd:	je	0x805b004 [IMM <CODEREF>]
	je	.label_1970
	# 0x805afff:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805b002:	jmp	0x805b009 [IMM <CODEREF>]
	jmp	.label_1971
	# 0x805b004:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1970:
	movl	$default_quoting_options,  %eax
	# 0x805b009:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_1971:
	movl	%eax, -0x14(%ebp)
	# 0x805b00c:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b011:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b013:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b016:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b019:	movl	0x2c(%eax), %ebx [MEM, REG]
	movl	0x2c(%eax), %ebx
	# 0x805b01c:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b01f:	movl	0x28(%eax), %ecx [MEM, REG]
	movl	0x28(%eax), %ecx
	# 0x805b022:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b025:	leal	8(%eax), %esi [MEM, REG]
	leal	8(%eax), %esi
	# 0x805b028:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b02b:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805b02e:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b031:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b033:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b036:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b037:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805b038:	pushl	%esi [REG]
	pushl	%esi
	# 0x805b039:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b03a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b03b:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805b03e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b041:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b044:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b047:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805b04c:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805b04f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b052:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b057:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805b059:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805b05c:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805b05e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805b061:	leal	-8(%ebp), %esp [MEM, REG]
	leal	-8(%ebp), %esp
	# 0x805b064:	popl	%ebx [REG]
	popl	%ebx
	# 0x805b065:	popl	%esi [REG]
	popl	%esi
	# 0x805b066:	popl	%ebp [REG]
	popl	%ebp
	# 0x805b067:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b068
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	# 0x805b068:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b069:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b06b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b06e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b071:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b073:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b076:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b079:	calll	0x805b083 [IMM <CODEREF>]
	calll	quotearg_alloc_mem
	# 0x805b07e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b081:	leave	 []
	leave	
	# 0x805b082:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b083

	# 0x805b083:	pushl	%ebp [REG]
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:
	pushl	%ebp
	# 0x805b084:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b086:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b087:	subl	$0x24, %esp [IMM, REG]
	subl	$0x24, %esp
	# 0x805b08a:	cmpl	$0, 0x14(%ebp) [IMM, MEM]
	cmpl	$0, 0x14(%ebp)
	# 0x805b08e:	je	0x805b095 [IMM <CODEREF>]
	je	.label_1973
	# 0x805b090:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b093:	jmp	0x805b09a [IMM <CODEREF>]
	jmp	.label_1972
	# 0x805b095:	movl	$0x806b400, %eax [IMM <DATAREF>, REG]
.label_1973:
	movl	$default_quoting_options,  %eax
	# 0x805b09a:	movl	%eax, -0x1c(%ebp) [REG, MEM]
.label_1972:
	movl	%eax, -0x1c(%ebp)
	# 0x805b09d:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b0a2:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b0a4:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805b0a7:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b0aa:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805b0ad:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805b0b1:	sete	%al [REG]
	sete	%al
	# 0x805b0b4:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805b0b7:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x805b0b9:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b0bc:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b0bf:	movl	0x2c(%eax), %ecx [MEM, REG]
	movl	0x2c(%eax), %ecx
	# 0x805b0c2:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b0c5:	movl	0x28(%eax), %edx [MEM, REG]
	movl	0x28(%eax), %edx
	# 0x805b0c8:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b0cb:	leal	8(%eax), %ebx [MEM, REG]
	leal	8(%eax), %ebx
	# 0x805b0ce:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b0d1:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b0d3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b0d6:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805b0d7:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b0d8:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b0d9:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805b0dc:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b0dd:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b0e0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b0e3:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b0e5:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b0e7:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805b0ec:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805b0ef:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805b0f2:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b0f5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b0f8:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805b0fb:	calll	0x805c593 [IMM <CODEREF>]
	calll	xcharalloc
	# 0x805b100:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b103:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b106:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b109:	movl	0x2c(%eax), %ecx [MEM, REG]
	movl	0x2c(%eax), %ecx
	# 0x805b10c:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b10f:	movl	0x28(%eax), %edx [MEM, REG]
	movl	0x28(%eax), %edx
	# 0x805b112:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b115:	leal	8(%eax), %ebx [MEM, REG]
	leal	8(%eax), %ebx
	# 0x805b118:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b11b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b11d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b120:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805b121:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b122:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b123:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805b126:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b127:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b12a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b12d:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805b130:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805b133:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805b138:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805b13b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b140:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805b142:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805b145:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805b147:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805b14b:	je	0x805b158 [IMM <CODEREF>]
	je	.label_1974
	# 0x805b14d:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805b150:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805b153:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b156:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805b158:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_1974:
	movl	-0xc(%ebp), %eax
	# 0x805b15b:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x805b15e:	leave	 []
	leave	
	# 0x805b15f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b160
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	# 0x805b160:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b161:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b163:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805b166:	movl	0x806a32c, %eax [MEM, REG]
	movl	slotvec,  %eax
	# 0x805b16b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b16e:	movl	$1, -0x10(%ebp) [IMM, MEM]
	movl	$1, -0x10(%ebp)
	# 0x805b175:	jmp	0x805b199 [IMM <CODEREF>]
	jmp	.label_1975
	# 0x805b177:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_1978:
	movl	-0x10(%ebp), %eax
	# 0x805b17a:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b181:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805b184:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805b186:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805b189:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b18c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b18d:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805b192:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b195:	addl	$1, -0x10(%ebp) [IMM, MEM]
	addl	$1, -0x10(%ebp)
	# 0x805b199:	movl	0x806a320, %eax [MEM, REG]
.label_1975:
	movl	nslots,  %eax
	# 0x805b19e:	cmpl	%eax, -0x10(%ebp) [REG, MEM]
	cmpl	%eax, -0x10(%ebp)
	# 0x805b1a1:	jl	0x805b177 [IMM <CODEREF>]
	jl	.label_1978
	# 0x805b1a3:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805b1a6:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805b1a9:	cmpl	$0x806b440, %eax [IMM <DATAREF>, REG]
	cmpl	$slot0,  %eax
	# 0x805b1ae:	je	0x805b1d6 [IMM <CODEREF>]
	je	.label_1976
	# 0x805b1b0:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805b1b3:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805b1b6:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b1b9:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b1ba:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805b1bf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b1c2:	movl	$0x100, 0x806a324 [IMM, MEM]
	movl	$0x100, slotvec0
	# 0x805b1cc:	movl	$0x806b440, 0x806a328 [IMM <DATAREF>, MEM]
	movl	$slot0, label_1979
	# 0x805b1d6:	cmpl	$0x806a324, -0xc(%ebp) [IMM <DATAREF>, MEM]
.label_1976:
	cmpl	$slotvec0, -12(%ebp)
	# 0x805b1dd:	je	0x805b1f7 [IMM <CODEREF>]
	je	.label_1977
	# 0x805b1df:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b1e2:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805b1e5:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805b1ea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b1ed:	movl	$0x806a324, 0x806a32c [IMM <DATAREF>, MEM]
	movl	$slotvec0, slotvec
	# 0x805b1f7:	movl	$1, 0x806a320 [IMM, MEM]
.label_1977:
	movl	$1, nslots
	# 0x805b201:	nop	 []
	nop	
	# 0x805b202:	leave	 []
	leave	
	# 0x805b203:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b204

	# 0x805b204:	pushl	%ebp [REG]
	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	pushl	%ebp
	# 0x805b205:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b207:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b208:	subl	$0x24, %esp [IMM, REG]
	subl	$0x24, %esp
	# 0x805b20b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b210:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b212:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805b215:	movl	0x806a32c, %eax [MEM, REG]
	movl	slotvec,  %eax
	# 0x805b21a:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805b21d:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805b221:	jns	0x805b228 [IMM <CODEREF>]
	jns	.label_1983
	# 0x805b223:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x805b228:	movl	0x806a320, %eax [MEM, REG]
.label_1983:
	movl	nslots,  %eax
	# 0x805b22d:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x805b230:	jg	0x805b2e6 [IMM <CODEREF>]
	jg	.label_1984
	# 0x805b236:	cmpl	$0x806a324, -0x24(%ebp) [IMM <DATAREF>, MEM]
	cmpl	$slotvec0, -36(%ebp)
	# 0x805b23d:	sete	%al [REG]
	sete	%al
	# 0x805b240:	movb	%al, -0x25(%ebp) [REG, MEM]
	movb	%al, -0x25(%ebp)
	# 0x805b243:	movl	$0xffffffe, -0x18(%ebp) [IMM, MEM]
	movl	$0xffffffe, -0x18(%ebp)
	# 0x805b24a:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805b24d:	cmpl	8(%ebp), %eax [MEM, REG]
	cmpl	8(%ebp), %eax
	# 0x805b250:	jge	0x805b257 [IMM <CODEREF>]
	jge	.label_1986
	# 0x805b252:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805b257:	movl	8(%ebp), %eax [MEM, REG]
.label_1986:
	movl	8(%ebp), %eax
	# 0x805b25a:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805b25d:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b264:	cmpb	$0, -0x25(%ebp) [IMM, MEM]
	cmpb	$0, -0x25(%ebp)
	# 0x805b268:	je	0x805b271 [IMM <CODEREF>]
	je	.label_1981
	# 0x805b26a:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805b26f:	jmp	0x805b274 [IMM <CODEREF>]
	jmp	.label_1985
	# 0x805b271:	movl	-0x24(%ebp), %eax [MEM, REG]
.label_1981:
	movl	-0x24(%ebp), %eax
	# 0x805b274:	subl	$8, %esp [IMM, REG]
.label_1985:
	subl	$8, %esp
	# 0x805b277:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b278:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b279:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x805b27e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b281:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805b284:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b287:	movl	%eax, 0x806a32c [REG, MEM]
	movl	%eax, slotvec
	# 0x805b28c:	cmpb	$0, -0x25(%ebp) [IMM, MEM]
	cmpb	$0, -0x25(%ebp)
	# 0x805b290:	je	0x805b2a5 [IMM <CODEREF>]
	je	.label_1987
	# 0x805b292:	movl	-0x24(%ebp), %ecx [MEM, REG]
	movl	-0x24(%ebp), %ecx
	# 0x805b295:	movl	0x806a324, %eax [MEM, REG]
	movl	slotvec0,  %eax
	# 0x805b29a:	movl	0x806a328, %edx [MEM, REG]
	movl	label_1979,  %edx
	# 0x805b2a0:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805b2a2:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805b2a5:	movl	8(%ebp), %eax [MEM, REG]
.label_1987:
	movl	8(%ebp), %eax
	# 0x805b2a8:	leal	1(%eax), %edx [MEM, REG]
	leal	1(%eax), %edx
	# 0x805b2ab:	movl	0x806a320, %eax [MEM, REG]
	movl	nslots,  %eax
	# 0x805b2b0:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805b2b2:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805b2b4:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b2bb:	movl	0x806a320, %eax [MEM, REG]
	movl	nslots,  %eax
	# 0x805b2c0:	leal	0(, %eax, 8), %ecx [MEM, REG]
	leal	0(, %eax, 8), %ecx
	# 0x805b2c7:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b2ca:	addl	%ecx, %eax [REG, REG]
	addl	%ecx, %eax
	# 0x805b2cc:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b2cf:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b2d0:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b2d2:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b2d3:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805b2d8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b2db:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805b2de:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805b2e1:	movl	%eax, 0x806a320 [REG, MEM]
	movl	%eax, nslots
	# 0x805b2e6:	movl	8(%ebp), %eax [MEM, REG]
.label_1984:
	movl	8(%ebp), %eax
	# 0x805b2e9:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b2f0:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b2f3:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805b2f5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b2f7:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b2fa:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805b2fd:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b304:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b307:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805b309:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805b30c:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805b30f:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b312:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805b315:	orl	$1, %eax [IMM, REG]
	orl	$1, %eax
	# 0x805b318:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b31b:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b31e:	movl	0x2c(%eax), %ecx [MEM, REG]
	movl	0x2c(%eax), %ecx
	# 0x805b321:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b324:	movl	0x28(%eax), %edx [MEM, REG]
	movl	0x28(%eax), %edx
	# 0x805b327:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b32a:	leal	8(%eax), %ebx [MEM, REG]
	leal	8(%eax), %ebx
	# 0x805b32d:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b330:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b332:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b335:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805b336:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b337:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b338:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805b33b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b33c:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b33f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b342:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805b345:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805b348:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805b34d:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805b350:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b353:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b356:	cmpl	-0xc(%ebp), %eax [MEM, REG]
	cmpl	-0xc(%ebp), %eax
	# 0x805b359:	ja	0x805b3ef [IMM <CODEREF>]
	ja	.label_1980
	# 0x805b35f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805b362:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b369:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b36c:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805b36e:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805b371:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805b374:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b377:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805b37a:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805b37c:	cmpl	$0x806b440, -0x20(%ebp) [IMM <DATAREF>, MEM]
	cmpl	$slot0, -32(%ebp)
	# 0x805b383:	je	0x805b393 [IMM <CODEREF>]
	je	.label_1982
	# 0x805b385:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b388:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805b38b:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805b390:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b393:	movl	8(%ebp), %eax [MEM, REG]
.label_1982:
	movl	8(%ebp), %eax
	# 0x805b396:	leal	0(, %eax, 8), %edx [MEM, REG]
	leal	0(, %eax, 8), %edx
	# 0x805b39d:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805b3a0:	leal	0(%edx, %eax), %ebx [MEM, REG]
	leal	0(%edx, %eax), %ebx
	# 0x805b3a3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b3a6:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805b3a9:	calll	0x805c593 [IMM <CODEREF>]
	calll	xcharalloc
	# 0x805b3ae:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b3b1:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805b3b4:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805b3b7:	movl	%eax, 4(%ebx) [REG, MEM]
	movl	%eax, 4(%ebx)
	# 0x805b3ba:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b3bd:	movl	0x2c(%eax), %ecx [MEM, REG]
	movl	0x2c(%eax), %ecx
	# 0x805b3c0:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b3c3:	movl	0x28(%eax), %edx [MEM, REG]
	movl	0x28(%eax), %edx
	# 0x805b3c6:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b3c9:	leal	8(%eax), %ebx [MEM, REG]
	leal	8(%eax), %ebx
	# 0x805b3cc:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b3cf:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b3d1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b3d4:	pushl	%ecx [REG]
	pushl	%ecx
	# 0x805b3d5:	pushl	%edx [REG]
	pushl	%edx
	# 0x805b3d6:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b3d7:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805b3da:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b3db:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b3de:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b3e1:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805b3e4:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805b3e7:	calll	0x805a418 [IMM <CODEREF>]
	calll	quotearg_buffer_restyled
	# 0x805b3ec:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805b3ef:	calll	0x8049990 [IMM <CODEREF>]
.label_1980:
	calll	__errno_location
	# 0x805b3f4:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805b3f6:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805b3f9:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805b3fb:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805b3fe:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x805b401:	leave	 []
	leave	
	# 0x805b402:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b403

	# 0x805b403:	pushl	%ebp [REG]
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:
	pushl	%ebp
	# 0x805b404:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b406:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b409:	pushl	$0x806b400 [IMM <DATAREF>]
	pushl	$default_quoting_options
	# 0x805b40e:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b410:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b413:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b416:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b41b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b41e:	leave	 []
	leave	
	# 0x805b41f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b420

	# 0x805b420:	pushl	%ebp [REG]
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:
	pushl	%ebp
	# 0x805b421:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b423:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b426:	pushl	$0x806b400 [IMM <DATAREF>]
	pushl	$default_quoting_options
	# 0x805b42b:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b42e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b431:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b434:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b439:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b43c:	leave	 []
	leave	
	# 0x805b43d:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b43e
	.globl quotearg
	.type quotearg, @function
quotearg:

	# 0x805b43e:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b43f:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b441:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b444:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b447:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b44a:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b44c:	calll	0x805b403 [IMM <CODEREF>]
	calll	quotearg_n
	# 0x805b451:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b454:	leave	 []
	leave	
	# 0x805b455:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b456
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	# 0x805b456:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b457:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b459:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b45c:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b45f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b462:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b465:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b467:	calll	0x805b420 [IMM <CODEREF>]
	calll	quotearg_n_mem
	# 0x805b46c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b46f:	leave	 []
	leave	
	# 0x805b470:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b471

	# 0x805b471:	pushl	%ebp [REG]
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	pushl	%ebp
	# 0x805b472:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b474:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805b477:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b47a:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805b47d:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b483:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b486:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b488:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b48b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b48e:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b491:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b492:	calll	0x805a2da [IMM <CODEREF>]
	calll	quoting_options_from_style
	# 0x805b497:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x805b49a:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b49d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b49e:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b4a0:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805b4a3:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b4a6:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b4ab:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b4ae:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805b4b1:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805b4b8:	je	0x805b4bf [IMM <CODEREF>]
	je	.label_1988
	# 0x805b4ba:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805b4bf:	leave	 []
.label_1988:
	leave	
	# 0x805b4c0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b4c1

	# 0x805b4c1:	pushl	%ebp [REG]
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:
	pushl	%ebp
	# 0x805b4c2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b4c4:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805b4c7:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b4ca:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805b4cd:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b4d3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b4d6:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b4d8:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b4db:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b4de:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b4e1:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b4e2:	calll	0x805a2da [IMM <CODEREF>]
	calll	quoting_options_from_style
	# 0x805b4e7:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x805b4ea:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b4ed:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b4ee:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805b4f1:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805b4f4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b4f7:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b4fc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b4ff:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805b502:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805b509:	je	0x805b510 [IMM <CODEREF>]
	je	.label_1989
	# 0x805b50b:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805b510:	leave	 []
.label_1989:
	leave	
	# 0x805b511:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b512

	# 0x805b512:	pushl	%ebp [REG]
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	pushl	%ebp
	# 0x805b513:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b515:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b518:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b51b:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b51e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b521:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b523:	calll	0x805b471 [IMM <CODEREF>]
	calll	quotearg_n_style
	# 0x805b528:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b52b:	leave	 []
	leave	
	# 0x805b52c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b52d
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	# 0x805b52d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b52e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b530:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b533:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b536:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b539:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b53c:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b53e:	calll	0x805b4c1 [IMM <CODEREF>]
	calll	quotearg_n_style_mem
	# 0x805b543:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b546:	leave	 []
	leave	
	# 0x805b547:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b548

	# 0x805b548:	pushl	%ebp [REG]
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:
	pushl	%ebp
	# 0x805b549:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b54b:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805b54e:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b551:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805b554:	movl	%edx, -0x4c(%ebp) [REG, MEM]
	movl	%edx, -0x4c(%ebp)
	# 0x805b557:	movb	%al, -0x50(%ebp) [REG, MEM]
	movb	%al, -0x50(%ebp)
	# 0x805b55a:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b560:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b563:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b565:	movl	0x806b400, %eax [MEM, REG]
	movl	default_quoting_options,  %eax
	# 0x805b56a:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805b56d:	movl	0x806b404, %eax [MEM, REG]
	movl	label_1990,  %eax
	# 0x805b572:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805b575:	movl	0x806b408, %eax [MEM, REG]
	movl	label_1991,  %eax
	# 0x805b57a:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x805b57d:	movl	0x806b40c, %eax [MEM, REG]
	movl	label_1992,  %eax
	# 0x805b582:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805b585:	movl	0x806b410, %eax [MEM, REG]
	movl	label_1993,  %eax
	# 0x805b58a:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805b58d:	movl	0x806b414, %eax [MEM, REG]
	movl	label_1994,  %eax
	# 0x805b592:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805b595:	movl	0x806b418, %eax [MEM, REG]
	movl	label_1995,  %eax
	# 0x805b59a:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805b59d:	movl	0x806b41c, %eax [MEM, REG]
	movl	label_1996,  %eax
	# 0x805b5a2:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805b5a5:	movl	0x806b420, %eax [MEM, REG]
	movl	label_1997,  %eax
	# 0x805b5aa:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805b5ad:	movl	0x806b424, %eax [MEM, REG]
	movl	label_1998,  %eax
	# 0x805b5b2:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805b5b5:	movl	0x806b428, %eax [MEM, REG]
	movl	label_1999,  %eax
	# 0x805b5ba:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b5bd:	movl	0x806b42c, %eax [MEM, REG]
	movl	label_2000,  %eax
	# 0x805b5c2:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b5c5:	movsbl	-0x50(%ebp), %eax [MEM, REG]
	movsbl	-0x50(%ebp), %eax
	# 0x805b5c9:	pushl	$1 [IMM]
	pushl	$1
	# 0x805b5cb:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b5cc:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b5cf:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b5d0:	calll	0x805a1ee [IMM <CODEREF>]
	calll	set_char_quoting
	# 0x805b5d5:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x805b5d8:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b5db:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b5dc:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b5df:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805b5e2:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b5e4:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b5e9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b5ec:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x805b5ef:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805b5f6:	je	0x805b5fd [IMM <CODEREF>]
	je	.label_2001
	# 0x805b5f8:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805b5fd:	leave	 []
.label_2001:
	leave	
	# 0x805b5fe:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b5ff

	# 0x805b5ff:	pushl	%ebp [REG]
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:
	pushl	%ebp
	# 0x805b600:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b602:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805b605:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805b608:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x805b60b:	movsbl	-0xc(%ebp), %eax [MEM, REG]
	movsbl	-0xc(%ebp), %eax
	# 0x805b60f:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b612:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b613:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b615:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b618:	calll	0x805b548 [IMM <CODEREF>]
	calll	quotearg_char_mem
	# 0x805b61d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b620:	leave	 []
	leave	
	# 0x805b621:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b622

	# 0x805b622:	pushl	%ebp [REG]
	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	pushl	%ebp
	# 0x805b623:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b625:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b628:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b62b:	pushl	$0x3a [IMM]
	pushl	$0x3a
	# 0x805b62d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b630:	calll	0x805b5ff [IMM <CODEREF>]
	calll	quotearg_char
	# 0x805b635:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b638:	leave	 []
	leave	
	# 0x805b639:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b63a
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	# 0x805b63a:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b63b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b63d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b640:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b643:	pushl	$0x3a [IMM]
	pushl	$0x3a
	# 0x805b645:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b648:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b64b:	calll	0x805b548 [IMM <CODEREF>]
	calll	quotearg_char_mem
	# 0x805b650:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b653:	leave	 []
	leave	
	# 0x805b654:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b655

	# 0x805b655:	pushl	%ebp [REG]
	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	pushl	%ebp
	# 0x805b656:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b658:	subl	$0x88, %esp [IMM, REG]
	subl	$0x88, %esp
	# 0x805b65e:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b661:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805b664:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b66a:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b66d:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b66f:	leal	-0x88(%ebp), %eax [MEM, REG]
	leal	-0x88(%ebp), %eax
	# 0x805b675:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b678:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b67b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b67c:	calll	0x805a2da [IMM <CODEREF>]
	calll	quoting_options_from_style
	# 0x805b681:	addl	$0xc, %esp [IMM, REG]
	addl	$0xc, %esp
	# 0x805b684:	movl	-0x88(%ebp), %eax [MEM, REG]
	movl	-0x88(%ebp), %eax
	# 0x805b68a:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805b68d:	movl	-0x84(%ebp), %eax [MEM, REG]
	movl	-0x84(%ebp), %eax
	# 0x805b693:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805b696:	movl	-0x80(%ebp), %eax [MEM, REG]
	movl	-0x80(%ebp), %eax
	# 0x805b699:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x805b69c:	movl	-0x7c(%ebp), %eax [MEM, REG]
	movl	-0x7c(%ebp), %eax
	# 0x805b69f:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805b6a2:	movl	-0x78(%ebp), %eax [MEM, REG]
	movl	-0x78(%ebp), %eax
	# 0x805b6a5:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805b6a8:	movl	-0x74(%ebp), %eax [MEM, REG]
	movl	-0x74(%ebp), %eax
	# 0x805b6ab:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805b6ae:	movl	-0x70(%ebp), %eax [MEM, REG]
	movl	-0x70(%ebp), %eax
	# 0x805b6b1:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805b6b4:	movl	-0x6c(%ebp), %eax [MEM, REG]
	movl	-0x6c(%ebp), %eax
	# 0x805b6b7:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805b6ba:	movl	-0x68(%ebp), %eax [MEM, REG]
	movl	-0x68(%ebp), %eax
	# 0x805b6bd:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805b6c0:	movl	-0x64(%ebp), %eax [MEM, REG]
	movl	-0x64(%ebp), %eax
	# 0x805b6c3:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805b6c6:	movl	-0x60(%ebp), %eax [MEM, REG]
	movl	-0x60(%ebp), %eax
	# 0x805b6c9:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b6cc:	movl	-0x5c(%ebp), %eax [MEM, REG]
	movl	-0x5c(%ebp), %eax
	# 0x805b6cf:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b6d2:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b6d5:	pushl	$1 [IMM]
	pushl	$1
	# 0x805b6d7:	pushl	$0x3a [IMM]
	pushl	$0x3a
	# 0x805b6d9:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b6dc:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b6dd:	calll	0x805a1ee [IMM <CODEREF>]
	calll	set_char_quoting
	# 0x805b6e2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b6e5:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b6e8:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b6e9:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b6eb:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805b6ee:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b6f1:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b6f6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b6f9:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805b6fc:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805b703:	je	0x805b70a [IMM <CODEREF>]
	je	.label_2002
	# 0x805b705:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805b70a:	leave	 []
.label_2002:
	leave	
	# 0x805b70b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b70c

	# 0x805b70c:	pushl	%ebp [REG]
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:
	pushl	%ebp
	# 0x805b70d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b70f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b712:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b715:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b717:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805b71a:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b71d:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b720:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b723:	calll	0x805b72d [IMM <CODEREF>]
	calll	quotearg_n_custom_mem
	# 0x805b728:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805b72b:	leave	 []
	leave	
	# 0x805b72c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b72d

	# 0x805b72d:	pushl	%ebp [REG]
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:
	pushl	%ebp
	# 0x805b72e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b730:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805b733:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805b736:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805b739:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805b73c:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x805b73f:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b742:	movl	%eax, -0x54(%ebp) [REG, MEM]
	movl	%eax, -0x54(%ebp)
	# 0x805b745:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b74b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b74e:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b750:	movl	0x806b400, %eax [MEM, REG]
	movl	default_quoting_options,  %eax
	# 0x805b755:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805b758:	movl	0x806b404, %eax [MEM, REG]
	movl	label_1990,  %eax
	# 0x805b75d:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805b760:	movl	0x806b408, %eax [MEM, REG]
	movl	label_1991,  %eax
	# 0x805b765:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x805b768:	movl	0x806b40c, %eax [MEM, REG]
	movl	label_1992,  %eax
	# 0x805b76d:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805b770:	movl	0x806b410, %eax [MEM, REG]
	movl	label_1993,  %eax
	# 0x805b775:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805b778:	movl	0x806b414, %eax [MEM, REG]
	movl	label_1994,  %eax
	# 0x805b77d:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805b780:	movl	0x806b418, %eax [MEM, REG]
	movl	label_1995,  %eax
	# 0x805b785:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805b788:	movl	0x806b41c, %eax [MEM, REG]
	movl	label_1996,  %eax
	# 0x805b78d:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805b790:	movl	0x806b420, %eax [MEM, REG]
	movl	label_1997,  %eax
	# 0x805b795:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805b798:	movl	0x806b424, %eax [MEM, REG]
	movl	label_1998,  %eax
	# 0x805b79d:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805b7a0:	movl	0x806b428, %eax [MEM, REG]
	movl	label_1999,  %eax
	# 0x805b7a5:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805b7a8:	movl	0x806b42c, %eax [MEM, REG]
	movl	label_2000,  %eax
	# 0x805b7ad:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805b7b0:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b7b3:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805b7b6:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805b7b9:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b7bc:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b7bd:	calll	0x805a298 [IMM <CODEREF>]
	calll	set_custom_quoting
	# 0x805b7c2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b7c5:	leal	-0x3c(%ebp), %eax [MEM, REG]
	leal	-0x3c(%ebp), %eax
	# 0x805b7c8:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b7c9:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805b7cc:	pushl	-0x54(%ebp) [MEM]
	pushl	-0x54(%ebp)
	# 0x805b7cf:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b7d2:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b7d7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b7da:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805b7dd:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805b7e4:	je	0x805b7eb [IMM <CODEREF>]
	je	.label_2003
	# 0x805b7e6:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805b7eb:	leave	 []
.label_2003:
	leave	
	# 0x805b7ec:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b7ed
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	# 0x805b7ed:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b7ee:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b7f0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b7f3:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b7f6:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b7f9:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b7fc:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b7fe:	calll	0x805b70c [IMM <CODEREF>]
	calll	quotearg_n_custom
	# 0x805b803:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b806:	leave	 []
	leave	
	# 0x805b807:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b808
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	# 0x805b808:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b809:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b80b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b80e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b811:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805b814:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b817:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b81a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b81d:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b81f:	calll	0x805b72d [IMM <CODEREF>]
	calll	quotearg_n_custom_mem
	# 0x805b824:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805b827:	leave	 []
	leave	
	# 0x805b828:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b829

	# 0x805b829:	pushl	%ebp [REG]
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:
	pushl	%ebp
	# 0x805b82a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b82c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b82f:	pushl	$0x806a340 [IMM <DATAREF>]
	pushl	$quote_quoting_options
	# 0x805b834:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805b837:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b83a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b83d:	calll	0x805b204 [IMM <CODEREF>]
	calll	quotearg_n_options
	# 0x805b842:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b845:	leave	 []
	leave	
	# 0x805b846:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b847
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	# 0x805b847:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805b848:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b84a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b84d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b850:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b853:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b856:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b858:	calll	0x805b829 [IMM <CODEREF>]
	calll	quote_n_mem
	# 0x805b85d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b860:	leave	 []
	leave	
	# 0x805b861:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b862

	# 0x805b862:	pushl	%ebp [REG]
	.globl quote_n
	.type quote_n, @function
quote_n:
	pushl	%ebp
	# 0x805b863:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b865:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b868:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b86b:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805b86d:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b870:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b873:	calll	0x805b829 [IMM <CODEREF>]
	calll	quote_n_mem
	# 0x805b878:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b87b:	leave	 []
	leave	
	# 0x805b87c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b87d

	# 0x805b87d:	pushl	%ebp [REG]
	.globl quote
	.type quote, @function
quote:
	pushl	%ebp
	# 0x805b87e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b880:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b883:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b886:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b889:	pushl	$0 [IMM]
	pushl	$0
	# 0x805b88b:	calll	0x805b862 [IMM <CODEREF>]
	calll	quote_n
	# 0x805b890:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b893:	leave	 []
	leave	
	# 0x805b894:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b895

	# 0x805b895:	pushl	%ebp [REG]
	.globl same_name
	.type same_name, @function
same_name:
	pushl	%ebp
	# 0x805b896:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b898:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805b89b:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805b89e:	pushl	$-0x64 [IMM]
	pushl	$-0x64
	# 0x805b8a0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b8a3:	pushl	$-0x64 [IMM]
	pushl	$-0x64
	# 0x805b8a5:	calll	0x805b8af [IMM <CODEREF>]
	calll	same_nameat
	# 0x805b8aa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b8ad:	leave	 []
	leave	
	# 0x805b8ae:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805b8af

	# 0x805b8af:	pushl	%ebp [REG]
	.globl same_nameat
	.type same_nameat, @function
same_nameat:
	pushl	%ebp
	# 0x805b8b0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805b8b2:	pushl	%esi [REG]
	pushl	%esi
	# 0x805b8b3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805b8b4:	subl	$0x100, %esp [IMM, REG]
	subl	$0x100, %esp
	# 0x805b8ba:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805b8bd:	movl	%eax, -0xfc(%ebp) [REG, MEM]
	movl	%eax, -0xfc(%ebp)
	# 0x805b8c3:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805b8c6:	movl	%eax, -0x100(%ebp) [REG, MEM]
	movl	%eax, -0x100(%ebp)
	# 0x805b8cc:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805b8d2:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805b8d5:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805b8d7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b8da:	pushl	-0xfc(%ebp) [MEM]
	pushl	-0xfc(%ebp)
	# 0x805b8e0:	calll	0x8053b48 [IMM <CODEREF>]
	calll	last_component
	# 0x805b8e5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b8e8:	movl	%eax, -0xe8(%ebp) [REG, MEM]
	movl	%eax, -0xe8(%ebp)
	# 0x805b8ee:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b8f1:	pushl	-0x100(%ebp) [MEM]
	pushl	-0x100(%ebp)
	# 0x805b8f7:	calll	0x8053b48 [IMM <CODEREF>]
	calll	last_component
	# 0x805b8fc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b8ff:	movl	%eax, -0xe4(%ebp) [REG, MEM]
	movl	%eax, -0xe4(%ebp)
	# 0x805b905:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b908:	pushl	-0xe8(%ebp) [MEM]
	pushl	-0xe8(%ebp)
	# 0x805b90e:	calll	0x8053ba3 [IMM <CODEREF>]
	calll	base_len
	# 0x805b913:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b916:	movl	%eax, -0xe0(%ebp) [REG, MEM]
	movl	%eax, -0xe0(%ebp)
	# 0x805b91c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b91f:	pushl	-0xe4(%ebp) [MEM]
	pushl	-0xe4(%ebp)
	# 0x805b925:	calll	0x8053ba3 [IMM <CODEREF>]
	calll	base_len
	# 0x805b92a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b92d:	movl	%eax, -0xdc(%ebp) [REG, MEM]
	movl	%eax, -0xdc(%ebp)
	# 0x805b933:	movl	-0xe0(%ebp), %eax [MEM, REG]
	movl	-0xe0(%ebp), %eax
	# 0x805b939:	cmpl	-0xdc(%ebp), %eax [MEM, REG]
	cmpl	-0xdc(%ebp), %eax
	# 0x805b93f:	jne	0x805b969 [IMM <CODEREF>]
	jne	.label_2008
	# 0x805b941:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805b944:	pushl	-0xdc(%ebp) [MEM]
	pushl	-0xdc(%ebp)
	# 0x805b94a:	pushl	-0xe4(%ebp) [MEM]
	pushl	-0xe4(%ebp)
	# 0x805b950:	pushl	-0xe8(%ebp) [MEM]
	pushl	-0xe8(%ebp)
	# 0x805b956:	calll	0x8049690 [IMM <CODEREF>]
	calll	memcmp
	# 0x805b95b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b95e:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805b960:	jne	0x805b969 [IMM <CODEREF>]
	jne	.label_2008
	# 0x805b962:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805b967:	jmp	0x805b96e [IMM <CODEREF>]
	jmp	.label_2010
	# 0x805b969:	movl	$0, %eax [IMM, REG]
.label_2008:
	movl	$0, %eax
	# 0x805b96e:	movb	%al, -0xea(%ebp) [REG, MEM]
.label_2010:
	movb	%al, -0xea(%ebp)
	# 0x805b974:	andb	$1, -0xea(%ebp) [IMM, MEM]
	andb	$1, -0xea(%ebp)
	# 0x805b97b:	movzbl	-0xea(%ebp), %eax [MEM, REG]
	movzbl	-0xea(%ebp), %eax
	# 0x805b982:	movb	%al, -0xe9(%ebp) [REG, MEM]
	movb	%al, -0xe9(%ebp)
	# 0x805b988:	movb	$0, -0xeb(%ebp) [IMM, MEM]
	movb	$0, -0xeb(%ebp)
	# 0x805b98f:	cmpb	$0, -0xe9(%ebp) [IMM, MEM]
	cmpb	$0, -0xe9(%ebp)
	# 0x805b996:	je	0x805bac0 [IMM <CODEREF>]
	je	.label_2011
	# 0x805b99c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805b99f:	pushl	-0xfc(%ebp) [MEM]
	pushl	-0xfc(%ebp)
	# 0x805b9a5:	calll	0x805e2db [IMM <CODEREF>]
	calll	dir_name
	# 0x805b9aa:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b9ad:	movl	%eax, -0xd8(%ebp) [REG, MEM]
	movl	%eax, -0xd8(%ebp)
	# 0x805b9b3:	movl	$0x100, -0xd4(%ebp) [IMM, MEM]
	movl	$0x100, -0xd4(%ebp)
	# 0x805b9bd:	pushl	-0xd4(%ebp) [MEM]
	pushl	-0xd4(%ebp)
	# 0x805b9c3:	leal	-0xcc(%ebp), %eax [MEM, REG]
	leal	-0xcc(%ebp), %eax
	# 0x805b9c9:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b9ca:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x805b9d0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805b9d3:	calll	0x805ec80 [IMM <CODEREF>]
	calll	fstatat64
	# 0x805b9d8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b9db:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805b9dd:	je	0x805b9fc [IMM <CODEREF>]
	je	.label_2007
	# 0x805b9df:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805b9e4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805b9e6:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x805b9ec:	pushl	$0x8063bd4 [IMM <DATAREF>]
	pushl	$label_2005
	# 0x805b9f1:	pushl	%eax [REG]
	pushl	%eax
	# 0x805b9f2:	pushl	$1 [IMM]
	pushl	$1
	# 0x805b9f4:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x805b9f9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805b9fc:	subl	$0xc, %esp [IMM, REG]
.label_2007:
	subl	$0xc, %esp
	# 0x805b9ff:	pushl	-0xd8(%ebp) [MEM]
	pushl	-0xd8(%ebp)
	# 0x805ba05:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805ba0a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ba0d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ba10:	pushl	-0x100(%ebp) [MEM]
	pushl	-0x100(%ebp)
	# 0x805ba16:	calll	0x805e2db [IMM <CODEREF>]
	calll	dir_name
	# 0x805ba1b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ba1e:	movl	%eax, -0xd0(%ebp) [REG, MEM]
	movl	%eax, -0xd0(%ebp)
	# 0x805ba24:	pushl	-0xd4(%ebp) [MEM]
	pushl	-0xd4(%ebp)
	# 0x805ba2a:	leal	-0x6c(%ebp), %eax [MEM, REG]
	leal	-0x6c(%ebp), %eax
	# 0x805ba2d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ba2e:	pushl	-0xd0(%ebp) [MEM]
	pushl	-0xd0(%ebp)
	# 0x805ba34:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805ba37:	calll	0x805ec80 [IMM <CODEREF>]
	calll	fstatat64
	# 0x805ba3c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ba3f:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ba41:	je	0x805ba60 [IMM <CODEREF>]
	je	.label_2012
	# 0x805ba43:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805ba48:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805ba4a:	pushl	-0xd0(%ebp) [MEM]
	pushl	-0xd0(%ebp)
	# 0x805ba50:	pushl	$0x8063bd4 [IMM <DATAREF>]
	pushl	$label_2005
	# 0x805ba55:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ba56:	pushl	$1 [IMM]
	pushl	$1
	# 0x805ba58:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x805ba5d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ba60:	movl	-0x74(%ebp), %ecx [MEM, REG]
.label_2012:
	movl	-0x74(%ebp), %ecx
	# 0x805ba63:	movl	-0x70(%ebp), %ebx [MEM, REG]
	movl	-0x70(%ebp), %ebx
	# 0x805ba66:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805ba69:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x805ba6c:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x805ba6e:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x805ba70:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x805ba72:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x805ba74:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ba76:	jne	0x805ba9d [IMM <CODEREF>]
	jne	.label_2009
	# 0x805ba78:	movl	-0xcc(%ebp), %ecx [MEM, REG]
	movl	-0xcc(%ebp), %ecx
	# 0x805ba7e:	movl	-0xc8(%ebp), %ebx [MEM, REG]
	movl	-0xc8(%ebp), %ebx
	# 0x805ba84:	movl	-0x6c(%ebp), %eax [MEM, REG]
	movl	-0x6c(%ebp), %eax
	# 0x805ba87:	movl	-0x68(%ebp), %edx [MEM, REG]
	movl	-0x68(%ebp), %edx
	# 0x805ba8a:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x805ba8c:	xorl	%edx, %esi [REG, REG]
	xorl	%edx, %esi
	# 0x805ba8e:	xorl	%ecx, %eax [REG, REG]
	xorl	%ecx, %eax
	# 0x805ba90:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x805ba92:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ba94:	jne	0x805ba9d [IMM <CODEREF>]
	jne	.label_2009
	# 0x805ba96:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805ba9b:	jmp	0x805baa2 [IMM <CODEREF>]
	jmp	.label_2006
	# 0x805ba9d:	movl	$0, %eax [IMM, REG]
.label_2009:
	movl	$0, %eax
	# 0x805baa2:	movb	%al, -0xeb(%ebp) [REG, MEM]
.label_2006:
	movb	%al, -0xeb(%ebp)
	# 0x805baa8:	andb	$1, -0xeb(%ebp) [IMM, MEM]
	andb	$1, -0xeb(%ebp)
	# 0x805baaf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bab2:	pushl	-0xd0(%ebp) [MEM]
	pushl	-0xd0(%ebp)
	# 0x805bab8:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805babd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bac0:	movzbl	-0xeb(%ebp), %eax [MEM, REG]
.label_2011:
	movzbl	-0xeb(%ebp), %eax
	# 0x805bac7:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805baca:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805bad1:	je	0x805bad8 [IMM <CODEREF>]
	je	.label_2004
	# 0x805bad3:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805bad8:	leal	-8(%ebp), %esp [MEM, REG]
.label_2004:
	leal	-8(%ebp), %esp
	# 0x805badb:	popl	%ebx [REG]
	popl	%ebx
	# 0x805badc:	popl	%esi [REG]
	popl	%esi
	# 0x805badd:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bade:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805badf
	.globl getcon
	.type getcon, @function
getcon:

	# 0x805badf:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bae0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bae2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bae5:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805baea:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805baf0:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805baf5:	leave	 []
	leave	
	# 0x805baf6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805baf7

	# 0x805baf7:	pushl	%ebp [REG]
	.globl freecon
	.type freecon, @function
freecon:
	pushl	%ebp
	# 0x805baf8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bafa:	nop	 []
	nop	
	# 0x805bafb:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bafc:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bafd
	.globl getfscreatecon
	.type getfscreatecon, @function
getfscreatecon:

	# 0x805bafd:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bafe:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb00:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb03:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb08:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb0e:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb13:	leave	 []
	leave	
	# 0x805bb14:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb15
	.globl setfscreatecon
	.type setfscreatecon, @function
setfscreatecon:

	# 0x805bb15:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bb16:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb18:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb1b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb20:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb26:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb2b:	leave	 []
	leave	
	# 0x805bb2c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb2d
	.globl matchpathcon
	.type matchpathcon, @function
matchpathcon:

	# 0x805bb2d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bb2e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb30:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb33:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb38:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb3e:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb43:	leave	 []
	leave	
	# 0x805bb44:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb45

	# 0x805bb45:	pushl	%ebp [REG]
	.globl getfilecon
	.type getfilecon, @function
getfilecon:
	pushl	%ebp
	# 0x805bb46:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb48:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb4b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb50:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb56:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb5b:	leave	 []
	leave	
	# 0x805bb5c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb5d

	# 0x805bb5d:	pushl	%ebp [REG]
	.globl lgetfilecon
	.type lgetfilecon, @function
lgetfilecon:
	pushl	%ebp
	# 0x805bb5e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb60:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb63:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb68:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb6e:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb73:	leave	 []
	leave	
	# 0x805bb74:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb75
	.globl fgetfilecon
	.type fgetfilecon, @function
fgetfilecon:

	# 0x805bb75:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bb76:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb78:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb7b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb80:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb86:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bb8b:	leave	 []
	leave	
	# 0x805bb8c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bb8d
	.globl setfilecon
	.type setfilecon, @function
setfilecon:

	# 0x805bb8d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bb8e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bb90:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bb93:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bb98:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bb9e:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bba3:	leave	 []
	leave	
	# 0x805bba4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bba5
	.globl lsetfilecon
	.type lsetfilecon, @function
lsetfilecon:

	# 0x805bba5:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bba6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bba8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bbab:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bbb0:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bbb6:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bbbb:	leave	 []
	leave	
	# 0x805bbbc:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bbbd
	.globl fsetfilecon
	.type fsetfilecon, @function
fsetfilecon:

	# 0x805bbbd:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bbbe:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bbc0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bbc3:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bbc8:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bbce:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bbd3:	leave	 []
	leave	
	# 0x805bbd4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bbd5
	.globl security_check_context
	.type security_check_context, @function
security_check_context:

	# 0x805bbd5:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bbd6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bbd8:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bbdb:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bbe0:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bbe6:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bbeb:	leave	 []
	leave	
	# 0x805bbec:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bbed
	.globl security_check_context_raw
	.type security_check_context_raw, @function
security_check_context_raw:

	# 0x805bbed:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bbee:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bbf0:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bbf3:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bbf8:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bbfe:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bc03:	leave	 []
	leave	
	# 0x805bc04:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc05
	.globl setexeccon
	.type setexeccon, @function
setexeccon:

	# 0x805bc05:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc06:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc08:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bc0b:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bc10:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bc16:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bc1b:	leave	 []
	leave	
	# 0x805bc1c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc1d
	.globl security_compute_create
	.type security_compute_create, @function
security_compute_create:

	# 0x805bc1d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc1e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc20:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805bc23:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805bc26:	movw	%ax, -0xc(%ebp) [REG, MEM]
	movw	%ax, -0xc(%ebp)
	# 0x805bc2a:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bc2f:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bc35:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bc3a:	leave	 []
	leave	
	# 0x805bc3b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc3c
	.globl string_to_security_class
	.type string_to_security_class, @function
string_to_security_class:

	# 0x805bc3c:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc3d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc3f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bc42:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bc47:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bc4d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805bc52:	leave	 []
	leave	
	# 0x805bc53:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc54
	.globl matchpathcon_init_prefix
	.type matchpathcon_init_prefix, @function
matchpathcon_init_prefix:

	# 0x805bc54:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc55:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc57:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bc5a:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805bc5f:	movl	$0x5f, 0(%eax) [IMM, MEM]
	movl	$0x5f, 0(%eax)
	# 0x805bc65:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bc6a:	leave	 []
	leave	
	# 0x805bc6b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc6c
	.globl get_stat_atime_ns
	.type get_stat_atime_ns, @function
get_stat_atime_ns:

	# 0x805bc6c:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc6d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc6f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bc72:	movl	0x44(%eax), %eax [MEM, REG]
	movl	0x44(%eax), %eax
	# 0x805bc75:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bc76:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc77
	.globl get_stat_ctime_ns
	.type get_stat_ctime_ns, @function
get_stat_ctime_ns:

	# 0x805bc77:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc78:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc7a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bc7d:	movl	0x54(%eax), %eax [MEM, REG]
	movl	0x54(%eax), %eax
	# 0x805bc80:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bc81:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc82
	.globl get_stat_mtime_ns
	.type get_stat_mtime_ns, @function
get_stat_mtime_ns:

	# 0x805bc82:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc83:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc85:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bc88:	movl	0x4c(%eax), %eax [MEM, REG]
	movl	0x4c(%eax), %eax
	# 0x805bc8b:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bc8c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc8d
	.globl get_stat_birthtime_ns
	.type get_stat_birthtime_ns, @function
get_stat_birthtime_ns:

	# 0x805bc8d:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bc8e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc90:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805bc95:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bc96:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bc97

	# 0x805bc97:	pushl	%ebp [REG]
	.globl get_stat_atime
	.type get_stat_atime, @function
get_stat_atime:
	pushl	%ebp
	# 0x805bc98:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bc9a:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805bc9d:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bca0:	movl	0x44(%eax), %edx [MEM, REG]
	movl	0x44(%eax), %edx
	# 0x805bca3:	movl	0x40(%eax), %eax [MEM, REG]
	movl	0x40(%eax), %eax
	# 0x805bca6:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805bca8:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805bcab:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bcae:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bcaf:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805bcb2

	# 0x805bcb2:	pushl	%ebp [REG]
	.globl get_stat_ctime
	.type get_stat_ctime, @function
get_stat_ctime:
	pushl	%ebp
	# 0x805bcb3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bcb5:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805bcb8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bcbb:	movl	0x54(%eax), %edx [MEM, REG]
	movl	0x54(%eax), %edx
	# 0x805bcbe:	movl	0x50(%eax), %eax [MEM, REG]
	movl	0x50(%eax), %eax
	# 0x805bcc1:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805bcc3:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805bcc6:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bcc9:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bcca:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805bccd

	# 0x805bccd:	pushl	%ebp [REG]
	.globl get_stat_mtime
	.type get_stat_mtime, @function
get_stat_mtime:
	pushl	%ebp
	# 0x805bcce:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bcd0:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805bcd3:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bcd6:	movl	0x4c(%eax), %edx [MEM, REG]
	movl	0x4c(%eax), %edx
	# 0x805bcd9:	movl	0x48(%eax), %eax [MEM, REG]
	movl	0x48(%eax), %eax
	# 0x805bcdc:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805bcde:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805bce1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bce4:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bce5:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805bce8
	.globl get_stat_birthtime
	.type get_stat_birthtime, @function
get_stat_birthtime:

	# 0x805bce8:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bce9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bceb:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805bcee:	movl	$0xffffffff, -8(%ebp) [IMM, MEM]
	movl	$0xffffffff, -8(%ebp)
	# 0x805bcf5:	movl	$0xffffffff, -4(%ebp) [IMM, MEM]
	movl	$0xffffffff, -4(%ebp)
	# 0x805bcfc:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805bcff:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805bd02:	movl	-4(%ebp), %edx [MEM, REG]
	movl	-4(%ebp), %edx
	# 0x805bd05:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805bd07:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805bd0a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bd0d:	leave	 []
	leave	
	# 0x805bd0e:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805bd11
	.globl stat_time_normalize
	.type stat_time_normalize, @function
stat_time_normalize:

	# 0x805bd11:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bd12:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bd14:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bd17:	popl	%ebp [REG]
	popl	%ebp
	# 0x805bd18:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bd19
	.globl make_timespec
	.type make_timespec, @function
make_timespec:

	# 0x805bd19:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bd1a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bd1c:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805bd1f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bd22:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805bd25:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805bd28:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805bd2b:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805bd2e:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805bd31:	movl	-4(%ebp), %edx [MEM, REG]
	movl	-4(%ebp), %edx
	# 0x805bd34:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805bd36:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805bd39:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bd3c:	leave	 []
	leave	
	# 0x805bd3d:	retl	$4 [IMM]
	retl	$4
	.section	.text
	.align	32
	#Procedure 0x805bd40

	# 0x805bd40:	pushl	%ebp [REG]
	.globl timespec_cmp
	.type timespec_cmp, @function
timespec_cmp:
	pushl	%ebp
	# 0x805bd41:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bd43:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805bd46:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805bd49:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805bd4b:	jge	0x805bd54 [IMM <CODEREF>]
	jge	.label_2013
	# 0x805bd4d:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805bd52:	jmp	0x805bd93 [IMM <CODEREF>]
	jmp	.label_2017
	# 0x805bd54:	movl	8(%ebp), %edx [MEM, REG]
.label_2013:
	movl	8(%ebp), %edx
	# 0x805bd57:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805bd5a:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805bd5c:	jle	0x805bd65 [IMM <CODEREF>]
	jle	.label_2014
	# 0x805bd5e:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805bd63:	jmp	0x805bd93 [IMM <CODEREF>]
	jmp	.label_2017
	# 0x805bd65:	movl	0xc(%ebp), %eax [MEM, REG]
.label_2014:
	movl	0xc(%ebp), %eax
	# 0x805bd68:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x805bd6b:	jl	0x805bd77 [IMM <CODEREF>]
	jl	.label_2015
	# 0x805bd6d:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bd70:	cmpl	$0x77359400, %eax [IMM, REG]
	cmpl	$0x77359400, %eax
	# 0x805bd75:	jle	0x805bd77 [IMM <CODEREF>]
	jle	.label_2015
	# 0x805bd77:	movl	0x14(%ebp), %eax [MEM, REG]
.label_2015:
	movl	0x14(%ebp), %eax
	# 0x805bd7a:	cmpl	$-1, %eax [IMM, REG]
	cmpl	$-1, %eax
	# 0x805bd7d:	jl	0x805bd89 [IMM <CODEREF>]
	jl	.label_2016
	# 0x805bd7f:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805bd82:	cmpl	$0x77359400, %eax [IMM, REG]
	cmpl	$0x77359400, %eax
	# 0x805bd87:	jle	0x805bd89 [IMM <CODEREF>]
	jle	.label_2016
	# 0x805bd89:	movl	0xc(%ebp), %edx [MEM, REG]
.label_2016:
	movl	0xc(%ebp), %edx
	# 0x805bd8c:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805bd8f:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805bd91:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805bd93:	popl	%ebp [REG]
.label_2017:
	popl	%ebp
	# 0x805bd94:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bd95
	.globl timespec_sign
	.type timespec_sign, @function
timespec_sign:

	# 0x805bd95:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bd96:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bd98:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bd9b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805bd9d:	js	0x805bdbb [IMM <CODEREF>]
	js	.label_2019
	# 0x805bd9f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bda2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805bda4:	jne	0x805bdad [IMM <CODEREF>]
	jne	.label_2021
	# 0x805bda6:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bda9:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805bdab:	je	0x805bdb4 [IMM <CODEREF>]
	je	.label_2020
	# 0x805bdad:	movl	$1, %eax [IMM, REG]
.label_2021:
	movl	$1, %eax
	# 0x805bdb2:	jmp	0x805bdc0 [IMM <CODEREF>]
	jmp	.label_2018
	# 0x805bdb4:	movl	$0, %eax [IMM, REG]
.label_2020:
	movl	$0, %eax
	# 0x805bdb9:	jmp	0x805bdc0 [IMM <CODEREF>]
	jmp	.label_2018
	# 0x805bdbb:	movl	$0xffffffff, %eax [IMM, REG]
.label_2019:
	movl	$0xffffffff, %eax
	# 0x805bdc0:	popl	%ebp [REG]
.label_2018:
	popl	%ebp
	# 0x805bdc1:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bdc2
	.globl timespectod
	.type timespectod, @function
timespectod:

	# 0x805bdc2:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805bdc3:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bdc5:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bdc8:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805bdcb:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805bdce:	fildl	-4(%ebp) [MEM]
	fildl	-4(%ebp)
	# 0x805bdd1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805bdd4:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805bdd7:	fildl	-4(%ebp) [MEM]
	fildl	-4(%ebp)
	# 0x805bdda:	fldl	0x8063bd8 [MEM]
	fldl	label_2022
	# 0x805bde0:	fdivrp	%st(1) [REG]
	fdivrp	%st(1)
	# 0x805bde2:	faddp	%st(1) [REG]
	faddp	%st(1)
	# 0x805bde4:	leave	 []
	leave	
	# 0x805bde5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805bde6

	# 0x805bde6:	pushl	%ebp [REG]
	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	pushl	%ebp
	# 0x805bde7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805bde9:	pushl	%edi [REG]
	pushl	%edi
	# 0x805bdea:	pushl	%esi [REG]
	pushl	%esi
	# 0x805bdeb:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bdec:	subl	$0x2c, %esp [IMM, REG]
	subl	$0x2c, %esp
	# 0x805bdef:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805bdf3:	je	0x805be13 [IMM <CODEREF>]
	je	.label_2026
	# 0x805bdf5:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bdf8:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805bdfb:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805bdfe:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805be01:	pushl	$0x8063be0 [IMM <DATAREF>]
	pushl	$label_2030
	# 0x805be06:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805be09:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805be0e:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805be11:	jmp	0x805be29 [IMM <CODEREF>]
	jmp	.label_2024
	# 0x805be13:	pushl	0x14(%ebp) [MEM]
.label_2026:
	pushl	0x14(%ebp)
	# 0x805be16:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805be19:	pushl	$0x8063bec [IMM <DATAREF>]
	pushl	$label_2025
	# 0x805be1e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805be21:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805be26:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805be29:	subl	$0xc, %esp [IMM, REG]
.label_2024:
	subl	$0xc, %esp
	# 0x805be2c:	pushl	$0x8063bf3 [IMM <DATAREF>]
	pushl	$label_2027
	# 0x805be31:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805be36:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805be39:	pushl	$0x7e2 [IMM]
	pushl	$0x7e2
	# 0x805be3e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805be3f:	pushl	$0x8063f40 [IMM <DATAREF>]
	pushl	$version_etc_copyright
	# 0x805be44:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805be47:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805be4c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805be4f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805be52:	pushl	$0x8063bf8 [IMM <DATAREF>]
	pushl	$label_2023
	# 0x805be57:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805be5c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805be5f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805be62:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805be65:	pushl	%eax [REG]
	pushl	%eax
	# 0x805be66:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805be6b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805be6e:	cmpl	$9, 0x1c(%ebp) [IMM, MEM]
	cmpl	$9, 0x1c(%ebp)
	# 0x805be72:	ja	0x805c1ad [IMM <CODEREF>]
	ja	.label_2028
	# 0x805be78:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x805be7b:	shll	$2, %eax [IMM, REG]
	shll	$2, %eax
	# 0x805be7e:	addl	$0x8063e40, %eax [IMM <DATAREF>, REG]
	addl	$label_2031,  %eax
	# 0x805be83:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805be85:	jmpl	*%eax [REG]
	jmpl	*%eax
	# 0x805be87:	calll	0x8049b10 [IMM <CODEREF>]
.label_2668:
	calll	abort
	# 0x805be8c:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2669:
	movl	0x18(%ebp), %eax
	# 0x805be8f:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805be91
	.globl sub_805be91
	.type sub_805be91, @function
sub_805be91:

	# 0x805be91:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805be94:	pushl	$0x8063cc4 [IMM <DATAREF>]
	pushl	$label_2032
	# 0x805be99:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805be9e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bea1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805bea4:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bea5:	pushl	%eax [REG]
	pushl	%eax
	# 0x805bea6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805bea9:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805beae:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805beb1:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805beb6:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2670:
	movl	0x18(%ebp), %eax
	# 0x805beb9:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805bebc:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805bebe:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bec1:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805bec3
	.globl sub_805bec3
	.type sub_805bec3, @function
sub_805bec3:

	# 0x805bec3:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bec6:	pushl	$0x8063cd4 [IMM <DATAREF>]
	pushl	$label_2034
	# 0x805becb:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805bed0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bed3:	pushl	%esi [REG]
	pushl	%esi
	# 0x805bed4:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bed5:	pushl	%eax [REG]
	pushl	%eax
	# 0x805bed6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805bed9:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805bede:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bee1:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805bee6:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2671:
	movl	0x18(%ebp), %eax
	# 0x805bee9:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805beec:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805beee:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bef1:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805bef4:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805bef6:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bef9:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805befb
	.globl sub_805befb
	.type sub_805befb, @function
sub_805befb:

	# 0x805befb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805befe:	pushl	$0x8063ceb [IMM <DATAREF>]
	pushl	$label_2035
	# 0x805bf03:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805bf08:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bf0b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bf0e:	pushl	%edi [REG]
	pushl	%edi
	# 0x805bf0f:	pushl	%esi [REG]
	pushl	%esi
	# 0x805bf10:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bf11:	pushl	%eax [REG]
	pushl	%eax
	# 0x805bf12:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805bf15:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805bf1a:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805bf1d:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805bf22:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2672:
	movl	0x18(%ebp), %eax
	# 0x805bf25:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805bf28:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805bf2a:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805bf2d:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf30:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805bf33:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805bf35:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf38:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805bf3b:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805bf3d:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf40:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805bf42
	.globl sub_805bf42
	.type sub_805bf42, @function
sub_805bf42:

	# 0x805bf42:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bf45:	pushl	$0x8063d08 [IMM <DATAREF>]
	pushl	$label_2036
	# 0x805bf4a:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805bf4f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bf52:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805bf55:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805bf58:	pushl	%edi [REG]
	pushl	%edi
	# 0x805bf59:	pushl	%esi [REG]
	pushl	%esi
	# 0x805bf5a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bf5b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805bf5c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805bf5f:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805bf64:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805bf67:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805bf6c:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2673:
	movl	0x18(%ebp), %eax
	# 0x805bf6f:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805bf72:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805bf74:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805bf77:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf7a:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805bf7d:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805bf7f:	movl	%edx, -0x20(%ebp) [REG, MEM]
	movl	%edx, -0x20(%ebp)
	# 0x805bf82:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf85:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805bf88:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805bf8a:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf8d:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805bf90:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805bf92:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bf95:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805bf97
	.globl sub_805bf97
	.type sub_805bf97, @function
sub_805bf97:

	# 0x805bf97:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bf9a:	pushl	$0x8063d28 [IMM <DATAREF>]
	pushl	$label_2037
	# 0x805bf9f:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805bfa4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805bfa7:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805bfaa:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805bfad:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805bfb0:	pushl	%edi [REG]
	pushl	%edi
	# 0x805bfb1:	pushl	%esi [REG]
	pushl	%esi
	# 0x805bfb2:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805bfb3:	pushl	%eax [REG]
	pushl	%eax
	# 0x805bfb4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805bfb7:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805bfbc:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805bfbf:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805bfc4:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2674:
	movl	0x18(%ebp), %eax
	# 0x805bfc7:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805bfca:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805bfcc:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805bfcf:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bfd2:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805bfd5:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805bfd7:	movl	%ecx, -0x20(%ebp) [REG, MEM]
	movl	%ecx, -0x20(%ebp)
	# 0x805bfda:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bfdd:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805bfe0:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805bfe2:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805bfe5:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bfe8:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805bfeb:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805bfed:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bff0:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805bff3:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805bff5:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805bff8:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805bffa
	.globl sub_805bffa
	.type sub_805bffa, @function
sub_805bffa:

	# 0x805bffa:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805bffd:	pushl	$0x8063d4c [IMM <DATAREF>]
	pushl	$label_2038
	# 0x805c002:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c007:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c00a:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c00d:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c010:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c013:	pushl	%edi [REG]
	pushl	%edi
	# 0x805c014:	pushl	%esi [REG]
	pushl	%esi
	# 0x805c015:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c016:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c017:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c01a:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805c01f:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c022:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805c027:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2675:
	movl	0x18(%ebp), %eax
	# 0x805c02a:	addl	$0x18, %eax [IMM, REG]
	addl	$0x18, %eax
	# 0x805c02d:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c02f:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c032:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805c035:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c037:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c03a:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c03d:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805c040:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805c042:	movl	%ecx, -0x20(%ebp) [REG, MEM]
	movl	%ecx, -0x20(%ebp)
	# 0x805c045:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c048:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805c04b:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c04d:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805c050:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c053:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805c056:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805c058:	movl	%edi, -0x28(%ebp) [REG, MEM]
	movl	%edi, -0x28(%ebp)
	# 0x805c05b:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c05e:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805c061:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805c063:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c066:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805c068
	.globl sub_805c068
	.type sub_805c068, @function
sub_805c068:

	# 0x805c068:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c06b:	pushl	$0x8063d74 [IMM <DATAREF>]
	pushl	$label_2039
	# 0x805c070:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c075:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c078:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c07b:	pushl	%esi [REG]
	pushl	%esi
	# 0x805c07c:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c07f:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c082:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c085:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805c088:	pushl	%edi [REG]
	pushl	%edi
	# 0x805c089:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c08a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c08b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c08e:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805c093:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805c096:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805c09b:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2676:
	movl	0x18(%ebp), %eax
	# 0x805c09e:	addl	$0x1c, %eax [IMM, REG]
	addl	$0x1c, %eax
	# 0x805c0a1:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805c0a3:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0a6:	addl	$0x18, %eax [IMM, REG]
	addl	$0x18, %eax
	# 0x805c0a9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c0ab:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c0ae:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0b1:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805c0b4:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805c0b6:	movl	%ecx, -0x20(%ebp) [REG, MEM]
	movl	%ecx, -0x20(%ebp)
	# 0x805c0b9:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0bc:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805c0bf:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c0c1:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805c0c4:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0c7:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805c0ca:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c0cc:	movl	%esi, -0x28(%ebp) [REG, MEM]
	movl	%esi, -0x28(%ebp)
	# 0x805c0cf:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0d2:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805c0d5:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x805c0d7:	movl	%ebx, -0x2c(%ebp) [REG, MEM]
	movl	%ebx, -0x2c(%ebp)
	# 0x805c0da:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0dd:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805c0e0:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c0e2:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c0e5:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805c0e7
	.globl sub_805c0e7
	.type sub_805c0e7, @function
sub_805c0e7:

	# 0x805c0e7:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c0ea:	pushl	$0x8063da0 [IMM <DATAREF>]
	pushl	$label_2040
	# 0x805c0ef:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c0f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c0f7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c0fa:	pushl	%edi [REG]
	pushl	%edi
	# 0x805c0fb:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c0fe:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c101:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c104:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805c107:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805c10a:	pushl	%esi [REG]
	pushl	%esi
	# 0x805c10b:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c10c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c10d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c110:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805c115:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805c118:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805c11d:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2677:
	movl	0x18(%ebp), %eax
	# 0x805c120:	addl	$0x20, %eax [IMM, REG]
	addl	$0x20, %eax
	# 0x805c123:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805c125:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c128:	addl	$0x1c, %eax [IMM, REG]
	addl	$0x1c, %eax
	# 0x805c12b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c12d:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c130:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c133:	addl	$0x18, %eax [IMM, REG]
	addl	$0x18, %eax
	# 0x805c136:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805c138:	movl	%ecx, -0x20(%ebp) [REG, MEM]
	movl	%ecx, -0x20(%ebp)
	# 0x805c13b:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c13e:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805c141:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c143:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805c146:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c149:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805c14c:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c14e:	movl	%esi, -0x28(%ebp) [REG, MEM]
	movl	%esi, -0x28(%ebp)
	# 0x805c151:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c154:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805c157:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x805c159:	movl	%ebx, -0x2c(%ebp) [REG, MEM]
	movl	%ebx, -0x2c(%ebp)
	# 0x805c15c:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c15f:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805c162:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c164:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805c167:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c16a:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805c16d:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c16f:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c172:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	.section	.text
	.align	32
	#Procedure 0x805c174
	.globl sub_805c174
	.type sub_805c174, @function
sub_805c174:

	# 0x805c174:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c177:	pushl	$0x8063dd0 [IMM <DATAREF>]
	pushl	$label_2041
	# 0x805c17c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c181:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c184:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c187:	pushl	%edi [REG]
	pushl	%edi
	# 0x805c188:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c18b:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c18e:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c191:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805c194:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805c197:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805c19a:	pushl	%esi [REG]
	pushl	%esi
	# 0x805c19b:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c19c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c19d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c1a0:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805c1a5:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805c1a8:	jmp	0x805c239 [IMM <CODEREF>]
	jmp	.label_2033
	# 0x805c1ad:	movl	0x18(%ebp), %eax [MEM, REG]
.label_2028:
	movl	0x18(%ebp), %eax
	# 0x805c1b0:	addl	$0x20, %eax [IMM, REG]
	addl	$0x20, %eax
	# 0x805c1b3:	movl	0(%eax), %edi [MEM, REG]
	movl	0(%eax), %edi
	# 0x805c1b5:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1b8:	addl	$0x1c, %eax [IMM, REG]
	addl	$0x1c, %eax
	# 0x805c1bb:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c1bd:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c1c0:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1c3:	addl	$0x18, %eax [IMM, REG]
	addl	$0x18, %eax
	# 0x805c1c6:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805c1c8:	movl	%ecx, -0x20(%ebp) [REG, MEM]
	movl	%ecx, -0x20(%ebp)
	# 0x805c1cb:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1ce:	addl	$0x14, %eax [IMM, REG]
	addl	$0x14, %eax
	# 0x805c1d1:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c1d3:	movl	%edx, -0x24(%ebp) [REG, MEM]
	movl	%edx, -0x24(%ebp)
	# 0x805c1d6:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1d9:	addl	$0x10, %eax [IMM, REG]
	addl	$0x10, %eax
	# 0x805c1dc:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c1de:	movl	%esi, -0x28(%ebp) [REG, MEM]
	movl	%esi, -0x28(%ebp)
	# 0x805c1e1:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1e4:	addl	$0xc, %eax [IMM, REG]
	addl	$0xc, %eax
	# 0x805c1e7:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x805c1e9:	movl	%ebx, -0x2c(%ebp) [REG, MEM]
	movl	%ebx, -0x2c(%ebp)
	# 0x805c1ec:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1ef:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805c1f2:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c1f4:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805c1f7:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c1fa:	addl	$4, %eax [IMM, REG]
	addl	$4, %eax
	# 0x805c1fd:	movl	0(%eax), %esi [MEM, REG]
	movl	0(%eax), %esi
	# 0x805c1ff:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c202:	movl	0(%eax), %ebx [MEM, REG]
	movl	0(%eax), %ebx
	# 0x805c204:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c207:	pushl	$0x8063e04 [IMM <DATAREF>]
	pushl	$label_2029
	# 0x805c20c:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c211:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c214:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c217:	pushl	%edi [REG]
	pushl	%edi
	# 0x805c218:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c21b:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c21e:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c221:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805c224:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805c227:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805c22a:	pushl	%esi [REG]
	pushl	%esi
	# 0x805c22b:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c22c:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c22d:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c230:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805c235:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805c238:	nop	 []
	nop	
	# 0x805c239:	nop	 []
.label_2033:
	nop	
	# 0x805c23a:	leal	-0xc(%ebp), %esp [MEM, REG]
	leal	-0xc(%ebp), %esp
	# 0x805c23d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805c23e:	popl	%esi [REG]
	popl	%esi
	# 0x805c23f:	popl	%edi [REG]
	popl	%edi
	# 0x805c240:	popl	%ebp [REG]
	popl	%ebp
	# 0x805c241:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c242
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	# 0x805c242:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805c243:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c245:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c248:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x805c24f:	jmp	0x805c255 [IMM <CODEREF>]
	jmp	.label_2042
	# 0x805c251:	addl	$1, -0xc(%ebp) [IMM, MEM]
.label_2043:
	addl	$1, -0xc(%ebp)
	# 0x805c255:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2042:
	movl	-0xc(%ebp), %eax
	# 0x805c258:	leal	0(, %eax, 4), %edx [MEM, REG]
	leal	0(, %eax, 4), %edx
	# 0x805c25f:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c262:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805c264:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c266:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805c268:	jne	0x805c251 [IMM <CODEREF>]
	jne	.label_2043
	# 0x805c26a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c26d:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805c270:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805c273:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805c276:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805c279:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c27c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c27f:	calll	0x805bde6 [IMM <CODEREF>]
	calll	version_etc_arn
	# 0x805c284:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c287:	nop	 []
	nop	
	# 0x805c288:	leave	 []
	leave	
	# 0x805c289:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c28a

	# 0x805c28a:	pushl	%ebp [REG]
	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	pushl	%ebp
	# 0x805c28b:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c28d:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805c290:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c293:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805c296:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805c299:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x805c29c:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805c29f:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805c2a2:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805c2a5:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x805c2a8:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c2ab:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805c2ae:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c2b4:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c2b7:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c2b9:	movl	$0, -0x38(%ebp) [IMM, MEM]
	movl	$0, -0x38(%ebp)
	# 0x805c2c0:	jmp	0x805c2c6 [IMM <CODEREF>]
	jmp	.label_2046
	# 0x805c2c2:	addl	$1, -0x38(%ebp) [IMM, MEM]
.label_2047:
	addl	$1, -0x38(%ebp)
	# 0x805c2c6:	cmpl	$9, -0x38(%ebp) [IMM, MEM]
.label_2046:
	cmpl	$9, -0x38(%ebp)
	# 0x805c2ca:	ja	0x805c2e9 [IMM <CODEREF>]
	ja	.label_2045
	# 0x805c2cc:	movl	-0x4c(%ebp), %eax [MEM, REG]
	movl	-0x4c(%ebp), %eax
	# 0x805c2cf:	leal	4(%eax), %edx [MEM, REG]
	leal	4(%eax), %edx
	# 0x805c2d2:	movl	%edx, -0x4c(%ebp) [REG, MEM]
	movl	%edx, -0x4c(%ebp)
	# 0x805c2d5:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c2d7:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805c2da:	movl	%edx, -0x34(%ebp, %eax, 4) [REG, MEM]
	movl	%edx, -0x34(%ebp, %eax, 4)
	# 0x805c2de:	movl	-0x38(%ebp), %eax [MEM, REG]
	movl	-0x38(%ebp), %eax
	# 0x805c2e1:	movl	-0x34(%ebp, %eax, 4), %eax [MEM, REG]
	movl	-0x34(%ebp, %eax, 4), %eax
	# 0x805c2e5:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805c2e7:	jne	0x805c2c2 [IMM <CODEREF>]
	jne	.label_2047
	# 0x805c2e9:	subl	$8, %esp [IMM, REG]
.label_2045:
	subl	$8, %esp
	# 0x805c2ec:	pushl	-0x38(%ebp) [MEM]
	pushl	-0x38(%ebp)
	# 0x805c2ef:	leal	-0x34(%ebp), %eax [MEM, REG]
	leal	-0x34(%ebp), %eax
	# 0x805c2f2:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c2f3:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805c2f6:	pushl	-0x44(%ebp) [MEM]
	pushl	-0x44(%ebp)
	# 0x805c2f9:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x805c2fc:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x805c2ff:	calll	0x805bde6 [IMM <CODEREF>]
	calll	version_etc_arn
	# 0x805c304:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c307:	nop	 []
	nop	
	# 0x805c308:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805c30b:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x805c312:	je	0x805c319 [IMM <CODEREF>]
	je	.label_2044
	# 0x805c314:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c319:	leave	 []
.label_2044:
	leave	
	# 0x805c31a:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c31b

	# 0x805c31b:	pushl	%ebp [REG]
	.globl version_etc
	.type version_etc, @function
version_etc:
	pushl	%ebp
	# 0x805c31c:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c31e:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805c321:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c324:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c327:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805c32a:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805c32d:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805c330:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805c333:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805c336:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805c339:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c33f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c342:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c344:	leal	0x18(%ebp), %eax [MEM, REG]
	leal	0x18(%ebp), %eax
	# 0x805c347:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c34a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805c34d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c350:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c351:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805c354:	pushl	-0x24(%ebp) [MEM]
	pushl	-0x24(%ebp)
	# 0x805c357:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805c35a:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c35d:	calll	0x805c28a [IMM <CODEREF>]
	calll	version_etc_va
	# 0x805c362:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c365:	nop	 []
	nop	
	# 0x805c366:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805c369:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x805c370:	je	0x805c377 [IMM <CODEREF>]
	je	.label_2048
	# 0x805c372:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c377:	leave	 []
.label_2048:
	leave	
	# 0x805c378:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c379
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	# 0x805c379:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805c37a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c37c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c37d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c380:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c383:	pushl	$0x8063e68 [IMM <DATAREF>]
	pushl	$label_2052
	# 0x805c388:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c38d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c390:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c393:	pushl	$0x8063e7d [IMM <DATAREF>]
	pushl	$label_2053
	# 0x805c398:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c399:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x805c39e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c3a1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c3a4:	pushl	$0x8063e93 [IMM <DATAREF>]
	pushl	$label_2054
	# 0x805c3a9:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c3ae:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c3b1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c3b4:	pushl	$0x8063ea8 [IMM <DATAREF>]
	pushl	$label_2050
	# 0x805c3b9:	pushl	$0x8063ed0 [IMM <DATAREF>]
	pushl	$label_2051
	# 0x805c3be:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c3bf:	calll	0x8049570 [IMM <CODEREF>]
	calll	printf
	# 0x805c3c4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c3c7:	movl	0x806a398, %ebx [MEM, REG]
	movl	stdout,  %ebx
	# 0x805c3cd:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c3d0:	pushl	$0x8063ee0 [IMM <DATAREF>]
	pushl	$label_2049
	# 0x805c3d5:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c3da:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c3dd:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c3e0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c3e1:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c3e2:	calll	0x80498c0 [IMM <CODEREF>]
	calll	fputs_unlocked
	# 0x805c3e7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c3ea:	nop	 []
	nop	
	# 0x805c3eb:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x805c3ee:	leave	 []
	leave	
	# 0x805c3ef:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c3f0

	# 0x805c3f0:	pushl	%ebp [REG]
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:
	pushl	%ebp
	# 0x805c3f1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c3f3:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c3f6:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c3fc:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c3ff:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c401:	movl	$0, %ecx [IMM, REG]
	movl	$0, %ecx
	# 0x805c406:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c409:	mull	0xc(%ebp) [MEM]
	mull	0xc(%ebp)
	# 0x805c40c:	jno	0x805c413 [IMM <CODEREF>]
	jno	.label_2055
	# 0x805c40e:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c413:	testl	%eax, %eax [REG, REG]
.label_2055:
	testl	%eax, %eax
	# 0x805c415:	jns	0x805c41c [IMM <CODEREF>]
	jns	.label_2056
	# 0x805c417:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c41c:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_2056:
	movl	%eax, -0x10(%ebp)
	# 0x805c41f:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805c421:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805c424:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805c426:	je	0x805c42d [IMM <CODEREF>]
	je	.label_2057
	# 0x805c428:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c42d:	movl	8(%ebp), %eax [MEM, REG]
.label_2057:
	movl	8(%ebp), %eax
	# 0x805c430:	imull	0xc(%ebp), %eax [MEM, REG]
	imull	0xc(%ebp), %eax
	# 0x805c434:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c437:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c438:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805c43d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c440:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805c443:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805c44a:	je	0x805c451 [IMM <CODEREF>]
	je	.label_2058
	# 0x805c44c:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c451:	leave	 []
.label_2058:
	leave	
	# 0x805c452:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c453

	# 0x805c453:	pushl	%ebp [REG]
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:
	pushl	%ebp
	# 0x805c454:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c456:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805c459:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c45c:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c45f:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c465:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c468:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c46a:	movl	$0, %ecx [IMM, REG]
	movl	$0, %ecx
	# 0x805c46f:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805c472:	mull	0x10(%ebp) [MEM]
	mull	0x10(%ebp)
	# 0x805c475:	jno	0x805c47c [IMM <CODEREF>]
	jno	.label_2059
	# 0x805c477:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c47c:	testl	%eax, %eax [REG, REG]
.label_2059:
	testl	%eax, %eax
	# 0x805c47e:	jns	0x805c485 [IMM <CODEREF>]
	jns	.label_2062
	# 0x805c480:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c485:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_2062:
	movl	%eax, -0x10(%ebp)
	# 0x805c488:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805c48a:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805c48d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805c48f:	je	0x805c496 [IMM <CODEREF>]
	je	.label_2060
	# 0x805c491:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c496:	movl	0xc(%ebp), %eax [MEM, REG]
.label_2060:
	movl	0xc(%ebp), %eax
	# 0x805c499:	imull	0x10(%ebp), %eax [MEM, REG]
	imull	0x10(%ebp), %eax
	# 0x805c49d:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c4a0:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c4a1:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c4a4:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x805c4a9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c4ac:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805c4af:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805c4b6:	je	0x805c4bd [IMM <CODEREF>]
	je	.label_2061
	# 0x805c4b8:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c4bd:	leave	 []
.label_2061:
	leave	
	# 0x805c4be:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c4bf

	# 0x805c4bf:	pushl	%ebp [REG]
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:
	pushl	%ebp
	# 0x805c4c0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c4c2:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805c4c5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c4c8:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c4cb:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805c4ce:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805c4d1:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c4d7:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c4da:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c4dc:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805c4df:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c4e1:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c4e4:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x805c4e8:	jne	0x805c539 [IMM <CODEREF>]
	jne	.label_2067
	# 0x805c4ea:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805c4ee:	jne	0x805c50d [IMM <CODEREF>]
	jne	.label_2064
	# 0x805c4f0:	movl	$0x40, %eax [IMM, REG]
	movl	$0x40, %eax
	# 0x805c4f5:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805c4fa:	divl	0x10(%ebp) [MEM]
	divl	0x10(%ebp)
	# 0x805c4fd:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c500:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805c504:	sete	%al [REG]
	sete	%al
	# 0x805c507:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805c50a:	addl	%eax, -0x10(%ebp) [REG, MEM]
	addl	%eax, -0x10(%ebp)
	# 0x805c50d:	movl	$0, %ecx [IMM, REG]
.label_2064:
	movl	$0, %ecx
	# 0x805c512:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805c515:	mull	0x10(%ebp) [MEM]
	mull	0x10(%ebp)
	# 0x805c518:	jno	0x805c51f [IMM <CODEREF>]
	jno	.label_2065
	# 0x805c51a:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c51f:	testl	%eax, %eax [REG, REG]
.label_2065:
	testl	%eax, %eax
	# 0x805c521:	jns	0x805c528 [IMM <CODEREF>]
	jns	.label_2069
	# 0x805c523:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c528:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_2069:
	movl	%eax, -0x14(%ebp)
	# 0x805c52b:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805c52d:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805c530:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805c532:	je	0x805c562 [IMM <CODEREF>]
	je	.label_2063
	# 0x805c534:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c539:	movl	$0x55555554, %eax [IMM, REG]
.label_2067:
	movl	$0x55555554, %eax
	# 0x805c53e:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805c543:	divl	0x10(%ebp) [MEM]
	divl	0x10(%ebp)
	# 0x805c546:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805c549:	ja	0x805c550 [IMM <CODEREF>]
	ja	.label_2066
	# 0x805c54b:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c550:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2066:
	movl	-0x10(%ebp), %eax
	# 0x805c553:	shrl	$1, %eax [IMM, REG]
	shrl	$1, %eax
	# 0x805c555:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805c557:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805c55a:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805c55c:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805c55f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c562:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_2063:
	movl	-0x20(%ebp), %eax
	# 0x805c565:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x805c568:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805c56a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805c56d:	imull	0x10(%ebp), %eax [MEM, REG]
	imull	0x10(%ebp), %eax
	# 0x805c571:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c574:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c575:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805c578:	calll	0x805c5d6 [IMM <CODEREF>]
	calll	xrealloc
	# 0x805c57d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c580:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x805c583:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805c58a:	je	0x805c591 [IMM <CODEREF>]
	je	.label_2068
	# 0x805c58c:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c591:	leave	 []
.label_2068:
	leave	
	# 0x805c592:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c593

	# 0x805c593:	pushl	%ebp [REG]
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:
	pushl	%ebp
	# 0x805c594:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c596:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c599:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c59c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c59f:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805c5a4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c5a7:	leave	 []
	leave	
	# 0x805c5a8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c5a9

	# 0x805c5a9:	pushl	%ebp [REG]
	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	pushl	%ebp
	# 0x805c5aa:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c5ac:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c5af:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c5b2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c5b5:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x805c5ba:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c5bd:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c5c0:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805c5c4:	jne	0x805c5d1 [IMM <CODEREF>]
	jne	.label_2070
	# 0x805c5c6:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805c5ca:	je	0x805c5d1 [IMM <CODEREF>]
	je	.label_2070
	# 0x805c5cc:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c5d1:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2070:
	movl	-0xc(%ebp), %eax
	# 0x805c5d4:	leave	 []
	leave	
	# 0x805c5d5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c5d6

	# 0x805c5d6:	pushl	%ebp [REG]
	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	pushl	%ebp
	# 0x805c5d7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c5d9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c5dc:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805c5e0:	jne	0x805c5fd [IMM <CODEREF>]
	jne	.label_2071
	# 0x805c5e2:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805c5e6:	je	0x805c5fd [IMM <CODEREF>]
	je	.label_2071
	# 0x805c5e8:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c5eb:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c5ee:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805c5f3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c5f6:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805c5fb:	jmp	0x805c625 [IMM <CODEREF>]
	jmp	.label_2073
	# 0x805c5fd:	subl	$8, %esp [IMM, REG]
.label_2071:
	subl	$8, %esp
	# 0x805c600:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c603:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c606:	calll	0x8049860 [IMM <CODEREF>]
	calll	realloc
	# 0x805c60b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c60e:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805c611:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805c615:	jne	0x805c622 [IMM <CODEREF>]
	jne	.label_2072
	# 0x805c617:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805c61b:	je	0x805c622 [IMM <CODEREF>]
	je	.label_2072
	# 0x805c61d:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c622:	movl	8(%ebp), %eax [MEM, REG]
.label_2072:
	movl	8(%ebp), %eax
	# 0x805c625:	leave	 []
.label_2073:
	leave	
	# 0x805c626:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c627

	# 0x805c627:	pushl	%ebp [REG]
	.globl x2realloc
	.type x2realloc, @function
x2realloc:
	pushl	%ebp
	# 0x805c628:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c62a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c62d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c630:	pushl	$1 [IMM]
	pushl	$1
	# 0x805c632:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c635:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c638:	calll	0x805c4bf [IMM <CODEREF>]
	calll	x2nrealloc
	# 0x805c63d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c640:	leave	 []
	leave	
	# 0x805c641:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c642
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	# 0x805c642:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805c643:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c645:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c648:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c64b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c64e:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805c653:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c656:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c659:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c65c:	pushl	$0 [IMM]
	pushl	$0
	# 0x805c65e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c65f:	calll	0x8049970 [IMM <CODEREF>]
	calll	memset
	# 0x805c664:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c667:	leave	 []
	leave	
	# 0x805c668:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c669
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	# 0x805c669:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805c66a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c66c:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c66f:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c675:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c678:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c67a:	movl	$0, %ecx [IMM, REG]
	movl	$0, %ecx
	# 0x805c67f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c682:	mull	0xc(%ebp) [MEM]
	mull	0xc(%ebp)
	# 0x805c685:	jno	0x805c68c [IMM <CODEREF>]
	jno	.label_2075
	# 0x805c687:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c68c:	testl	%eax, %eax [REG, REG]
.label_2075:
	testl	%eax, %eax
	# 0x805c68e:	jns	0x805c695 [IMM <CODEREF>]
	jns	.label_2076
	# 0x805c690:	movl	$1, %ecx [IMM, REG]
	movl	$1, %ecx
	# 0x805c695:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_2076:
	movl	%eax, -0x14(%ebp)
	# 0x805c698:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805c69a:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805c69d:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805c69f:	jne	0x805c6bb [IMM <CODEREF>]
	jne	.label_2074
	# 0x805c6a1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c6a4:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c6a7:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c6aa:	calll	0x8049bb0 [IMM <CODEREF>]
	calll	calloc
	# 0x805c6af:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c6b2:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c6b5:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805c6b9:	jne	0x805c6c0 [IMM <CODEREF>]
	jne	.label_2078
	# 0x805c6bb:	calll	0x805c726 [IMM <CODEREF>]
.label_2074:
	calll	xalloc_die
	# 0x805c6c0:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2078:
	movl	-0x10(%ebp), %eax
	# 0x805c6c3:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805c6c6:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805c6cd:	je	0x805c6d4 [IMM <CODEREF>]
	je	.label_2077
	# 0x805c6cf:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c6d4:	leave	 []
.label_2077:
	leave	
	# 0x805c6d5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c6d6

	# 0x805c6d6:	pushl	%ebp [REG]
	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	pushl	%ebp
	# 0x805c6d7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c6d9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c6dc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c6df:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c6e2:	calll	0x805c5a9 [IMM <CODEREF>]
	calll	xmalloc
	# 0x805c6e7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c6ea:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805c6ed:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c6f0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c6f3:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c6f4:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805c6f9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c6fc:	leave	 []
	leave	
	# 0x805c6fd:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c6fe

	# 0x805c6fe:	pushl	%ebp [REG]
	.globl xstrdup
	.type xstrdup, @function
xstrdup:
	pushl	%ebp
	# 0x805c6ff:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c701:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c704:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c707:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c70a:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805c70f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c712:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805c715:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c718:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c719:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c71c:	calll	0x805c6d6 [IMM <CODEREF>]
	calll	xmemdup
	# 0x805c721:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c724:	leave	 []
	leave	
	# 0x805c725:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c726

	# 0x805c726:	pushl	%ebp [REG]
	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	pushl	%ebp
	# 0x805c727:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c729:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c72c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c72f:	pushl	$0x8063f6f [IMM <DATAREF>]
	pushl	$label_2080
	# 0x805c734:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805c739:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c73c:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805c73e:	movl	0x806a314, %eax [MEM, REG]
	movl	exit_failure,  %eax
	# 0x805c743:	pushl	%edx [REG]
	pushl	%edx
	# 0x805c744:	pushl	$0x8063f80 [IMM <DATAREF>]
	pushl	$label_2079
	# 0x805c749:	pushl	$0 [IMM]
	pushl	$0
	# 0x805c74b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c74c:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x805c751:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c754:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	.section	.text
	.align	32
	#Procedure 0x805c759

	# 0x805c759:	pushl	%ebp [REG]
	.globl xnumtoumax
	.type xnumtoumax, @function
xnumtoumax:
	pushl	%ebp
	# 0x805c75a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c75c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c75d:	subl	$0x44, %esp [IMM, REG]
	subl	$0x44, %esp
	# 0x805c760:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805c763:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805c766:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805c769:	movl	%eax, -0x38(%ebp) [REG, MEM]
	movl	%eax, -0x38(%ebp)
	# 0x805c76c:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805c76f:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x805c772:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c775:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x805c778:	movl	0x1c(%ebp), %eax [MEM, REG]
	movl	0x1c(%ebp), %eax
	# 0x805c77b:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805c77e:	movl	0x20(%ebp), %eax [MEM, REG]
	movl	0x20(%ebp), %eax
	# 0x805c781:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805c784:	movl	0x24(%ebp), %eax [MEM, REG]
	movl	0x24(%ebp), %eax
	# 0x805c787:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805c78a:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c790:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c793:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c795:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c798:	pushl	-0x30(%ebp) [MEM]
	pushl	-0x30(%ebp)
	# 0x805c79b:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805c79e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c79f:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805c7a2:	pushl	$0 [IMM]
	pushl	$0
	# 0x805c7a4:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805c7a7:	calll	0x805d00c [IMM <CODEREF>]
	calll	xstrtoumax
	# 0x805c7ac:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c7af:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805c7b2:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x805c7b6:	jne	0x805c81a [IMM <CODEREF>]
	jne	.label_2090
	# 0x805c7b8:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805c7bb:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805c7be:	cmpl	-0x34(%ebp), %edx [MEM, REG]
	cmpl	-0x34(%ebp), %edx
	# 0x805c7c1:	jb	0x805c7e2 [IMM <CODEREF>]
	jb	.label_2083
	# 0x805c7c3:	cmpl	-0x34(%ebp), %edx [MEM, REG]
	cmpl	-0x34(%ebp), %edx
	# 0x805c7c6:	ja	0x805c7cd [IMM <CODEREF>]
	ja	.label_2081
	# 0x805c7c8:	cmpl	-0x38(%ebp), %eax [MEM, REG]
	cmpl	-0x38(%ebp), %eax
	# 0x805c7cb:	jb	0x805c7e2 [IMM <CODEREF>]
	jb	.label_2083
	# 0x805c7cd:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2081:
	movl	-0x18(%ebp), %eax
	# 0x805c7d0:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805c7d3:	cmpl	%edx, -0x3c(%ebp) [REG, MEM]
	cmpl	%edx, -0x3c(%ebp)
	# 0x805c7d6:	ja	0x805c83e [IMM <CODEREF>]
	ja	.label_2082
	# 0x805c7d8:	cmpl	%edx, -0x3c(%ebp) [REG, MEM]
	cmpl	%edx, -0x3c(%ebp)
	# 0x805c7db:	jb	0x805c7e2 [IMM <CODEREF>]
	jb	.label_2083
	# 0x805c7dd:	cmpl	%eax, -0x40(%ebp) [REG, MEM]
	cmpl	%eax, -0x40(%ebp)
	# 0x805c7e0:	jae	0x805c83e [IMM <CODEREF>]
	jae	.label_2082
	# 0x805c7e2:	movl	$1, -0x1c(%ebp) [IMM, MEM]
.label_2083:
	movl	$1, -0x1c(%ebp)
	# 0x805c7e9:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805c7ec:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805c7ef:	cmpl	$0, %edx [IMM, REG]
	cmpl	$0, %edx
	# 0x805c7f2:	jb	0x805c80d [IMM <CODEREF>]
	jb	.label_2089
	# 0x805c7f4:	cmpl	$0, %edx [IMM, REG]
	cmpl	$0, %edx
	# 0x805c7f7:	ja	0x805c800 [IMM <CODEREF>]
	ja	.label_2092
	# 0x805c7f9:	cmpl	$0x3fffffff, %eax [IMM, REG]
	cmpl	$0x3fffffff, %eax
	# 0x805c7fe:	jbe	0x805c80d [IMM <CODEREF>]
	jbe	.label_2089
	# 0x805c800:	calll	0x8049990 [IMM <CODEREF>]
.label_2092:
	calll	__errno_location
	# 0x805c805:	movl	$0x4b, 0(%eax) [IMM, MEM]
	movl	$0x4b, 0(%eax)
	# 0x805c80b:	jmp	0x805c83e [IMM <CODEREF>]
	jmp	.label_2082
	# 0x805c80d:	calll	0x8049990 [IMM <CODEREF>]
.label_2089:
	calll	__errno_location
	# 0x805c812:	movl	$0x22, 0(%eax) [IMM, MEM]
	movl	$0x22, 0(%eax)
	# 0x805c818:	jmp	0x805c83e [IMM <CODEREF>]
	jmp	.label_2082
	# 0x805c81a:	cmpl	$1, -0x1c(%ebp) [IMM, MEM]
.label_2090:
	cmpl	$1, -0x1c(%ebp)
	# 0x805c81e:	jne	0x805c82d [IMM <CODEREF>]
	jne	.label_2086
	# 0x805c820:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c825:	movl	$0x4b, 0(%eax) [IMM, MEM]
	movl	$0x4b, 0(%eax)
	# 0x805c82b:	jmp	0x805c83e [IMM <CODEREF>]
	jmp	.label_2082
	# 0x805c82d:	cmpl	$3, -0x1c(%ebp) [IMM, MEM]
.label_2086:
	cmpl	$3, -0x1c(%ebp)
	# 0x805c831:	jne	0x805c83e [IMM <CODEREF>]
	jne	.label_2082
	# 0x805c833:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c838:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805c83e:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
.label_2082:
	cmpl	$0, -0x1c(%ebp)
	# 0x805c842:	je	0x805c894 [IMM <CODEREF>]
	je	.label_2094
	# 0x805c844:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c847:	pushl	-0x2c(%ebp) [MEM]
	pushl	-0x2c(%ebp)
	# 0x805c84a:	calll	0x805b87d [IMM <CODEREF>]
	calll	quote
	# 0x805c84f:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c852:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805c854:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c859:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c85b:	cmpl	$0x16, %eax [IMM, REG]
	cmpl	$0x16, %eax
	# 0x805c85e:	je	0x805c869 [IMM <CODEREF>]
	je	.label_2085
	# 0x805c860:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c865:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805c867:	jmp	0x805c86e [IMM <CODEREF>]
	jmp	.label_2087
	# 0x805c869:	movl	$0, %edx [IMM, REG]
.label_2085:
	movl	$0, %edx
	# 0x805c86e:	cmpl	$0, 0x28(%ebp) [IMM, MEM]
.label_2087:
	cmpl	$0, 0x28(%ebp)
	# 0x805c872:	je	0x805c879 [IMM <CODEREF>]
	je	.label_2091
	# 0x805c874:	movl	0x28(%ebp), %eax [MEM, REG]
	movl	0x28(%ebp), %eax
	# 0x805c877:	jmp	0x805c87e [IMM <CODEREF>]
	jmp	.label_2088
	# 0x805c879:	movl	$1, %eax [IMM, REG]
.label_2091:
	movl	$1, %eax
	# 0x805c87e:	subl	$0xc, %esp [IMM, REG]
.label_2088:
	subl	$0xc, %esp
	# 0x805c881:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805c882:	pushl	-0x44(%ebp) [MEM]
	pushl	-0x44(%ebp)
	# 0x805c885:	pushl	$0x8063f83 [IMM <DATAREF>]
	pushl	$label_2093
	# 0x805c88a:	pushl	%edx [REG]
	pushl	%edx
	# 0x805c88b:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c88c:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x805c891:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805c894:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2094:
	movl	-0x18(%ebp), %eax
	# 0x805c897:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805c89a:	movl	-0xc(%ebp), %ecx [MEM, REG]
	movl	-0xc(%ebp), %ecx
	# 0x805c89d:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805c8a4:	je	0x805c8ab [IMM <CODEREF>]
	je	.label_2084
	# 0x805c8a6:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805c8ab:	movl	-4(%ebp), %ebx [MEM, REG]
.label_2084:
	movl	-4(%ebp), %ebx
	# 0x805c8ae:	leave	 []
	leave	
	# 0x805c8af:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c8b0
	.globl xdectoumax
	.type xdectoumax, @function
xdectoumax:

	# 0x805c8b0:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805c8b1:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c8b3:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c8b6:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805c8b9:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c8bc:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805c8bf:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c8c2:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805c8c5:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805c8c8:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805c8cb:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805c8ce:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c8d1:	pushl	0x24(%ebp) [MEM]
	pushl	0x24(%ebp)
	# 0x805c8d4:	pushl	0x20(%ebp) [MEM]
	pushl	0x20(%ebp)
	# 0x805c8d7:	pushl	0x1c(%ebp) [MEM]
	pushl	0x1c(%ebp)
	# 0x805c8da:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805c8dd:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805c8e0:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805c8e3:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805c8e6:	pushl	$0xa [IMM]
	pushl	$0xa
	# 0x805c8e8:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805c8eb:	calll	0x805c759 [IMM <CODEREF>]
	calll	xnumtoumax
	# 0x805c8f0:	addl	$0x30, %esp [IMM, REG]
	addl	$0x30, %esp
	# 0x805c8f3:	leave	 []
	leave	
	# 0x805c8f4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c8f5

	# 0x805c8f5:	pushl	%ebp [REG]
	.globl xgetcwd
	.type xgetcwd, @function
xgetcwd:
	pushl	%ebp
	# 0x805c8f6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c8f8:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805c8fb:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c8fe:	pushl	$0 [IMM]
	pushl	$0
	# 0x805c900:	pushl	$0 [IMM]
	pushl	$0
	# 0x805c902:	calll	0x8049910 [IMM <CODEREF>]
	calll	getcwd
	# 0x805c907:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c90a:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c90d:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805c911:	jne	0x805c924 [IMM <CODEREF>]
	jne	.label_2095
	# 0x805c913:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c918:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c91a:	cmpl	$0xc, %eax [IMM, REG]
	cmpl	$0xc, %eax
	# 0x805c91d:	jne	0x805c924 [IMM <CODEREF>]
	jne	.label_2095
	# 0x805c91f:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805c924:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2095:
	movl	-0xc(%ebp), %eax
	# 0x805c927:	leave	 []
	leave	
	# 0x805c928:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805c929

	# 0x805c929:	pushl	%ebp [REG]
	.globl xgethostname
	.type xgethostname, @function
xgethostname:
	pushl	%ebp
	# 0x805c92a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805c92c:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805c92f:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805c935:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805c938:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805c93a:	movl	$0, -0x18(%ebp) [IMM, MEM]
	movl	$0, -0x18(%ebp)
	# 0x805c941:	movl	$0x22, -0x1c(%ebp) [IMM, MEM]
	movl	$0x22, -0x1c(%ebp)
	# 0x805c948:	subl	$8, %esp [IMM, REG]
.label_2096:
	subl	$8, %esp
	# 0x805c94b:	leal	-0x1c(%ebp), %eax [MEM, REG]
	leal	-0x1c(%ebp), %eax
	# 0x805c94e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805c94f:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805c952:	calll	0x805c627 [IMM <CODEREF>]
	calll	x2realloc
	# 0x805c957:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c95a:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805c95d:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805c960:	subl	$1, %eax [IMM, REG]
	subl	$1, %eax
	# 0x805c963:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805c966:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805c969:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805c96c:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805c96f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805c971:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x805c974:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c979:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805c97f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805c982:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805c985:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805c988:	calll	0x8049810 [IMM <CODEREF>]
	calll	gethostname
	# 0x805c98d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c990:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805c992:	jne	0x805c9a8 [IMM <CODEREF>]
	jne	.label_2097
	# 0x805c994:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805c997:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805c99a:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805c99d:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805c99f:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805c9a2:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805c9a4:	jne	0x805c948 [IMM <CODEREF>]
	jne	.label_2096
	# 0x805c9a6:	jmp	0x805ca0a [IMM <CODEREF>]
	jmp	.label_2099
	# 0x805c9a8:	calll	0x8049990 [IMM <CODEREF>]
.label_2097:
	calll	__errno_location
	# 0x805c9ad:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c9af:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805c9b1:	je	0x805c948 [IMM <CODEREF>]
	je	.label_2096
	# 0x805c9b3:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c9b8:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c9ba:	cmpl	$0x24, %eax [IMM, REG]
	cmpl	$0x24, %eax
	# 0x805c9bd:	je	0x805c948 [IMM <CODEREF>]
	je	.label_2096
	# 0x805c9bf:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c9c4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c9c6:	cmpl	$0x16, %eax [IMM, REG]
	cmpl	$0x16, %eax
	# 0x805c9c9:	je	0x805c948 [IMM <CODEREF>]
	je	.label_2096
	# 0x805c9cf:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c9d4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c9d6:	cmpl	$0xc, %eax [IMM, REG]
	cmpl	$0xc, %eax
	# 0x805c9d9:	je	0x805c948 [IMM <CODEREF>]
	je	.label_2096
	# 0x805c9df:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c9e4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805c9e6:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805c9e9:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805c9ec:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805c9ef:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805c9f4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805c9f7:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805c9fc:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805c9fe:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805ca01:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805ca03:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805ca08:	jmp	0x805ca0d [IMM <CODEREF>]
	jmp	.label_2100
	# 0x805ca0a:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2099:
	movl	-0x18(%ebp), %eax
	# 0x805ca0d:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_2100:
	movl	-0xc(%ebp), %ecx
	# 0x805ca10:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805ca17:	je	0x805ca1e [IMM <CODEREF>]
	je	.label_2098
	# 0x805ca19:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805ca1e:	leave	 []
.label_2098:
	leave	
	# 0x805ca1f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ca20

	# 0x805ca20:	pushl	%ebp [REG]
	.globl bkm_scale
	.type bkm_scale, @function
bkm_scale:
	pushl	%ebp
	# 0x805ca21:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805ca23:	movl	0xc(%ebp), %ecx [MEM, REG]
	movl	0xc(%ebp), %ecx
	# 0x805ca26:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805ca2b:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805ca30:	divl	%ecx [REG]
	divl	%ecx
	# 0x805ca32:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805ca34:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805ca37:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805ca39:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805ca3b:	jae	0x805ca4d [IMM <CODEREF>]
	jae	.label_2101
	# 0x805ca3d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805ca40:	movl	$0xffffffff, 0(%eax) [IMM, MEM]
	movl	$0xffffffff, 0(%eax)
	# 0x805ca46:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805ca4b:	jmp	0x805ca62 [IMM <CODEREF>]
	jmp	.label_2102
	# 0x805ca4d:	movl	8(%ebp), %eax [MEM, REG]
.label_2101:
	movl	8(%ebp), %eax
	# 0x805ca50:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805ca52:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805ca55:	imull	%eax, %edx [REG, REG]
	imull	%eax, %edx
	# 0x805ca58:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805ca5b:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805ca5d:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805ca62:	popl	%ebp [REG]
.label_2102:
	popl	%ebp
	# 0x805ca63:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ca64

	# 0x805ca64:	pushl	%ebp [REG]
	.globl bkm_scale_by_power
	.type bkm_scale_by_power, @function
bkm_scale_by_power:
	pushl	%ebp
	# 0x805ca65:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805ca67:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805ca6a:	movl	$0, -4(%ebp) [IMM, MEM]
	movl	$0, -4(%ebp)
	# 0x805ca71:	jmp	0x805ca84 [IMM <CODEREF>]
	jmp	.label_2104
	# 0x805ca73:	pushl	0xc(%ebp) [MEM]
.label_2103:
	pushl	0xc(%ebp)
	# 0x805ca76:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805ca79:	calll	0x805ca20 [IMM <CODEREF>]
	calll	bkm_scale
	# 0x805ca7e:	addl	$8, %esp [IMM, REG]
	addl	$8, %esp
	# 0x805ca81:	orl	%eax, -4(%ebp) [REG, MEM]
	orl	%eax, -4(%ebp)
	# 0x805ca84:	movl	0x10(%ebp), %eax [MEM, REG]
.label_2104:
	movl	0x10(%ebp), %eax
	# 0x805ca87:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805ca8a:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x805ca8d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805ca8f:	jne	0x805ca73 [IMM <CODEREF>]
	jne	.label_2103
	# 0x805ca91:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805ca94:	leave	 []
	leave	
	# 0x805ca95:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ca96

	# 0x805ca96:	pushl	%ebp [REG]
	.globl xstrtoul
	.type xstrtoul, @function
xstrtoul:
	pushl	%ebp
	# 0x805ca97:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805ca99:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x805ca9c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805ca9f:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805caa2:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805caa5:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x805caa8:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805caab:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805caae:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805cab1:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x805cab4:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805caba:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805cabd:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805cabf:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x805cac6:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805caca:	js	0x805cad2 [IMM <CODEREF>]
	js	.label_2109
	# 0x805cacc:	cmpl	$0x24, 0x10(%ebp) [IMM, MEM]
	cmpl	$0x24, 0x10(%ebp)
	# 0x805cad0:	jle	0x805cae8 [IMM <CODEREF>]
	jle	.label_2118
	# 0x805cad2:	pushl	$0x806415c [IMM <DATAREF>]
.label_2109:
	pushl	$__PRETTY_FUNCTION__.3254
	# 0x805cad7:	pushl	$0x60 [IMM]
	pushl	$0x60
	# 0x805cad9:	pushl	$0x8063f8c [IMM <DATAREF>]
	pushl	$label_2119
	# 0x805cade:	pushl	$0x8063f9c [IMM <DATAREF>]
	pushl	$label_2120
	# 0x805cae3:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x805cae8:	cmpl	$0, -0x40(%ebp) [IMM, MEM]
.label_2118:
	cmpl	$0, -0x40(%ebp)
	# 0x805caec:	jne	0x805caf3 [IMM <CODEREF>]
	jne	.label_2124
	# 0x805caee:	leal	-0x2c(%ebp), %eax [MEM, REG]
	leal	-0x2c(%ebp), %eax
	# 0x805caf1:	jmp	0x805caf6 [IMM <CODEREF>]
	jmp	.label_2126
	# 0x805caf3:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_2124:
	movl	-0x40(%ebp), %eax
	# 0x805caf6:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_2126:
	movl	%eax, -0x10(%ebp)
	# 0x805caf9:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805cafe:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805cb04:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805cb07:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805cb0a:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805cb0d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cb10:	movb	%al, -0x2d(%ebp) [REG, MEM]
	movb	%al, -0x2d(%ebp)
	# 0x805cb13:	jmp	0x805cb22 [IMM <CODEREF>]
	jmp	.label_2127
	# 0x805cb15:	addl	$1, -0x20(%ebp) [IMM, MEM]
.label_2112:
	addl	$1, -0x20(%ebp)
	# 0x805cb19:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805cb1c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cb1f:	movb	%al, -0x2d(%ebp) [REG, MEM]
	movb	%al, -0x2d(%ebp)
	# 0x805cb22:	calll	0x8049ba0 [IMM <CODEREF>]
.label_2127:
	calll	__ctype_b_loc
	# 0x805cb27:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cb29:	movzbl	-0x2d(%ebp), %edx [MEM, REG]
	movzbl	-0x2d(%ebp), %edx
	# 0x805cb2d:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x805cb2f:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805cb31:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x805cb34:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x805cb37:	andl	$0x2000, %eax [IMM, REG]
	andl	$0x2000, %eax
	# 0x805cb3c:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805cb3e:	jne	0x805cb15 [IMM <CODEREF>]
	jne	.label_2112
	# 0x805cb40:	cmpb	$0x2d, -0x2d(%ebp) [IMM, MEM]
	cmpb	$0x2d, -0x2d(%ebp)
	# 0x805cb44:	jne	0x805cb50 [IMM <CODEREF>]
	jne	.label_2114
	# 0x805cb46:	movl	$4, %eax [IMM, REG]
	movl	$4, %eax
	# 0x805cb4b:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805cb50:	subl	$4, %esp [IMM, REG]
.label_2114:
	subl	$4, %esp
	# 0x805cb53:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805cb56:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805cb59:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x805cb5c:	calll	0x80498f0 [IMM <CODEREF>]
	calll	strtoul
	# 0x805cb61:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cb64:	movl	%eax, -0x28(%ebp) [REG, MEM]
	movl	%eax, -0x28(%ebp)
	# 0x805cb67:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805cb6a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cb6c:	cmpl	-0x3c(%ebp), %eax [MEM, REG]
	cmpl	-0x3c(%ebp), %eax
	# 0x805cb6f:	jne	0x805cbb4 [IMM <CODEREF>]
	jne	.label_2123
	# 0x805cb71:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
	cmpl	$0, -0x48(%ebp)
	# 0x805cb75:	je	0x805cbaa [IMM <CODEREF>]
	je	.label_2110
	# 0x805cb77:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805cb7a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cb7c:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cb7f:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805cb81:	je	0x805cbaa [IMM <CODEREF>]
	je	.label_2110
	# 0x805cb83:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805cb86:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cb88:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cb8b:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805cb8e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805cb91:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cb92:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805cb95:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805cb9a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cb9d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805cb9f:	je	0x805cbaa [IMM <CODEREF>]
	je	.label_2110
	# 0x805cba1:	movl	$1, -0x28(%ebp) [IMM, MEM]
	movl	$1, -0x28(%ebp)
	# 0x805cba8:	jmp	0x805cbdc [IMM <CODEREF>]
	jmp	.label_2111
	# 0x805cbaa:	movl	$4, %eax [IMM, REG]
.label_2110:
	movl	$4, %eax
	# 0x805cbaf:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805cbb4:	calll	0x8049990 [IMM <CODEREF>]
.label_2123:
	calll	__errno_location
	# 0x805cbb9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cbbb:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805cbbd:	je	0x805cbdc [IMM <CODEREF>]
	je	.label_2111
	# 0x805cbbf:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805cbc4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cbc6:	cmpl	$0x22, %eax [IMM, REG]
	cmpl	$0x22, %eax
	# 0x805cbc9:	je	0x805cbd5 [IMM <CODEREF>]
	je	.label_2116
	# 0x805cbcb:	movl	$4, %eax [IMM, REG]
	movl	$4, %eax
	# 0x805cbd0:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805cbd5:	movl	$1, -0x24(%ebp) [IMM, MEM]
.label_2116:
	movl	$1, -0x24(%ebp)
	# 0x805cbdc:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
.label_2111:
	cmpl	$0, -0x48(%ebp)
	# 0x805cbe0:	jne	0x805cbf2 [IMM <CODEREF>]
	jne	.label_2122
	# 0x805cbe2:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805cbe5:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805cbe8:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805cbea:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805cbed:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805cbf2:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2122:
	movl	-0x10(%ebp), %eax
	# 0x805cbf5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cbf7:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cbfa:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805cbfc:	je	0x805ce36 [IMM <CODEREF>]
	je	.label_2108
	# 0x805cc02:	movl	$0x400, -0x1c(%ebp) [IMM, MEM]
	movl	$0x400, -0x1c(%ebp)
	# 0x805cc09:	movl	$1, -0x18(%ebp) [IMM, MEM]
	movl	$1, -0x18(%ebp)
	# 0x805cc10:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805cc13:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cc15:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cc18:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805cc1b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805cc1e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cc1f:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805cc22:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805cc27:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cc2a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805cc2c:	jne	0x805cc41 [IMM <CODEREF>]
	jne	.label_2125
	# 0x805cc2e:	movl	-0x28(%ebp), %edx [MEM, REG]
	movl	-0x28(%ebp), %edx
	# 0x805cc31:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805cc34:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805cc36:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805cc39:	orl	$2, %eax [IMM, REG]
	orl	$2, %eax
	# 0x805cc3c:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805cc41:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2125:
	movl	-0x10(%ebp), %eax
	# 0x805cc44:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cc46:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cc49:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805cc4c:	subl	$0x45, %eax [IMM, REG]
	subl	$0x45, %eax
	# 0x805cc4f:	cmpl	$0x2f, %eax [IMM, REG]
	cmpl	$0x2f, %eax
	# 0x805cc52:	ja	0x805ccb3 [IMM <CODEREF>]
	ja	.label_2106
	# 0x805cc54:	movl	0x8063fc4(, %eax, 4), %eax [MEM, REG]
	movl	label_2121(, %eax, 4),  %eax
	# 0x805cc5b:	jmpl	*%eax [REG]
	jmpl	*%eax
	.section	.text
	.align	32
	#Procedure 0x805cc5d

	# 0x805cc5d:	subl	$8, %esp [IMM, REG]
	.globl sub_805cc5d
	.type sub_805cc5d, @function
sub_805cc5d:
	subl	$8, %esp
	# 0x805cc60:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805cc62:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805cc65:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805cc6a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cc6d:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805cc6f:	je	0x805ccb3 [IMM <CODEREF>]
	je	.label_2106
	# 0x805cc71:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805cc74:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cc76:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805cc79:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cc7c:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805cc7f:	cmpl	$0x44, %eax [IMM, REG]
	cmpl	$0x44, %eax
	# 0x805cc82:	je	0x805cca5 [IMM <CODEREF>]
	je	.label_2129
	# 0x805cc84:	cmpl	$0x69, %eax [IMM, REG]
	cmpl	$0x69, %eax
	# 0x805cc87:	je	0x805cc90 [IMM <CODEREF>]
	je	.label_2130
	# 0x805cc89:	cmpl	$0x42, %eax [IMM, REG]
	cmpl	$0x42, %eax
	# 0x805cc8c:	je	0x805cca5 [IMM <CODEREF>]
	je	.label_2129
	# 0x805cc8e:	jmp	0x805ccb3 [IMM <CODEREF>]
	jmp	.label_2106
	# 0x805cc90:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2130:
	movl	-0x10(%ebp), %eax
	# 0x805cc93:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cc95:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x805cc98:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805cc9b:	cmpb	$0x42, %al [IMM, REG]
	cmpb	$0x42, %al
	# 0x805cc9d:	jne	0x805ccb2 [IMM <CODEREF>]
	jne	.label_2128
	# 0x805cc9f:	addl	$2, -0x18(%ebp) [IMM, MEM]
	addl	$2, -0x18(%ebp)
	# 0x805cca3:	jmp	0x805ccb2 [IMM <CODEREF>]
	jmp	.label_2128
	# 0x805cca5:	movl	$0x3e8, -0x1c(%ebp) [IMM, MEM]
.label_2129:
	movl	$0x3e8, -0x1c(%ebp)
	# 0x805ccac:	addl	$1, -0x18(%ebp) [IMM, MEM]
	addl	$1, -0x18(%ebp)
	# 0x805ccb0:	jmp	0x805ccb3 [IMM <CODEREF>]
	jmp	.label_2106
	# 0x805ccb2:	nop	 []
.label_2128:
	nop	
	# 0x805ccb3:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2106:
	movl	-0x10(%ebp), %eax
	# 0x805ccb6:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805ccb8:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805ccbb:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805ccbe:	subl	$0x42, %eax [IMM, REG]
	subl	$0x42, %eax
	# 0x805ccc1:	cmpl	$0x35, %eax [IMM, REG]
	cmpl	$0x35, %eax
	# 0x805ccc4:	ja	0x805ce01 [IMM <CODEREF>]
	ja	.label_2113
	# 0x805ccca:	movl	0x8064084(, %eax, 4), %eax [MEM, REG]
	movl	label_2117(, %eax, 4),  %eax
	# 0x805ccd1:	jmpl	*%eax [REG]
	jmpl	*%eax
	.section	.text
	.align	32
	#Procedure 0x805ccd3

	# 0x805ccd3:	subl	$8, %esp [IMM, REG]
	.globl sub_805ccd3
	.type sub_805ccd3, @function
sub_805ccd3:
	subl	$8, %esp
	# 0x805ccd6:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x805ccdb:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805ccde:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ccdf:	calll	0x805ca20 [IMM <CODEREF>]
	calll	bkm_scale
	# 0x805cce4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cce7:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805ccea:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805ccef

	# 0x805ccef:	subl	$8, %esp [IMM, REG]
	.globl sub_805ccef
	.type sub_805ccef, @function
sub_805ccef:
	subl	$8, %esp
	# 0x805ccf2:	pushl	$0x400 [IMM]
	pushl	$0x400
	# 0x805ccf7:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805ccfa:	pushl	%eax [REG]
	pushl	%eax
	# 0x805ccfb:	calll	0x805ca20 [IMM <CODEREF>]
	calll	bkm_scale
	# 0x805cd00:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd03:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd06:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	# 0x805cd0b:	movl	$0, -0x14(%ebp) [IMM, MEM]
.label_2720:
	movl	$0, -0x14(%ebp)
	# 0x805cd12:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cd17

	# 0x805cd17:	subl	$4, %esp [IMM, REG]
	.globl sub_805cd17
	.type sub_805cd17, @function
sub_805cd17:
	subl	$4, %esp
	# 0x805cd1a:	pushl	$6 [IMM]
	pushl	$6
	# 0x805cd1c:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cd1f:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cd22:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cd23:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cd28:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd2b:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd2e:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cd33

	# 0x805cd33:	subl	$4, %esp [IMM, REG]
	.globl sub_805cd33
	.type sub_805cd33, @function
sub_805cd33:
	subl	$4, %esp
	# 0x805cd36:	pushl	$3 [IMM]
	pushl	$3
	# 0x805cd38:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cd3b:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cd3e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cd3f:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cd44:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd47:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd4a:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cd4f

	# 0x805cd4f:	subl	$4, %esp [IMM, REG]
	.globl sub_805cd4f
	.type sub_805cd4f, @function
sub_805cd4f:
	subl	$4, %esp
	# 0x805cd52:	pushl	$1 [IMM]
	pushl	$1
	# 0x805cd54:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cd57:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cd5a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cd5b:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cd60:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd63:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd66:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cd6b

	# 0x805cd6b:	subl	$4, %esp [IMM, REG]
	.globl sub_805cd6b
	.type sub_805cd6b, @function
sub_805cd6b:
	subl	$4, %esp
	# 0x805cd6e:	pushl	$2 [IMM]
	pushl	$2
	# 0x805cd70:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cd73:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cd76:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cd77:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cd7c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd7f:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd82:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cd87

	# 0x805cd87:	subl	$4, %esp [IMM, REG]
	.globl sub_805cd87
	.type sub_805cd87, @function
sub_805cd87:
	subl	$4, %esp
	# 0x805cd8a:	pushl	$5 [IMM]
	pushl	$5
	# 0x805cd8c:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cd8f:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cd92:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cd93:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cd98:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cd9b:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cd9e:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cda0

	# 0x805cda0:	subl	$4, %esp [IMM, REG]
	.globl sub_805cda0
	.type sub_805cda0, @function
sub_805cda0:
	subl	$4, %esp
	# 0x805cda3:	pushl	$4 [IMM]
	pushl	$4
	# 0x805cda5:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cda8:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cdab:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cdac:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cdb1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cdb4:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cdb7:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cdb9

	# 0x805cdb9:	subl	$8, %esp [IMM, REG]
	.globl sub_805cdb9
	.type sub_805cdb9, @function
sub_805cdb9:
	subl	$8, %esp
	# 0x805cdbc:	pushl	$2 [IMM]
	pushl	$2
	# 0x805cdbe:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cdc1:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cdc2:	calll	0x805ca20 [IMM <CODEREF>]
	calll	bkm_scale
	# 0x805cdc7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cdca:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cdcd:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cdcf

	# 0x805cdcf:	subl	$4, %esp [IMM, REG]
	.globl sub_805cdcf
	.type sub_805cdcf, @function
sub_805cdcf:
	subl	$4, %esp
	# 0x805cdd2:	pushl	$8 [IMM]
	pushl	$8
	# 0x805cdd4:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cdd7:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cdda:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cddb:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cde0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cde3:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cde6:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	.section	.text
	.align	32
	#Procedure 0x805cde8

	# 0x805cde8:	subl	$4, %esp [IMM, REG]
	.globl sub_805cde8
	.type sub_805cde8, @function
sub_805cde8:
	subl	$4, %esp
	# 0x805cdeb:	pushl	$7 [IMM]
	pushl	$7
	# 0x805cded:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cdf0:	leal	-0x28(%ebp), %eax [MEM, REG]
	leal	-0x28(%ebp), %eax
	# 0x805cdf3:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cdf4:	calll	0x805ca64 [IMM <CODEREF>]
	calll	bkm_scale_by_power
	# 0x805cdf9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cdfc:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cdff:	jmp	0x805ce11 [IMM <CODEREF>]
	jmp	.label_2107
	# 0x805ce01:	movl	-0x28(%ebp), %edx [MEM, REG]
.label_2113:
	movl	-0x28(%ebp), %edx
	# 0x805ce04:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805ce07:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805ce09:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805ce0c:	orl	$2, %eax [IMM, REG]
	orl	$2, %eax
	# 0x805ce0f:	jmp	0x805ce41 [IMM <CODEREF>]
	jmp	.label_2105
	# 0x805ce11:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_2107:
	movl	-0x14(%ebp), %eax
	# 0x805ce14:	orl	%eax, -0x24(%ebp) [REG, MEM]
	orl	%eax, -0x24(%ebp)
	# 0x805ce17:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805ce1a:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805ce1c:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805ce1f:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805ce21:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805ce24:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805ce26:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805ce29:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805ce2b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805ce2e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ce30:	je	0x805ce36 [IMM <CODEREF>]
	je	.label_2108
	# 0x805ce32:	orl	$2, -0x24(%ebp) [IMM, MEM]
	orl	$2, -0x24(%ebp)
	# 0x805ce36:	movl	-0x28(%ebp), %edx [MEM, REG]
.label_2108:
	movl	-0x28(%ebp), %edx
	# 0x805ce39:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805ce3c:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805ce3e:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805ce41:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_2105:
	movl	-0xc(%ebp), %ecx
	# 0x805ce44:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805ce4b:	je	0x805ce52 [IMM <CODEREF>]
	je	.label_2115
	# 0x805ce4d:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805ce52:	leave	 []
.label_2115:
	leave	
	# 0x805ce53:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ce54

	# 0x805ce54:	pushl	%ebp [REG]
	.globl xstrtol_error
	.type xstrtol_error, @function
xstrtol_error:
	pushl	%ebp
	# 0x805ce55:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805ce57:	subl	$0x38, %esp [IMM, REG]
	subl	$0x38, %esp
	# 0x805ce5a:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805ce5d:	movb	%al, -0x2c(%ebp) [REG, MEM]
	movb	%al, -0x2c(%ebp)
	# 0x805ce60:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805ce63:	movl	%eax, -0x30(%ebp) [REG, MEM]
	movl	%eax, -0x30(%ebp)
	# 0x805ce66:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805ce69:	movl	%eax, -0x34(%ebp) [REG, MEM]
	movl	%eax, -0x34(%ebp)
	# 0x805ce6c:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805ce72:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805ce75:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805ce77:	movl	$0x8064168, -0x1c(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_2140, -28(%ebp)
	# 0x805ce7e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805ce81:	cmpl	$3, %eax [IMM, REG]
	cmpl	$3, %eax
	# 0x805ce84:	ja	0x805ce92 [IMM <CODEREF>]
	ja	.label_2141
	# 0x805ce86:	cmpl	$2, %eax [IMM, REG]
	cmpl	$2, %eax
	# 0x805ce89:	jae	0x805cea5 [IMM <CODEREF>]
	jae	.label_2135
	# 0x805ce8b:	cmpl	$1, %eax [IMM, REG]
	cmpl	$1, %eax
	# 0x805ce8e:	je	0x805ceae [IMM <CODEREF>]
	je	.label_2132
	# 0x805ce90:	jmp	0x805ce97 [IMM <CODEREF>]
	jmp	.label_2138
	# 0x805ce92:	cmpl	$4, %eax [IMM, REG]
.label_2141:
	cmpl	$4, %eax
	# 0x805ce95:	je	0x805ce9c [IMM <CODEREF>]
	je	.label_2139
	# 0x805ce97:	calll	0x8049b10 [IMM <CODEREF>]
.label_2138:
	calll	abort
	# 0x805ce9c:	movl	$0x806416b, -0x18(%ebp) [IMM <DATAREF>, MEM]
.label_2139:
	movl	$label_2143, -24(%ebp)
	# 0x805cea3:	jmp	0x805ceb6 [IMM <CODEREF>]
	jmp	.label_2134
	# 0x805cea5:	movl	$0x8064188, -0x18(%ebp) [IMM <DATAREF>, MEM]
.label_2135:
	movl	$label_2133, -24(%ebp)
	# 0x805ceac:	jmp	0x805ceb6 [IMM <CODEREF>]
	jmp	.label_2134
	# 0x805ceae:	movl	$0x80641ad, -0x18(%ebp) [IMM <DATAREF>, MEM]
.label_2132:
	movl	$label_2137, -24(%ebp)
	# 0x805ceb5:	nop	 []
	nop	
	# 0x805ceb6:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
.label_2134:
	cmpl	$0, 0xc(%ebp)
	# 0x805ceba:	jns	0x805ced7 [IMM <CODEREF>]
	jns	.label_2142
	# 0x805cebc:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805cebf:	negl	%eax [REG]
	negl	%eax
	# 0x805cec1:	addl	%eax, -0x1c(%ebp) [REG, MEM]
	addl	%eax, -0x1c(%ebp)
	# 0x805cec4:	movzbl	-0x2c(%ebp), %eax [MEM, REG]
	movzbl	-0x2c(%ebp), %eax
	# 0x805cec8:	movb	%al, -0xe(%ebp) [REG, MEM]
	movb	%al, -0xe(%ebp)
	# 0x805cecb:	movb	$0, -0xd(%ebp) [IMM, MEM]
	movb	$0, -0xd(%ebp)
	# 0x805cecf:	leal	-0xe(%ebp), %eax [MEM, REG]
	leal	-0xe(%ebp), %eax
	# 0x805ced2:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805ced5:	jmp	0x805cee9 [IMM <CODEREF>]
	jmp	.label_2136
	# 0x805ced7:	movl	0xc(%ebp), %eax [MEM, REG]
.label_2142:
	movl	0xc(%ebp), %eax
	# 0x805ceda:	shll	$4, %eax [IMM, REG]
	shll	$4, %eax
	# 0x805cedd:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805cedf:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805cee2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805cee4:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cee6:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805cee9:	subl	$0xc, %esp [IMM, REG]
.label_2136:
	subl	$0xc, %esp
	# 0x805ceec:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805ceef:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805cef4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cef7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805cefa:	pushl	-0x34(%ebp) [MEM]
	pushl	-0x34(%ebp)
	# 0x805cefd:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805cf00:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805cf03:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cf04:	pushl	$0 [IMM]
	pushl	$0
	# 0x805cf06:	pushl	0x1c(%ebp) [MEM]
	pushl	0x1c(%ebp)
	# 0x805cf09:	calll	0x8049830 [IMM <CODEREF>]
	calll	error
	# 0x805cf0e:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805cf11:	nop	 []
	nop	
	# 0x805cf12:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805cf15:	xorl	%gs:0x14, %eax [MEM, REG]
	xorl	%gs:0x14, %eax
	# 0x805cf1c:	je	0x805cf23 [IMM <CODEREF>]
	je	.label_2131
	# 0x805cf1e:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805cf23:	leave	 []
.label_2131:
	leave	
	# 0x805cf24:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805cf25

	# 0x805cf25:	pushl	%ebp [REG]
	.globl xstrtol_fatal
	.type xstrtol_fatal, @function
xstrtol_fatal:
	pushl	%ebp
	# 0x805cf26:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805cf28:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805cf2b:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805cf2e:	movb	%al, -0xc(%ebp) [REG, MEM]
	movb	%al, -0xc(%ebp)
	# 0x805cf31:	movl	0x806a314, %edx [MEM, REG]
	movl	exit_failure,  %edx
	# 0x805cf37:	movsbl	-0xc(%ebp), %eax [MEM, REG]
	movsbl	-0xc(%ebp), %eax
	# 0x805cf3b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805cf3e:	pushl	%edx [REG]
	pushl	%edx
	# 0x805cf3f:	pushl	0x18(%ebp) [MEM]
	pushl	0x18(%ebp)
	# 0x805cf42:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805cf45:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cf46:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805cf49:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805cf4c:	calll	0x805ce54 [IMM <CODEREF>]
	calll	xstrtol_error
	# 0x805cf51:	addl	$0x20, %esp [IMM, REG]
	addl	$0x20, %esp
	# 0x805cf54:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	.section	.text
	.align	32
	#Procedure 0x805cf59

	# 0x805cf59:	pushl	%ebp [REG]
	.globl bkm_scale_bio_def_00
	.type bkm_scale_bio_def_00, @function
bkm_scale_bio_def_00:
	pushl	%ebp
	# 0x805cf5a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805cf5c:	pushl	%edi [REG]
	pushl	%edi
	# 0x805cf5d:	pushl	%esi [REG]
	pushl	%esi
	# 0x805cf5e:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805cf5f:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805cf62:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805cf65:	cltd	 []
	cltd	
	# 0x805cf66:	pushl	%edx [REG]
	pushl	%edx
	# 0x805cf67:	pushl	%eax [REG]
	pushl	%eax
	# 0x805cf68:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805cf6a:	pushl	$-1 [IMM]
	pushl	$-1
	# 0x805cf6c:	calll	0x805e8b0 [IMM <CODEREF>]
	calll	__udivdi3
	# 0x805cf71:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cf74:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805cf76:	movl	%edx, %ebx [REG, REG]
	movl	%edx, %ebx
	# 0x805cf78:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805cf7b:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805cf7e:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805cf80:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805cf82:	ja	0x805cfa3 [IMM <CODEREF>]
	ja	.label_2144
	# 0x805cf84:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805cf86:	jb	0x805cf8c [IMM <CODEREF>]
	jb	.label_2145
	# 0x805cf88:	cmpl	%eax, %ecx [REG, REG]
	cmpl	%eax, %ecx
	# 0x805cf8a:	jae	0x805cfa3 [IMM <CODEREF>]
	jae	.label_2144
	# 0x805cf8c:	movl	8(%ebp), %eax [MEM, REG]
.label_2145:
	movl	8(%ebp), %eax
	# 0x805cf8f:	movl	$0xffffffff, 0(%eax) [IMM, MEM]
	movl	$0xffffffff, 0(%eax)
	# 0x805cf95:	movl	$0xffffffff, 4(%eax) [IMM, MEM]
	movl	$0xffffffff, 4(%eax)
	# 0x805cf9c:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805cfa1:	jmp	0x805cfcf [IMM <CODEREF>]
	jmp	.label_2146
	# 0x805cfa3:	movl	8(%ebp), %eax [MEM, REG]
.label_2144:
	movl	8(%ebp), %eax
	# 0x805cfa6:	movl	0(%eax), %ecx [MEM, REG]
	movl	0(%eax), %ecx
	# 0x805cfa8:	movl	4(%eax), %ebx [MEM, REG]
	movl	4(%eax), %ebx
	# 0x805cfab:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805cfae:	cltd	 []
	cltd	
	# 0x805cfaf:	movl	%ebx, %edi [REG, REG]
	movl	%ebx, %edi
	# 0x805cfb1:	imull	%eax, %edi [REG, REG]
	imull	%eax, %edi
	# 0x805cfb4:	movl	%edx, %esi [REG, REG]
	movl	%edx, %esi
	# 0x805cfb6:	imull	%ecx, %esi [REG, REG]
	imull	%ecx, %esi
	# 0x805cfb9:	addl	%edi, %esi [REG, REG]
	addl	%edi, %esi
	# 0x805cfbb:	mull	%ecx [REG]
	mull	%ecx
	# 0x805cfbd:	leal	0(%esi, %edx), %ecx [MEM, REG]
	leal	0(%esi, %edx), %ecx
	# 0x805cfc0:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x805cfc2:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805cfc5:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805cfc7:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805cfca:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805cfcf:	leal	-0xc(%ebp), %esp [MEM, REG]
.label_2146:
	leal	-0xc(%ebp), %esp
	# 0x805cfd2:	popl	%ebx [REG]
	popl	%ebx
	# 0x805cfd3:	popl	%esi [REG]
	popl	%esi
	# 0x805cfd4:	popl	%edi [REG]
	popl	%edi
	# 0x805cfd5:	popl	%ebp [REG]
	popl	%ebp
	# 0x805cfd6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805cfd7

	# 0x805cfd7:	pushl	%ebp [REG]
	.globl bkm_scale_by_power_bio_def_00
	.type bkm_scale_by_power_bio_def_00, @function
bkm_scale_by_power_bio_def_00:
	pushl	%ebp
	# 0x805cfd8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805cfda:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805cfdd:	movl	$0, -0xc(%ebp) [IMM, MEM]
	movl	$0, -0xc(%ebp)
	# 0x805cfe4:	jmp	0x805cffa [IMM <CODEREF>]
	jmp	.label_2148
	# 0x805cfe6:	subl	$8, %esp [IMM, REG]
.label_2147:
	subl	$8, %esp
	# 0x805cfe9:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805cfec:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805cfef:	calll	0x805cf59 [IMM <CODEREF>]
	calll	bkm_scale_bio_def_00
	# 0x805cff4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805cff7:	orl	%eax, -0xc(%ebp) [REG, MEM]
	orl	%eax, -0xc(%ebp)
	# 0x805cffa:	movl	0x10(%ebp), %eax [MEM, REG]
.label_2148:
	movl	0x10(%ebp), %eax
	# 0x805cffd:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805d000:	movl	%edx, 0x10(%ebp) [REG, MEM]
	movl	%edx, 0x10(%ebp)
	# 0x805d003:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d005:	jne	0x805cfe6 [IMM <CODEREF>]
	jne	.label_2147
	# 0x805d007:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d00a:	leave	 []
	leave	
	# 0x805d00b:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d00c

	# 0x805d00c:	pushl	%ebp [REG]
	.globl xstrtoumax
	.type xstrtoumax, @function
xstrtoumax:
	pushl	%ebp
	# 0x805d00d:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d00f:	subl	$0x48, %esp [IMM, REG]
	subl	$0x48, %esp
	# 0x805d012:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d015:	movl	%eax, -0x3c(%ebp) [REG, MEM]
	movl	%eax, -0x3c(%ebp)
	# 0x805d018:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d01b:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x805d01e:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805d021:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805d024:	movl	0x18(%ebp), %eax [MEM, REG]
	movl	0x18(%ebp), %eax
	# 0x805d027:	movl	%eax, -0x48(%ebp) [REG, MEM]
	movl	%eax, -0x48(%ebp)
	# 0x805d02a:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805d030:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805d033:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805d035:	movl	$0, -0x30(%ebp) [IMM, MEM]
	movl	$0, -0x30(%ebp)
	# 0x805d03c:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805d040:	js	0x805d048 [IMM <CODEREF>]
	js	.label_2149
	# 0x805d042:	cmpl	$0x24, 0x10(%ebp) [IMM, MEM]
	cmpl	$0x24, 0x10(%ebp)
	# 0x805d046:	jle	0x805d05e [IMM <CODEREF>]
	jle	.label_2159
	# 0x805d048:	pushl	$0x806439c [IMM <DATAREF>]
.label_2149:
	pushl	$__PRETTY_FUNCTION__.3254_bio_def_00
	# 0x805d04d:	pushl	$0x60 [IMM]
	pushl	$0x60
	# 0x805d04f:	pushl	$0x80641cc [IMM <DATAREF>]
	pushl	$label_2161
	# 0x805d054:	pushl	$0x80641dc [IMM <DATAREF>]
	pushl	$label_2162
	# 0x805d059:	calll	0x8049b90 [IMM <CODEREF>]
	calll	__assert_fail
	# 0x805d05e:	cmpl	$0, -0x40(%ebp) [IMM, MEM]
.label_2159:
	cmpl	$0, -0x40(%ebp)
	# 0x805d062:	jne	0x805d069 [IMM <CODEREF>]
	jne	.label_2168
	# 0x805d064:	leal	-0x34(%ebp), %eax [MEM, REG]
	leal	-0x34(%ebp), %eax
	# 0x805d067:	jmp	0x805d06c [IMM <CODEREF>]
	jmp	.label_2170
	# 0x805d069:	movl	-0x40(%ebp), %eax [MEM, REG]
.label_2168:
	movl	-0x40(%ebp), %eax
	# 0x805d06c:	movl	%eax, -0x1c(%ebp) [REG, MEM]
.label_2170:
	movl	%eax, -0x1c(%ebp)
	# 0x805d06f:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805d074:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805d07a:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805d07d:	movl	%eax, -0x2c(%ebp) [REG, MEM]
	movl	%eax, -0x2c(%ebp)
	# 0x805d080:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805d083:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d086:	movb	%al, -0x35(%ebp) [REG, MEM]
	movb	%al, -0x35(%ebp)
	# 0x805d089:	jmp	0x805d098 [IMM <CODEREF>]
	jmp	.label_2171
	# 0x805d08b:	addl	$1, -0x2c(%ebp) [IMM, MEM]
.label_2154:
	addl	$1, -0x2c(%ebp)
	# 0x805d08f:	movl	-0x2c(%ebp), %eax [MEM, REG]
	movl	-0x2c(%ebp), %eax
	# 0x805d092:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d095:	movb	%al, -0x35(%ebp) [REG, MEM]
	movb	%al, -0x35(%ebp)
	# 0x805d098:	calll	0x8049ba0 [IMM <CODEREF>]
.label_2171:
	calll	__ctype_b_loc
	# 0x805d09d:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d09f:	movzbl	-0x35(%ebp), %edx [MEM, REG]
	movzbl	-0x35(%ebp), %edx
	# 0x805d0a3:	addl	%edx, %edx [REG, REG]
	addl	%edx, %edx
	# 0x805d0a5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805d0a7:	movzwl	0(%eax), %eax [MEM, REG]
	movzwl	0(%eax), %eax
	# 0x805d0aa:	movzwl	%ax, %eax [REG, REG]
	movzwl	%ax, %eax
	# 0x805d0ad:	andl	$0x2000, %eax [IMM, REG]
	andl	$0x2000, %eax
	# 0x805d0b2:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d0b4:	jne	0x805d08b [IMM <CODEREF>]
	jne	.label_2154
	# 0x805d0b6:	cmpb	$0x2d, -0x35(%ebp) [IMM, MEM]
	cmpb	$0x2d, -0x35(%ebp)
	# 0x805d0ba:	jne	0x805d0c6 [IMM <CODEREF>]
	jne	.label_2157
	# 0x805d0bc:	movl	$4, %eax [IMM, REG]
	movl	$4, %eax
	# 0x805d0c1:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d0c6:	subl	$4, %esp [IMM, REG]
.label_2157:
	subl	$4, %esp
	# 0x805d0c9:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805d0cc:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805d0cf:	pushl	-0x3c(%ebp) [MEM]
	pushl	-0x3c(%ebp)
	# 0x805d0d2:	calll	0x8049610 [IMM <CODEREF>]
	calll	strtoumax
	# 0x805d0d7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d0da:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805d0dd:	movl	%edx, -0x14(%ebp) [REG, MEM]
	movl	%edx, -0x14(%ebp)
	# 0x805d0e0:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d0e3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d0e5:	cmpl	-0x3c(%ebp), %eax [MEM, REG]
	cmpl	-0x3c(%ebp), %eax
	# 0x805d0e8:	jne	0x805d134 [IMM <CODEREF>]
	jne	.label_2165
	# 0x805d0ea:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
	cmpl	$0, -0x48(%ebp)
	# 0x805d0ee:	je	0x805d12a [IMM <CODEREF>]
	je	.label_2151
	# 0x805d0f0:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d0f3:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d0f5:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d0f8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d0fa:	je	0x805d12a [IMM <CODEREF>]
	je	.label_2151
	# 0x805d0fc:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d0ff:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d101:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d104:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805d107:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d10a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d10b:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805d10e:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805d113:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d116:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d118:	je	0x805d12a [IMM <CODEREF>]
	je	.label_2151
	# 0x805d11a:	movl	$1, -0x18(%ebp) [IMM, MEM]
	movl	$1, -0x18(%ebp)
	# 0x805d121:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x805d128:	jmp	0x805d15c [IMM <CODEREF>]
	jmp	.label_2153
	# 0x805d12a:	movl	$4, %eax [IMM, REG]
.label_2151:
	movl	$4, %eax
	# 0x805d12f:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d134:	calll	0x8049990 [IMM <CODEREF>]
.label_2165:
	calll	__errno_location
	# 0x805d139:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d13b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d13d:	je	0x805d15c [IMM <CODEREF>]
	je	.label_2153
	# 0x805d13f:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805d144:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d146:	cmpl	$0x22, %eax [IMM, REG]
	cmpl	$0x22, %eax
	# 0x805d149:	je	0x805d155 [IMM <CODEREF>]
	je	.label_2160
	# 0x805d14b:	movl	$4, %eax [IMM, REG]
	movl	$4, %eax
	# 0x805d150:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d155:	movl	$1, -0x30(%ebp) [IMM, MEM]
.label_2160:
	movl	$1, -0x30(%ebp)
	# 0x805d15c:	cmpl	$0, -0x48(%ebp) [IMM, MEM]
.label_2153:
	cmpl	$0, -0x48(%ebp)
	# 0x805d160:	jne	0x805d178 [IMM <CODEREF>]
	jne	.label_2167
	# 0x805d162:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805d165:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805d168:	movl	-0x44(%ebp), %ecx [MEM, REG]
	movl	-0x44(%ebp), %ecx
	# 0x805d16b:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805d16d:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805d170:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805d173:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d178:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_2167:
	movl	-0x1c(%ebp), %eax
	# 0x805d17b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d17d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d180:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d182:	je	0x805d3c8 [IMM <CODEREF>]
	je	.label_2155
	# 0x805d188:	movl	$0x400, -0x28(%ebp) [IMM, MEM]
	movl	$0x400, -0x28(%ebp)
	# 0x805d18f:	movl	$1, -0x24(%ebp) [IMM, MEM]
	movl	$1, -0x24(%ebp)
	# 0x805d196:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d199:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d19b:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d19e:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805d1a1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d1a4:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d1a5:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805d1a8:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805d1ad:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d1b0:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d1b2:	jne	0x805d1cd [IMM <CODEREF>]
	jne	.label_2156
	# 0x805d1b4:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805d1b7:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805d1ba:	movl	-0x44(%ebp), %ecx [MEM, REG]
	movl	-0x44(%ebp), %ecx
	# 0x805d1bd:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805d1bf:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805d1c2:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805d1c5:	orl	$2, %eax [IMM, REG]
	orl	$2, %eax
	# 0x805d1c8:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d1cd:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_2156:
	movl	-0x1c(%ebp), %eax
	# 0x805d1d0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d1d2:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d1d5:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805d1d8:	subl	$0x45, %eax [IMM, REG]
	subl	$0x45, %eax
	# 0x805d1db:	cmpl	$0x2f, %eax [IMM, REG]
	cmpl	$0x2f, %eax
	# 0x805d1de:	ja	0x805d23f [IMM <CODEREF>]
	ja	.label_2163
	# 0x805d1e0:	movl	0x8064204(, %eax, 4), %eax [MEM, REG]
	movl	label_2169(, %eax, 4),  %eax
	# 0x805d1e7:	jmpl	*%eax [REG]
	jmpl	*%eax
	.section	.text
	.align	32
	#Procedure 0x805d1e9

	# 0x805d1e9:	subl	$8, %esp [IMM, REG]
	.globl sub_805d1e9
	.type sub_805d1e9, @function
sub_805d1e9:
	subl	$8, %esp
	# 0x805d1ec:	pushl	$0x30 [IMM]
	pushl	$0x30
	# 0x805d1ee:	pushl	-0x48(%ebp) [MEM]
	pushl	-0x48(%ebp)
	# 0x805d1f1:	calll	0x8049900 [IMM <CODEREF>]
	calll	strchr
	# 0x805d1f6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d1f9:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805d1fb:	je	0x805d23f [IMM <CODEREF>]
	je	.label_2163
	# 0x805d1fd:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d200:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d202:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805d205:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d208:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805d20b:	cmpl	$0x44, %eax [IMM, REG]
	cmpl	$0x44, %eax
	# 0x805d20e:	je	0x805d231 [IMM <CODEREF>]
	je	.label_2173
	# 0x805d210:	cmpl	$0x69, %eax [IMM, REG]
	cmpl	$0x69, %eax
	# 0x805d213:	je	0x805d21c [IMM <CODEREF>]
	je	.label_2172
	# 0x805d215:	cmpl	$0x42, %eax [IMM, REG]
	cmpl	$0x42, %eax
	# 0x805d218:	je	0x805d231 [IMM <CODEREF>]
	je	.label_2173
	# 0x805d21a:	jmp	0x805d23f [IMM <CODEREF>]
	jmp	.label_2163
	# 0x805d21c:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_2172:
	movl	-0x1c(%ebp), %eax
	# 0x805d21f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d221:	addl	$2, %eax [IMM, REG]
	addl	$2, %eax
	# 0x805d224:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d227:	cmpb	$0x42, %al [IMM, REG]
	cmpb	$0x42, %al
	# 0x805d229:	jne	0x805d23e [IMM <CODEREF>]
	jne	.label_2174
	# 0x805d22b:	addl	$2, -0x24(%ebp) [IMM, MEM]
	addl	$2, -0x24(%ebp)
	# 0x805d22f:	jmp	0x805d23e [IMM <CODEREF>]
	jmp	.label_2174
	# 0x805d231:	movl	$0x3e8, -0x28(%ebp) [IMM, MEM]
.label_2173:
	movl	$0x3e8, -0x28(%ebp)
	# 0x805d238:	addl	$1, -0x24(%ebp) [IMM, MEM]
	addl	$1, -0x24(%ebp)
	# 0x805d23c:	jmp	0x805d23f [IMM <CODEREF>]
	jmp	.label_2163
	# 0x805d23e:	nop	 []
.label_2174:
	nop	
	# 0x805d23f:	movl	-0x1c(%ebp), %eax [MEM, REG]
.label_2163:
	movl	-0x1c(%ebp), %eax
	# 0x805d242:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d244:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d247:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805d24a:	subl	$0x42, %eax [IMM, REG]
	subl	$0x42, %eax
	# 0x805d24d:	cmpl	$0x35, %eax [IMM, REG]
	cmpl	$0x35, %eax
	# 0x805d250:	ja	0x805d38d [IMM <CODEREF>]
	ja	.label_2158
	# 0x805d256:	movl	0x80642c4(, %eax, 4), %eax [MEM, REG]
	movl	label_2164(, %eax, 4),  %eax
	# 0x805d25d:	jmpl	*%eax [REG]
	jmpl	*%eax
	.section	.text
	.align	32
	#Procedure 0x805d25f

	# 0x805d25f:	subl	$8, %esp [IMM, REG]
	.globl sub_805d25f
	.type sub_805d25f, @function
sub_805d25f:
	subl	$8, %esp
	# 0x805d262:	pushl	$0x200 [IMM]
	pushl	$0x200
	# 0x805d267:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d26a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d26b:	calll	0x805cf59 [IMM <CODEREF>]
	calll	bkm_scale_bio_def_00
	# 0x805d270:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d273:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d276:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d27b

	# 0x805d27b:	subl	$8, %esp [IMM, REG]
	.globl sub_805d27b
	.type sub_805d27b, @function
sub_805d27b:
	subl	$8, %esp
	# 0x805d27e:	pushl	$0x400 [IMM]
	pushl	$0x400
	# 0x805d283:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d286:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d287:	calll	0x805cf59 [IMM <CODEREF>]
	calll	bkm_scale_bio_def_00
	# 0x805d28c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d28f:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d292:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	# 0x805d297:	movl	$0, -0x20(%ebp) [IMM, MEM]
.label_2567:
	movl	$0, -0x20(%ebp)
	# 0x805d29e:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d2a3

	# 0x805d2a3:	subl	$4, %esp [IMM, REG]
	.globl sub_805d2a3
	.type sub_805d2a3, @function
sub_805d2a3:
	subl	$4, %esp
	# 0x805d2a6:	pushl	$6 [IMM]
	pushl	$6
	# 0x805d2a8:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d2ab:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d2ae:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d2af:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d2b4:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d2b7:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d2ba:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d2bf

	# 0x805d2bf:	subl	$4, %esp [IMM, REG]
	.globl sub_805d2bf
	.type sub_805d2bf, @function
sub_805d2bf:
	subl	$4, %esp
	# 0x805d2c2:	pushl	$3 [IMM]
	pushl	$3
	# 0x805d2c4:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d2c7:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d2ca:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d2cb:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d2d0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d2d3:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d2d6:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d2db

	# 0x805d2db:	subl	$4, %esp [IMM, REG]
	.globl sub_805d2db
	.type sub_805d2db, @function
sub_805d2db:
	subl	$4, %esp
	# 0x805d2de:	pushl	$1 [IMM]
	pushl	$1
	# 0x805d2e0:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d2e3:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d2e6:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d2e7:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d2ec:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d2ef:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d2f2:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d2f7

	# 0x805d2f7:	subl	$4, %esp [IMM, REG]
	.globl sub_805d2f7
	.type sub_805d2f7, @function
sub_805d2f7:
	subl	$4, %esp
	# 0x805d2fa:	pushl	$2 [IMM]
	pushl	$2
	# 0x805d2fc:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d2ff:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d302:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d303:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d308:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d30b:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d30e:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d313

	# 0x805d313:	subl	$4, %esp [IMM, REG]
	.globl sub_805d313
	.type sub_805d313, @function
sub_805d313:
	subl	$4, %esp
	# 0x805d316:	pushl	$5 [IMM]
	pushl	$5
	# 0x805d318:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d31b:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d31e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d31f:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d324:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d327:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d32a:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d32c

	# 0x805d32c:	subl	$4, %esp [IMM, REG]
	.globl sub_805d32c
	.type sub_805d32c, @function
sub_805d32c:
	subl	$4, %esp
	# 0x805d32f:	pushl	$4 [IMM]
	pushl	$4
	# 0x805d331:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d334:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d337:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d338:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d33d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d340:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d343:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d345

	# 0x805d345:	subl	$8, %esp [IMM, REG]
	.globl sub_805d345
	.type sub_805d345, @function
sub_805d345:
	subl	$8, %esp
	# 0x805d348:	pushl	$2 [IMM]
	pushl	$2
	# 0x805d34a:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d34d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d34e:	calll	0x805cf59 [IMM <CODEREF>]
	calll	bkm_scale_bio_def_00
	# 0x805d353:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d356:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d359:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d35b

	# 0x805d35b:	subl	$4, %esp [IMM, REG]
	.globl sub_805d35b
	.type sub_805d35b, @function
sub_805d35b:
	subl	$4, %esp
	# 0x805d35e:	pushl	$8 [IMM]
	pushl	$8
	# 0x805d360:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d363:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d366:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d367:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d36c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d36f:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d372:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	.section	.text
	.align	32
	#Procedure 0x805d374

	# 0x805d374:	subl	$4, %esp [IMM, REG]
	.globl sub_805d374
	.type sub_805d374, @function
sub_805d374:
	subl	$4, %esp
	# 0x805d377:	pushl	$7 [IMM]
	pushl	$7
	# 0x805d379:	pushl	-0x28(%ebp) [MEM]
	pushl	-0x28(%ebp)
	# 0x805d37c:	leal	-0x18(%ebp), %eax [MEM, REG]
	leal	-0x18(%ebp), %eax
	# 0x805d37f:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d380:	calll	0x805cfd7 [IMM <CODEREF>]
	calll	bkm_scale_by_power_bio_def_00
	# 0x805d385:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d388:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d38b:	jmp	0x805d3a3 [IMM <CODEREF>]
	jmp	.label_2152
	# 0x805d38d:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2158:
	movl	-0x18(%ebp), %eax
	# 0x805d390:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805d393:	movl	-0x44(%ebp), %ecx [MEM, REG]
	movl	-0x44(%ebp), %ecx
	# 0x805d396:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805d398:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805d39b:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805d39e:	orl	$2, %eax [IMM, REG]
	orl	$2, %eax
	# 0x805d3a1:	jmp	0x805d3d9 [IMM <CODEREF>]
	jmp	.label_2150
	# 0x805d3a3:	movl	-0x20(%ebp), %eax [MEM, REG]
.label_2152:
	movl	-0x20(%ebp), %eax
	# 0x805d3a6:	orl	%eax, -0x30(%ebp) [REG, MEM]
	orl	%eax, -0x30(%ebp)
	# 0x805d3a9:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d3ac:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805d3ae:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805d3b1:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805d3b3:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d3b6:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805d3b8:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d3bb:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d3bd:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d3c0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d3c2:	je	0x805d3c8 [IMM <CODEREF>]
	je	.label_2155
	# 0x805d3c4:	orl	$2, -0x30(%ebp) [IMM, MEM]
	orl	$2, -0x30(%ebp)
	# 0x805d3c8:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2155:
	movl	-0x18(%ebp), %eax
	# 0x805d3cb:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805d3ce:	movl	-0x44(%ebp), %ecx [MEM, REG]
	movl	-0x44(%ebp), %ecx
	# 0x805d3d1:	movl	%eax, 0(%ecx) [REG, MEM]
	movl	%eax, 0(%ecx)
	# 0x805d3d3:	movl	%edx, 4(%ecx) [REG, MEM]
	movl	%edx, 4(%ecx)
	# 0x805d3d6:	movl	-0x30(%ebp), %eax [MEM, REG]
	movl	-0x30(%ebp), %eax
	# 0x805d3d9:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_2150:
	movl	-0xc(%ebp), %edx
	# 0x805d3dc:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805d3e3:	je	0x805d3ea [IMM <CODEREF>]
	je	.label_2166
	# 0x805d3e5:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805d3ea:	leave	 []
.label_2166:
	leave	
	# 0x805d3eb:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d3ec

	# 0x805d3ec:	pushl	%ebp [REG]
	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	pushl	%ebp
	# 0x805d3ed:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d3ef:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805d3f2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d3f5:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805d3f8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d3fb:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d3fe:	movl	0x14(%ebp), %eax [MEM, REG]
	movl	0x14(%ebp), %eax
	# 0x805d401:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805d404:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805d40a:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805d40d:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805d40f:	cmpl	$0, -0x1c(%ebp) [IMM, MEM]
	cmpl	$0, -0x1c(%ebp)
	# 0x805d413:	jne	0x805d41b [IMM <CODEREF>]
	jne	.label_2176
	# 0x805d415:	leal	-0x14(%ebp), %eax [MEM, REG]
	leal	-0x14(%ebp), %eax
	# 0x805d418:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805d41b:	pushl	-0x24(%ebp) [MEM]
.label_2176:
	pushl	-0x24(%ebp)
	# 0x805d41e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805d421:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805d424:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805d427:	calll	0x8049800 [IMM <CODEREF>]
	calll	mbrtowc
	# 0x805d42c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d42f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805d432:	cmpl	$-3, -0x10(%ebp) [IMM, MEM]
	cmpl	$-3, -0x10(%ebp)
	# 0x805d436:	jbe	0x805d46b [IMM <CODEREF>]
	jbe	.label_2175
	# 0x805d438:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805d43c:	je	0x805d46b [IMM <CODEREF>]
	je	.label_2175
	# 0x805d43e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805d441:	pushl	$0 [IMM]
	pushl	$0
	# 0x805d443:	calll	0x8054656 [IMM <CODEREF>]
	calll	hard_locale
	# 0x805d448:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d44b:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805d44e:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d450:	je	0x805d46b [IMM <CODEREF>]
	je	.label_2175
	# 0x805d452:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805d455:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805d458:	movb	%al, -0x15(%ebp) [REG, MEM]
	movb	%al, -0x15(%ebp)
	# 0x805d45b:	movzbl	-0x15(%ebp), %edx [MEM, REG]
	movzbl	-0x15(%ebp), %edx
	# 0x805d45f:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d462:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805d464:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805d469:	jmp	0x805d46e [IMM <CODEREF>]
	jmp	.label_2178
	# 0x805d46b:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2175:
	movl	-0x10(%ebp), %eax
	# 0x805d46e:	movl	-0xc(%ebp), %ecx [MEM, REG]
.label_2178:
	movl	-0xc(%ebp), %ecx
	# 0x805d471:	xorl	%gs:0x14, %ecx [MEM, REG]
	xorl	%gs:0x14, %ecx
	# 0x805d478:	je	0x805d47f [IMM <CODEREF>]
	je	.label_2177
	# 0x805d47a:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805d47f:	leave	 []
.label_2177:
	leave	
	# 0x805d480:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d481

	# 0x805d481:	pushl	%ebp [REG]
	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	pushl	%ebp
	# 0x805d482:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d484:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d487:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d48a:	subl	$0x27d8, %eax [IMM, REG]
	subl	$0x27d8, %eax
	# 0x805d48f:	cmpl	$0xb, %eax [IMM, REG]
	cmpl	$0xb, %eax
	# 0x805d492:	ja	0x805d49d [IMM <CODEREF>]
	ja	.label_2179
	# 0x805d494:	addl	$0x1d842, 8(%ebp) [IMM, MEM]
	addl	$0x1d842, 8(%ebp)
	# 0x805d49b:	jmp	0x805d49e [IMM <CODEREF>]
	jmp	.label_2180
	# 0x805d49d:	nop	 []
.label_2179:
	nop	
	# 0x805d49e:	subl	$0xc, %esp [IMM, REG]
.label_2180:
	subl	$0xc, %esp
	# 0x805d4a1:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d4a4:	calll	0x8049a20 [IMM <CODEREF>]
	calll	nl_langinfo
	# 0x805d4a9:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d4ac:	leave	 []
	leave	
	# 0x805d4ad:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d4ae

	# 0x805d4ae:	pushl	%ebp [REG]
	.globl call_chunkfun
	.type call_chunkfun, @function
call_chunkfun:
	pushl	%ebp
	# 0x805d4af:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d4b1:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d4b4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d4b7:	movzbl	0x28(%eax), %eax [MEM, REG]
	movzbl	0x28(%eax), %eax
	# 0x805d4bb:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805d4be:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d4c0:	je	0x805d4dc [IMM <CODEREF>]
	je	.label_2182
	# 0x805d4c2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d4c5:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x805d4c8:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805d4cb:	movl	0x24(%edx), %edx [MEM, REG]
	movl	0x24(%edx), %edx
	# 0x805d4ce:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d4d1:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d4d4:	pushl	%edx [REG]
	pushl	%edx
	# 0x805d4d5:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d4d7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d4da:	jmp	0x805d4ed [IMM <CODEREF>]
	jmp	.label_2181
	# 0x805d4dc:	movl	8(%ebp), %eax [MEM, REG]
.label_2182:
	movl	8(%ebp), %eax
	# 0x805d4df:	movl	0x1c(%eax), %eax [MEM, REG]
	movl	0x1c(%eax), %eax
	# 0x805d4e2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805d4e5:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d4e8:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d4ea:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d4ed:	leave	 []
.label_2181:
	leave	
	# 0x805d4ee:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d4ef

	# 0x805d4ef:	pushl	%ebp [REG]
	.globl call_freefun
	.type call_freefun, @function
call_freefun:
	pushl	%ebp
	# 0x805d4f0:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d4f2:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d4f5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d4f8:	movzbl	0x28(%eax), %eax [MEM, REG]
	movzbl	0x28(%eax), %eax
	# 0x805d4fc:	andl	$1, %eax [IMM, REG]
	andl	$1, %eax
	# 0x805d4ff:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d501:	je	0x805d51d [IMM <CODEREF>]
	je	.label_2184
	# 0x805d503:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d506:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x805d509:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805d50c:	movl	0x24(%edx), %edx [MEM, REG]
	movl	0x24(%edx), %edx
	# 0x805d50f:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d512:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d515:	pushl	%edx [REG]
	pushl	%edx
	# 0x805d516:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d518:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d51b:	jmp	0x805d52e [IMM <CODEREF>]
	jmp	.label_2183
	# 0x805d51d:	movl	8(%ebp), %eax [MEM, REG]
.label_2184:
	movl	8(%ebp), %eax
	# 0x805d520:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x805d523:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805d526:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d529:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d52b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d52e:	nop	 []
.label_2183:
	nop	
	# 0x805d52f:	leave	 []
	leave	
	# 0x805d530:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d531

	# 0x805d531:	pushl	%ebp [REG]
	.globl _obstack_begin_worker
	.type _obstack_begin_worker, @function
_obstack_begin_worker:
	pushl	%ebp
	# 0x805d532:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d534:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805d537:	cmpl	$0, 0x10(%ebp) [IMM, MEM]
	cmpl	$0, 0x10(%ebp)
	# 0x805d53b:	jne	0x805d544 [IMM <CODEREF>]
	jne	.label_2185
	# 0x805d53d:	movl	$8, 0x10(%ebp) [IMM, MEM]
	movl	$8, 0x10(%ebp)
	# 0x805d544:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
.label_2185:
	cmpl	$0, 0xc(%ebp)
	# 0x805d548:	jne	0x805d55c [IMM <CODEREF>]
	jne	.label_2186
	# 0x805d54a:	movl	$0x20, -0x10(%ebp) [IMM, MEM]
	movl	$0x20, -0x10(%ebp)
	# 0x805d551:	movl	$0x1000, %eax [IMM, REG]
	movl	$0x1000, %eax
	# 0x805d556:	subl	-0x10(%ebp), %eax [MEM, REG]
	subl	-0x10(%ebp), %eax
	# 0x805d559:	movl	%eax, 0xc(%ebp) [REG, MEM]
	movl	%eax, 0xc(%ebp)
	# 0x805d55c:	movl	8(%ebp), %eax [MEM, REG]
.label_2186:
	movl	8(%ebp), %eax
	# 0x805d55f:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x805d562:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805d564:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805d567:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805d56a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d56d:	movl	%edx, 0x18(%eax) [REG, MEM]
	movl	%edx, 0x18(%eax)
	# 0x805d570:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d573:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d575:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d578:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d579:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d57c:	calll	0x805d4ae [IMM <CODEREF>]
	calll	call_chunkfun
	# 0x805d581:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d584:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d586:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d589:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805d58c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d58f:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d592:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805d595:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805d599:	jne	0x805d5a2 [IMM <CODEREF>]
	jne	.label_2187
	# 0x805d59b:	movl	0x806a370, %eax [MEM, REG]
	movl	obstack_alloc_failed_handler,  %eax
	# 0x805d5a0:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d5a2:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2187:
	movl	-0xc(%ebp), %eax
	# 0x805d5a5:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805d5a8:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d5aa:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805d5ad:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805d5af:	leal	-1(%eax), %edx [MEM, REG]
	leal	-1(%eax), %edx
	# 0x805d5b2:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805d5b5:	negl	%eax [REG]
	negl	%eax
	# 0x805d5b7:	andl	%edx, %eax [REG, REG]
	andl	%edx, %eax
	# 0x805d5b9:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d5bb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5be:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x805d5c1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5c4:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x805d5c7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5ca:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x805d5cd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5d0:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805d5d2:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d5d5:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805d5d7:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d5da:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805d5dc:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d5df:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805d5e1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5e4:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x805d5e7:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d5ea:	movl	$0, 4(%eax) [IMM, MEM]
	movl	$0, 4(%eax)
	# 0x805d5f1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d5f4:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d5f8:	andl	$0xfffffffd, %edx [IMM, REG]
	andl	$0xfffffffd, %edx
	# 0x805d5fb:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d5fe:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d601:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d605:	andl	$0xfffffffb, %edx [IMM, REG]
	andl	$0xfffffffb, %edx
	# 0x805d608:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d60b:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805d610:	leave	 []
	leave	
	# 0x805d611:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d612

	# 0x805d612:	pushl	%ebp [REG]
	.globl _obstack_begin
	.type _obstack_begin, @function
_obstack_begin:
	pushl	%ebp
	# 0x805d613:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d615:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d618:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d61b:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x805d61e:	movl	%edx, 0x1c(%eax) [REG, MEM]
	movl	%edx, 0x1c(%eax)
	# 0x805d621:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d624:	movl	0x18(%ebp), %edx [MEM, REG]
	movl	0x18(%ebp), %edx
	# 0x805d627:	movl	%edx, 0x20(%eax) [REG, MEM]
	movl	%edx, 0x20(%eax)
	# 0x805d62a:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d62d:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d631:	andl	$0xfffffffe, %edx [IMM, REG]
	andl	$0xfffffffe, %edx
	# 0x805d634:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d637:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805d63a:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805d63d:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d640:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d643:	calll	0x805d531 [IMM <CODEREF>]
	calll	_obstack_begin_worker
	# 0x805d648:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d64b:	leave	 []
	leave	
	# 0x805d64c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d64d

	# 0x805d64d:	pushl	%ebp [REG]
	.globl _obstack_begin_1
	.type _obstack_begin_1, @function
_obstack_begin_1:
	pushl	%ebp
	# 0x805d64e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d650:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d653:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d656:	movl	0x14(%ebp), %edx [MEM, REG]
	movl	0x14(%ebp), %edx
	# 0x805d659:	movl	%edx, 0x1c(%eax) [REG, MEM]
	movl	%edx, 0x1c(%eax)
	# 0x805d65c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d65f:	movl	0x18(%ebp), %edx [MEM, REG]
	movl	0x18(%ebp), %edx
	# 0x805d662:	movl	%edx, 0x20(%eax) [REG, MEM]
	movl	%edx, 0x20(%eax)
	# 0x805d665:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d668:	movl	0x1c(%ebp), %edx [MEM, REG]
	movl	0x1c(%ebp), %edx
	# 0x805d66b:	movl	%edx, 0x24(%eax) [REG, MEM]
	movl	%edx, 0x24(%eax)
	# 0x805d66e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d671:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d675:	orl	$1, %edx [IMM, REG]
	orl	$1, %edx
	# 0x805d678:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d67b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805d67e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805d681:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805d684:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d687:	calll	0x805d531 [IMM <CODEREF>]
	calll	_obstack_begin_worker
	# 0x805d68c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d68f:	leave	 []
	leave	
	# 0x805d690:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d691

	# 0x805d691:	pushl	%ebp [REG]
	.globl _obstack_newchunk
	.type _obstack_newchunk, @function
_obstack_newchunk:
	pushl	%ebp
	# 0x805d692:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d694:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805d697:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d69a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d69d:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805d6a0:	movl	$0, -0x24(%ebp) [IMM, MEM]
	movl	$0, -0x24(%ebp)
	# 0x805d6a7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d6aa:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805d6ad:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d6af:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d6b2:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x805d6b5:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805d6b7:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805d6b9:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805d6bc:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x805d6bf:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d6c2:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805d6c4:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805d6c7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d6ca:	movl	0x18(%eax), %edx [MEM, REG]
	movl	0x18(%eax), %edx
	# 0x805d6cd:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805d6d0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805d6d2:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805d6d5:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805d6d8:	shrl	$3, %eax [IMM, REG]
	shrl	$3, %eax
	# 0x805d6db:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d6dd:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805d6e0:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805d6e2:	addl	$0x64, %eax [IMM, REG]
	addl	$0x64, %eax
	# 0x805d6e5:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d6e8:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805d6eb:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805d6ee:	jae	0x805d6f6 [IMM <CODEREF>]
	jae	.label_2191
	# 0x805d6f0:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805d6f3:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d6f6:	movl	8(%ebp), %eax [MEM, REG]
.label_2191:
	movl	8(%ebp), %eax
	# 0x805d6f9:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d6fb:	cmpl	-0x20(%ebp), %eax [MEM, REG]
	cmpl	-0x20(%ebp), %eax
	# 0x805d6fe:	jbe	0x805d708 [IMM <CODEREF>]
	jbe	.label_2192
	# 0x805d700:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d703:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d705:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805d708:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2192:
	movl	-0x18(%ebp), %eax
	# 0x805d70b:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x805d70e:	ja	0x805d72c [IMM <CODEREF>]
	ja	.label_2188
	# 0x805d710:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805d713:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805d716:	ja	0x805d72c [IMM <CODEREF>]
	ja	.label_2188
	# 0x805d718:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d71b:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805d71e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d721:	calll	0x805d4ae [IMM <CODEREF>]
	calll	call_chunkfun
	# 0x805d726:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d729:	movl	%eax, -0x24(%ebp) [REG, MEM]
	movl	%eax, -0x24(%ebp)
	# 0x805d72c:	cmpl	$0, -0x24(%ebp) [IMM, MEM]
.label_2188:
	cmpl	$0, -0x24(%ebp)
	# 0x805d730:	jne	0x805d739 [IMM <CODEREF>]
	jne	.label_2190
	# 0x805d732:	movl	0x806a370, %eax [MEM, REG]
	movl	obstack_alloc_failed_handler,  %eax
	# 0x805d737:	calll	*%eax [REG]
	calll	*%eax
	# 0x805d739:	movl	8(%ebp), %eax [MEM, REG]
.label_2190:
	movl	8(%ebp), %eax
	# 0x805d73c:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x805d73f:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805d742:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805d745:	movl	-0x1c(%ebp), %edx [MEM, REG]
	movl	-0x1c(%ebp), %edx
	# 0x805d748:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805d74b:	movl	-0x24(%ebp), %edx [MEM, REG]
	movl	-0x24(%ebp), %edx
	# 0x805d74e:	movl	-0x20(%ebp), %eax [MEM, REG]
	movl	-0x20(%ebp), %eax
	# 0x805d751:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805d753:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d756:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x805d759:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d75c:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x805d75f:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805d762:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805d764:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805d767:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805d76a:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d76c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d76f:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x805d772:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805d774:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d777:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x805d77a:	notl	%eax [REG]
	notl	%eax
	# 0x805d77c:	andl	%edx, %eax [REG, REG]
	andl	%edx, %eax
	# 0x805d77e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805d781:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d784:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x805d787:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805d78a:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805d78d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d78e:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805d791:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805d796:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d799:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d79c:	movzbl	0x28(%eax), %eax [MEM, REG]
	movzbl	0x28(%eax), %eax
	# 0x805d7a0:	andl	$2, %eax [IMM, REG]
	andl	$2, %eax
	# 0x805d7a3:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d7a5:	jne	0x805d7e8 [IMM <CODEREF>]
	jne	.label_2189
	# 0x805d7a7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d7aa:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x805d7ad:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d7b0:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805d7b3:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805d7b5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d7b8:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x805d7bb:	addl	%eax, %ecx [REG, REG]
	addl	%eax, %ecx
	# 0x805d7bd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d7c0:	movl	0x18(%eax), %eax [MEM, REG]
	movl	0x18(%eax), %eax
	# 0x805d7c3:	notl	%eax [REG]
	notl	%eax
	# 0x805d7c5:	andl	%ecx, %eax [REG, REG]
	andl	%ecx, %eax
	# 0x805d7c7:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805d7c9:	jne	0x805d7e8 [IMM <CODEREF>]
	jne	.label_2189
	# 0x805d7cb:	movl	-0x1c(%ebp), %eax [MEM, REG]
	movl	-0x1c(%ebp), %eax
	# 0x805d7ce:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805d7d1:	movl	-0x24(%ebp), %eax [MEM, REG]
	movl	-0x24(%ebp), %eax
	# 0x805d7d4:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805d7d7:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d7da:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805d7dd:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d7e0:	calll	0x805d4ef [IMM <CODEREF>]
	calll	call_freefun
	# 0x805d7e5:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d7e8:	movl	8(%ebp), %eax [MEM, REG]
.label_2189:
	movl	8(%ebp), %eax
	# 0x805d7eb:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805d7ee:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x805d7f1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d7f4:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x805d7f7:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805d7fa:	addl	%eax, %edx [REG, REG]
	addl	%eax, %edx
	# 0x805d7fc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d7ff:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x805d802:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d805:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d809:	andl	$0xfffffffd, %edx [IMM, REG]
	andl	$0xfffffffd, %edx
	# 0x805d80c:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d80f:	nop	 []
	nop	
	# 0x805d810:	leave	 []
	leave	
	# 0x805d811:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d812

	# 0x805d812:	pushl	%ebp [REG]
	.globl _obstack_allocated_p
	.type _obstack_allocated_p, @function
_obstack_allocated_p:
	pushl	%ebp
	# 0x805d813:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d815:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805d818:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d81b:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d81e:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805d821:	jmp	0x805d832 [IMM <CODEREF>]
	jmp	.label_2194
	# 0x805d823:	movl	-8(%ebp), %eax [MEM, REG]
.label_2193:
	movl	-8(%ebp), %eax
	# 0x805d826:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d829:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805d82c:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805d82f:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805d832:	cmpl	$0, -8(%ebp) [IMM, MEM]
.label_2194:
	cmpl	$0, -8(%ebp)
	# 0x805d836:	je	0x805d84a [IMM <CODEREF>]
	je	.label_2195
	# 0x805d838:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805d83b:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805d83e:	jae	0x805d823 [IMM <CODEREF>]
	jae	.label_2193
	# 0x805d840:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805d843:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d845:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805d848:	jb	0x805d823 [IMM <CODEREF>]
	jb	.label_2193
	# 0x805d84a:	cmpl	$0, -8(%ebp) [IMM, MEM]
.label_2195:
	cmpl	$0, -8(%ebp)
	# 0x805d84e:	setne	%al [REG]
	setne	%al
	# 0x805d851:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805d854:	leave	 []
	leave	
	# 0x805d855:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d856

	# 0x805d856:	pushl	%ebp [REG]
	.globl _obstack_free
	.type _obstack_free, @function
_obstack_free:
	pushl	%ebp
	# 0x805d857:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d859:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805d85c:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d85f:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d862:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805d865:	jmp	0x805d894 [IMM <CODEREF>]
	jmp	.label_2198
	# 0x805d867:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2196:
	movl	-0x10(%ebp), %eax
	# 0x805d86a:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d86d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805d870:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d873:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805d876:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805d879:	calll	0x805d4ef [IMM <CODEREF>]
	calll	call_freefun
	# 0x805d87e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d881:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805d884:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805d887:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d88a:	movzbl	0x28(%eax), %edx [MEM, REG]
	movzbl	0x28(%eax), %edx
	# 0x805d88e:	orl	$2, %edx [IMM, REG]
	orl	$2, %edx
	# 0x805d891:	movb	%dl, 0x28(%eax) [REG, MEM]
	movb	%dl, 0x28(%eax)
	# 0x805d894:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_2198:
	cmpl	$0, -0x10(%ebp)
	# 0x805d898:	je	0x805d8ac [IMM <CODEREF>]
	je	.label_2197
	# 0x805d89a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805d89d:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805d8a0:	jae	0x805d867 [IMM <CODEREF>]
	jae	.label_2196
	# 0x805d8a2:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805d8a5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d8a7:	cmpl	0xc(%ebp), %eax [MEM, REG]
	cmpl	0xc(%ebp), %eax
	# 0x805d8aa:	jb	0x805d867 [IMM <CODEREF>]
	jb	.label_2196
	# 0x805d8ac:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
.label_2197:
	cmpl	$0, -0x10(%ebp)
	# 0x805d8b0:	je	0x805d8dd [IMM <CODEREF>]
	je	.label_2199
	# 0x805d8b2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8b5:	movl	0xc(%ebp), %edx [MEM, REG]
	movl	0xc(%ebp), %edx
	# 0x805d8b8:	movl	%edx, 0xc(%eax) [REG, MEM]
	movl	%edx, 0xc(%eax)
	# 0x805d8bb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8be:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x805d8c1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8c4:	movl	%edx, 8(%eax) [REG, MEM]
	movl	%edx, 8(%eax)
	# 0x805d8c7:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805d8ca:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805d8cc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8cf:	movl	%edx, 0x10(%eax) [REG, MEM]
	movl	%edx, 0x10(%eax)
	# 0x805d8d2:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8d5:	movl	-0x10(%ebp), %edx [MEM, REG]
	movl	-0x10(%ebp), %edx
	# 0x805d8d8:	movl	%edx, 4(%eax) [REG, MEM]
	movl	%edx, 4(%eax)
	# 0x805d8db:	jmp	0x805d8e8 [IMM <CODEREF>]
	jmp	.label_2200
	# 0x805d8dd:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
.label_2199:
	cmpl	$0, 0xc(%ebp)
	# 0x805d8e1:	je	0x805d8e8 [IMM <CODEREF>]
	je	.label_2200
	# 0x805d8e3:	calll	0x8049b10 [IMM <CODEREF>]
	calll	abort
	# 0x805d8e8:	nop	 []
.label_2200:
	nop	
	# 0x805d8e9:	leave	 []
	leave	
	# 0x805d8ea:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d8eb

	# 0x805d8eb:	pushl	%ebp [REG]
	.globl _obstack_memory_used
	.type _obstack_memory_used, @function
_obstack_memory_used:
	pushl	%ebp
	# 0x805d8ec:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d8ee:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805d8f1:	movl	$0, -4(%ebp) [IMM, MEM]
	movl	$0, -4(%ebp)
	# 0x805d8f8:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d8fb:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d8fe:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805d901:	jmp	0x805d91d [IMM <CODEREF>]
	jmp	.label_2201
	# 0x805d903:	movl	-8(%ebp), %eax [MEM, REG]
.label_2202:
	movl	-8(%ebp), %eax
	# 0x805d906:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d908:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d90a:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805d90d:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805d90f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805d911:	addl	%eax, -4(%ebp) [REG, MEM]
	addl	%eax, -4(%ebp)
	# 0x805d914:	movl	-8(%ebp), %eax [MEM, REG]
	movl	-8(%ebp), %eax
	# 0x805d917:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d91a:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805d91d:	cmpl	$0, -8(%ebp) [IMM, MEM]
.label_2201:
	cmpl	$0, -8(%ebp)
	# 0x805d921:	jne	0x805d903 [IMM <CODEREF>]
	jne	.label_2202
	# 0x805d923:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805d926:	leave	 []
	leave	
	# 0x805d927:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d928

	# 0x805d928:	pushl	%ebp [REG]
	.globl print_and_abort
	.type print_and_abort, @function
print_and_abort:
	pushl	%ebp
	# 0x805d929:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d92b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805d92e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805d931:	pushl	$0x80643a7 [IMM <DATAREF>]
	pushl	$label_2203
	# 0x805d936:	calll	0x80498b0 [IMM <CODEREF>]
	calll	gettext
	# 0x805d93b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d93e:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805d940:	movl	0x806a388, %eax [MEM, REG]
	movl	stderr,  %eax
	# 0x805d945:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805d948:	pushl	%edx [REG]
	pushl	%edx
	# 0x805d949:	pushl	$0x80643b8 [IMM <DATAREF>]
	pushl	$label_2204
	# 0x805d94e:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d94f:	calll	0x8049950 [IMM <CODEREF>]
	calll	fprintf
	# 0x805d954:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805d957:	movl	0x806a314, %eax [MEM, REG]
	movl	exit_failure,  %eax
	# 0x805d95c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805d95f:	pushl	%eax [REG]
	pushl	%eax
	# 0x805d960:	calll	0x80498a0 [IMM <CODEREF>]
	calll	exit
	.section	.text
	.align	32
	#Procedure 0x805d965

	# 0x805d965:	pushl	%ebp [REG]
	.globl isdst_differ
	.type isdst_differ, @function
isdst_differ:
	pushl	%ebp
	# 0x805d966:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d968:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805d96c:	sete	%dl [REG]
	sete	%dl
	# 0x805d96f:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805d973:	sete	%al [REG]
	sete	%al
	# 0x805d976:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d978:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805d97a:	je	0x805d98f [IMM <CODEREF>]
	je	.label_2205
	# 0x805d97c:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805d980:	js	0x805d98f [IMM <CODEREF>]
	js	.label_2205
	# 0x805d982:	cmpl	$0, 0xc(%ebp) [IMM, MEM]
	cmpl	$0, 0xc(%ebp)
	# 0x805d986:	js	0x805d98f [IMM <CODEREF>]
	js	.label_2205
	# 0x805d988:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805d98d:	jmp	0x805d994 [IMM <CODEREF>]
	jmp	.label_2206
	# 0x805d98f:	movl	$0, %eax [IMM, REG]
.label_2205:
	movl	$0, %eax
	# 0x805d994:	andl	$1, %eax [IMM, REG]
.label_2206:
	andl	$1, %eax
	# 0x805d997:	popl	%ebp [REG]
	popl	%ebp
	# 0x805d998:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805d999

	# 0x805d999:	pushl	%ebp [REG]
	.globl equal_tm
	.type equal_tm, @function
equal_tm:
	pushl	%ebp
	# 0x805d99a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805d99c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805d99d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9a0:	movl	0(%eax), %edx [MEM, REG]
	movl	0(%eax), %edx
	# 0x805d9a2:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9a5:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805d9a7:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805d9a9:	xorl	%eax, %ecx [REG, REG]
	xorl	%eax, %ecx
	# 0x805d9ab:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9ae:	movl	4(%eax), %edx [MEM, REG]
	movl	4(%eax), %edx
	# 0x805d9b1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9b4:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805d9b7:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d9b9:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805d9bb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9be:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x805d9c1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9c4:	movl	8(%eax), %eax [MEM, REG]
	movl	8(%eax), %eax
	# 0x805d9c7:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d9c9:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805d9cb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9ce:	movl	0xc(%eax), %edx [MEM, REG]
	movl	0xc(%eax), %edx
	# 0x805d9d1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9d4:	movl	0xc(%eax), %eax [MEM, REG]
	movl	0xc(%eax), %eax
	# 0x805d9d7:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d9d9:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805d9db:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9de:	movl	0x10(%eax), %edx [MEM, REG]
	movl	0x10(%eax), %edx
	# 0x805d9e1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9e4:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x805d9e7:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d9e9:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805d9eb:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805d9ee:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x805d9f1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805d9f4:	movl	0x14(%eax), %eax [MEM, REG]
	movl	0x14(%eax), %eax
	# 0x805d9f7:	xorl	%edx, %eax [REG, REG]
	xorl	%edx, %eax
	# 0x805d9f9:	movl	%ecx, %ebx [REG, REG]
	movl	%ecx, %ebx
	# 0x805d9fb:	orl	%eax, %ebx [REG, REG]
	orl	%eax, %ebx
	# 0x805d9fd:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805da00:	movl	0x20(%eax), %edx [MEM, REG]
	movl	0x20(%eax), %edx
	# 0x805da03:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805da06:	movl	0x20(%eax), %eax [MEM, REG]
	movl	0x20(%eax), %eax
	# 0x805da09:	pushl	%edx [REG]
	pushl	%edx
	# 0x805da0a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805da0b:	calll	0x805d965 [IMM <CODEREF>]
	calll	isdst_differ
	# 0x805da10:	addl	$8, %esp [IMM, REG]
	addl	$8, %esp
	# 0x805da13:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805da16:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805da18:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805da1a:	sete	%al [REG]
	sete	%al
	# 0x805da1d:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805da20:	movl	-4(%ebp), %ebx [MEM, REG]
	movl	-4(%ebp), %ebx
	# 0x805da23:	leave	 []
	leave	
	# 0x805da24:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805da25

	# 0x805da25:	pushl	%ebp [REG]
	.globl extend_abbrs
	.type extend_abbrs, @function
extend_abbrs:
	pushl	%ebp
	# 0x805da26:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805da28:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805da2b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805da2e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805da31:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805da34:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805da37:	calll	0x8049620 [IMM <CODEREF>]
	calll	memcpy
	# 0x805da3c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805da3f:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805da42:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805da45:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805da47:	movb	$0, 0(%eax) [IMM, MEM]
	movb	$0, 0(%eax)
	# 0x805da4a:	nop	 []
	nop	
	# 0x805da4b:	leave	 []
	leave	
	# 0x805da4c:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805da4d

	# 0x805da4d:	pushl	%ebp [REG]
	.globl tzalloc
	.type tzalloc, @function
tzalloc:
	pushl	%ebp
	# 0x805da4e:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805da50:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805da53:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805da57:	je	0x805da6c [IMM <CODEREF>]
	je	.label_2209
	# 0x805da59:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805da5c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805da5f:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805da64:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805da67:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805da6a:	jmp	0x805da71 [IMM <CODEREF>]
	jmp	.label_2207
	# 0x805da6c:	movl	$0, %eax [IMM, REG]
.label_2209:
	movl	$0, %eax
	# 0x805da71:	movl	%eax, -0x14(%ebp) [REG, MEM]
.label_2207:
	movl	%eax, -0x14(%ebp)
	# 0x805da74:	cmpl	$0x3a, -0x14(%ebp) [IMM, MEM]
	cmpl	$0x3a, -0x14(%ebp)
	# 0x805da78:	jbe	0x805da82 [IMM <CODEREF>]
	jbe	.label_2210
	# 0x805da7a:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805da7d:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805da80:	jmp	0x805da87 [IMM <CODEREF>]
	jmp	.label_2211
	# 0x805da82:	movl	$0x3b, %eax [IMM, REG]
.label_2210:
	movl	$0x3b, %eax
	# 0x805da87:	movl	%eax, -0x10(%ebp) [REG, MEM]
.label_2211:
	movl	%eax, -0x10(%ebp)
	# 0x805da8a:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805da8d:	addl	$8, %eax [IMM, REG]
	addl	$8, %eax
	# 0x805da90:	andl	$0xfffffffc, %eax [IMM, REG]
	andl	$0xfffffffc, %eax
	# 0x805da93:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805da96:	pushl	%eax [REG]
	pushl	%eax
	# 0x805da97:	calll	0x8049870 [IMM <CODEREF>]
	calll	malloc
	# 0x805da9c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805da9f:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805daa2:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805daa6:	je	0x805dae5 [IMM <CODEREF>]
	je	.label_2208
	# 0x805daa8:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805daab:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805dab1:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805dab5:	setne	%al [REG]
	setne	%al
	# 0x805dab8:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805daba:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805dabd:	movb	%dl, 4(%eax) [REG, MEM]
	movb	%dl, 4(%eax)
	# 0x805dac0:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805dac3:	movb	$0, 5(%eax) [IMM, MEM]
	movb	$0, 5(%eax)
	# 0x805dac7:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805dacb:	je	0x805dae5 [IMM <CODEREF>]
	je	.label_2208
	# 0x805dacd:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805dad0:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805dad3:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805dad6:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dad9:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805dadc:	pushl	%eax [REG]
	pushl	%eax
	# 0x805dadd:	calll	0x805da25 [IMM <CODEREF>]
	calll	extend_abbrs
	# 0x805dae2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dae5:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2208:
	movl	-0xc(%ebp), %eax
	# 0x805dae8:	leave	 []
	leave	
	# 0x805dae9:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805daea

	# 0x805daea:	pushl	%ebp [REG]
	.globl save_abbr
	.type save_abbr, @function
save_abbr:
	pushl	%ebp
	# 0x805daeb:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805daed:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805daf0:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x805daf7:	movl	$0x80643c0, -0x18(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_2221, -24(%ebp)
	# 0x805dafe:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805db01:	movl	0x28(%eax), %eax [MEM, REG]
	movl	0x28(%eax), %eax
	# 0x805db04:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805db07:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x805db0b:	je	0x805db20 [IMM <CODEREF>]
	je	.label_2222
	# 0x805db0d:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805db10:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x805db13:	ja	0x805db2a [IMM <CODEREF>]
	ja	.label_2215
	# 0x805db15:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805db18:	addl	$0x2c, %eax [IMM, REG]
	addl	$0x2c, %eax
	# 0x805db1b:	cmpl	-0x14(%ebp), %eax [MEM, REG]
	cmpl	-0x14(%ebp), %eax
	# 0x805db1e:	jbe	0x805db2a [IMM <CODEREF>]
	jbe	.label_2215
	# 0x805db20:	movl	$1, %eax [IMM, REG]
.label_2222:
	movl	$1, %eax
	# 0x805db25:	jmp	0x805dc70 [IMM <CODEREF>]
	jmp	.label_2220
	# 0x805db2a:	movl	-0x14(%ebp), %eax [MEM, REG]
.label_2215:
	movl	-0x14(%ebp), %eax
	# 0x805db2d:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805db30:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805db32:	je	0x805dc62 [IMM <CODEREF>]
	je	.label_2214
	# 0x805db38:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805db3b:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805db3e:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805db41:	jmp	0x805dc49 [IMM <CODEREF>]
	jmp	.label_2219
	# 0x805db46:	movl	-0x18(%ebp), %eax [MEM, REG]
.label_2217:
	movl	-0x18(%ebp), %eax
	# 0x805db49:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805db4c:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805db4e:	jne	0x805dc11 [IMM <CODEREF>]
	jne	.label_2213
	# 0x805db54:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805db57:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805db5a:	cmpl	-0x18(%ebp), %eax [MEM, REG]
	cmpl	-0x18(%ebp), %eax
	# 0x805db5d:	jne	0x805db6e [IMM <CODEREF>]
	jne	.label_2216
	# 0x805db5f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805db62:	movzbl	4(%eax), %eax [MEM, REG]
	movzbl	4(%eax), %eax
	# 0x805db66:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805db68:	jne	0x805dc11 [IMM <CODEREF>]
	jne	.label_2213
	# 0x805db6e:	subl	$0xc, %esp [IMM, REG]
.label_2216:
	subl	$0xc, %esp
	# 0x805db71:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805db74:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805db79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805db7c:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805db7f:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805db82:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805db85:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805db88:	addl	$5, %edx [IMM, REG]
	addl	$5, %edx
	# 0x805db8b:	subl	%edx, %eax [REG, REG]
	subl	%edx, %eax
	# 0x805db8d:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805db90:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805db93:	notl	%eax [REG]
	notl	%eax
	# 0x805db95:	cmpl	-0x10(%ebp), %eax [MEM, REG]
	cmpl	-0x10(%ebp), %eax
	# 0x805db98:	jae	0x805dbaf [IMM <CODEREF>]
	jae	.label_2223
	# 0x805db9a:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805db9f:	movl	$0xc, 0(%eax) [IMM, MEM]
	movl	$0xc, 0(%eax)
	# 0x805dba5:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805dbaa:	jmp	0x805dc70 [IMM <CODEREF>]
	jmp	.label_2220
	# 0x805dbaf:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_2223:
	movl	-0xc(%ebp), %edx
	# 0x805dbb2:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805dbb5:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805dbb7:	cmpl	$0x3a, %eax [IMM, REG]
	cmpl	$0x3a, %eax
	# 0x805dbba:	ja	0x805dbd5 [IMM <CODEREF>]
	ja	.label_2218
	# 0x805dbbc:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805dbbf:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805dbc2:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dbc5:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805dbc8:	calll	0x805da25 [IMM <CODEREF>]
	calll	extend_abbrs
	# 0x805dbcd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dbd0:	jmp	0x805dc62 [IMM <CODEREF>]
	jmp	.label_2214
	# 0x805dbd5:	subl	$0xc, %esp [IMM, REG]
.label_2218:
	subl	$0xc, %esp
	# 0x805dbd8:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dbdb:	calll	0x805da4d [IMM <CODEREF>]
	calll	tzalloc
	# 0x805dbe0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dbe3:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805dbe5:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dbe8:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805dbea:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dbed:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805dbef:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805dbf2:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805dbf6:	jne	0x805dbff [IMM <CODEREF>]
	jne	.label_2212
	# 0x805dbf8:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805dbfd:	jmp	0x805dc70 [IMM <CODEREF>]
	jmp	.label_2220
	# 0x805dbff:	movl	8(%ebp), %eax [MEM, REG]
.label_2212:
	movl	8(%ebp), %eax
	# 0x805dc02:	movb	$0, 4(%eax) [IMM, MEM]
	movb	$0, 4(%eax)
	# 0x805dc06:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dc09:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805dc0c:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805dc0f:	jmp	0x805dc62 [IMM <CODEREF>]
	jmp	.label_2214
	# 0x805dc11:	subl	$0xc, %esp [IMM, REG]
.label_2213:
	subl	$0xc, %esp
	# 0x805dc14:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805dc17:	calll	0x8049920 [IMM <CODEREF>]
	calll	strlen
	# 0x805dc1c:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dc1f:	addl	$1, %eax [IMM, REG]
	addl	$1, %eax
	# 0x805dc22:	addl	%eax, -0x18(%ebp) [REG, MEM]
	addl	%eax, -0x18(%ebp)
	# 0x805dc25:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805dc28:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805dc2b:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dc2d:	jne	0x805dc49 [IMM <CODEREF>]
	jne	.label_2219
	# 0x805dc2f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dc32:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805dc34:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805dc36:	je	0x805dc49 [IMM <CODEREF>]
	je	.label_2219
	# 0x805dc38:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dc3b:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805dc3d:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805dc40:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dc43:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805dc46:	movl	%eax, -0x18(%ebp) [REG, MEM]
	movl	%eax, -0x18(%ebp)
	# 0x805dc49:	subl	$8, %esp [IMM, REG]
.label_2219:
	subl	$8, %esp
	# 0x805dc4c:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dc4f:	pushl	-0x18(%ebp) [MEM]
	pushl	-0x18(%ebp)
	# 0x805dc52:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805dc57:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dc5a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805dc5c:	jne	0x805db46 [IMM <CODEREF>]
	jne	.label_2217
	# 0x805dc62:	movl	0xc(%ebp), %eax [MEM, REG]
.label_2214:
	movl	0xc(%ebp), %eax
	# 0x805dc65:	movl	-0x18(%ebp), %edx [MEM, REG]
	movl	-0x18(%ebp), %edx
	# 0x805dc68:	movl	%edx, 0x28(%eax) [REG, MEM]
	movl	%edx, 0x28(%eax)
	# 0x805dc6b:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dc70:	leave	 []
.label_2220:
	leave	
	# 0x805dc71:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dc72

	# 0x805dc72:	pushl	%ebp [REG]
	.globl tzfree
	.type tzfree, @function
tzfree:
	pushl	%ebp
	# 0x805dc73:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dc75:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805dc78:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dc7d:	cmpl	%eax, 8(%ebp) [REG, MEM]
	cmpl	%eax, 8(%ebp)
	# 0x805dc80:	je	0x805dca6 [IMM <CODEREF>]
	je	.label_2225
	# 0x805dc82:	jmp	0x805dca0 [IMM <CODEREF>]
	jmp	.label_2226
	# 0x805dc84:	movl	8(%ebp), %eax [MEM, REG]
.label_2224:
	movl	8(%ebp), %eax
	# 0x805dc87:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805dc89:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805dc8c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805dc8f:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805dc92:	calll	0x8049600 [IMM <CODEREF>]
	calll	free
	# 0x805dc97:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dc9a:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805dc9d:	movl	%eax, 8(%ebp) [REG, MEM]
	movl	%eax, 8(%ebp)
	# 0x805dca0:	cmpl	$0, 8(%ebp) [IMM, MEM]
.label_2226:
	cmpl	$0, 8(%ebp)
	# 0x805dca4:	jne	0x805dc84 [IMM <CODEREF>]
	jne	.label_2224
	# 0x805dca6:	nop	 []
.label_2225:
	nop	
	# 0x805dca7:	leave	 []
	leave	
	# 0x805dca8:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dca9

	# 0x805dca9:	pushl	%ebp [REG]
	.globl getenv_TZ
	.type getenv_TZ, @function
getenv_TZ:
	pushl	%ebp
	# 0x805dcaa:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dcac:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805dcaf:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805dcb2:	pushl	$0x80643c1 [IMM <DATAREF>]
	pushl	$label_2227
	# 0x805dcb7:	calll	0x8049850 [IMM <CODEREF>]
	calll	getenv
	# 0x805dcbc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dcbf:	leave	 []
	leave	
	# 0x805dcc0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dcc1

	# 0x805dcc1:	pushl	%ebp [REG]
	.globl setenv_TZ
	.type setenv_TZ, @function
setenv_TZ:
	pushl	%ebp
	# 0x805dcc2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dcc4:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805dcc7:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805dccb:	je	0x805dce4 [IMM <CODEREF>]
	je	.label_2228
	# 0x805dccd:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805dcd0:	pushl	$1 [IMM]
	pushl	$1
	# 0x805dcd2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805dcd5:	pushl	$0x80643c1 [IMM <DATAREF>]
	pushl	$label_2227
	# 0x805dcda:	calll	0x8049930 [IMM <CODEREF>]
	calll	setenv
	# 0x805dcdf:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dce2:	jmp	0x805dcf4 [IMM <CODEREF>]
	jmp	.label_2229
	# 0x805dce4:	subl	$0xc, %esp [IMM, REG]
.label_2228:
	subl	$0xc, %esp
	# 0x805dce7:	pushl	$0x80643c1 [IMM <DATAREF>]
	pushl	$label_2227
	# 0x805dcec:	calll	0x8049510 [IMM <CODEREF>]
	calll	unsetenv
	# 0x805dcf1:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dcf4:	leave	 []
.label_2229:
	leave	
	# 0x805dcf5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dcf6

	# 0x805dcf6:	pushl	%ebp [REG]
	.globl change_env
	.type change_env, @function
change_env:
	pushl	%ebp
	# 0x805dcf7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dcf9:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805dcfc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dcff:	movzbl	4(%eax), %eax [MEM, REG]
	movzbl	4(%eax), %eax
	# 0x805dd03:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dd05:	je	0x805dd0f [IMM <CODEREF>]
	je	.label_2230
	# 0x805dd07:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dd0a:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805dd0d:	jmp	0x805dd14 [IMM <CODEREF>]
	jmp	.label_2231
	# 0x805dd0f:	movl	$0, %eax [IMM, REG]
.label_2230:
	movl	$0, %eax
	# 0x805dd14:	subl	$0xc, %esp [IMM, REG]
.label_2231:
	subl	$0xc, %esp
	# 0x805dd17:	pushl	%eax [REG]
	pushl	%eax
	# 0x805dd18:	calll	0x805dcc1 [IMM <CODEREF>]
	calll	setenv_TZ
	# 0x805dd1d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dd20:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805dd22:	je	0x805dd2b [IMM <CODEREF>]
	je	.label_2233
	# 0x805dd24:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805dd29:	jmp	0x805dd35 [IMM <CODEREF>]
	jmp	.label_2232
	# 0x805dd2b:	calll	0x80497b0 [IMM <CODEREF>]
.label_2233:
	calll	tzset
	# 0x805dd30:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dd35:	leave	 []
.label_2232:
	leave	
	# 0x805dd36:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dd37

	# 0x805dd37:	pushl	%ebp [REG]
	.globl set_tz
	.type set_tz, @function
set_tz:
	pushl	%ebp
	# 0x805dd38:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dd3a:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805dd3d:	calll	0x805dca9 [IMM <CODEREF>]
	calll	getenv_TZ
	# 0x805dd42:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805dd45:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x805dd49:	je	0x805dd80 [IMM <CODEREF>]
	je	.label_2234
	# 0x805dd4b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dd4e:	movzbl	4(%eax), %eax [MEM, REG]
	movzbl	4(%eax), %eax
	# 0x805dd52:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dd54:	je	0x805dd76 [IMM <CODEREF>]
	je	.label_2235
	# 0x805dd56:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dd59:	addl	$5, %eax [IMM, REG]
	addl	$5, %eax
	# 0x805dd5c:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805dd5f:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dd62:	pushl	%eax [REG]
	pushl	%eax
	# 0x805dd63:	calll	0x8049540 [IMM <CODEREF>]
	calll	strcmp
	# 0x805dd68:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dd6b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805dd6d:	jne	0x805dd76 [IMM <CODEREF>]
	jne	.label_2235
	# 0x805dd6f:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dd74:	jmp	0x805dd7b [IMM <CODEREF>]
	jmp	.label_2239
	# 0x805dd76:	movl	$0, %eax [IMM, REG]
.label_2235:
	movl	$0, %eax
	# 0x805dd7b:	andl	$1, %eax [IMM, REG]
.label_2239:
	andl	$1, %eax
	# 0x805dd7e:	jmp	0x805dd8c [IMM <CODEREF>]
	jmp	.label_2240
	# 0x805dd80:	movl	8(%ebp), %eax [MEM, REG]
.label_2234:
	movl	8(%ebp), %eax
	# 0x805dd83:	movzbl	4(%eax), %eax [MEM, REG]
	movzbl	4(%eax), %eax
	# 0x805dd87:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dd89:	sete	%al [REG]
	sete	%al
	# 0x805dd8c:	testb	%al, %al [REG, REG]
.label_2240:
	testb	%al, %al
	# 0x805dd8e:	je	0x805dd97 [IMM <CODEREF>]
	je	.label_2236
	# 0x805dd90:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dd95:	jmp	0x805ddf6 [IMM <CODEREF>]
	jmp	.label_2237
	# 0x805dd97:	subl	$0xc, %esp [IMM, REG]
.label_2236:
	subl	$0xc, %esp
	# 0x805dd9a:	pushl	-0x14(%ebp) [MEM]
	pushl	-0x14(%ebp)
	# 0x805dd9d:	calll	0x805da4d [IMM <CODEREF>]
	calll	tzalloc
	# 0x805dda2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dda5:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805dda8:	cmpl	$0, -0x10(%ebp) [IMM, MEM]
	cmpl	$0, -0x10(%ebp)
	# 0x805ddac:	jne	0x805ddb3 [IMM <CODEREF>]
	jne	.label_2238
	# 0x805ddae:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805ddb1:	jmp	0x805ddf6 [IMM <CODEREF>]
	jmp	.label_2237
	# 0x805ddb3:	subl	$0xc, %esp [IMM, REG]
.label_2238:
	subl	$0xc, %esp
	# 0x805ddb6:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805ddb9:	calll	0x805dcf6 [IMM <CODEREF>]
	calll	change_env
	# 0x805ddbe:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805ddc1:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805ddc4:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805ddc6:	je	0x805ddf3 [IMM <CODEREF>]
	je	.label_2241
	# 0x805ddc8:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805ddcd:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805ddcf:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805ddd2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ddd5:	pushl	-0x10(%ebp) [MEM]
	pushl	-0x10(%ebp)
	# 0x805ddd8:	calll	0x805dc72 [IMM <CODEREF>]
	calll	tzfree
	# 0x805dddd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dde0:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805dde5:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805dde7:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805ddea:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805ddec:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805ddf1:	jmp	0x805ddf6 [IMM <CODEREF>]
	jmp	.label_2237
	# 0x805ddf3:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2241:
	movl	-0x10(%ebp), %eax
	# 0x805ddf6:	leave	 []
.label_2237:
	leave	
	# 0x805ddf7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ddf8

	# 0x805ddf8:	pushl	%ebp [REG]
	.globl revert_tz
	.type revert_tz, @function
revert_tz:
	pushl	%ebp
	# 0x805ddf9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805ddfb:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805ddfe:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805de03:	cmpl	%eax, 8(%ebp) [REG, MEM]
	cmpl	%eax, 8(%ebp)
	# 0x805de06:	jne	0x805de0f [IMM <CODEREF>]
	jne	.label_2243
	# 0x805de08:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805de0d:	jmp	0x805de5d [IMM <CODEREF>]
	jmp	.label_2242
	# 0x805de0f:	calll	0x8049990 [IMM <CODEREF>]
.label_2243:
	calll	__errno_location
	# 0x805de14:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805de16:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805de19:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805de1c:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805de1f:	calll	0x805dcf6 [IMM <CODEREF>]
	calll	change_env
	# 0x805de24:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805de27:	movb	%al, -0xd(%ebp) [REG, MEM]
	movb	%al, -0xd(%ebp)
	# 0x805de2a:	movzbl	-0xd(%ebp), %eax [MEM, REG]
	movzbl	-0xd(%ebp), %eax
	# 0x805de2e:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805de31:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805de33:	je	0x805de3f [IMM <CODEREF>]
	je	.label_2244
	# 0x805de35:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805de3a:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805de3c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805de3f:	subl	$0xc, %esp [IMM, REG]
.label_2244:
	subl	$0xc, %esp
	# 0x805de42:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805de45:	calll	0x805dc72 [IMM <CODEREF>]
	calll	tzfree
	# 0x805de4a:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805de4d:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805de52:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805de54:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805de57:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805de59:	movzbl	-0xd(%ebp), %eax [MEM, REG]
	movzbl	-0xd(%ebp), %eax
	# 0x805de5d:	leave	 []
.label_2242:
	leave	
	# 0x805de5e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805de5f

	# 0x805de5f:	pushl	%ebp [REG]
	.globl localtime_rz
	.type localtime_rz, @function
localtime_rz:
	pushl	%ebp
	# 0x805de60:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805de62:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805de65:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805de69:	jne	0x805de7e [IMM <CODEREF>]
	jne	.label_2249
	# 0x805de6b:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805de6e:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805de71:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805de74:	calll	0x8049a70 [IMM <CODEREF>]
	calll	gmtime_r
	# 0x805de79:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805de7c:	jmp	0x805def4 [IMM <CODEREF>]
	jmp	.label_2247
	# 0x805de7e:	subl	$0xc, %esp [IMM, REG]
.label_2249:
	subl	$0xc, %esp
	# 0x805de81:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805de84:	calll	0x805dd37 [IMM <CODEREF>]
	calll	set_tz
	# 0x805de89:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805de8c:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805de8f:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805de93:	je	0x805deef [IMM <CODEREF>]
	je	.label_2246
	# 0x805de95:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805de98:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805de9b:	pushl	0xc(%ebp) [MEM]
	pushl	0xc(%ebp)
	# 0x805de9e:	calll	0x80496e0 [IMM <CODEREF>]
	calll	localtime_r
	# 0x805dea3:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dea6:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805dea8:	je	0x805dec6 [IMM <CODEREF>]
	je	.label_2245
	# 0x805deaa:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805dead:	pushl	0x10(%ebp) [MEM]
	pushl	0x10(%ebp)
	# 0x805deb0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805deb3:	calll	0x805daea [IMM <CODEREF>]
	calll	save_abbr
	# 0x805deb8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805debb:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805debd:	je	0x805dec6 [IMM <CODEREF>]
	je	.label_2245
	# 0x805debf:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805dec4:	jmp	0x805decb [IMM <CODEREF>]
	jmp	.label_2248
	# 0x805dec6:	movl	$0, %eax [IMM, REG]
.label_2245:
	movl	$0, %eax
	# 0x805decb:	movb	%al, -0xd(%ebp) [REG, MEM]
.label_2248:
	movb	%al, -0xd(%ebp)
	# 0x805dece:	andb	$1, -0xd(%ebp) [IMM, MEM]
	andb	$1, -0xd(%ebp)
	# 0x805ded2:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ded5:	pushl	-0xc(%ebp) [MEM]
	pushl	-0xc(%ebp)
	# 0x805ded8:	calll	0x805ddf8 [IMM <CODEREF>]
	calll	revert_tz
	# 0x805dedd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dee0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dee2:	je	0x805deef [IMM <CODEREF>]
	je	.label_2246
	# 0x805dee4:	cmpb	$0, -0xd(%ebp) [IMM, MEM]
	cmpb	$0, -0xd(%ebp)
	# 0x805dee8:	je	0x805deef [IMM <CODEREF>]
	je	.label_2246
	# 0x805deea:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805deed:	jmp	0x805def4 [IMM <CODEREF>]
	jmp	.label_2247
	# 0x805deef:	movl	$0, %eax [IMM, REG]
.label_2246:
	movl	$0, %eax
	# 0x805def4:	leave	 []
.label_2247:
	leave	
	# 0x805def5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805def6

	# 0x805def6:	pushl	%ebp [REG]
	.globl mktime_z
	.type mktime_z, @function
mktime_z:
	pushl	%ebp
	# 0x805def7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805def9:	subl	$0x58, %esp [IMM, REG]
	subl	$0x58, %esp
	# 0x805defc:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805deff:	movl	%eax, -0x4c(%ebp) [REG, MEM]
	movl	%eax, -0x4c(%ebp)
	# 0x805df02:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805df05:	movl	%eax, -0x50(%ebp) [REG, MEM]
	movl	%eax, -0x50(%ebp)
	# 0x805df08:	movl	%gs:0x14, %eax [MEM, REG]
	movl	%gs:0x14, %eax
	# 0x805df0e:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805df11:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805df13:	cmpl	$0, -0x4c(%ebp) [IMM, MEM]
	cmpl	$0, -0x4c(%ebp)
	# 0x805df17:	jne	0x805df2c [IMM <CODEREF>]
	jne	.label_2254
	# 0x805df19:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805df1c:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805df1f:	calll	0x8049880 [IMM <CODEREF>]
	calll	timegm
	# 0x805df24:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805df27:	jmp	0x805dfce [IMM <CODEREF>]
	jmp	.label_2251
	# 0x805df2c:	subl	$0xc, %esp [IMM, REG]
.label_2254:
	subl	$0xc, %esp
	# 0x805df2f:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805df32:	calll	0x805dd37 [IMM <CODEREF>]
	calll	set_tz
	# 0x805df37:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805df3a:	movl	%eax, -0x40(%ebp) [REG, MEM]
	movl	%eax, -0x40(%ebp)
	# 0x805df3d:	cmpl	$0, -0x40(%ebp) [IMM, MEM]
	cmpl	$0, -0x40(%ebp)
	# 0x805df41:	je	0x805dfc9 [IMM <CODEREF>]
	je	.label_2255
	# 0x805df47:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805df4a:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805df4d:	calll	0x80496c0 [IMM <CODEREF>]
	calll	mktime
	# 0x805df52:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805df55:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805df58:	movl	$0xffffffff, -0x3c(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x3c(%ebp)
	# 0x805df5f:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805df62:	cmpl	-0x3c(%ebp), %eax [MEM, REG]
	cmpl	-0x3c(%ebp), %eax
	# 0x805df65:	jne	0x805df94 [IMM <CODEREF>]
	jne	.label_2253
	# 0x805df67:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805df6a:	leal	-0x38(%ebp), %eax [MEM, REG]
	leal	-0x38(%ebp), %eax
	# 0x805df6d:	pushl	%eax [REG]
	pushl	%eax
	# 0x805df6e:	leal	-0x44(%ebp), %eax [MEM, REG]
	leal	-0x44(%ebp), %eax
	# 0x805df71:	pushl	%eax [REG]
	pushl	%eax
	# 0x805df72:	calll	0x80496e0 [IMM <CODEREF>]
	calll	localtime_r
	# 0x805df77:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805df7a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805df7c:	je	0x805dfb2 [IMM <CODEREF>]
	je	.label_2250
	# 0x805df7e:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805df81:	leal	-0x38(%ebp), %eax [MEM, REG]
	leal	-0x38(%ebp), %eax
	# 0x805df84:	pushl	%eax [REG]
	pushl	%eax
	# 0x805df85:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805df88:	calll	0x805d999 [IMM <CODEREF>]
	calll	equal_tm
	# 0x805df8d:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805df90:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805df92:	je	0x805dfb2 [IMM <CODEREF>]
	je	.label_2250
	# 0x805df94:	subl	$8, %esp [IMM, REG]
.label_2253:
	subl	$8, %esp
	# 0x805df97:	pushl	-0x50(%ebp) [MEM]
	pushl	-0x50(%ebp)
	# 0x805df9a:	pushl	-0x4c(%ebp) [MEM]
	pushl	-0x4c(%ebp)
	# 0x805df9d:	calll	0x805daea [IMM <CODEREF>]
	calll	save_abbr
	# 0x805dfa2:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dfa5:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805dfa8:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dfaa:	je	0x805dfb2 [IMM <CODEREF>]
	je	.label_2250
	# 0x805dfac:	movl	-0x3c(%ebp), %eax [MEM, REG]
	movl	-0x3c(%ebp), %eax
	# 0x805dfaf:	movl	%eax, -0x44(%ebp) [REG, MEM]
	movl	%eax, -0x44(%ebp)
	# 0x805dfb2:	subl	$0xc, %esp [IMM, REG]
.label_2250:
	subl	$0xc, %esp
	# 0x805dfb5:	pushl	-0x40(%ebp) [MEM]
	pushl	-0x40(%ebp)
	# 0x805dfb8:	calll	0x805ddf8 [IMM <CODEREF>]
	calll	revert_tz
	# 0x805dfbd:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805dfc0:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805dfc2:	je	0x805dfc9 [IMM <CODEREF>]
	je	.label_2255
	# 0x805dfc4:	movl	-0x44(%ebp), %eax [MEM, REG]
	movl	-0x44(%ebp), %eax
	# 0x805dfc7:	jmp	0x805dfce [IMM <CODEREF>]
	jmp	.label_2251
	# 0x805dfc9:	movl	$0xffffffff, %eax [IMM, REG]
.label_2255:
	movl	$0xffffffff, %eax
	# 0x805dfce:	movl	-0xc(%ebp), %edx [MEM, REG]
.label_2251:
	movl	-0xc(%ebp), %edx
	# 0x805dfd1:	xorl	%gs:0x14, %edx [MEM, REG]
	xorl	%gs:0x14, %edx
	# 0x805dfd8:	je	0x805dfdf [IMM <CODEREF>]
	je	.label_2252
	# 0x805dfda:	calll	0x80496d0 [IMM <CODEREF>]
	calll	__stack_chk_fail
	# 0x805dfdf:	leave	 []
.label_2252:
	leave	
	# 0x805dfe0:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805dfe1
	.globl rotl64
	.type rotl64, @function
rotl64:

	# 0x805dfe1:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805dfe2:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805dfe4:	pushl	%esi [REG]
	pushl	%esi
	# 0x805dfe5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805dfe6:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805dfe9:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805dfec:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805dfef:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805dff2:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805dff5:	movl	-0x10(%ebp), %ebx [MEM, REG]
	movl	-0x10(%ebp), %ebx
	# 0x805dff8:	movl	-0xc(%ebp), %esi [MEM, REG]
	movl	-0xc(%ebp), %esi
	# 0x805dffb:	movl	0x10(%ebp), %ecx [MEM, REG]
	movl	0x10(%ebp), %ecx
	# 0x805dffe:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e000:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e002:	shldl	%cl, %eax, %edx [REG, REG, REG]
	shldl	%cl, %eax, %edx
	# 0x805e005:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805e007:	testb	$0x20, %cl [IMM, REG]
	testb	$0x20, %cl
	# 0x805e00a:	je	0x805e010 [IMM <CODEREF>]
	je	.label_2257
	# 0x805e00c:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e00e:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805e010:	movl	%eax, -0x20(%ebp) [REG, MEM]
.label_2257:
	movl	%eax, -0x20(%ebp)
	# 0x805e013:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x805e016:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805e019:	negl	%eax [REG]
	negl	%eax
	# 0x805e01b:	andl	$0x3f, %eax [IMM, REG]
	andl	$0x3f, %eax
	# 0x805e01e:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e020:	shrdl	%cl, %esi, %ebx [REG, REG, REG]
	shrdl	%cl, %esi, %ebx
	# 0x805e023:	shrl	%cl, %esi [REG, REG]
	shrl	%cl, %esi
	# 0x805e025:	testb	$0x20, %cl [IMM, REG]
	testb	$0x20, %cl
	# 0x805e028:	je	0x805e02e [IMM <CODEREF>]
	je	.label_2256
	# 0x805e02a:	movl	%esi, %ebx [REG, REG]
	movl	%esi, %ebx
	# 0x805e02c:	xorl	%esi, %esi [REG, REG]
	xorl	%esi, %esi
	# 0x805e02e:	movl	%ebx, %eax [REG, REG]
.label_2256:
	movl	%ebx, %eax
	# 0x805e030:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e032:	movl	-0x20(%ebp), %ebx [MEM, REG]
	movl	-0x20(%ebp), %ebx
	# 0x805e035:	movl	-0x1c(%ebp), %esi [MEM, REG]
	movl	-0x1c(%ebp), %esi
	# 0x805e038:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e03a:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805e03c:	movl	%ecx, -0x18(%ebp) [REG, MEM]
	movl	%ecx, -0x18(%ebp)
	# 0x805e03f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e041:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x805e043:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805e046:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805e049:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805e04c:	addl	$0x18, %esp [IMM, REG]
	addl	$0x18, %esp
	# 0x805e04f:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e050:	popl	%esi [REG]
	popl	%esi
	# 0x805e051:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e052:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e053
	.globl rotr64
	.type rotr64, @function
rotr64:

	# 0x805e053:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e054:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e056:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e057:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e058:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805e05b:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e05e:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805e061:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e064:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805e067:	movl	-0x10(%ebp), %ebx [MEM, REG]
	movl	-0x10(%ebp), %ebx
	# 0x805e06a:	movl	-0xc(%ebp), %esi [MEM, REG]
	movl	-0xc(%ebp), %esi
	# 0x805e06d:	movl	0x10(%ebp), %ecx [MEM, REG]
	movl	0x10(%ebp), %ecx
	# 0x805e070:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e072:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e074:	shrdl	%cl, %edx, %eax [REG, REG, REG]
	shrdl	%cl, %edx, %eax
	# 0x805e077:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805e079:	testb	$0x20, %cl [IMM, REG]
	testb	$0x20, %cl
	# 0x805e07c:	je	0x805e082 [IMM <CODEREF>]
	je	.label_2259
	# 0x805e07e:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e080:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e082:	movl	%eax, -0x20(%ebp) [REG, MEM]
.label_2259:
	movl	%eax, -0x20(%ebp)
	# 0x805e085:	movl	%edx, -0x1c(%ebp) [REG, MEM]
	movl	%edx, -0x1c(%ebp)
	# 0x805e088:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805e08b:	negl	%eax [REG]
	negl	%eax
	# 0x805e08d:	andl	$0x3f, %eax [IMM, REG]
	andl	$0x3f, %eax
	# 0x805e090:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e092:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e094:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e096:	shldl	%cl, %eax, %edx [REG, REG, REG]
	shldl	%cl, %eax, %edx
	# 0x805e099:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805e09b:	testb	$0x20, %cl [IMM, REG]
	testb	$0x20, %cl
	# 0x805e09e:	je	0x805e0a4 [IMM <CODEREF>]
	je	.label_2258
	# 0x805e0a0:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e0a2:	xorl	%eax, %eax [REG, REG]
	xorl	%eax, %eax
	# 0x805e0a4:	movl	-0x20(%ebp), %ebx [MEM, REG]
.label_2258:
	movl	-0x20(%ebp), %ebx
	# 0x805e0a7:	movl	-0x1c(%ebp), %esi [MEM, REG]
	movl	-0x1c(%ebp), %esi
	# 0x805e0aa:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e0ac:	orl	%eax, %ecx [REG, REG]
	orl	%eax, %ecx
	# 0x805e0ae:	movl	%ecx, -0x18(%ebp) [REG, MEM]
	movl	%ecx, -0x18(%ebp)
	# 0x805e0b1:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e0b3:	orl	%esi, %eax [REG, REG]
	orl	%esi, %eax
	# 0x805e0b5:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805e0b8:	movl	-0x18(%ebp), %eax [MEM, REG]
	movl	-0x18(%ebp), %eax
	# 0x805e0bb:	movl	-0x14(%ebp), %edx [MEM, REG]
	movl	-0x14(%ebp), %edx
	# 0x805e0be:	addl	$0x18, %esp [IMM, REG]
	addl	$0x18, %esp
	# 0x805e0c1:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e0c2:	popl	%esi [REG]
	popl	%esi
	# 0x805e0c3:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e0c4:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e0c5
	.globl rotl32
	.type rotl32, @function
rotl32:

	# 0x805e0c5:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e0c6:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e0c8:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e0cb:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805e0ce:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e0d0:	roll	%cl, %edx [REG, REG]
	roll	%cl, %edx
	# 0x805e0d2:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e0d4:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e0d5:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e0d6
	.globl rotr32
	.type rotr32, @function
rotr32:

	# 0x805e0d6:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e0d7:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e0d9:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e0dc:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805e0df:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e0e1:	rorl	%cl, %edx [REG, REG]
	rorl	%cl, %edx
	# 0x805e0e3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e0e5:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e0e6:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e0e7
	.globl rotl_sz
	.type rotl_sz, @function
rotl_sz:

	# 0x805e0e7:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e0e8:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e0ea:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e0ed:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805e0f0:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e0f2:	roll	%cl, %edx [REG, REG]
	roll	%cl, %edx
	# 0x805e0f4:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e0f6:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e0f7:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e0f8

	# 0x805e0f8:	pushl	%ebp [REG]
	.globl rotr_sz
	.type rotr_sz, @function
rotr_sz:
	pushl	%ebp
	# 0x805e0f9:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e0fb:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e0fe:	movl	8(%ebp), %edx [MEM, REG]
	movl	8(%ebp), %edx
	# 0x805e101:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e103:	rorl	%cl, %edx [REG, REG]
	rorl	%cl, %edx
	# 0x805e105:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e107:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e108:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e109
	.globl rotl16
	.type rotl16, @function
rotl16:

	# 0x805e109:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e10a:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e10c:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e10d:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805e110:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e113:	movw	%ax, -8(%ebp) [REG, MEM]
	movw	%ax, -8(%ebp)
	# 0x805e117:	movzwl	-8(%ebp), %edx [MEM, REG]
	movzwl	-8(%ebp), %edx
	# 0x805e11b:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e11e:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e120:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e122:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e124:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e126:	movzwl	-8(%ebp), %edx [MEM, REG]
	movzwl	-8(%ebp), %edx
	# 0x805e12a:	movl	$0x10, %eax [IMM, REG]
	movl	$0x10, %eax
	# 0x805e12f:	subl	0xc(%ebp), %eax [MEM, REG]
	subl	0xc(%ebp), %eax
	# 0x805e132:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e134:	sarl	%cl, %edx [REG, REG]
	sarl	%cl, %edx
	# 0x805e136:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e138:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805e13a:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x805e13d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e13e:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e13f:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e140
	.globl rotr16
	.type rotr16, @function
rotr16:

	# 0x805e140:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e141:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e143:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e144:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805e147:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e14a:	movw	%ax, -8(%ebp) [REG, MEM]
	movw	%ax, -8(%ebp)
	# 0x805e14e:	movzwl	-8(%ebp), %edx [MEM, REG]
	movzwl	-8(%ebp), %edx
	# 0x805e152:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e155:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e157:	sarl	%cl, %edx [REG, REG]
	sarl	%cl, %edx
	# 0x805e159:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e15b:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e15d:	movzwl	-8(%ebp), %edx [MEM, REG]
	movzwl	-8(%ebp), %edx
	# 0x805e161:	movl	$0x10, %eax [IMM, REG]
	movl	$0x10, %eax
	# 0x805e166:	subl	0xc(%ebp), %eax [MEM, REG]
	subl	0xc(%ebp), %eax
	# 0x805e169:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e16b:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e16d:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e16f:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805e171:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x805e174:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e175:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e176:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e177
	.globl rotl8
	.type rotl8, @function
rotl8:

	# 0x805e177:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e178:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e17a:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e17b:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805e17e:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e181:	movb	%al, -8(%ebp) [REG, MEM]
	movb	%al, -8(%ebp)
	# 0x805e184:	movzbl	-8(%ebp), %edx [MEM, REG]
	movzbl	-8(%ebp), %edx
	# 0x805e188:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e18b:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e18d:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e18f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e191:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e193:	movzbl	-8(%ebp), %edx [MEM, REG]
	movzbl	-8(%ebp), %edx
	# 0x805e197:	movl	$8, %eax [IMM, REG]
	movl	$8, %eax
	# 0x805e19c:	subl	0xc(%ebp), %eax [MEM, REG]
	subl	0xc(%ebp), %eax
	# 0x805e19f:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e1a1:	sarl	%cl, %edx [REG, REG]
	sarl	%cl, %edx
	# 0x805e1a3:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e1a5:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805e1a7:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x805e1aa:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e1ab:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e1ac:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e1ad
	.globl rotr8
	.type rotr8, @function
rotr8:

	# 0x805e1ad:	pushl	%ebp [REG]
	pushl	%ebp
	# 0x805e1ae:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e1b0:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e1b1:	subl	$4, %esp [IMM, REG]
	subl	$4, %esp
	# 0x805e1b4:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e1b7:	movb	%al, -8(%ebp) [REG, MEM]
	movb	%al, -8(%ebp)
	# 0x805e1ba:	movzbl	-8(%ebp), %edx [MEM, REG]
	movzbl	-8(%ebp), %edx
	# 0x805e1be:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e1c1:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e1c3:	sarl	%cl, %edx [REG, REG]
	sarl	%cl, %edx
	# 0x805e1c5:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e1c7:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e1c9:	movzbl	-8(%ebp), %edx [MEM, REG]
	movzbl	-8(%ebp), %edx
	# 0x805e1cd:	movl	$8, %eax [IMM, REG]
	movl	$8, %eax
	# 0x805e1d2:	subl	0xc(%ebp), %eax [MEM, REG]
	subl	0xc(%ebp), %eax
	# 0x805e1d5:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e1d7:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e1d9:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e1db:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805e1dd:	addl	$4, %esp [IMM, REG]
	addl	$4, %esp
	# 0x805e1e0:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e1e1:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e1e2:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e1e3

	# 0x805e1e3:	pushl	%ebp [REG]
	.globl c_strcasecmp
	.type c_strcasecmp, @function
c_strcasecmp:
	pushl	%ebp
	# 0x805e1e4:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e1e6:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e1e7:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e1e8:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805e1eb:	movl	8(%ebp), %esi [MEM, REG]
	movl	8(%ebp), %esi
	# 0x805e1ee:	movl	0xc(%ebp), %ebx [MEM, REG]
	movl	0xc(%ebp), %ebx
	# 0x805e1f1:	cmpl	%ebx, %esi [REG, REG]
	cmpl	%ebx, %esi
	# 0x805e1f3:	jne	0x805e1fc [IMM <CODEREF>]
	jne	.label_2262
	# 0x805e1f5:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805e1fa:	jmp	0x805e24a [IMM <CODEREF>]
	jmp	.label_2263
	# 0x805e1fc:	movzbl	0(%esi), %eax [MEM, REG]
.label_2262:
	movzbl	0(%esi), %eax
	# 0x805e1ff:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805e202:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e205:	pushl	%eax [REG]
	pushl	%eax
	# 0x805e206:	calll	0x8052f29 [IMM <CODEREF>]
	calll	c_tolower
	# 0x805e20b:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e20e:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x805e211:	movzbl	0(%ebx), %eax [MEM, REG]
	movzbl	0(%ebx), %eax
	# 0x805e214:	movzbl	%al, %eax [REG, REG]
	movzbl	%al, %eax
	# 0x805e217:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e21a:	pushl	%eax [REG]
	pushl	%eax
	# 0x805e21b:	calll	0x8052f29 [IMM <CODEREF>]
	calll	c_tolower
	# 0x805e220:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e223:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x805e226:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x805e22a:	je	0x805e23d [IMM <CODEREF>]
	je	.label_2260
	# 0x805e22c:	addl	$1, %esi [IMM, REG]
	addl	$1, %esi
	# 0x805e22f:	addl	$1, %ebx [IMM, REG]
	addl	$1, %ebx
	# 0x805e232:	movzbl	-0xa(%ebp), %eax [MEM, REG]
	movzbl	-0xa(%ebp), %eax
	# 0x805e236:	cmpb	-9(%ebp), %al [MEM, REG]
	cmpb	-9(%ebp), %al
	# 0x805e239:	je	0x805e1fc [IMM <CODEREF>]
	je	.label_2262
	# 0x805e23b:	jmp	0x805e23e [IMM <CODEREF>]
	jmp	.label_2261
	# 0x805e23d:	nop	 []
.label_2260:
	nop	
	# 0x805e23e:	movzbl	-0xa(%ebp), %edx [MEM, REG]
.label_2261:
	movzbl	-0xa(%ebp), %edx
	# 0x805e242:	movzbl	-9(%ebp), %eax [MEM, REG]
	movzbl	-9(%ebp), %eax
	# 0x805e246:	subl	%eax, %edx [REG, REG]
	subl	%eax, %edx
	# 0x805e248:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e24a:	leal	-8(%ebp), %esp [MEM, REG]
.label_2263:
	leal	-8(%ebp), %esp
	# 0x805e24d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e24e:	popl	%esi [REG]
	popl	%esi
	# 0x805e24f:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e250:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e251

	# 0x805e251:	pushl	%ebp [REG]
	.globl close_stream
	.type close_stream, @function
close_stream:
	pushl	%ebp
	# 0x805e252:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e254:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805e257:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e25a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e25d:	calll	0x80497e0 [IMM <CODEREF>]
	calll	__fpending
	# 0x805e262:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e265:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e267:	setne	%al [REG]
	setne	%al
	# 0x805e26a:	movb	%al, -0xb(%ebp) [REG, MEM]
	movb	%al, -0xb(%ebp)
	# 0x805e26d:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e270:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e273:	calll	0x8049780 [IMM <CODEREF>]
	calll	ferror_unlocked
	# 0x805e278:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e27b:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e27d:	setne	%al [REG]
	setne	%al
	# 0x805e280:	movb	%al, -0xa(%ebp) [REG, MEM]
	movb	%al, -0xa(%ebp)
	# 0x805e283:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e286:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e289:	calll	0x805e381 [IMM <CODEREF>]
	calll	rpl_fclose
	# 0x805e28e:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e291:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e293:	setne	%al [REG]
	setne	%al
	# 0x805e296:	movb	%al, -9(%ebp) [REG, MEM]
	movb	%al, -9(%ebp)
	# 0x805e299:	cmpb	$0, -0xa(%ebp) [IMM, MEM]
	cmpb	$0, -0xa(%ebp)
	# 0x805e29d:	jne	0x805e2b7 [IMM <CODEREF>]
	jne	.label_2264
	# 0x805e29f:	cmpb	$0, -9(%ebp) [IMM, MEM]
	cmpb	$0, -9(%ebp)
	# 0x805e2a3:	je	0x805e2d4 [IMM <CODEREF>]
	je	.label_2266
	# 0x805e2a5:	cmpb	$0, -0xb(%ebp) [IMM, MEM]
	cmpb	$0, -0xb(%ebp)
	# 0x805e2a9:	jne	0x805e2b7 [IMM <CODEREF>]
	jne	.label_2264
	# 0x805e2ab:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805e2b0:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805e2b2:	cmpl	$9, %eax [IMM, REG]
	cmpl	$9, %eax
	# 0x805e2b5:	je	0x805e2d4 [IMM <CODEREF>]
	je	.label_2266
	# 0x805e2b7:	movzbl	-9(%ebp), %eax [MEM, REG]
.label_2264:
	movzbl	-9(%ebp), %eax
	# 0x805e2bb:	xorl	$1, %eax [IMM, REG]
	xorl	$1, %eax
	# 0x805e2be:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805e2c0:	je	0x805e2cd [IMM <CODEREF>]
	je	.label_2267
	# 0x805e2c2:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805e2c7:	movl	$0, 0(%eax) [IMM, MEM]
	movl	$0, 0(%eax)
	# 0x805e2cd:	movl	$0xffffffff, %eax [IMM, REG]
.label_2267:
	movl	$0xffffffff, %eax
	# 0x805e2d2:	jmp	0x805e2d9 [IMM <CODEREF>]
	jmp	.label_2265
	# 0x805e2d4:	movl	$0, %eax [IMM, REG]
.label_2266:
	movl	$0, %eax
	# 0x805e2d9:	leave	 []
.label_2265:
	leave	
	# 0x805e2da:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e2db

	# 0x805e2db:	pushl	%ebp [REG]
	.globl dir_name
	.type dir_name, @function
dir_name:
	pushl	%ebp
	# 0x805e2dc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e2de:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805e2e1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e2e4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e2e7:	calll	0x8053ac4 [IMM <CODEREF>]
	calll	mdir_name
	# 0x805e2ec:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e2ef:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805e2f2:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805e2f6:	jne	0x805e2fd [IMM <CODEREF>]
	jne	.label_2268
	# 0x805e2f8:	calll	0x805c726 [IMM <CODEREF>]
	calll	xalloc_die
	# 0x805e2fd:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2268:
	movl	-0xc(%ebp), %eax
	# 0x805e300:	leave	 []
	leave	
	# 0x805e301:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e302

	# 0x805e302:	pushl	%ebp [REG]
	.globl hash_pjw
	.type hash_pjw, @function
hash_pjw:
	pushl	%ebp
	# 0x805e303:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e305:	subl	$0x10, %esp [IMM, REG]
	subl	$0x10, %esp
	# 0x805e308:	movl	$0, -4(%ebp) [IMM, MEM]
	movl	$0, -4(%ebp)
	# 0x805e30f:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e312:	movl	%eax, -8(%ebp) [REG, MEM]
	movl	%eax, -8(%ebp)
	# 0x805e315:	jmp	0x805e32f [IMM <CODEREF>]
	jmp	.label_2269
	# 0x805e317:	movl	-8(%ebp), %eax [MEM, REG]
.label_2270:
	movl	-8(%ebp), %eax
	# 0x805e31a:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805e31d:	movsbl	%al, %eax [REG, REG]
	movsbl	%al, %eax
	# 0x805e320:	movl	-4(%ebp), %edx [MEM, REG]
	movl	-4(%ebp), %edx
	# 0x805e323:	roll	$9, %edx [IMM, REG]
	roll	$9, %edx
	# 0x805e326:	addl	%edx, %eax [REG, REG]
	addl	%edx, %eax
	# 0x805e328:	movl	%eax, -4(%ebp) [REG, MEM]
	movl	%eax, -4(%ebp)
	# 0x805e32b:	addl	$1, -8(%ebp) [IMM, MEM]
	addl	$1, -8(%ebp)
	# 0x805e32f:	movl	-8(%ebp), %eax [MEM, REG]
.label_2269:
	movl	-8(%ebp), %eax
	# 0x805e332:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805e335:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805e337:	jne	0x805e317 [IMM <CODEREF>]
	jne	.label_2270
	# 0x805e339:	movl	-4(%ebp), %eax [MEM, REG]
	movl	-4(%ebp), %eax
	# 0x805e33c:	movl	$0, %edx [IMM, REG]
	movl	$0, %edx
	# 0x805e341:	divl	0xc(%ebp) [MEM]
	divl	0xc(%ebp)
	# 0x805e344:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e346:	leave	 []
	leave	
	# 0x805e347:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e348

	# 0x805e348:	pushl	%ebp [REG]
	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	pushl	%ebp
	# 0x805e349:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e34b:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805e34e:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e351:	pushl	$0xe [IMM]
	pushl	$0xe
	# 0x805e353:	calll	0x805d481 [IMM <CODEREF>]
	calll	rpl_nl_langinfo
	# 0x805e358:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e35b:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805e35e:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805e362:	jne	0x805e36b [IMM <CODEREF>]
	jne	.label_2271
	# 0x805e364:	movl	$0x80643c4, -0xc(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_2272, -12(%ebp)
	# 0x805e36b:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2271:
	movl	-0xc(%ebp), %eax
	# 0x805e36e:	movzbl	0(%eax), %eax [MEM, REG]
	movzbl	0(%eax), %eax
	# 0x805e371:	testb	%al, %al [REG, REG]
	testb	%al, %al
	# 0x805e373:	jne	0x805e37c [IMM <CODEREF>]
	jne	.label_2274
	# 0x805e375:	movl	$0x80643c5, -0xc(%ebp) [IMM <DATAREF>, MEM]
	movl	$label_2273, -12(%ebp)
	# 0x805e37c:	movl	-0xc(%ebp), %eax [MEM, REG]
.label_2274:
	movl	-0xc(%ebp), %eax
	# 0x805e37f:	leave	 []
	leave	
	# 0x805e380:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e381

	# 0x805e381:	pushl	%ebp [REG]
	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	pushl	%ebp
	# 0x805e382:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e384:	subl	$0x18, %esp [IMM, REG]
	subl	$0x18, %esp
	# 0x805e387:	movl	$0, -0x14(%ebp) [IMM, MEM]
	movl	$0, -0x14(%ebp)
	# 0x805e38e:	movl	$0, -0x10(%ebp) [IMM, MEM]
	movl	$0, -0x10(%ebp)
	# 0x805e395:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e398:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e39b:	calll	0x80499b0 [IMM <CODEREF>]
	calll	fileno
	# 0x805e3a0:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e3a3:	movl	%eax, -0xc(%ebp) [REG, MEM]
	movl	%eax, -0xc(%ebp)
	# 0x805e3a6:	cmpl	$0, -0xc(%ebp) [IMM, MEM]
	cmpl	$0, -0xc(%ebp)
	# 0x805e3aa:	jns	0x805e3bf [IMM <CODEREF>]
	jns	.label_2275
	# 0x805e3ac:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e3af:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e3b2:	calll	0x8049660 [IMM <CODEREF>]
	calll	fclose
	# 0x805e3b7:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e3ba:	jmp	0x805e445 [IMM <CODEREF>]
	jmp	.label_2279
	# 0x805e3bf:	subl	$0xc, %esp [IMM, REG]
.label_2275:
	subl	$0xc, %esp
	# 0x805e3c2:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e3c5:	calll	0x8049890 [IMM <CODEREF>]
	calll	__freading
	# 0x805e3ca:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e3cd:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e3cf:	je	0x805e3fc [IMM <CODEREF>]
	je	.label_2278
	# 0x805e3d1:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e3d4:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e3d7:	calll	0x80499b0 [IMM <CODEREF>]
	calll	fileno
	# 0x805e3dc:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e3df:	pushl	$1 [IMM]
	pushl	$1
	# 0x805e3e1:	pushl	$0 [IMM]
	pushl	$0
	# 0x805e3e3:	pushl	$0 [IMM]
	pushl	$0
	# 0x805e3e5:	pushl	%eax [REG]
	pushl	%eax
	# 0x805e3e6:	calll	0x8049ab0 [IMM <CODEREF>]
	calll	lseek64
	# 0x805e3eb:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e3ee:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805e3f0:	xorl	$0xffffffff, %ecx [IMM, REG]
	xorl	$0xffffffff, %ecx
	# 0x805e3f3:	xorl	$0xffffffff, %eax [IMM, REG]
	xorl	$0xffffffff, %eax
	# 0x805e3f6:	orl	%ecx, %eax [REG, REG]
	orl	%ecx, %eax
	# 0x805e3f8:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e3fa:	je	0x805e418 [IMM <CODEREF>]
	je	.label_2277
	# 0x805e3fc:	subl	$0xc, %esp [IMM, REG]
.label_2278:
	subl	$0xc, %esp
	# 0x805e3ff:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e402:	calll	0x805e46f [IMM <CODEREF>]
	calll	rpl_fflush
	# 0x805e407:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e40a:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e40c:	je	0x805e418 [IMM <CODEREF>]
	je	.label_2277
	# 0x805e40e:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805e413:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805e415:	movl	%eax, -0x14(%ebp) [REG, MEM]
	movl	%eax, -0x14(%ebp)
	# 0x805e418:	subl	$0xc, %esp [IMM, REG]
.label_2277:
	subl	$0xc, %esp
	# 0x805e41b:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e41e:	calll	0x8049660 [IMM <CODEREF>]
	calll	fclose
	# 0x805e423:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e426:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805e429:	cmpl	$0, -0x14(%ebp) [IMM, MEM]
	cmpl	$0, -0x14(%ebp)
	# 0x805e42d:	je	0x805e442 [IMM <CODEREF>]
	je	.label_2276
	# 0x805e42f:	calll	0x8049990 [IMM <CODEREF>]
	calll	__errno_location
	# 0x805e434:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e436:	movl	-0x14(%ebp), %eax [MEM, REG]
	movl	-0x14(%ebp), %eax
	# 0x805e439:	movl	%eax, 0(%edx) [REG, MEM]
	movl	%eax, 0(%edx)
	# 0x805e43b:	movl	$0xffffffff, -0x10(%ebp) [IMM, MEM]
	movl	$0xffffffff, -0x10(%ebp)
	# 0x805e442:	movl	-0x10(%ebp), %eax [MEM, REG]
.label_2276:
	movl	-0x10(%ebp), %eax
	# 0x805e445:	leave	 []
.label_2279:
	leave	
	# 0x805e446:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e447

	# 0x805e447:	pushl	%ebp [REG]
	.globl clear_ungetc_buffer_preserving_position
	.type clear_ungetc_buffer_preserving_position, @function
clear_ungetc_buffer_preserving_position:
	pushl	%ebp
	# 0x805e448:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e44a:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805e44d:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e450:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805e452:	andl	$0x100, %eax [IMM, REG]
	andl	$0x100, %eax
	# 0x805e457:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e459:	je	0x805e46c [IMM <CODEREF>]
	je	.label_2280
	# 0x805e45b:	pushl	$1 [IMM]
	pushl	$1
	# 0x805e45d:	pushl	$0 [IMM]
	pushl	$0
	# 0x805e45f:	pushl	$0 [IMM]
	pushl	$0
	# 0x805e461:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e464:	calll	0x805e4bb [IMM <CODEREF>]
	calll	rpl_fseeko
	# 0x805e469:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e46c:	nop	 []
.label_2280:
	nop	
	# 0x805e46d:	leave	 []
	leave	
	# 0x805e46e:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e46f

	# 0x805e46f:	pushl	%ebp [REG]
	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	pushl	%ebp
	# 0x805e470:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e472:	subl	$8, %esp [IMM, REG]
	subl	$8, %esp
	# 0x805e475:	cmpl	$0, 8(%ebp) [IMM, MEM]
	cmpl	$0, 8(%ebp)
	# 0x805e479:	je	0x805e48d [IMM <CODEREF>]
	je	.label_2283
	# 0x805e47b:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e47e:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e481:	calll	0x8049890 [IMM <CODEREF>]
	calll	__freading
	# 0x805e486:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e489:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e48b:	jne	0x805e49d [IMM <CODEREF>]
	jne	.label_2281
	# 0x805e48d:	subl	$0xc, %esp [IMM, REG]
.label_2283:
	subl	$0xc, %esp
	# 0x805e490:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e493:	calll	0x8049590 [IMM <CODEREF>]
	calll	fflush
	# 0x805e498:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e49b:	jmp	0x805e4b9 [IMM <CODEREF>]
	jmp	.label_2282
	# 0x805e49d:	subl	$0xc, %esp [IMM, REG]
.label_2281:
	subl	$0xc, %esp
	# 0x805e4a0:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e4a3:	calll	0x805e447 [IMM <CODEREF>]
	calll	clear_ungetc_buffer_preserving_position
	# 0x805e4a8:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e4ab:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e4ae:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e4b1:	calll	0x8049590 [IMM <CODEREF>]
	calll	fflush
	# 0x805e4b6:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e4b9:	leave	 []
.label_2282:
	leave	
	# 0x805e4ba:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e4bb

	# 0x805e4bb:	pushl	%ebp [REG]
	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	pushl	%ebp
	# 0x805e4bc:	movl	%esp, %ebp [REG, REG]
	movl	%esp, %ebp
	# 0x805e4be:	subl	$0x28, %esp [IMM, REG]
	subl	$0x28, %esp
	# 0x805e4c1:	movl	0xc(%ebp), %eax [MEM, REG]
	movl	0xc(%ebp), %eax
	# 0x805e4c4:	movl	%eax, -0x20(%ebp) [REG, MEM]
	movl	%eax, -0x20(%ebp)
	# 0x805e4c7:	movl	0x10(%ebp), %eax [MEM, REG]
	movl	0x10(%ebp), %eax
	# 0x805e4ca:	movl	%eax, -0x1c(%ebp) [REG, MEM]
	movl	%eax, -0x1c(%ebp)
	# 0x805e4cd:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e4d0:	movl	8(%eax), %edx [MEM, REG]
	movl	8(%eax), %edx
	# 0x805e4d3:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e4d6:	movl	4(%eax), %eax [MEM, REG]
	movl	4(%eax), %eax
	# 0x805e4d9:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805e4db:	jne	0x805e561 [IMM <CODEREF>]
	jne	.label_2284
	# 0x805e4e1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e4e4:	movl	0x14(%eax), %edx [MEM, REG]
	movl	0x14(%eax), %edx
	# 0x805e4e7:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e4ea:	movl	0x10(%eax), %eax [MEM, REG]
	movl	0x10(%eax), %eax
	# 0x805e4ed:	cmpl	%eax, %edx [REG, REG]
	cmpl	%eax, %edx
	# 0x805e4ef:	jne	0x805e561 [IMM <CODEREF>]
	jne	.label_2284
	# 0x805e4f1:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e4f4:	movl	0x24(%eax), %eax [MEM, REG]
	movl	0x24(%eax), %eax
	# 0x805e4f7:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e4f9:	jne	0x805e561 [IMM <CODEREF>]
	jne	.label_2284
	# 0x805e4fb:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805e4fe:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e501:	calll	0x80499b0 [IMM <CODEREF>]
	calll	fileno
	# 0x805e506:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e509:	pushl	0x14(%ebp) [MEM]
	pushl	0x14(%ebp)
	# 0x805e50c:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805e50f:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805e512:	pushl	%eax [REG]
	pushl	%eax
	# 0x805e513:	calll	0x8049ab0 [IMM <CODEREF>]
	calll	lseek64
	# 0x805e518:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e51b:	movl	%eax, -0x10(%ebp) [REG, MEM]
	movl	%eax, -0x10(%ebp)
	# 0x805e51e:	movl	%edx, -0xc(%ebp) [REG, MEM]
	movl	%edx, -0xc(%ebp)
	# 0x805e521:	movl	-0xc(%ebp), %eax [MEM, REG]
	movl	-0xc(%ebp), %eax
	# 0x805e524:	xorl	$0xffffffff, %eax [IMM, REG]
	xorl	$0xffffffff, %eax
	# 0x805e527:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e529:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805e52c:	xorl	$0xffffffff, %eax [IMM, REG]
	xorl	$0xffffffff, %eax
	# 0x805e52f:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x805e531:	testl	%eax, %eax [REG, REG]
	testl	%eax, %eax
	# 0x805e533:	jne	0x805e53c [IMM <CODEREF>]
	jne	.label_2285
	# 0x805e535:	movl	$0xffffffff, %eax [IMM, REG]
	movl	$0xffffffff, %eax
	# 0x805e53a:	jmp	0x805e575 [IMM <CODEREF>]
	jmp	.label_2286
	# 0x805e53c:	movl	8(%ebp), %eax [MEM, REG]
.label_2285:
	movl	8(%ebp), %eax
	# 0x805e53f:	movl	0(%eax), %eax [MEM, REG]
	movl	0(%eax), %eax
	# 0x805e541:	andl	$0xffffffef, %eax [IMM, REG]
	andl	$0xffffffef, %eax
	# 0x805e544:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e546:	movl	8(%ebp), %eax [MEM, REG]
	movl	8(%ebp), %eax
	# 0x805e549:	movl	%edx, 0(%eax) [REG, MEM]
	movl	%edx, 0(%eax)
	# 0x805e54b:	movl	8(%ebp), %ecx [MEM, REG]
	movl	8(%ebp), %ecx
	# 0x805e54e:	movl	-0x10(%ebp), %eax [MEM, REG]
	movl	-0x10(%ebp), %eax
	# 0x805e551:	movl	-0xc(%ebp), %edx [MEM, REG]
	movl	-0xc(%ebp), %edx
	# 0x805e554:	movl	%eax, 0x4c(%ecx) [REG, MEM]
	movl	%eax, 0x4c(%ecx)
	# 0x805e557:	movl	%edx, 0x50(%ecx) [REG, MEM]
	movl	%edx, 0x50(%ecx)
	# 0x805e55a:	movl	$0, %eax [IMM, REG]
	movl	$0, %eax
	# 0x805e55f:	jmp	0x805e575 [IMM <CODEREF>]
	jmp	.label_2286
	# 0x805e561:	pushl	0x14(%ebp) [MEM]
.label_2284:
	pushl	0x14(%ebp)
	# 0x805e564:	pushl	-0x1c(%ebp) [MEM]
	pushl	-0x1c(%ebp)
	# 0x805e567:	pushl	-0x20(%ebp) [MEM]
	pushl	-0x20(%ebp)
	# 0x805e56a:	pushl	8(%ebp) [MEM]
	pushl	8(%ebp)
	# 0x805e56d:	calll	0x8049670 [IMM <CODEREF>]
	calll	fseeko64
	# 0x805e572:	addl	$0x10, %esp [IMM, REG]
	addl	$0x10, %esp
	# 0x805e575:	leave	 []
.label_2286:
	leave	
	# 0x805e576:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805e580

	# 0x805e580:	pushl	%ebp [REG]
	.globl __divdi3
	.type __divdi3, @function
__divdi3:
	pushl	%ebp
	# 0x805e581:	pushl	%edi [REG]
	pushl	%edi
	# 0x805e582:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e583:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e584:	subl	$0x1c, %esp [IMM, REG]
	subl	$0x1c, %esp
	# 0x805e587:	movl	0x34(%esp), %ebx [MEM, REG]
	movl	0x34(%esp), %ebx
	# 0x805e58b:	movl	0x3c(%esp), %esi [MEM, REG]
	movl	0x3c(%esp), %esi
	# 0x805e58f:	movl	0x38(%esp), %ebp [MEM, REG]
	movl	0x38(%esp), %ebp
	# 0x805e593:	movl	0x30(%esp), %eax [MEM, REG]
	movl	0x30(%esp), %eax
	# 0x805e597:	movl	$0, 8(%esp) [IMM, MEM]
	movl	$0, 8(%esp)
	# 0x805e59f:	testl	%ebx, %ebx [REG, REG]
	testl	%ebx, %ebx
	# 0x805e5a1:	movl	%esi, %edi [REG, REG]
	movl	%esi, %edi
	# 0x805e5a3:	movl	%ebx, %edx [REG, REG]
	movl	%ebx, %edx
	# 0x805e5a5:	js	0x805e668 [IMM <CODEREF>]
	js	.label_2287
	# 0x805e5ab:	testl	%edi, %edi [REG, REG]
.label_2298:
	testl	%edi, %edi
	# 0x805e5ad:	movl	%ebp, 0(%esp) [REG, MEM]
	movl	%ebp, 0(%esp)
	# 0x805e5b0:	movl	%esi, 4(%esp) [REG, MEM]
	movl	%esi, 4(%esp)
	# 0x805e5b4:	js	0x805e650 [IMM <CODEREF>]
	js	.label_2297
	# 0x805e5ba:	movl	4(%esp), %ebx [MEM, REG]
.label_2291:
	movl	4(%esp), %ebx
	# 0x805e5be:	movl	0(%esp), %ecx [MEM, REG]
	movl	0(%esp), %ecx
	# 0x805e5c1:	movl	%edx, %esi [REG, REG]
	movl	%edx, %esi
	# 0x805e5c3:	movl	%eax, 0xc(%esp) [REG, MEM]
	movl	%eax, 0xc(%esp)
	# 0x805e5c7:	movl	%eax, %ebp [REG, REG]
	movl	%eax, %ebp
	# 0x805e5c9:	testl	%ebx, %ebx [REG, REG]
	testl	%ebx, %ebx
	# 0x805e5cb:	movl	%ecx, %edi [REG, REG]
	movl	%ecx, %edi
	# 0x805e5cd:	movl	0(%esp), %ecx [MEM, REG]
	movl	0(%esp), %ecx
	# 0x805e5d0:	jne	0x805e5e0 [IMM <CODEREF>]
	jne	.label_2299
	# 0x805e5d2:	cmpl	%edx, %edi [REG, REG]
	cmpl	%edx, %edi
	# 0x805e5d4:	jbe	0x805e628 [IMM <CODEREF>]
	jbe	.label_2292
	# 0x805e5d6:	divl	%edi [REG]
	divl	%edi
	# 0x805e5d8:	xorl	%ebp, %ebp [REG, REG]
	xorl	%ebp, %ebp
	# 0x805e5da:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e5dc:	jmp	0x805e5e8 [IMM <CODEREF>]
	jmp	.label_2290
	# 0x805e5e0:	cmpl	%edx, %ebx [REG, REG]
.label_2299:
	cmpl	%edx, %ebx
	# 0x805e5e2:	jbe	0x805e608 [IMM <CODEREF>]
	jbe	.label_2293
	# 0x805e5e4:	xorl	%ebp, %ebp [REG, REG]
	xorl	%ebp, %ebp
	# 0x805e5e6:	xorl	%ecx, %ecx [REG, REG]
	xorl	%ecx, %ecx
	# 0x805e5e8:	movl	%ecx, %eax [REG, REG]
.label_2290:
	movl	%ecx, %eax
	# 0x805e5ea:	movl	8(%esp), %ecx [MEM, REG]
	movl	8(%esp), %ecx
	# 0x805e5ee:	movl	%ebp, %edx [REG, REG]
	movl	%ebp, %edx
	# 0x805e5f0:	testl	%ecx, %ecx [REG, REG]
	testl	%ecx, %ecx
	# 0x805e5f2:	je	0x805e5fb [IMM <CODEREF>]
	je	.label_2296
	# 0x805e5f4:	negl	%eax [REG]
	negl	%eax
	# 0x805e5f6:	adcl	$0, %edx [IMM, REG]
	adcl	$0, %edx
	# 0x805e5f9:	negl	%edx [REG]
	negl	%edx
	# 0x805e5fb:	addl	$0x1c, %esp [IMM, REG]
.label_2296:
	addl	$0x1c, %esp
	# 0x805e5fe:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e5ff:	popl	%esi [REG]
	popl	%esi
	# 0x805e600:	popl	%edi [REG]
	popl	%edi
	# 0x805e601:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e602:	retl	 []
	retl	
	# 0x805e608:	bsrl	%ebx, %ebp [REG, REG]
.label_2293:
	bsrl	%ebx, %ebp
	# 0x805e60b:	xorl	$0x1f, %ebp [IMM, REG]
	xorl	$0x1f, %ebp
	# 0x805e60e:	jne	0x805e680 [IMM <CODEREF>]
	jne	.label_2289
	# 0x805e610:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805e612:	jb	0x805e61c [IMM <CODEREF>]
	jb	.label_2294
	# 0x805e614:	xorl	%ecx, %ecx [REG, REG]
	xorl	%ecx, %ecx
	# 0x805e616:	cmpl	0xc(%esp), %edi [MEM, REG]
	cmpl	0xc(%esp), %edi
	# 0x805e61a:	ja	0x805e5e8 [IMM <CODEREF>]
	ja	.label_2290
	# 0x805e61c:	movl	$1, %ecx [IMM, REG]
.label_2294:
	movl	$1, %ecx
	# 0x805e621:	jmp	0x805e5e8 [IMM <CODEREF>]
	jmp	.label_2290
	# 0x805e628:	testl	%ecx, %ecx [REG, REG]
.label_2292:
	testl	%ecx, %ecx
	# 0x805e62a:	jne	0x805e637 [IMM <CODEREF>]
	jne	.label_2295
	# 0x805e62c:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805e631:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e633:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e635:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e637:	xorl	%edx, %edx [REG, REG]
.label_2295:
	xorl	%edx, %edx
	# 0x805e639:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805e63b:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e63d:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e63f:	movl	%ebp, %eax [REG, REG]
	movl	%ebp, %eax
	# 0x805e641:	movl	%ebx, %ebp [REG, REG]
	movl	%ebx, %ebp
	# 0x805e643:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e645:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e647:	jmp	0x805e5e8 [IMM <CODEREF>]
	jmp	.label_2290
	# 0x805e650:	negl	0(%esp) [MEM]
.label_2297:
	negl	0(%esp)
	# 0x805e653:	notl	8(%esp) [MEM]
	notl	8(%esp)
	# 0x805e657:	adcl	$0, 4(%esp) [IMM, MEM]
	adcl	$0, 4(%esp)
	# 0x805e65c:	negl	4(%esp) [MEM]
	negl	4(%esp)
	# 0x805e660:	jmp	0x805e5ba [IMM <CODEREF>]
	jmp	.label_2291
	# 0x805e668:	negl	%eax [REG]
.label_2287:
	negl	%eax
	# 0x805e66a:	movl	$0xffffffff, 8(%esp) [IMM, MEM]
	movl	$0xffffffff, 8(%esp)
	# 0x805e672:	adcl	$0, %edx [IMM, REG]
	adcl	$0, %edx
	# 0x805e675:	negl	%edx [REG]
	negl	%edx
	# 0x805e677:	jmp	0x805e5ab [IMM <CODEREF>]
	jmp	.label_2298
	# 0x805e680:	movl	$0x20, %eax [IMM, REG]
.label_2289:
	movl	$0x20, %eax
	# 0x805e685:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805e687:	movl	%edi, %edx [REG, REG]
	movl	%edi, %edx
	# 0x805e689:	subl	%ebp, %eax [REG, REG]
	subl	%ebp, %eax
	# 0x805e68b:	shll	%cl, %ebx [REG, REG]
	shll	%cl, %ebx
	# 0x805e68d:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e68f:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805e691:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805e693:	orl	%ebx, %edx [REG, REG]
	orl	%ebx, %edx
	# 0x805e695:	shll	%cl, %edi [REG, REG]
	shll	%cl, %edi
	# 0x805e697:	movl	%esi, %ebx [REG, REG]
	movl	%esi, %ebx
	# 0x805e699:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e69b:	movl	%edx, 0(%esp) [REG, MEM]
	movl	%edx, 0(%esp)
	# 0x805e69e:	movl	0xc(%esp), %edx [MEM, REG]
	movl	0xc(%esp), %edx
	# 0x805e6a2:	shrl	%cl, %ebx [REG, REG]
	shrl	%cl, %ebx
	# 0x805e6a4:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805e6a6:	shll	%cl, %esi [REG, REG]
	shll	%cl, %esi
	# 0x805e6a8:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e6aa:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805e6ac:	orl	%edx, %esi [REG, REG]
	orl	%edx, %esi
	# 0x805e6ae:	movl	%ebx, %edx [REG, REG]
	movl	%ebx, %edx
	# 0x805e6b0:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805e6b2:	divl	0(%esp) [MEM]
	divl	0(%esp)
	# 0x805e6b5:	movl	%edx, %ebx [REG, REG]
	movl	%edx, %ebx
	# 0x805e6b7:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x805e6b9:	mull	%edi [REG]
	mull	%edi
	# 0x805e6bb:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805e6bd:	jb	0x805e6e0 [IMM <CODEREF>]
	jb	.label_2288
	# 0x805e6bf:	movl	0xc(%esp), %edi [MEM, REG]
	movl	0xc(%esp), %edi
	# 0x805e6c3:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805e6c5:	shll	%cl, %edi [REG, REG]
	shll	%cl, %edi
	# 0x805e6c7:	cmpl	%eax, %edi [REG, REG]
	cmpl	%eax, %edi
	# 0x805e6c9:	jae	0x805e6cf [IMM <CODEREF>]
	jae	.label_2300
	# 0x805e6cb:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805e6cd:	je	0x805e6e0 [IMM <CODEREF>]
	je	.label_2288
	# 0x805e6cf:	movl	%esi, %ecx [REG, REG]
.label_2300:
	movl	%esi, %ecx
	# 0x805e6d1:	xorl	%ebp, %ebp [REG, REG]
	xorl	%ebp, %ebp
	# 0x805e6d3:	jmp	0x805e5e8 [IMM <CODEREF>]
	jmp	.label_2290
	# 0x805e6e0:	leal	-1(%esi), %ecx [MEM, REG]
.label_2288:
	leal	-1(%esi), %ecx
	# 0x805e6e3:	xorl	%ebp, %ebp [REG, REG]
	xorl	%ebp, %ebp
	# 0x805e6e5:	jmp	0x805e5e8 [IMM <CODEREF>]
	jmp	.label_2290
	.section	.text
	.align	32
	#Procedure 0x805e6f0

	# 0x805e6f0:	pushl	%ebp [REG]
	.globl __moddi3
	.type __moddi3, @function
__moddi3:
	pushl	%ebp
	# 0x805e6f1:	pushl	%edi [REG]
	pushl	%edi
	# 0x805e6f2:	xorl	%ebp, %ebp [REG, REG]
	xorl	%ebp, %ebp
	# 0x805e6f4:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e6f5:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e6f6:	subl	$0x2c, %esp [IMM, REG]
	subl	$0x2c, %esp
	# 0x805e6f9:	movl	0x44(%esp), %ebx [MEM, REG]
	movl	0x44(%esp), %ebx
	# 0x805e6fd:	movl	0x4c(%esp), %eax [MEM, REG]
	movl	0x4c(%esp), %eax
	# 0x805e701:	movl	0x40(%esp), %edi [MEM, REG]
	movl	0x40(%esp), %edi
	# 0x805e705:	movl	0x48(%esp), %esi [MEM, REG]
	movl	0x48(%esp), %esi
	# 0x805e709:	testl	%ebx, %ebx [REG, REG]
	testl	%ebx, %ebx
	# 0x805e70b:	movl	%eax, %edx [REG, REG]
	movl	%eax, %edx
	# 0x805e70d:	movl	%ebx, 0xc(%esp) [REG, MEM]
	movl	%ebx, 0xc(%esp)
	# 0x805e711:	movl	%edi, 8(%esp) [REG, MEM]
	movl	%edi, 8(%esp)
	# 0x805e715:	js	0x805e7d0 [IMM <CODEREF>]
	js	.label_2315
	# 0x805e71b:	testl	%edx, %edx [REG, REG]
.label_2306:
	testl	%edx, %edx
	# 0x805e71d:	movl	%esi, %ecx [REG, REG]
	movl	%esi, %ecx
	# 0x805e71f:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e721:	js	0x805e7c0 [IMM <CODEREF>]
	js	.label_2308
	# 0x805e727:	movl	8(%esp), %esi [MEM, REG]
.label_2301:
	movl	8(%esp), %esi
	# 0x805e72b:	movl	0xc(%esp), %edi [MEM, REG]
	movl	0xc(%esp), %edi
	# 0x805e72f:	movl	%ecx, 0x10(%esp) [REG, MEM]
	movl	%ecx, 0x10(%esp)
	# 0x805e733:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805e735:	movl	%edi, %esi [REG, REG]
	movl	%edi, %esi
	# 0x805e737:	movl	%ebx, %edi [REG, REG]
	movl	%ebx, %edi
	# 0x805e739:	testl	%edi, %edi [REG, REG]
	testl	%edi, %edi
	# 0x805e73b:	movl	8(%esp), %ebx [MEM, REG]
	movl	8(%esp), %ebx
	# 0x805e73f:	movl	%esi, 0x14(%esp) [REG, MEM]
	movl	%esi, 0x14(%esp)
	# 0x805e743:	jne	0x805e758 [IMM <CODEREF>]
	jne	.label_2313
	# 0x805e745:	cmpl	%esi, %ecx [REG, REG]
	cmpl	%esi, %ecx
	# 0x805e747:	jbe	0x805e7a0 [IMM <CODEREF>]
	jbe	.label_2304
	# 0x805e749:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e74b:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e74d:	movl	%edx, %esi [REG, REG]
	movl	%edx, %esi
	# 0x805e74f:	movl	%esi, %eax [REG, REG]
.label_2314:
	movl	%esi, %eax
	# 0x805e751:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e753:	jmp	0x805e762 [IMM <CODEREF>]
	jmp	.label_2305
	# 0x805e758:	cmpl	%esi, %edi [REG, REG]
.label_2313:
	cmpl	%esi, %edi
	# 0x805e75a:	jbe	0x805e778 [IMM <CODEREF>]
	jbe	.label_2307
	# 0x805e75c:	movl	8(%esp), %eax [MEM, REG]
	movl	8(%esp), %eax
	# 0x805e760:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805e762:	testl	%ebp, %ebp [REG, REG]
.label_2305:
	testl	%ebp, %ebp
	# 0x805e764:	je	0x805e76d [IMM <CODEREF>]
	je	.label_2312
	# 0x805e766:	negl	%eax [REG]
	negl	%eax
	# 0x805e768:	adcl	$0, %edx [IMM, REG]
	adcl	$0, %edx
	# 0x805e76b:	negl	%edx [REG]
	negl	%edx
	# 0x805e76d:	addl	$0x2c, %esp [IMM, REG]
.label_2312:
	addl	$0x2c, %esp
	# 0x805e770:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e771:	popl	%esi [REG]
	popl	%esi
	# 0x805e772:	popl	%edi [REG]
	popl	%edi
	# 0x805e773:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e774:	retl	 []
	retl	
	# 0x805e778:	bsrl	%edi, %edx [REG, REG]
.label_2307:
	bsrl	%edi, %edx
	# 0x805e77b:	xorl	$0x1f, %edx [IMM, REG]
	xorl	$0x1f, %edx
	# 0x805e77e:	movl	%edx, 8(%esp) [REG, MEM]
	movl	%edx, 8(%esp)
	# 0x805e782:	jne	0x805e7f0 [IMM <CODEREF>]
	jne	.label_2316
	# 0x805e784:	cmpl	%esi, %edi [REG, REG]
	cmpl	%esi, %edi
	# 0x805e786:	jb	0x805e8a0 [IMM <CODEREF>]
	jb	.label_2303
	# 0x805e78c:	cmpl	%ebx, %ecx [REG, REG]
	cmpl	%ebx, %ecx
	# 0x805e78e:	jbe	0x805e8a0 [IMM <CODEREF>]
	jbe	.label_2303
	# 0x805e794:	movl	%ebx, %eax [REG, REG]
.label_2302:
	movl	%ebx, %eax
	# 0x805e796:	movl	0x14(%esp), %edx [MEM, REG]
	movl	0x14(%esp), %edx
	# 0x805e79a:	jmp	0x805e762 [IMM <CODEREF>]
	jmp	.label_2305
	# 0x805e7a0:	testl	%ecx, %ecx [REG, REG]
.label_2304:
	testl	%ecx, %ecx
	# 0x805e7a2:	jne	0x805e7af [IMM <CODEREF>]
	jne	.label_2310
	# 0x805e7a4:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805e7a9:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e7ab:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e7ad:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e7af:	movl	%esi, %eax [REG, REG]
.label_2310:
	movl	%esi, %eax
	# 0x805e7b1:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e7b3:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e7b5:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e7b7:	divl	%ecx [REG]
	divl	%ecx
	# 0x805e7b9:	movl	%edx, %esi [REG, REG]
	movl	%edx, %esi
	# 0x805e7bb:	jmp	0x805e74f [IMM <CODEREF>]
	jmp	.label_2314
	# 0x805e7c0:	negl	%ecx [REG]
.label_2308:
	negl	%ecx
	# 0x805e7c2:	adcl	$0, %ebx [IMM, REG]
	adcl	$0, %ebx
	# 0x805e7c5:	negl	%ebx [REG]
	negl	%ebx
	# 0x805e7c7:	jmp	0x805e727 [IMM <CODEREF>]
	jmp	.label_2301
	# 0x805e7d0:	negl	8(%esp) [MEM]
.label_2315:
	negl	8(%esp)
	# 0x805e7d4:	movl	$0xffffffff, %ebp [IMM, REG]
	movl	$0xffffffff, %ebp
	# 0x805e7d9:	adcl	$0, 0xc(%esp) [IMM, MEM]
	adcl	$0, 0xc(%esp)
	# 0x805e7de:	negl	0xc(%esp) [MEM]
	negl	0xc(%esp)
	# 0x805e7e2:	jmp	0x805e71b [IMM <CODEREF>]
	jmp	.label_2306
	# 0x805e7f0:	movl	8(%esp), %ecx [MEM, REG]
.label_2316:
	movl	8(%esp), %ecx
	# 0x805e7f4:	movl	$0x20, %edx [IMM, REG]
	movl	$0x20, %edx
	# 0x805e7f9:	subl	%ecx, %edx [REG, REG]
	subl	%ecx, %edx
	# 0x805e7fb:	shll	%cl, %edi [REG, REG]
	shll	%cl, %edi
	# 0x805e7fd:	movl	%edx, %ebx [REG, REG]
	movl	%edx, %ebx
	# 0x805e7ff:	movl	%edx, 0x18(%esp) [REG, MEM]
	movl	%edx, 0x18(%esp)
	# 0x805e803:	movl	0x10(%esp), %edx [MEM, REG]
	movl	0x10(%esp), %edx
	# 0x805e807:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e809:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805e80b:	movzbl	8(%esp), %ecx [MEM, REG]
	movzbl	8(%esp), %ecx
	# 0x805e810:	orl	%edx, %edi [REG, REG]
	orl	%edx, %edi
	# 0x805e812:	movl	0x10(%esp), %edx [MEM, REG]
	movl	0x10(%esp), %edx
	# 0x805e816:	movl	%edi, 0x14(%esp) [REG, MEM]
	movl	%edi, 0x14(%esp)
	# 0x805e81a:	movl	%esi, %edi [REG, REG]
	movl	%esi, %edi
	# 0x805e81c:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e81e:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e820:	shrl	%cl, %edi [REG, REG]
	shrl	%cl, %edi
	# 0x805e822:	movzbl	8(%esp), %ecx [MEM, REG]
	movzbl	8(%esp), %ecx
	# 0x805e827:	movl	%edx, 0x10(%esp) [REG, MEM]
	movl	%edx, 0x10(%esp)
	# 0x805e82b:	movl	%ebx, %edx [REG, REG]
	movl	%ebx, %edx
	# 0x805e82d:	movl	%edi, %ebx [REG, REG]
	movl	%edi, %ebx
	# 0x805e82f:	movl	%eax, %edi [REG, REG]
	movl	%eax, %edi
	# 0x805e831:	shll	%cl, %esi [REG, REG]
	shll	%cl, %esi
	# 0x805e833:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805e835:	movl	%ebx, %edx [REG, REG]
	movl	%ebx, %edx
	# 0x805e837:	shrl	%cl, %edi [REG, REG]
	shrl	%cl, %edi
	# 0x805e839:	movzbl	8(%esp), %ecx [MEM, REG]
	movzbl	8(%esp), %ecx
	# 0x805e83e:	orl	%edi, %esi [REG, REG]
	orl	%edi, %esi
	# 0x805e840:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805e842:	movl	%eax, %edi [REG, REG]
	movl	%eax, %edi
	# 0x805e844:	movl	%eax, 0x1c(%esp) [REG, MEM]
	movl	%eax, 0x1c(%esp)
	# 0x805e848:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805e84a:	divl	0x14(%esp) [MEM]
	divl	0x14(%esp)
	# 0x805e84e:	movl	%edx, %ebx [REG, REG]
	movl	%edx, %ebx
	# 0x805e850:	mull	0x10(%esp) [MEM]
	mull	0x10(%esp)
	# 0x805e854:	cmpl	%edx, %ebx [REG, REG]
	cmpl	%edx, %ebx
	# 0x805e856:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x805e858:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805e85a:	jb	0x805e862 [IMM <CODEREF>]
	jb	.label_2311
	# 0x805e85c:	jne	0x805e86e [IMM <CODEREF>]
	jne	.label_2309
	# 0x805e85e:	cmpl	%eax, %edi [REG, REG]
	cmpl	%eax, %edi
	# 0x805e860:	jae	0x805e86e [IMM <CODEREF>]
	jae	.label_2309
	# 0x805e862:	subl	0x10(%esp), %eax [MEM, REG]
.label_2311:
	subl	0x10(%esp), %eax
	# 0x805e866:	sbbl	0x14(%esp), %edx [MEM, REG]
	sbbl	0x14(%esp), %edx
	# 0x805e86a:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805e86c:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x805e86e:	movl	0x1c(%esp), %eax [MEM, REG]
.label_2309:
	movl	0x1c(%esp), %eax
	# 0x805e872:	movl	8(%esp), %edi [MEM, REG]
	movl	8(%esp), %edi
	# 0x805e876:	subl	%esi, %eax [REG, REG]
	subl	%esi, %eax
	# 0x805e878:	sbbl	%ecx, %ebx [REG, REG]
	sbbl	%ecx, %ebx
	# 0x805e87a:	movzbl	0x18(%esp), %ecx [MEM, REG]
	movzbl	0x18(%esp), %ecx
	# 0x805e87f:	movl	%ebx, %esi [REG, REG]
	movl	%ebx, %esi
	# 0x805e881:	shll	%cl, %esi [REG, REG]
	shll	%cl, %esi
	# 0x805e883:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e885:	shrl	%cl, %eax [REG, REG]
	shrl	%cl, %eax
	# 0x805e887:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e889:	orl	%eax, %esi [REG, REG]
	orl	%eax, %esi
	# 0x805e88b:	shrl	%cl, %ebx [REG, REG]
	shrl	%cl, %ebx
	# 0x805e88d:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805e88f:	movl	%ebx, %edx [REG, REG]
	movl	%ebx, %edx
	# 0x805e891:	jmp	0x805e762 [IMM <CODEREF>]
	jmp	.label_2305
	# 0x805e8a0:	subl	%ecx, %ebx [REG, REG]
.label_2303:
	subl	%ecx, %ebx
	# 0x805e8a2:	sbbl	%edi, %esi [REG, REG]
	sbbl	%edi, %esi
	# 0x805e8a4:	movl	%esi, 0x14(%esp) [REG, MEM]
	movl	%esi, 0x14(%esp)
	# 0x805e8a8:	jmp	0x805e794 [IMM <CODEREF>]
	jmp	.label_2302
	.section	.text
	.align	32
	#Procedure 0x805e8b0

	# 0x805e8b0:	pushl	%ebp [REG]
	.globl __udivdi3
	.type __udivdi3, @function
__udivdi3:
	pushl	%ebp
	# 0x805e8b1:	pushl	%edi [REG]
	pushl	%edi
	# 0x805e8b2:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e8b3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e8b4:	subl	$0x1c, %esp [IMM, REG]
	subl	$0x1c, %esp
	# 0x805e8b7:	movl	0x3c(%esp), %esi [MEM, REG]
	movl	0x3c(%esp), %esi
	# 0x805e8bb:	movl	0x30(%esp), %ebx [MEM, REG]
	movl	0x30(%esp), %ebx
	# 0x805e8bf:	movl	0x34(%esp), %ecx [MEM, REG]
	movl	0x34(%esp), %ecx
	# 0x805e8c3:	movl	0x38(%esp), %edi [MEM, REG]
	movl	0x38(%esp), %edi
	# 0x805e8c7:	testl	%esi, %esi [REG, REG]
	testl	%esi, %esi
	# 0x805e8c9:	movl	%ebx, 8(%esp) [REG, MEM]
	movl	%ebx, 8(%esp)
	# 0x805e8cd:	movl	%ecx, %edx [REG, REG]
	movl	%ecx, %edx
	# 0x805e8cf:	movl	%edi, %eax [REG, REG]
	movl	%edi, %eax
	# 0x805e8d1:	jne	0x805e910 [IMM <CODEREF>]
	jne	.label_2320
	# 0x805e8d3:	cmpl	%ecx, %edi [REG, REG]
	cmpl	%ecx, %edi
	# 0x805e8d5:	ja	0x805e9a0 [IMM <CODEREF>]
	ja	.label_2322
	# 0x805e8db:	testl	%edi, %edi [REG, REG]
	testl	%edi, %edi
	# 0x805e8dd:	movl	%edi, %ebp [REG, REG]
	movl	%edi, %ebp
	# 0x805e8df:	jne	0x805e8ec [IMM <CODEREF>]
	jne	.label_2325
	# 0x805e8e1:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805e8e6:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e8e8:	divl	%edi [REG]
	divl	%edi
	# 0x805e8ea:	movl	%eax, %ebp [REG, REG]
	movl	%eax, %ebp
	# 0x805e8ec:	movl	%ecx, %eax [REG, REG]
.label_2325:
	movl	%ecx, %eax
	# 0x805e8ee:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805e8f0:	divl	%ebp [REG]
	divl	%ebp
	# 0x805e8f2:	movl	%eax, %ecx [REG, REG]
	movl	%eax, %ecx
	# 0x805e8f4:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e8f6:	movl	%ecx, %edi [REG, REG]
	movl	%ecx, %edi
	# 0x805e8f8:	divl	%ebp [REG]
	divl	%ebp
	# 0x805e8fa:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e8fc:	movl	%ebx, %eax [REG, REG]
.label_2321:
	movl	%ebx, %eax
	# 0x805e8fe:	movl	%edi, %edx [REG, REG]
	movl	%edi, %edx
	# 0x805e900:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805e903:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e904:	popl	%esi [REG]
	popl	%esi
	# 0x805e905:	popl	%edi [REG]
	popl	%edi
	# 0x805e906:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e907:	retl	 []
	retl	
	# 0x805e910:	cmpl	%ecx, %esi [REG, REG]
.label_2320:
	cmpl	%ecx, %esi
	# 0x805e912:	ja	0x805e988 [IMM <CODEREF>]
	ja	.label_2317
	# 0x805e914:	bsrl	%esi, %edi [REG, REG]
	bsrl	%esi, %edi
	# 0x805e917:	xorl	$0x1f, %edi [IMM, REG]
	xorl	$0x1f, %edi
	# 0x805e91a:	je	0x805e9b8 [IMM <CODEREF>]
	je	.label_2323
	# 0x805e920:	movl	$0x20, %ebx [IMM, REG]
	movl	$0x20, %ebx
	# 0x805e925:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e927:	movl	%eax, %ebp [REG, REG]
	movl	%eax, %ebp
	# 0x805e929:	subl	%edi, %ebx [REG, REG]
	subl	%edi, %ebx
	# 0x805e92b:	shll	%cl, %esi [REG, REG]
	shll	%cl, %esi
	# 0x805e92d:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e92f:	shrl	%cl, %ebp [REG, REG]
	shrl	%cl, %ebp
	# 0x805e931:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e933:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805e935:	orl	%ebp, %esi [REG, REG]
	orl	%ebp, %esi
	# 0x805e937:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e939:	movl	%eax, 0xc(%esp) [REG, MEM]
	movl	%eax, 0xc(%esp)
	# 0x805e93d:	movl	%edx, %ebp [REG, REG]
	movl	%edx, %ebp
	# 0x805e93f:	movl	8(%esp), %eax [MEM, REG]
	movl	8(%esp), %eax
	# 0x805e943:	shrl	%cl, %ebp [REG, REG]
	shrl	%cl, %ebp
	# 0x805e945:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e947:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805e949:	movl	%ebx, %ecx [REG, REG]
	movl	%ebx, %ecx
	# 0x805e94b:	shrl	%cl, %eax [REG, REG]
	shrl	%cl, %eax
	# 0x805e94d:	orl	%eax, %edx [REG, REG]
	orl	%eax, %edx
	# 0x805e94f:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805e951:	movl	%ebp, %edx [REG, REG]
	movl	%ebp, %edx
	# 0x805e953:	divl	%esi [REG]
	divl	%esi
	# 0x805e955:	movl	%edx, %ebp [REG, REG]
	movl	%edx, %ebp
	# 0x805e957:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e959:	mull	0xc(%esp) [MEM]
	mull	0xc(%esp)
	# 0x805e95d:	cmpl	%edx, %ebp [REG, REG]
	cmpl	%edx, %ebp
	# 0x805e95f:	jb	0x805e971 [IMM <CODEREF>]
	jb	.label_2319
	# 0x805e961:	movl	8(%esp), %esi [MEM, REG]
	movl	8(%esp), %esi
	# 0x805e965:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805e967:	shll	%cl, %esi [REG, REG]
	shll	%cl, %esi
	# 0x805e969:	cmpl	%eax, %esi [REG, REG]
	cmpl	%eax, %esi
	# 0x805e96b:	jae	0x805e974 [IMM <CODEREF>]
	jae	.label_2318
	# 0x805e96d:	cmpl	%edx, %ebp [REG, REG]
	cmpl	%edx, %ebp
	# 0x805e96f:	jne	0x805e974 [IMM <CODEREF>]
	jne	.label_2318
	# 0x805e971:	subl	$1, %ebx [IMM, REG]
.label_2319:
	subl	$1, %ebx
	# 0x805e974:	xorl	%edi, %edi [REG, REG]
.label_2318:
	xorl	%edi, %edi
	# 0x805e976:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e978:	movl	%edi, %edx [REG, REG]
	movl	%edi, %edx
	# 0x805e97a:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805e97d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e97e:	popl	%esi [REG]
	popl	%esi
	# 0x805e97f:	popl	%edi [REG]
	popl	%edi
	# 0x805e980:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e981:	retl	 []
	retl	
	# 0x805e988:	xorl	%edi, %edi [REG, REG]
.label_2317:
	xorl	%edi, %edi
	# 0x805e98a:	xorl	%ebx, %ebx [REG, REG]
	xorl	%ebx, %ebx
	# 0x805e98c:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e98e:	movl	%edi, %edx [REG, REG]
	movl	%edi, %edx
	# 0x805e990:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805e993:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e994:	popl	%esi [REG]
	popl	%esi
	# 0x805e995:	popl	%edi [REG]
	popl	%edi
	# 0x805e996:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e997:	retl	 []
	retl	
	# 0x805e9a0:	movl	%ebx, %eax [REG, REG]
.label_2322:
	movl	%ebx, %eax
	# 0x805e9a2:	divl	%edi [REG]
	divl	%edi
	# 0x805e9a4:	xorl	%edi, %edi [REG, REG]
	xorl	%edi, %edi
	# 0x805e9a6:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805e9a8:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805e9aa:	movl	%edi, %edx [REG, REG]
	movl	%edi, %edx
	# 0x805e9ac:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805e9af:	popl	%ebx [REG]
	popl	%ebx
	# 0x805e9b0:	popl	%esi [REG]
	popl	%esi
	# 0x805e9b1:	popl	%edi [REG]
	popl	%edi
	# 0x805e9b2:	popl	%ebp [REG]
	popl	%ebp
	# 0x805e9b3:	retl	 []
	retl	
	# 0x805e9b8:	cmpl	%ecx, %esi [REG, REG]
.label_2323:
	cmpl	%ecx, %esi
	# 0x805e9ba:	jb	0x805e9c8 [IMM <CODEREF>]
	jb	.label_2324
	# 0x805e9bc:	xorl	%ebx, %ebx [REG, REG]
	xorl	%ebx, %ebx
	# 0x805e9be:	cmpl	8(%esp), %eax [MEM, REG]
	cmpl	8(%esp), %eax
	# 0x805e9c2:	ja	0x805e8fc [IMM <CODEREF>]
	ja	.label_2321
	# 0x805e9c8:	movl	$1, %ebx [IMM, REG]
.label_2324:
	movl	$1, %ebx
	# 0x805e9cd:	jmp	0x805e8fc [IMM <CODEREF>]
	jmp	.label_2321
	.section	.text
	.align	32
	#Procedure 0x805e9e0

	# 0x805e9e0:	pushl	%ebp [REG]
	.globl __umoddi3
	.type __umoddi3, @function
__umoddi3:
	pushl	%ebp
	# 0x805e9e1:	pushl	%edi [REG]
	pushl	%edi
	# 0x805e9e2:	pushl	%esi [REG]
	pushl	%esi
	# 0x805e9e3:	pushl	%ebx [REG]
	pushl	%ebx
	# 0x805e9e4:	subl	$0x1c, %esp [IMM, REG]
	subl	$0x1c, %esp
	# 0x805e9e7:	movl	0x3c(%esp), %edx [MEM, REG]
	movl	0x3c(%esp), %edx
	# 0x805e9eb:	movl	0x30(%esp), %ecx [MEM, REG]
	movl	0x30(%esp), %ecx
	# 0x805e9ef:	movl	0x34(%esp), %esi [MEM, REG]
	movl	0x34(%esp), %esi
	# 0x805e9f3:	movl	0x38(%esp), %edi [MEM, REG]
	movl	0x38(%esp), %edi
	# 0x805e9f7:	testl	%edx, %edx [REG, REG]
	testl	%edx, %edx
	# 0x805e9f9:	movl	%ecx, 0xc(%esp) [REG, MEM]
	movl	%ecx, 0xc(%esp)
	# 0x805e9fd:	movl	%ecx, 8(%esp) [REG, MEM]
	movl	%ecx, 8(%esp)
	# 0x805ea01:	movl	%esi, %ebx [REG, REG]
	movl	%esi, %ebx
	# 0x805ea03:	movl	%edi, 0(%esp) [REG, MEM]
	movl	%edi, 0(%esp)
	# 0x805ea06:	movl	%esi, 4(%esp) [REG, MEM]
	movl	%esi, 4(%esp)
	# 0x805ea0a:	jne	0x805ea28 [IMM <CODEREF>]
	jne	.label_2326
	# 0x805ea0c:	cmpl	%esi, %edi [REG, REG]
	cmpl	%esi, %edi
	# 0x805ea0e:	jbe	0x805ea60 [IMM <CODEREF>]
	jbe	.label_2329
	# 0x805ea10:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805ea12:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805ea14:	divl	%edi [REG]
	divl	%edi
	# 0x805ea16:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805ea18:	xorl	%edx, %edx [REG, REG]
.label_2331:
	xorl	%edx, %edx
	# 0x805ea1a:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805ea1d:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ea1e:	popl	%esi [REG]
	popl	%esi
	# 0x805ea1f:	popl	%edi [REG]
	popl	%edi
	# 0x805ea20:	popl	%ebp [REG]
	popl	%ebp
	# 0x805ea21:	retl	 []
	retl	
	# 0x805ea28:	cmpl	%esi, %edx [REG, REG]
.label_2326:
	cmpl	%esi, %edx
	# 0x805ea2a:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805ea2c:	ja	0x805ea80 [IMM <CODEREF>]
	ja	.label_2327
	# 0x805ea2e:	bsrl	%edx, %ebp [REG, REG]
	bsrl	%edx, %ebp
	# 0x805ea31:	xorl	$0x1f, %ebp [IMM, REG]
	xorl	$0x1f, %ebp
	# 0x805ea34:	jne	0x805ea90 [IMM <CODEREF>]
	jne	.label_2330
	# 0x805ea36:	cmpl	4(%esp), %edx [MEM, REG]
	cmpl	4(%esp), %edx
	# 0x805ea3a:	jb	0x805eb20 [IMM <CODEREF>]
	jb	.label_2332
	# 0x805ea40:	cmpl	%ecx, 0(%esp) [REG, MEM]
	cmpl	%ecx, 0(%esp)
	# 0x805ea43:	jbe	0x805eb20 [IMM <CODEREF>]
	jbe	.label_2332
	# 0x805ea49:	movl	8(%esp), %eax [MEM, REG]
.label_2335:
	movl	8(%esp), %eax
	# 0x805ea4d:	movl	4(%esp), %edx [MEM, REG]
	movl	4(%esp), %edx
	# 0x805ea51:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805ea54:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ea55:	popl	%esi [REG]
	popl	%esi
	# 0x805ea56:	popl	%edi [REG]
	popl	%edi
	# 0x805ea57:	popl	%ebp [REG]
	popl	%ebp
	# 0x805ea58:	retl	 []
	retl	
	# 0x805ea60:	testl	%edi, %edi [REG, REG]
.label_2329:
	testl	%edi, %edi
	# 0x805ea62:	movl	%edi, %ebp [REG, REG]
	movl	%edi, %ebp
	# 0x805ea64:	jne	0x805ea71 [IMM <CODEREF>]
	jne	.label_2333
	# 0x805ea66:	movl	$1, %eax [IMM, REG]
	movl	$1, %eax
	# 0x805ea6b:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805ea6d:	divl	%edi [REG]
	divl	%edi
	# 0x805ea6f:	movl	%eax, %ebp [REG, REG]
	movl	%eax, %ebp
	# 0x805ea71:	movl	%esi, %eax [REG, REG]
.label_2333:
	movl	%esi, %eax
	# 0x805ea73:	xorl	%edx, %edx [REG, REG]
	xorl	%edx, %edx
	# 0x805ea75:	divl	%ebp [REG]
	divl	%ebp
	# 0x805ea77:	movl	%ecx, %eax [REG, REG]
	movl	%ecx, %eax
	# 0x805ea79:	divl	%ebp [REG]
	divl	%ebp
	# 0x805ea7b:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805ea7d:	jmp	0x805ea18 [IMM <CODEREF>]
	jmp	.label_2331
	# 0x805ea80:	movl	%ecx, %eax [REG, REG]
.label_2327:
	movl	%ecx, %eax
	# 0x805ea82:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805ea84:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805ea87:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ea88:	popl	%esi [REG]
	popl	%esi
	# 0x805ea89:	popl	%edi [REG]
	popl	%edi
	# 0x805ea8a:	popl	%ebp [REG]
	popl	%ebp
	# 0x805ea8b:	retl	 []
	retl	
	# 0x805ea90:	movl	0(%esp), %esi [MEM, REG]
.label_2330:
	movl	0(%esp), %esi
	# 0x805ea93:	movl	$0x20, %edi [IMM, REG]
	movl	$0x20, %edi
	# 0x805ea98:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805ea9a:	subl	%ebp, %edi [REG, REG]
	subl	%ebp, %edi
	# 0x805ea9c:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805ea9e:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805eaa0:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805eaa2:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805eaa4:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805eaa6:	orl	%eax, %edx [REG, REG]
	orl	%eax, %edx
	# 0x805eaa8:	movl	%ebx, %eax [REG, REG]
	movl	%ebx, %eax
	# 0x805eaaa:	movl	%edx, 0(%esp) [REG, MEM]
	movl	%edx, 0(%esp)
	# 0x805eaad:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805eaaf:	shll	%cl, %edx [REG, REG]
	shll	%cl, %edx
	# 0x805eab1:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805eab3:	movl	%edx, 4(%esp) [REG, MEM]
	movl	%edx, 4(%esp)
	# 0x805eab7:	movl	0xc(%esp), %edx [MEM, REG]
	movl	0xc(%esp), %edx
	# 0x805eabb:	shrl	%cl, %eax [REG, REG]
	shrl	%cl, %eax
	# 0x805eabd:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805eabf:	movl	%eax, %esi [REG, REG]
	movl	%eax, %esi
	# 0x805eac1:	shll	%cl, %ebx [REG, REG]
	shll	%cl, %ebx
	# 0x805eac3:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805eac5:	movl	%edx, %eax [REG, REG]
	movl	%edx, %eax
	# 0x805eac7:	shrl	%cl, %eax [REG, REG]
	shrl	%cl, %eax
	# 0x805eac9:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805eacb:	orl	%ebx, %eax [REG, REG]
	orl	%ebx, %eax
	# 0x805eacd:	movl	%edx, %ebx [REG, REG]
	movl	%edx, %ebx
	# 0x805eacf:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805ead1:	divl	0(%esp) [MEM]
	divl	0(%esp)
	# 0x805ead4:	movl	%edx, %esi [REG, REG]
	movl	%edx, %esi
	# 0x805ead6:	shll	%cl, %ebx [REG, REG]
	shll	%cl, %ebx
	# 0x805ead8:	mull	4(%esp) [MEM]
	mull	4(%esp)
	# 0x805eadc:	cmpl	%edx, %esi [REG, REG]
	cmpl	%edx, %esi
	# 0x805eade:	movl	%ebx, 8(%esp) [REG, MEM]
	movl	%ebx, 8(%esp)
	# 0x805eae2:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805eae4:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805eae6:	jb	0x805eaf0 [IMM <CODEREF>]
	jb	.label_2334
	# 0x805eae8:	jne	0x805eafb [IMM <CODEREF>]
	jne	.label_2328
	# 0x805eaea:	cmpl	%eax, 8(%esp) [REG, MEM]
	cmpl	%eax, 8(%esp)
	# 0x805eaee:	jae	0x805eafb [IMM <CODEREF>]
	jae	.label_2328
	# 0x805eaf0:	subl	4(%esp), %eax [MEM, REG]
.label_2334:
	subl	4(%esp), %eax
	# 0x805eaf4:	sbbl	0(%esp), %edx [MEM, REG]
	sbbl	0(%esp), %edx
	# 0x805eaf7:	movl	%edx, %ecx [REG, REG]
	movl	%edx, %ecx
	# 0x805eaf9:	movl	%eax, %ebx [REG, REG]
	movl	%eax, %ebx
	# 0x805eafb:	movl	8(%esp), %edx [MEM, REG]
.label_2328:
	movl	8(%esp), %edx
	# 0x805eaff:	subl	%ebx, %edx [REG, REG]
	subl	%ebx, %edx
	# 0x805eb01:	sbbl	%ecx, %esi [REG, REG]
	sbbl	%ecx, %esi
	# 0x805eb03:	movl	%edi, %ecx [REG, REG]
	movl	%edi, %ecx
	# 0x805eb05:	movl	%esi, %eax [REG, REG]
	movl	%esi, %eax
	# 0x805eb07:	shll	%cl, %eax [REG, REG]
	shll	%cl, %eax
	# 0x805eb09:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805eb0b:	shrl	%cl, %edx [REG, REG]
	shrl	%cl, %edx
	# 0x805eb0d:	movl	%ebp, %ecx [REG, REG]
	movl	%ebp, %ecx
	# 0x805eb0f:	shrl	%cl, %esi [REG, REG]
	shrl	%cl, %esi
	# 0x805eb11:	orl	%edx, %eax [REG, REG]
	orl	%edx, %eax
	# 0x805eb13:	movl	%esi, %edx [REG, REG]
	movl	%esi, %edx
	# 0x805eb15:	addl	$0x1c, %esp [IMM, REG]
	addl	$0x1c, %esp
	# 0x805eb18:	popl	%ebx [REG]
	popl	%ebx
	# 0x805eb19:	popl	%esi [REG]
	popl	%esi
	# 0x805eb1a:	popl	%edi [REG]
	popl	%edi
	# 0x805eb1b:	popl	%ebp [REG]
	popl	%ebp
	# 0x805eb1c:	retl	 []
	retl	
	# 0x805eb20:	subl	%edi, %ecx [REG, REG]
.label_2332:
	subl	%edi, %ecx
	# 0x805eb22:	sbbl	%edx, %esi [REG, REG]
	sbbl	%edx, %esi
	# 0x805eb24:	movl	%esi, 4(%esp) [REG, MEM]
	movl	%esi, 4(%esp)
	# 0x805eb28:	movl	%ecx, 8(%esp) [REG, MEM]
	movl	%ecx, 8(%esp)
	# 0x805eb2c:	jmp	0x805ea49 [IMM <CODEREF>]
	jmp	.label_2335
	.section	.text
	.align	32
	#Procedure 0x805ebf0

	# 0x805ebf0:	pushl	%ebx [REG]
	.globl stat64
	.type stat64, @function
stat64:
	pushl	%ebx
	# 0x805ebf1:	calll	0x8049c10 [IMM <CODEREF>]
	calll	__x86.get_pc_thunk.bx
	# 0x805ebf6:	addl	$0xb40a, %ebx [IMM, REG]
	addl	$0xb40a, %ebx
	# 0x805ebfc:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ebff:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec03:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec07:	pushl	$3 [IMM]
	pushl	$3
	# 0x805ec09:	calll	0x8049b20 [IMM <CODEREF>]
	calll	__xstat64
	# 0x805ec0e:	addl	$0x18, %esp [IMM, REG]
	addl	$0x18, %esp
	# 0x805ec11:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ec12:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ec20

	# 0x805ec20:	pushl	%ebx [REG]
	.globl fstat64
	.type fstat64, @function
fstat64:
	pushl	%ebx
	# 0x805ec21:	calll	0x8049c10 [IMM <CODEREF>]
	calll	__x86.get_pc_thunk.bx
	# 0x805ec26:	addl	$0xb3da, %ebx [IMM, REG]
	addl	$0xb3da, %ebx
	# 0x805ec2c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ec2f:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec33:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec37:	pushl	$3 [IMM]
	pushl	$3
	# 0x805ec39:	calll	0x80497a0 [IMM <CODEREF>]
	calll	__fxstat64
	# 0x805ec3e:	addl	$0x18, %esp [IMM, REG]
	addl	$0x18, %esp
	# 0x805ec41:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ec42:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ec50

	# 0x805ec50:	pushl	%ebx [REG]
	.globl lstat64
	.type lstat64, @function
lstat64:
	pushl	%ebx
	# 0x805ec51:	calll	0x8049c10 [IMM <CODEREF>]
	calll	__x86.get_pc_thunk.bx
	# 0x805ec56:	addl	$0xb3aa, %ebx [IMM, REG]
	addl	$0xb3aa, %ebx
	# 0x805ec5c:	subl	$0xc, %esp [IMM, REG]
	subl	$0xc, %esp
	# 0x805ec5f:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec63:	pushl	0x18(%esp) [MEM]
	pushl	0x18(%esp)
	# 0x805ec67:	pushl	$3 [IMM]
	pushl	$3
	# 0x805ec69:	calll	0x8049b30 [IMM <CODEREF>]
	calll	__lxstat64
	# 0x805ec6e:	addl	$0x18, %esp [IMM, REG]
	addl	$0x18, %esp
	# 0x805ec71:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ec72:	retl	 []
	retl	
	.section	.text
	.align	32
	#Procedure 0x805ec80

	# 0x805ec80:	pushl	%ebx [REG]
	.globl fstatat64
	.type fstatat64, @function
fstatat64:
	pushl	%ebx
	# 0x805ec81:	calll	0x8049c10 [IMM <CODEREF>]
	calll	__x86.get_pc_thunk.bx
	# 0x805ec86:	addl	$0xb37a, %ebx [IMM, REG]
	addl	$0xb37a, %ebx
	# 0x805ec8c:	subl	$0x14, %esp [IMM, REG]
	subl	$0x14, %esp
	# 0x805ec8f:	pushl	0x28(%esp) [MEM]
	pushl	0x28(%esp)
	# 0x805ec93:	pushl	0x28(%esp) [MEM]
	pushl	0x28(%esp)
	# 0x805ec97:	pushl	0x28(%esp) [MEM]
	pushl	0x28(%esp)
	# 0x805ec9b:	pushl	0x28(%esp) [MEM]
	pushl	0x28(%esp)
	# 0x805ec9f:	pushl	$3 [IMM]
	pushl	$3
	# 0x805eca1:	calll	0x8049740 [IMM <CODEREF>]
	calll	__fxstatat64
	# 0x805eca6:	addl	$0x28, %esp [IMM, REG]
	addl	$0x28, %esp
	# 0x805eca9:	popl	%ebx [REG]
	popl	%ebx
	# 0x805ecaa:	retl	 []
	retl	
	.section .rodata
	.align 32
	# data @ 0x805ecc0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ecc7
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ece0
label_13:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
	# data @ 0x805ed2b
	.byte 0
	# data @ 0x805ed2c
label_14:
	.asciz "\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\n"
	# data @ 0x805edc5
label_31:
	.asciz "["
	# data @ 0x805edc7
label_32:
	.asciz "test invocation"
	# data @ 0x805edd7
label_33:
	.asciz "coreutils"
	# data @ 0x805ede1
label_34:
	.asciz "Multi-call invocation"
	# data @ 0x805edf7
label_35:
	.asciz "sha224sum"
	# data @ 0x805ee01
label_36:
	.asciz "sha2 utilities"
	# data @ 0x805ee10
label_37:
	.asciz "sha256sum"
	# data @ 0x805ee1a
label_38:
	.asciz "sha384sum"
	# data @ 0x805ee24
label_39:
	.asciz "sha512sum"
	# data @ 0x805ee2e
label_21:
	.asciz "\n%s online help: <%s>\n"
	# data @ 0x805ee45
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ee48
label_17:
	.asciz "https://www.gnu.org/software/coreutils/"
	# data @ 0x805ee70
label_18:
	.asciz "GNU coreutils"
	# data @ 0x805ee7e
label_30:
	.asciz "en_"
	# data @ 0x805ee82
	.byte 0
	.byte 0
	# data @ 0x805ee84
label_20:
	.asciz "Report %s translation bugs to <https://translationproject.org/team/>\n"
	# data @ 0x805eeca
	.byte 0
	.byte 0
	# data @ 0x805eecc
label_29:
	.asciz "Full documentation at: <%s%s>\n"
	# data @ 0x805eeeb
label_22:
	.asciz " invocation"
	# data @ 0x805eef7
label_26:
	.byte 0
	# data @ 0x805eef8
label_28:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
	# data @ 0x805ef2b
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ef40
	.globl G_line
	.type G_line, @object
G_line:
	.asciz "# Configuration file for dircolors, a utility to help you set the"
	# data @ 0x805ef82
	.asciz "# LS_COLORS environment variable used by GNU ls with the --color option."
	# data @ 0x805efcb
	.asciz "# Copyright (C) 1996-2018 Free Software Foundation, Inc."
	# data @ 0x805f004
	.asciz "# Copying and distribution of this file, with or without modification,"
	# data @ 0x805f04b
	.asciz "# are permitted provided the copyright notice and this notice are preserved."
	# data @ 0x805f098
	.asciz "# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the"
	# data @ 0x805f0d4
	.asciz "# slackware version of dircolors) are recognized but ignored."
	# data @ 0x805f112
	.asciz "# Below are TERM entries, which can be a glob patterns, to match"
	# data @ 0x805f153
	.asciz "# against the TERM environment variable to determine if it is colorizable."
	# data @ 0x805f19e
	.asciz "TERM Eterm"
	# data @ 0x805f1a9
	.asciz "TERM ansi"
	# data @ 0x805f1b3
	.asciz "TERM *color*"
	# data @ 0x805f1c0
	.asciz "TERM con[0-9]*x[0-9]*"
	# data @ 0x805f1d6
	.asciz "TERM cons25"
	# data @ 0x805f1e2
	.asciz "TERM console"
	# data @ 0x805f1ef
	.asciz "TERM cygwin"
	# data @ 0x805f1fb
	.asciz "TERM dtterm"
	# data @ 0x805f207
	.asciz "TERM gnome"
	# data @ 0x805f212
	.asciz "TERM hurd"
	# data @ 0x805f21c
	.asciz "TERM jfbterm"
	# data @ 0x805f229
	.asciz "TERM konsole"
	# data @ 0x805f236
	.asciz "TERM kterm"
	# data @ 0x805f241
	.asciz "TERM linux"
	# data @ 0x805f24c
	.asciz "TERM linux-c"
	# data @ 0x805f259
	.asciz "TERM mlterm"
	# data @ 0x805f265
	.asciz "TERM putty"
	# data @ 0x805f270
	.asciz "TERM rxvt*"
	# data @ 0x805f27b
	.asciz "TERM screen*"
	# data @ 0x805f288
	.asciz "TERM st"
	# data @ 0x805f290
	.asciz "TERM terminator"
	# data @ 0x805f2a0
	.asciz "TERM tmux*"
	# data @ 0x805f2ab
	.asciz "TERM vt100"
	# data @ 0x805f2b6
	.asciz "TERM xterm*"
	# data @ 0x805f2c2
	.asciz "# Below are the color init strings for the basic file types. A color init"
	# data @ 0x805f30c
	.asciz "# string consists of one or more of the following numeric codes:"
	# data @ 0x805f34d
	.asciz "# Attribute codes:"
	# data @ 0x805f360
	.asciz "# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed"
	# data @ 0x805f3a1
	.asciz "# Text color codes:"
	# data @ 0x805f3b5
	.asciz "# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white"
	# data @ 0x805f3fe
	.asciz "# Background color codes:"
	# data @ 0x805f418
	.asciz "# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white"
	# data @ 0x805f461
	.asciz "#NORMAL 00 # no color code at all"
	# data @ 0x805f483
	.asciz "#FILE 00 # regular file: use no color at all"
	# data @ 0x805f4b0
	.asciz "RESET 0 # reset to \"normal\" color"
	# data @ 0x805f4d2
	.asciz "DIR 01;34 # directory"
	# data @ 0x805f4e8
	.asciz "LINK 01;36 # symbolic link. (If you set this to 'target' instead of a"
	# data @ 0x805f52e
	.asciz " # numerical value, the color is as for the file pointed to.)"
	# data @ 0x805f56c
	.asciz "MULTIHARDLINK 00 # regular file with more than one link"
	# data @ 0x805f5a4
	.asciz "FIFO 40;33 # pipe"
	# data @ 0x805f5b6
	.asciz "SOCK 01;35 # socket"
	# data @ 0x805f5ca
	.asciz "DOOR 01;35 # door"
	# data @ 0x805f5dc
	.asciz "BLK 40;33;01 # block device driver"
	# data @ 0x805f5ff
	.asciz "CHR 40;33;01 # character device driver"
	# data @ 0x805f626
	.asciz "ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat'able file ..."
	# data @ 0x805f66f
	.asciz "MISSING 00 # ... and the files they point to"
	# data @ 0x805f69c
	.asciz "SETUID 37;41 # file that is setuid (u+s)"
	# data @ 0x805f6c5
	.asciz "SETGID 30;43 # file that is setgid (g+s)"
	# data @ 0x805f6ee
	.asciz "CAPABILITY 30;41 # file with capability"
	# data @ 0x805f716
	.asciz "STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writable (+t,o+w)"
	# data @ 0x805f763
	.asciz "OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not sticky"
	# data @ 0x805f7aa
	.asciz "STICKY 37;44 # dir with the sticky bit set (+t) and not other-writable"
	# data @ 0x805f7f1
	.asciz "# This is for files with execute permission:"
	# data @ 0x805f81e
	.asciz "EXEC 01;32"
	# data @ 0x805f829
	.asciz "# List any file extensions like '.gz' or '.tar' that you would like ls"
	# data @ 0x805f870
	.asciz "# to colorize below. Put the extension, a space, and the color init string."
	# data @ 0x805f8bc
	.asciz "# (and any comments you want to add after a '#')"
	# data @ 0x805f8ed
	.asciz "# If you use DOS-style suffixes, you may want to uncomment the following:"
	# data @ 0x805f937
	.asciz "#.cmd 01;32 # executables (bright green)"
	# data @ 0x805f960
	.asciz "#.exe 01;32"
	# data @ 0x805f96c
	.asciz "#.com 01;32"
	# data @ 0x805f978
	.asciz "#.btm 01;32"
	# data @ 0x805f984
	.asciz "#.bat 01;32"
	# data @ 0x805f990
	.asciz "# Or if you want to colorize scripts even if they do not have the"
	# data @ 0x805f9d2
	.asciz "# executable bit actually set."
	# data @ 0x805f9f1
	.asciz "#.sh 01;32"
	# data @ 0x805f9fc
	.asciz "#.csh 01;32"
	# data @ 0x805fa08
	.asciz " # archives or compressed (bright red)"
	# data @ 0x805fa2f
	.asciz ".tar 01;31"
	# data @ 0x805fa3a
	.asciz ".tgz 01;31"
	# data @ 0x805fa45
	.asciz ".arc 01;31"
	# data @ 0x805fa50
	.asciz ".arj 01;31"
	# data @ 0x805fa5b
	.asciz ".taz 01;31"
	# data @ 0x805fa66
	.asciz ".lha 01;31"
	# data @ 0x805fa71
	.asciz ".lz4 01;31"
	# data @ 0x805fa7c
	.asciz ".lzh 01;31"
	# data @ 0x805fa87
	.asciz ".lzma 01;31"
	# data @ 0x805fa93
	.asciz ".tlz 01;31"
	# data @ 0x805fa9e
	.asciz ".txz 01;31"
	# data @ 0x805faa9
	.asciz ".tzo 01;31"
	# data @ 0x805fab4
	.asciz ".t7z 01;31"
	# data @ 0x805fabf
	.asciz ".zip 01;31"
	# data @ 0x805faca
	.asciz ".z 01;31"
	# data @ 0x805fad3
	.asciz ".dz 01;31"
	# data @ 0x805fadd
	.asciz ".gz 01;31"
	# data @ 0x805fae7
	.asciz ".lrz 01;31"
	# data @ 0x805faf2
	.asciz ".lz 01;31"
	# data @ 0x805fafc
	.asciz ".lzo 01;31"
	# data @ 0x805fb07
	.asciz ".xz 01;31"
	# data @ 0x805fb11
	.asciz ".zst 01;31"
	# data @ 0x805fb1c
	.asciz ".tzst 01;31"
	# data @ 0x805fb28
	.asciz ".bz2 01;31"
	# data @ 0x805fb33
	.asciz ".bz 01;31"
	# data @ 0x805fb3d
	.asciz ".tbz 01;31"
	# data @ 0x805fb48
	.asciz ".tbz2 01;31"
	# data @ 0x805fb54
	.asciz ".tz 01;31"
	# data @ 0x805fb5e
	.asciz ".deb 01;31"
	# data @ 0x805fb69
	.asciz ".rpm 01;31"
	# data @ 0x805fb74
	.asciz ".jar 01;31"
	# data @ 0x805fb7f
	.asciz ".war 01;31"
	# data @ 0x805fb8a
	.asciz ".ear 01;31"
	# data @ 0x805fb95
	.asciz ".sar 01;31"
	# data @ 0x805fba0
	.asciz ".rar 01;31"
	# data @ 0x805fbab
	.asciz ".alz 01;31"
	# data @ 0x805fbb6
	.asciz ".ace 01;31"
	# data @ 0x805fbc1
	.asciz ".zoo 01;31"
	# data @ 0x805fbcc
	.asciz ".cpio 01;31"
	# data @ 0x805fbd8
	.asciz ".7z 01;31"
	# data @ 0x805fbe2
	.asciz ".rz 01;31"
	# data @ 0x805fbec
	.asciz ".cab 01;31"
	# data @ 0x805fbf7
	.asciz ".wim 01;31"
	# data @ 0x805fc02
	.asciz ".swm 01;31"
	# data @ 0x805fc0d
	.asciz ".dwm 01;31"
	# data @ 0x805fc18
	.asciz ".esd 01;31"
	# data @ 0x805fc23
	.asciz "# image formats"
	# data @ 0x805fc33
	.asciz ".jpg 01;35"
	# data @ 0x805fc3e
	.asciz ".jpeg 01;35"
	# data @ 0x805fc4a
	.asciz ".mjpg 01;35"
	# data @ 0x805fc56
	.asciz ".mjpeg 01;35"
	# data @ 0x805fc63
	.asciz ".gif 01;35"
	# data @ 0x805fc6e
	.asciz ".bmp 01;35"
	# data @ 0x805fc79
	.asciz ".pbm 01;35"
	# data @ 0x805fc84
	.asciz ".pgm 01;35"
	# data @ 0x805fc8f
	.asciz ".ppm 01;35"
	# data @ 0x805fc9a
	.asciz ".tga 01;35"
	# data @ 0x805fca5
	.asciz ".xbm 01;35"
	# data @ 0x805fcb0
	.asciz ".xpm 01;35"
	# data @ 0x805fcbb
	.asciz ".tif 01;35"
	# data @ 0x805fcc6
	.asciz ".tiff 01;35"
	# data @ 0x805fcd2
	.asciz ".png 01;35"
	# data @ 0x805fcdd
	.asciz ".svg 01;35"
	# data @ 0x805fce8
	.asciz ".svgz 01;35"
	# data @ 0x805fcf4
	.asciz ".mng 01;35"
	# data @ 0x805fcff
	.asciz ".pcx 01;35"
	# data @ 0x805fd0a
	.asciz ".mov 01;35"
	# data @ 0x805fd15
	.asciz ".mpg 01;35"
	# data @ 0x805fd20
	.asciz ".mpeg 01;35"
	# data @ 0x805fd2c
	.asciz ".m2v 01;35"
	# data @ 0x805fd37
	.asciz ".mkv 01;35"
	# data @ 0x805fd42
	.asciz ".webm 01;35"
	# data @ 0x805fd4e
	.asciz ".ogm 01;35"
	# data @ 0x805fd59
	.asciz ".mp4 01;35"
	# data @ 0x805fd64
	.asciz ".m4v 01;35"
	# data @ 0x805fd6f
	.asciz ".mp4v 01;35"
	# data @ 0x805fd7b
	.asciz ".vob 01;35"
	# data @ 0x805fd86
	.asciz ".qt 01;35"
	# data @ 0x805fd90
	.asciz ".nuv 01;35"
	# data @ 0x805fd9b
	.asciz ".wmv 01;35"
	# data @ 0x805fda6
	.asciz ".asf 01;35"
	# data @ 0x805fdb1
	.asciz ".rm 01;35"
	# data @ 0x805fdbb
	.asciz ".rmvb 01;35"
	# data @ 0x805fdc7
	.asciz ".flc 01;35"
	# data @ 0x805fdd2
	.asciz ".avi 01;35"
	# data @ 0x805fddd
	.asciz ".fli 01;35"
	# data @ 0x805fde8
	.asciz ".flv 01;35"
	# data @ 0x805fdf3
	.asciz ".gl 01;35"
	# data @ 0x805fdfd
	.asciz ".dl 01;35"
	# data @ 0x805fe07
	.asciz ".xcf 01;35"
	# data @ 0x805fe12
	.asciz ".xwd 01;35"
	# data @ 0x805fe1d
	.asciz ".yuv 01;35"
	# data @ 0x805fe28
	.asciz ".cgm 01;35"
	# data @ 0x805fe33
	.asciz ".emf 01;35"
	# data @ 0x805fe3e
	.asciz "# https://wiki.xiph.org/MIME_Types_and_File_Extensions"
	# data @ 0x805fe75
	.asciz ".ogv 01;35"
	# data @ 0x805fe80
	.asciz ".ogx 01;35"
	# data @ 0x805fe8b
	.asciz "# audio formats"
	# data @ 0x805fe9b
	.asciz ".aac 00;36"
	# data @ 0x805fea6
	.asciz ".au 00;36"
	# data @ 0x805feb0
	.asciz ".flac 00;36"
	# data @ 0x805febc
	.asciz ".m4a 00;36"
	# data @ 0x805fec7
	.asciz ".mid 00;36"
	# data @ 0x805fed2
	.asciz ".midi 00;36"
	# data @ 0x805fede
	.asciz ".mka 00;36"
	# data @ 0x805fee9
	.asciz ".mp3 00;36"
	# data @ 0x805fef4
	.asciz ".mpc 00;36"
	# data @ 0x805feff
	.asciz ".ogg 00;36"
	# data @ 0x805ff0a
	.asciz ".ra 00;36"
	# data @ 0x805ff14
	.asciz ".wav 00;36"
	# data @ 0x805ff1f
	.asciz "# https://wiki.xiph.org/MIME_Types_and_File_Extensions"
	# data @ 0x805ff56
	.asciz ".oga 00;36"
	# data @ 0x805ff61
	.asciz ".opus 00;36"
	# data @ 0x805ff6d
	.asciz ".spx 00;36"
	# data @ 0x805ff78
	.asciz ".xspf 00;36"
	# data @ 0x805ff84
	.globl filetype_letter
	.type filetype_letter, @object
filetype_letter:
	.asciz "?pcdb-lswd"
	# data @ 0x805ff8f
label_276:
	.asciz "full-iso"
	# data @ 0x805ff98
label_2717:
	.asciz "long-iso"
	# data @ 0x805ffa1
label_2718:
	.asciz "iso"
	# data @ 0x805ffa5
label_221:
	.asciz "locale"
	# data @ 0x805ffac
	.globl time_style_args
	.type time_style_args, @object
time_style_args:
	.long label_276
	.long label_2717
	.long label_2718
	.long label_221
	# data @ 0x805ffbc
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ffc0
	.globl time_style_types
	.type time_style_types, @object
time_style_types:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x805ffd0
label_2492:
	.asciz "none"
	# data @ 0x805ffd5
label_2724:
	.asciz "slash"
	# data @ 0x805ffdb
label_2725:
	.asciz "file-type"
	# data @ 0x805ffe5
label_2726:
	.asciz "classify"
	# data @ 0x805ffee
	.byte 0
	.byte 0
	# data @ 0x805fff0
	.globl indicator_style_args
	.type indicator_style_args, @object
indicator_style_args:
	.long label_2492
	.long label_2724
	.long label_2725
	.long label_2726
	# data @ 0x8060000
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060004
	.globl indicator_style_types
	.type indicator_style_types, @object
indicator_style_types:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060014
label_2624:
	.asciz "lc"
	# data @ 0x8060017
label_2625:
	.asciz "rc"
	# data @ 0x806001a
label_2626:
	.asciz "ec"
	# data @ 0x806001d
label_2627:
	.asciz "rs"
	# data @ 0x8060020
label_2519:
	.asciz "no"
	# data @ 0x8060023
label_2628:
	.asciz "fi"
	# data @ 0x8060026
label_2629:
	.asciz "di"
	# data @ 0x8060029
label_2630:
	.asciz "ln"
	# data @ 0x806002c
label_2631:
	.asciz "pi"
	# data @ 0x806002f
label_2632:
	.asciz "so"
	# data @ 0x8060032
label_2633:
	.asciz "bd"
	# data @ 0x8060035
label_2634:
	.asciz "cd"
	# data @ 0x8060038
label_2635:
	.asciz "mi"
	# data @ 0x806003b
label_2636:
	.asciz "or"
	# data @ 0x806003e
label_2637:
	.asciz "ex"
	# data @ 0x8060041
label_2638:
	.asciz "do"
	# data @ 0x8060044
label_2639:
	.asciz "su"
	# data @ 0x8060047
label_2640:
	.asciz "sg"
	# data @ 0x806004a
label_2641:
	.asciz "st"
	# data @ 0x806004d
label_2642:
	.asciz "ow"
	# data @ 0x8060050
label_2643:
	.asciz "tw"
	# data @ 0x8060053
label_2644:
	.asciz "ca"
	# data @ 0x8060056
label_2645:
	.asciz "mh"
	# data @ 0x8060059
label_2646:
	.ascii "cl"
	# data @ 0x806005b
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060060
	.globl indicator_name
	.type indicator_name, @object
indicator_name:
	.long label_2624
	.long label_2625
	.long label_2626
	.long label_2627
	.long label_2519
	.long label_2628
	.long label_2629
	.long label_2630
	.long label_2631
	.long label_2632
	.long label_2633
	.long label_2634
	.long label_2635
	.long label_2636
	.long label_2637
	.long label_2638
	.long label_2639
	.long label_2640
	.long label_2641
	.long label_2642
	.long label_2643
	.long label_2644
	.long label_2645
	.long label_2646
	# data @ 0x80600c0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80600c4
label_135:
	.byte 27
	.byte 91
	.byte 0
	# data @ 0x80600c7
label_2665:
	.byte 109
	.byte 0
	# data @ 0x80600c9
label_93:
	.byte 0x30
	# data @ 0x80600ca
	.byte 0
	# data @ 0x80600cb
label_2523:
	.asciz "01;34"
	# data @ 0x80600d1
label_2365:
	.asciz "01;36"
	# data @ 0x80600d7
label_2659:
	.asciz "33"
	# data @ 0x80600da
label_2368:
	.asciz "01;35"
	# data @ 0x80600e0
label_2344:
	.asciz "01;33"
	# data @ 0x80600e6
label_2680:
	.asciz "01;32"
	# data @ 0x80600ec
label_2704:
	.asciz "37;41"
	# data @ 0x80600f2
label_2347:
	.asciz "30;43"
	# data @ 0x80600f8
label_2713:
	.asciz "37;44"
	# data @ 0x80600fe
label_2716:
	.asciz "34;42"
	# data @ 0x8060104
label_2722:
	.asciz "30;42"
	# data @ 0x806010a
label_2340:
	.asciz "30;41"
	# data @ 0x8060110
label_2341:
	.byte 27
	.byte 91
	.byte 75
	.byte 0
	# data @ 0x8060114
label_2378:
	.asciz "%b %e  %Y"
	# data @ 0x806011e
label_2343:
	.asciz "%b %e %H:%M"
	# data @ 0x806012a
label_2563:
	.asciz "all"
	# data @ 0x806012e
	.asciz "escape"
	# data @ 0x8060135
	.asciz "directory"
	# data @ 0x806013f
	.asciz "dired"
	# data @ 0x8060145
	.asciz "full-time"
	# data @ 0x806014f
label_2387:
	.asciz "group-directories-first"
	# data @ 0x8060167
label_2416:
	.asciz "human-readable"
	# data @ 0x8060176
	.asciz "inode"
	# data @ 0x806017c
	.asciz "kibibytes"
	# data @ 0x8060186
	.asciz "numeric-uid-gid"
	# data @ 0x8060196
	.asciz "no-group"
	# data @ 0x806019f
	.asciz "hide-control-chars"
	# data @ 0x80601b2
	.asciz "reverse"
	# data @ 0x80601ba
label_2494:
	.asciz "size"
	# data @ 0x80601bf
	.asciz "width"
	# data @ 0x80601c5
	.asciz "almost-all"
	# data @ 0x80601d0
	.asciz "ignore-backups"
	# data @ 0x80601df
label_2504:
	.asciz "si"
	# data @ 0x80601e2
label_2715:
	.asciz "dereference-command-line"
	# data @ 0x80601fb
	.byte 0
	.byte 100
	.byte 101
	.byte 114
	.byte 101
	.byte 102
	.byte 101
	.byte 114
	.byte 101
	.byte 110
	.byte 99
	.byte 101
	.byte 45
	.byte 99
	.byte 111
	.byte 109
	.byte 109
	.byte 97
	.byte 110
	.byte 100
	.byte 45
	.byte 108
	.byte 105
	.byte 110
	.byte 101
	.byte 45
	.byte 115
	.byte 121
	.byte 109
	.byte 108
	.byte 105
	.byte 110
	.byte 107
	.byte 45
	.byte 116
	.byte 111
	.byte 45
	.byte 100
	.byte 105
	.byte 114
	.byte 0
	# data @ 0x8060224
label_2566:
	.asciz "hide"
	# data @ 0x8060229
label_2650:
	.asciz "ignore"
	# data @ 0x8060230
	.asciz "indicator-style"
	# data @ 0x8060240
label_2555:
	.asciz "dereference"
	# data @ 0x806024c
	.asciz "literal"
	# data @ 0x8060254
	.asciz "quote-name"
	# data @ 0x806025f
	.asciz "quoting-style"
	# data @ 0x806026d
label_2655:
	.asciz "recursive"
	# data @ 0x8060277
	.asciz "format"
	# data @ 0x806027e
label_2660:
	.asciz "show-control-chars"
	# data @ 0x8060291
label_2434:
	.asciz "sort"
	# data @ 0x8060296
label_2435:
	.asciz "tabsize"
	# data @ 0x806029e
label_2493:
	.asciz "time"
	# data @ 0x80602a3
label_2648:
	.asciz "time-style"
	# data @ 0x80602ae
label_2661:
	.asciz "color"
	# data @ 0x80602b4
label_2714:
	.asciz "hyperlink"
	# data @ 0x80602be
label_2436:
	.asciz "block-size"
	# data @ 0x80602c9
label_2437:
	.asciz "context"
	# data @ 0x80602d1
	.asciz "author"
	# data @ 0x80602d8
label_2345:
	.asciz "help"
	# data @ 0x80602dd
label_2349:
	.ascii "version"
	# data @ 0x80602e4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060300
	.globl long_options
	.type long_options, @object
long_options:
	.long label_2563
	# data @ 0x8060304
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806030c
	.byte 97
	.byte 0
	.byte 0
	.byte 0
	.byte 46
	# data @ 0x8060311
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060314
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806031c
	.byte 98
	.byte 0
	.byte 0
	.byte 0
	.byte 53
	# data @ 0x8060321
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060324
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806032c
	.byte 100
	.byte 0
	.byte 0
	.byte 0
	.byte 63
	# data @ 0x8060331
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060334
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806033c
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 69
	# data @ 0x8060341
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060344
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806034c
	.byte 134
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060350
	.long label_2387
	# data @ 0x8060354
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806035c
	.byte 135
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060360
	.long label_2416
	# data @ 0x8060364
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806036c
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	# data @ 0x8060371
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060374
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806037c
	.byte 105
	.byte 0
	.byte 0
	.byte 0
	.byte 124
	# data @ 0x8060381
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060384
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806038c
	.byte 107
	.byte 0
	.byte 0
	.byte 0
	.byte 134
	# data @ 0x8060391
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060394
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806039c
	.byte 110
	.byte 0
	.byte 0
	.byte 0
	.byte 150
	# data @ 0x80603a1
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x80603a4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603ac
	.byte 71
	.byte 0
	.byte 0
	.byte 0
	.byte 159
	# data @ 0x80603b1
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x80603b4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603bc
	.byte 113
	.byte 0
	.byte 0
	.byte 0
	.byte 178
	# data @ 0x80603c1
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x80603c4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603cc
	.byte 114
	.byte 0
	.byte 0
	.byte 0
	.byte 186
	# data @ 0x80603d1
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x80603d4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603dc
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 191
	.byte 1
	# data @ 0x80603e2
	.byte 6
	.byte 8
	.byte 1
	# data @ 0x80603e5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603ec
	.byte 119
	.byte 0
	.byte 0
	.byte 0
	.byte 197
	# data @ 0x80603f1
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x80603f4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80603fc
	.byte 65
	.byte 0
	.byte 0
	.byte 0
	.byte 208
	# data @ 0x8060401
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060404
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806040c
	.byte 66
	.byte 0
	.byte 0
	.byte 0
	.byte 229
	# data @ 0x8060411
	.byte 255
	.byte 5
	.byte 8
	# data @ 0x8060414
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806041c
	.byte 70
	.byte 0
	.byte 0
	.byte 0
	.byte 219
	# data @ 0x8060421
	.byte 255
	.byte 5
	.byte 8
	# data @ 0x8060424
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806042c
	.byte 132
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060430
	.long label_2504
	# data @ 0x8060434
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806043c
	.byte 141
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060440
	.long label_2715
	# data @ 0x8060444
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806044c
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 252
	# data @ 0x8060451
	.byte 1
	.byte 6
	.byte 8
	# data @ 0x8060454
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806045c
	.byte 131
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060460
	.long label_2566
	# data @ 0x8060464
	.byte 1
	# data @ 0x8060465
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806046c
	.byte 136
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060470
	.long label_2650
	# data @ 0x8060474
	.byte 1
	# data @ 0x8060475
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806047c
	.byte 73
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 2
	# data @ 0x8060482
	.byte 6
	.byte 8
	.byte 1
	# data @ 0x8060485
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806048c
	.byte 138
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060490
	.long label_2555
	# data @ 0x8060494
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806049c
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 76
	# data @ 0x80604a1
	.byte 2
	.byte 6
	.byte 8
	# data @ 0x80604a4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604ac
	.byte 78
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	# data @ 0x80604b1
	.byte 2
	.byte 6
	.byte 8
	# data @ 0x80604b4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604bc
	.byte 81
	.byte 0
	.byte 0
	.byte 0
	.byte 95
	.byte 2
	# data @ 0x80604c2
	.byte 6
	.byte 8
	.byte 1
	# data @ 0x80604c5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604cc
	.byte 139
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604d0
	.long label_2655
	# data @ 0x80604d4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604dc
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 119
	.byte 2
	# data @ 0x80604e2
	.byte 6
	.byte 8
	.byte 1
	# data @ 0x80604e5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604ec
	.byte 133
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604f0
	.long label_2660
	# data @ 0x80604f4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80604fc
	.byte 140
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060500
	.long label_2434
	# data @ 0x8060504
	.byte 1
	# data @ 0x8060505
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806050c
	.byte 142
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060510
	.long label_2435
	# data @ 0x8060514
	.byte 1
	# data @ 0x8060515
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806051c
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 158
	.byte 2
	# data @ 0x8060522
	.byte 6
	.byte 8
	.byte 1
	# data @ 0x8060525
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806052c
	.byte 143
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060530
	.long label_2648
	# data @ 0x8060534
	.byte 1
	# data @ 0x8060535
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806053c
	.byte 144
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060540
	.long label_2661
	# data @ 0x8060544
	.byte 2
	# data @ 0x8060545
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806054c
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060550
	.long label_2714
	# data @ 0x8060554
	.byte 2
	# data @ 0x8060555
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806055c
	.byte 137
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060560
	.long label_2436
	# data @ 0x8060564
	.byte 1
	# data @ 0x8060565
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806056c
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060570
	.long label_2437
	# data @ 0x8060574
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806057c
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 209
	# data @ 0x8060581
	.byte 2
	.byte 6
	.byte 8
	# data @ 0x8060584
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806058c
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060590
	.long label_2345
	# data @ 0x8060594
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806059c
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	# data @ 0x80605a0
	.long label_2349
	# data @ 0x80605a4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80605ac
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	# data @ 0x80605b0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80605c0
label_2408:
	.asciz "verbose"
	# data @ 0x80605c8
label_2409:
	.asciz "long"
	# data @ 0x80605cd
label_2410:
	.asciz "commas"
	# data @ 0x80605d4
label_2411:
	.asciz "horizontal"
	# data @ 0x80605df
label_2412:
	.asciz "across"
	# data @ 0x80605e6
label_2413:
	.asciz "vertical"
	# data @ 0x80605ef
label_2414:
	.asciz "single-column"
	# data @ 0x80605fd
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060600
	.globl format_args
	.type format_args, @object
format_args:
	.long label_2408
	.long label_2409
	.long label_2410
	.long label_2411
	.long label_2412
	.long label_2413
	.long label_2414
	# data @ 0x806061c
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060620
	.globl format_types
	.type format_types, @object
format_types:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060628
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806063c
label_2495:
	.asciz "extension"
	# data @ 0x8060646
	.byte 0
	.byte 0
	# data @ 0x8060648
	.globl sort_args
	.type sort_args, @object
sort_args:
	.long label_2492
	.long label_2493
	.long label_2494
	.long label_2495
	.long label_2349
	# data @ 0x806065c
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060660
	.globl sort_types
	.type sort_types, @object
sort_types:
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060674
label_2508:
	.asciz "atime"
	# data @ 0x806067a
label_2509:
	.asciz "access"
	# data @ 0x8060681
label_2510:
	.asciz "use"
	# data @ 0x8060685
label_2511:
	.asciz "ctime"
	# data @ 0x806068b
label_2512:
	.asciz "status"
	# data @ 0x8060692
	.byte 0
	.byte 0
	# data @ 0x8060694
	.globl time_args
	.type time_args, @object
time_args:
	.long label_2508
	.long label_2509
	.long label_2510
	.long label_2511
	.long label_2512
	# data @ 0x80606a8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80606ac
	.globl time_types
	.type time_types, @object
time_types:
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80606c0
label_2515:
	.asciz "always"
	# data @ 0x80606c7
label_2516:
	.asciz "yes"
	# data @ 0x80606cb
label_2517:
	.asciz "force"
	# data @ 0x80606d1
label_2518:
	.asciz "never"
	# data @ 0x80606d7
label_2520:
	.asciz "auto"
	# data @ 0x80606dc
label_2521:
	.asciz "tty"
	# data @ 0x80606e0
label_2522:
	.ascii "if-tty"
	# data @ 0x80606e6
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060700
	.globl when_args
	.type when_args, @object
when_args:
	.long label_2515
	.long label_2516
	.long label_2517
	.long label_2518
	.long label_2519
	.long label_2492
	.long label_2520
	.long label_2521
	.long label_2522
	# data @ 0x8060724
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060740
	.globl when_types
	.type when_types, @object
when_types:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	# data @ 0x8060749
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060758
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060764
label_43:
	.asciz "src/ls.c"
	# data @ 0x806076d
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060770
label_44:
	.asciz "dev_ino_size <= obstack_object_size (&dev_ino_obstack)"
	# data @ 0x80607a7
label_46:
	.asciz " %lu"
	# data @ 0x80607ac
label_79:
	.asciz "%s"
	# data @ 0x80607af
label_84:
	.asciz "%.*s%s%s"
	# data @ 0x80607b8
label_92:
	.asciz "00"
	# data @ 0x80607bb
label_143:
	.asciz "/usr/local/share/locale"
	# data @ 0x80607d3
label_159:
	.asciz "TZ"
	# data @ 0x80607d6
label_137:
	.asciz "."
	# data @ 0x80607d8
label_152:
	.asciz "found"
	# data @ 0x80607de
label_153:
	.asciz "//DIRED//"
	# data @ 0x80607e8
label_161:
	.asciz "//SUBDIRED//"
	# data @ 0x80607f5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80607f8
label_163:
	.asciz "//DIRED-OPTIONS// --quoting-style=%s\n"
	# data @ 0x806081e
	.byte 0
	.byte 0
	# data @ 0x8060820
label_142:
	.asciz "hash_get_n_entries (active_dir_set) == 0"
	# data @ 0x8060849
label_238:
	.asciz "COLUMNS"
	# data @ 0x8060851
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8060854
label_226:
	.asciz "ignoring invalid width in environment variable COLUMNS: %s"
	# data @ 0x806088f
label_243:
	.asciz "TABSIZE"
	# data @ 0x8060897
	.byte 0
	# data @ 0x8060898
label_188:
	.asciz "ignoring invalid tab size in environment variable TABSIZE: %s"
	# data @ 0x80608d6
	.byte 0
	.byte 0
	# data @ 0x80608d8
label_195:
	.asciz "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1"
	# data @ 0x8060904
label_267:
	.asciz "invalid line width"
	# data @ 0x8060917
label_269:
	.asciz "%s: %s"
	# data @ 0x806091e
label_271:
	.asciz "*~"
	# data @ 0x8060921
label_270:
	.asciz ".*~"
	# data @ 0x8060925
label_272:
	.asciz "invalid tab size"
	# data @ 0x8060936
label_273:
	.asciz "--sort"
	# data @ 0x806093d
label_274:
	.asciz "--time"
	# data @ 0x8060944
label_275:
	.asciz "--format"
	# data @ 0x806094d
label_277:
	.asciz "--color"
	# data @ 0x8060955
label_280:
	.asciz "--hyperlink"
	# data @ 0x8060961
label_281:
	.asciz "--indicator-style"
	# data @ 0x8060973
label_282:
	.asciz "--quoting-style"
	# data @ 0x8060983
label_175:
	.asciz "dir"
	# data @ 0x8060987
label_179:
	.asciz "vdir"
	# data @ 0x806098c
label_194:
	.asciz "ls"
	# data @ 0x806098f
label_284:
	.asciz "David MacKenzie"
	# data @ 0x806099f
label_285:
	.asciz "Richard M. Stallman"
	# data @ 0x80609b3
label_187:
	.asciz "LS_BLOCK_SIZE"
	# data @ 0x80609c1
label_209:
	.asciz "BLOCK_SIZE"
	# data @ 0x80609cc
label_253:
	.asciz "*=>@|"
	# data @ 0x80609d2
label_210:
	.asciz "TIME_STYLE"
	# data @ 0x80609dd
label_241:
	.asciz "invalid time style format %s"
	# data @ 0x80609fa
label_255:
	.asciz "time style"
	# data @ 0x8060a05
label_259:
	.asciz "Valid arguments are:\n"
	# data @ 0x8060a1b
label_177:
	.asciz "  - [posix-]%s\n"
	# data @ 0x8060a2b
	.byte 0
	# data @ 0x8060a2c
label_186:
	.asciz "  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\n"
	# data @ 0x8060a62
label_231:
	.asciz "%Y-%m-%d %H:%M:%S.%N %z"
	# data @ 0x8060a7a
label_211:
	.asciz "%Y-%m-%d %H:%M"
	# data @ 0x8060a89
label_219:
	.asciz "%Y-%m-%d "
	# data @ 0x8060a93
label_220:
	.asciz "%m-%d %H:%M"
	# data @ 0x8060a9f
	.byte 0
	# data @ 0x8060aa0
label_222:
	.long .label_2568
	.long sub_804bbdc
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_2569
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_2570
	.long sub_804b6ff
	.long .label_2571
	.long .label_2572
	.long .label_217
	.long .label_2573
	.long .label_2574
	.long .label_2575
	.long .label_2576
	.long .label_217
	.long .label_217
	.long .label_2577
	.long .label_217
	.long sub_804b79d
	.long .label_217
	.long .label_217
	.long sub_804b7b1
	.long .label_2578
	.long .label_2579
	.long sub_804b7e4
	.long .label_2580
	.long .label_217
	.long .label_217
	.long .label_2581
	.long .label_217
	.long .label_2582
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_2583
	.long sub_804b4d1
	.long .label_2584
	.long .label_2585
	.long .label_217
	.long .label_2586
	.long .label_2587
	.long .label_2588
	.long .label_2589
	.long .label_217
	.long .label_2590
	.long .label_2591
	.long .label_2592
	.long .label_2593
	.long .label_2594
	.long .label_2595
	.long .label_2596
	.long .label_2597
	.long .label_2598
	.long .label_2599
	.long .label_2600
	.long .label_2601
	.long .label_2602
	.long .label_2603
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_217
	.long .label_2604
	.long .label_2605
	.long .label_2606
	.long .label_2607
	.long .label_2608
	.long .label_2609
	.long .label_2610
	.long .label_2611
	.long sub_804b871
	.long .label_2612
	.long .label_2613
	.long .label_2614
	.long .label_2615
	.long .label_2616
	.long .label_2617
	.long .label_2618
	.long .label_2619
	# data @ 0x8060ef0
label_304:
	.long .label_2681
	.long .label_2682
	.long .label_2683
	.long .label_2684
	.long .label_2685
label_286:
	.long .label_2686
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_2687
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2688
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2689
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2690
	.long .label_306
	.long .label_2691
	.long .label_2692
	.long .label_306
	.long .label_306
	.long .label_2693
	.long .label_2694
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2695
	.long .label_306
	.long .label_306
	.long .label_306
	.long .label_2696
	.long .label_306
	.long .label_2697
	.long .label_306
	.long .label_2698
	.long .label_306
	.long .label_2689
label_288:
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_2699
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_2700
	.long .label_2700
	.long .label_2700
	.long .label_2700
	.long .label_2700
	.long .label_2700
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_308
	.long .label_2701
	.long .label_2701
	.long .label_2701
	.long .label_2701
	.long .label_2701
	.long .label_2701
	# data @ 0x80611c4
label_317:
	.asciz "TERM"
	# data @ 0x80611c9
label_313:
	.asciz "TERM "
	# data @ 0x80611cf
label_343:
	.asciz "LS_COLORS"
	# data @ 0x80611d9
label_344:
	.asciz "COLORTERM"
	# data @ 0x80611e3
label_338:
	.asciz "unrecognized prefix: %s"
	# data @ 0x80611fb
	.byte 0
	# data @ 0x80611fc
label_354:
	.asciz "unparsable value for LS_COLORS environment variable"
	# data @ 0x8061230
label_322:
	.asciz "target"
	# data @ 0x8061237
	.byte 0
	# data @ 0x8061238
label_345:
	.long .label_336
	.long .label_2360
	.long .label_2361
	.long .label_2362
	.long .label_2363
	.long .label_336
	.long .label_2364
	# data @ 0x8061254
label_356:
	.asciz "QUOTING_STYLE"
	# data @ 0x8061262
	.byte 0
	.byte 0
	# data @ 0x8061264
label_358:
	.asciz "ignoring invalid value of environment variable QUOTING_STYLE: %s"
	# data @ 0x80612a5
label_395:
	.asciz "cannot open directory %s"
	# data @ 0x80612be
	.byte 0
	.byte 0
	# data @ 0x80612c0
label_398:
	.asciz "cannot determine device and inode of %s"
	# data @ 0x80612e8
label_378:
	.asciz "%s: not listing already-listed directory"
	# data @ 0x8061311
label_373:
	.asciz "  "
	# data @ 0x8061314
label_383:
	.asciz "error canonicalizing %s"
	# data @ 0x806132c
label_384:
	.asciz ":\n"
	# data @ 0x806132f
label_381:
	.asciz "reading directory %s"
	# data @ 0x8061344
label_389:
	.asciz "closing directory %s"
	# data @ 0x8061359
label_401:
	.asciz "total"
	# data @ 0x806135f
	.byte 0
	# data @ 0x8061360
label_385:
	.long .label_380
	.long .label_2496
	.long .label_2497
	.long .label_380
	.long .label_2498
	.long .label_380
	.long .label_2499
	.long .label_380
	.long .label_2500
	.long .label_380
	.long .label_2501
	.long .label_380
	.long .label_2502
	.long .label_380
	.long .label_2503
	# data @ 0x806139c
label_498:
	.asciz "! command_line_arg || inode == NOT_AN_INODE_NUMBER"
	# data @ 0x80613cf
label_450:
	.asciz "cannot access %s"
	# data @ 0x80613e0
label_493:
	.asciz "_"
	# data @ 0x80613e2
label_497:
	.asciz "unlabeled"
	# data @ 0x80613ec
label_506:
	.asciz "cannot read symbolic link %s"
	# data @ 0x8061409
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806140c
label_523:
	.asciz "cannot compare file names %s and %s"
	# data @ 0x8061430
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8061440
	.globl sort_functions
	.type sort_functions, @object
sort_functions:
	.long xstrcoll_name
	.long xstrcoll_df_name
	.long rev_xstrcoll_name
	.long rev_xstrcoll_df_name
	.long strcmp_name
	.long strcmp_df_name
	.long rev_strcmp_name
	.long rev_strcmp_df_name
	.long xstrcoll_extension
	.long xstrcoll_df_extension
	.long rev_xstrcoll_extension
	.long rev_xstrcoll_df_extension
	.long strcmp_extension
	.long strcmp_df_extension
	.long rev_strcmp_extension
	.long rev_strcmp_df_extension
	.long xstrcoll_size
	.long xstrcoll_df_size
	.long rev_xstrcoll_size
	.long rev_xstrcoll_df_size
	.long strcmp_size
	.long strcmp_df_size
	.long rev_strcmp_size
	.long rev_strcmp_df_size
	.long xstrcoll_version
	.long xstrcoll_df_version
	.long rev_xstrcoll_version
	.long rev_xstrcoll_df_version
	# data @ 0x80614b0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80614c0
	.long xstrcoll_mtime
	.long xstrcoll_df_mtime
	.long rev_xstrcoll_mtime
	.long rev_xstrcoll_df_mtime
	.long strcmp_mtime
	.long strcmp_df_mtime
	.long rev_strcmp_mtime
	.long rev_strcmp_df_mtime
	.long xstrcoll_ctime
	.long xstrcoll_df_ctime
	.long rev_xstrcoll_ctime
	.long rev_xstrcoll_df_ctime
	.long strcmp_ctime
	.long strcmp_df_ctime
	.long rev_strcmp_ctime
	.long rev_strcmp_df_ctime
	.long xstrcoll_atime
	.long xstrcoll_df_atime
	.long rev_xstrcoll_atime
	.long rev_xstrcoll_df_atime
	.long strcmp_atime
	.long strcmp_df_atime
	.long rev_strcmp_atime
	.long rev_strcmp_df_atime
	# data @ 0x8061520
label_631:
	.asciz "sort_type != sort_version"
	# data @ 0x806153a
	.byte 0
	.byte 0
	# data @ 0x806153c
label_640:
	.long .label_2709
	.long .label_2710
	.long .label_2711
	.long .label_2712
	.long sub_804f985
	# data @ 0x8061550
label_649:
	.asciz "%*lu "
	# data @ 0x8061556
label_652:
	.asciz "?"
	# data @ 0x8061558
label_659:
	.asciz "%lu"
	# data @ 0x806155c
label_667:
	.asciz "INT_BUFSIZE_BOUND (uintmax_t) <= buflen"
	# data @ 0x8061584
label_672:
	.asciz "%*s "
	# data @ 0x8061589
label_714:
	.asciz "%s %*s "
	# data @ 0x8061591
label_680:
	.asciz "%*s, %*s "
	# data @ 0x806159b
label_711:
	.asciz " -> "
	# data @ 0x80615a0
label_768:
	.asciz "%%%02x"
	# data @ 0x80615a7
label_769:
	.asciz "/"
	# data @ 0x80615a9
label_771:
	.byte 27
	.byte 93
	.byte 56
	.byte 59
	.byte 59
	.byte 102
	.byte 105
	.byte 108
	.byte 101
	.byte 58
	.byte 47
	.byte 47
	.byte 37
	.byte 115
	.byte 37
	.byte 115
	.byte 37
	.byte 115
	.byte 7
	.byte 0
	# data @ 0x80615bd
label_783:
	.byte 27
	.byte 93
	.byte 56
	.byte 59
	.byte 59
	.byte 7
	.byte 0
	# data @ 0x80615c4
label_934:
	.asciz "Try '%s --help' for more information.\n"
	# data @ 0x80615eb
	.byte 0
	# data @ 0x80615ec
label_946:
	.asciz "Usage: %s [OPTION]... [FILE]...\n"
	# data @ 0x806160d
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8061610
label_956:
	.asciz "List information about the FILEs (the current directory by default).\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
	# data @ 0x80616a0
label_933:
	.asciz "  -a, --all                  do not ignore entries starting with .\n  -A, --almost-all           do not list implied . and ..\n      --author               with -l, print the author of each file\n  -b, --escape               print C-style escapes for nongraphic characters\n"
	# data @ 0x80617af
	.byte 0
	# data @ 0x80617b0
label_955:
	.asciz "      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\n                               e.g., '--block-size=M'; see SIZE format below\n"
	# data @ 0x806184c
label_950:
	.asciz "  -B, --ignore-backups       do not list implied entries ending with ~\n  -c                         with -lt: sort by, and show, ctime (time of last\n                               modification of file status information);\n                               with -l: show ctime and sort by name;\n                               otherwise: sort by ctime, newest first\n"
	# data @ 0x80619b6
	.byte 0
	.byte 0
	# data @ 0x80619b8
label_960:
	.asciz "  -C                         list entries by columns\n      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\n                               if omitted), 'auto', or 'never'; more info below\n  -d, --directory            list directories themselves, not their contents\n  -D, --dired                generate output designed for Emacs' dired mode\n"
	# data @ 0x8061b27
	.byte 0
	# data @ 0x8061b28
label_935:
	.asciz "  -f                         do not sort, enable -aU, disable -ls --color\n  -F, --classify             append indicator (one of */=>@|) to entries\n      --file-type            likewise, except do not append '*'\n      --format=WORD          across -x, commas -m, horizontal -x, long -l,\n                               single-column -1, verbose -l, vertical -C\n      --full-time            like -l --time-style=full-iso\n"
	# data @ 0x8061ccb
	.byte 0
	# data @ 0x8061ccc
label_943:
	.asciz "  -g                         like -l, but do not list owner\n"
	# data @ 0x8061d09
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8061d0c
label_954:
	.asciz "      --group-directories-first\n                             group directories before files;\n                               can be augmented with a --sort option, but any\n                               use of --sort=none (-U) disables grouping\n"
	# data @ 0x8061e01
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8061e04
label_964:
	.asciz "  -G, --no-group             in a long listing, don't print group names\n"
	# data @ 0x8061e4d
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8061e50
label_938:
	.asciz "  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\n      --si                   likewise, but use powers of 1000 not 1024\n"
	# data @ 0x8061ee6
	.byte 0
	.byte 0
	# data @ 0x8061ee8
label_947:
	.asciz "  -H, --dereference-command-line\n                             follow symbolic links listed on the command line\n      --dereference-command-line-symlink-to-dir\n                             follow each command line symbolic link\n                               that points to a directory\n      --hide=PATTERN         do not list implied entries matching shell PATTERN\n                               (overridden by -a or -A)\n"
	# data @ 0x806208e
	.byte 0
	.byte 0
	# data @ 0x8062090
label_957:
	.asciz "      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\n                               (default if omitted), 'auto', or 'never'\n"
	# data @ 0x8062121
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8062124
label_931:
	.asciz "      --indicator-style=WORD  append indicator with style WORD to entry names:\n                               none (default), slash (-p),\n                               file-type (--file-type), classify (-F)\n  -i, --inode                print the index number of each file\n  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\n"
	# data @ 0x8062286
	.byte 0
	.byte 0
	# data @ 0x8062288
label_942:
	.asciz "  -k, --kibibytes            default to 1024-byte blocks for disk usage;\n                               used only with -s and per directory totals\n"
	# data @ 0x806231c
label_951:
	.asciz "  -l                         use a long listing format\n  -L, --dereference          when showing file information for a symbolic\n                               link, show information for the file the link\n                               references rather than for the link itself\n  -m                         fill width with a comma separated list of entries\n"
	# data @ 0x8062483
	.byte 0
	# data @ 0x8062484
label_961:
	.asciz "  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\n  -N, --literal              print entry names without quoting\n  -o                         like -l, but do not list group information\n  -p, --indicator-style=slash\n                             append / indicator to directories\n"
	# data @ 0x80625b3
	.byte 0
	# data @ 0x80625b4
label_936:
	.asciz "  -q, --hide-control-chars   print ? instead of nongraphic characters\n      --show-control-chars   show nongraphic characters as-is (the default,\n                               unless program is 'ls' and output is a terminal)\n  -Q, --quote-name           enclose entry names in double quotes\n      --quoting-style=WORD   use quoting style WORD for entry names:\n                               literal, locale, shell, shell-always,\n                               shell-escape, shell-escape-always, c, escape\n                               (overrides QUOTING_STYLE environment variable)\n"
	# data @ 0x80627fd
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8062800
label_944:
	.asciz "  -r, --reverse              reverse order while sorting\n  -R, --recursive            list subdirectories recursively\n  -s, --size                 print the allocated size of each file, in blocks\n"
	# data @ 0x80628c5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80628c8
label_963:
	.asciz "  -S                         sort by file size, largest first\n      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\n                               time (-t), version (-v), extension (-X)\n      --time=WORD            with -l, show time as WORD instead of default\n                               modification time: atime or access or use (-u);\n                               ctime or status (-c); also use specified time\n                               as sort key if --sort=time (newest first)\n"
	# data @ 0x8062acf
	.byte 0
	# data @ 0x8062ad0
label_965:
	.asciz "      --time-style=TIME_STYLE  time/date format with -l; see TIME_STYLE below\n"
	# data @ 0x8062b1f
	.byte 0
	# data @ 0x8062b20
label_939:
	.asciz "  -t                         sort by modification time, newest first\n  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\n"
	# data @ 0x8062bae
	.byte 0
	.byte 0
	# data @ 0x8062bb0
label_948:
	.asciz "  -u                         with -lt: sort by, and show, access time;\n                               with -l: show access time and sort by name;\n                               otherwise: sort by access time, newest first\n  -U                         do not sort; list entries in directory order\n  -v                         natural sort of (version) numbers within text\n"
	# data @ 0x8062d24
label_958:
	.asciz "  -w, --width=COLS           set output width to COLS.  0 means no limit\n  -x                         list entries by lines instead of by columns\n  -X                         sort alphabetically by entry extension\n  -Z, --context              print any security context of each file\n  -1                         list one file per line.  Avoid '\\n' with -q or -b\n"
	# data @ 0x8062e8f
	.byte 0
	# data @ 0x8062e90
label_932:
	.asciz "      --help     display this help and exit\n"
	# data @ 0x8062ebd
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8062ec0
label_940:
	.asciz "      --version  output version information and exit\n"
	# data @ 0x8062ef6
	.byte 0
	.byte 0
	# data @ 0x8062ef8
label_953:
	.asciz "\nThe TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\nFORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newline>FORMAT2,\nthen FORMAT1 applies to non-recent files and FORMAT2 to recent files.\nTIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\nAlso the TIME_STYLE environment variable sets the default style to use.\n"
	# data @ 0x8063070
label_962:
	.asciz "\nUsing color to distinguish file types is disabled both by default and\nwith --color=never.  With --color=auto, ls emits color codes only when\nstandard output is connected to a terminal.  The LS_COLORS environment\nvariable can change the settings.  Use the dircolors command to set it.\n"
	# data @ 0x806318e
	.byte 0
	.byte 0
	# data @ 0x8063190
label_937:
	.asciz "\nExit status:\n 0  if OK,\n 1  if minor problems (e.g., cannot access subdirectory),\n 2  if serious trouble (e.g., cannot access command-line argument).\n"
	# data @ 0x8063228
	.globl __PRETTY_FUNCTION__.8064
	.type __PRETTY_FUNCTION__.8064, @object
__PRETTY_FUNCTION__.8064:
	.asciz "dev_ino_pop"
	# data @ 0x8063234
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063240
	.globl sig.8191
	.type sig.8191, @object
sig.8191:
	.byte 20
	.byte 0
	.byte 0
	.byte 0
	.byte 14
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063270
	.globl __PRETTY_FUNCTION__.8218
	.type __PRETTY_FUNCTION__.8218, @object
__PRETTY_FUNCTION__.8218:
	.asciz "main"
	# data @ 0x8063275
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063278
	.globl posix_prefix.8331
	.type posix_prefix.8331, @object
posix_prefix.8331:
	.asciz "posix-"
	# data @ 0x806327f
	.byte 0
	# data @ 0x8063280
	.globl __PRETTY_FUNCTION__.8596
	.type __PRETTY_FUNCTION__.8596, @object
__PRETTY_FUNCTION__.8596:
	.asciz "gobble_file"
	# data @ 0x806328c
	.globl __PRETTY_FUNCTION__.8996
	.type __PRETTY_FUNCTION__.8996, @object
__PRETTY_FUNCTION__.8996:
	.asciz "sort_files"
	# data @ 0x8063297
	.byte 0
	# data @ 0x8063298
	.globl __PRETTY_FUNCTION__.9067
	.type __PRETTY_FUNCTION__.9067, @object
__PRETTY_FUNCTION__.9067:
	.asciz "format_inode"
	# data @ 0x80632a5
label_2342:
	.asciz "8.30"
	# data @ 0x80632aa
label_986:
	.asciz "invalid argument %s for %s"
	# data @ 0x80632c5
label_987:
	.asciz "ambiguous argument %s for %s"
	# data @ 0x80632e2
label_992:
	.asciz "Valid arguments are:"
	# data @ 0x80632f7
label_996:
	.asciz "\n  - %s"
	# data @ 0x80632ff
label_989:
	.asciz ", %s"
	# data @ 0x8063304
label_1035:
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_1037
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	.long .label_2651
	# data @ 0x80633e0
label_1077:
	.asciz "/"
	# data @ 0x80633e2
label_1103:
	.asciz "write error"
	# data @ 0x80633ee
label_1107:
	.asciz "%s: %s"
	# data @ 0x80633f5
label_1104:
	.asciz "%s"
	# data @ 0x80633f8
label_1211:
	.asciz "."
	# data @ 0x80633fa
label_1207:
	.asciz ".."
	# data @ 0x80633fd
label_1230:
	.asciz "C"
	# data @ 0x80633ff
label_1227:
	.asciz "POSIX"
	# data @ 0x8063405
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063408
	.globl default_tuning
	.type default_tuning, @object
default_tuning:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806340e
	.byte 128
	.byte 63
	.byte 205
	.byte 204
	.byte 76
	.byte 63
	.byte 244
	.byte 253
	.byte 180
	.byte 63
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806341c
label_1247:
	.asciz "# entries:         %lu\n"
	# data @ 0x8063434
label_1244:
	.asciz "# buckets:         %lu\n"
	# data @ 0x806344c
label_1246:
	.asciz "# buckets used:    %lu (%.2f%%)\n"
	# data @ 0x806346d
label_1243:
	.asciz "max bucket length: %lu\n"
	# data @ 0x8063485
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063488
label_1245:
	.quad 0x4059000000000000
	# data @ 0x8063490
label_1288:
	.long 0x3f4ccccd
	# data @ 0x8063494
label_1289:
	.long 0x3fb4fdf4
	# data @ 0x8063498
label_1293:
	.long 0x3dcccccd
	# data @ 0x806349c
label_1300:
	.long 0x4f800000
	# data @ 0x80634a0
	.globl power_letter
	.type power_letter, @object
power_letter:
	.byte 0
	.byte 75
	.byte 77
	.byte 71
	.byte 84
	.byte 80
	.byte 69
	.byte 90
	.byte 89
	# data @ 0x80634a9
label_1447:
	.asciz "."
	# data @ 0x80634ab
label_1448:
	.byte 0
	# data @ 0x80634ac
label_1419:
	.asciz "%.0Lf"
	# data @ 0x80634b2
label_1469:
	.asciz "%.1Lf"
	# data @ 0x80634b8
label_2653:
	.asciz "human-readable"
	# data @ 0x80634c7
label_2654:
	.asciz "si"
	# data @ 0x80634ca
	.byte 0
	.byte 0
	# data @ 0x80634cc
	.globl block_size_args
	.type block_size_args, @object
block_size_args:
	.long label_2653
	.long label_2654
	# data @ 0x80634d4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80634d8
	.globl block_size_opts
	.type block_size_opts, @object
block_size_opts:
	.byte 176
	.byte 0
	.byte 0
	.byte 0
	.byte 144
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80634e0
label_1472:
	.asciz "POSIXLY_CORRECT"
	# data @ 0x80634f0
label_1481:
	.asciz "BLOCK_SIZE"
	# data @ 0x80634fb
label_1488:
	.asciz "BLOCKSIZE"
	# data @ 0x8063505
label_1487:
	.asciz "eEgGkKmMpPtTyYzZ0"
	# data @ 0x8063517
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063520
label_1399:
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 62
	.byte 64
	# data @ 0x806352a
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063530
label_1394:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 62
	.byte 64
	# data @ 0x806353a
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063540
label_1396:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 63
	.byte 64
	# data @ 0x806354a
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063550
label_1441:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 160
	.byte 2
	.byte 64
	# data @ 0x806355a
	.byte 0
	.byte 0
	# data @ 0x806355c
label_1494:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063560
label_1646:
	.byte 0
	# data @ 0x8063561
label_1708:
	.asciz "%m/%d/%y"
	# data @ 0x806356a
label_1649:
	.asciz "%Y-%m-%d"
	# data @ 0x8063573
label_1716:
	.asciz "%H:%M"
	# data @ 0x8063579
label_1775:
	.asciz "%H:%M:%S"
	# data @ 0x8063582
	.byte 0
	.byte 0
	# data @ 0x8063584
label_1763:
	.long .label_2439
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_2440
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_2441
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_2442
	.long .label_2443
	.long .label_2444
	.long .label_2445
	.long .label_1645
	.long .label_2446
	.long .label_2447
	.long .label_2448
	.long .label_2449
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_2450
	.long .label_2451
	.long .label_1645
	.long .label_2452
	.long .label_1645
	.long .label_2453
	.long .label_2454
	.long .label_2455
	.long .label_2456
	.long .label_2447
	.long .label_2457
	.long .label_2458
	.long .label_2459
	.long .label_2460
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_1645
	.long .label_2461
	.long .label_2462
	.long .label_2463
	.long .label_2464
	.long .label_2465
	.long .label_1645
	.long .label_2447
	.long .label_2462
	.long .label_1645
	.long .label_2466
	.long .label_2467
	.long .label_2468
	.long .label_2469
	.long .label_2470
	.long .label_1645
	.long .label_2471
	.long .label_2472
	.long .label_2473
	.long .label_2474
	.long .label_2475
	.long .label_2476
	.long .label_1645
	.long .label_2477
	.long .label_2478
	.long .label_2479
	.long .label_2480
	# data @ 0x8063770
label_1803:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
	# data @ 0x80637a8
label_1808:
	.asciz "/.libs/"
	# data @ 0x80637b0
label_1807:
	.asciz "lt-"
	# data @ 0x80637b4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80637c0
label_2481:
	.asciz "literal"
	# data @ 0x80637c8
label_2482:
	.asciz "shell"
	# data @ 0x80637ce
label_2483:
	.asciz "shell-always"
	# data @ 0x80637db
label_2484:
	.asciz "shell-escape"
	# data @ 0x80637e8
label_2485:
	.asciz "shell-escape-always"
	# data @ 0x80637fc
label_2486:
	.asciz "c"
	# data @ 0x80637fe
label_2487:
	.asciz "c-maybe"
	# data @ 0x8063806
label_2488:
	.asciz "escape"
	# data @ 0x806380d
label_2489:
	.asciz "locale"
	# data @ 0x8063814
label_2490:
	.asciz "clocale"
	# data @ 0x806381c
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063820
	.globl quoting_style_args
	.type quoting_style_args, @object
quoting_style_args:
	.long label_2481
	.long label_2482
	.long label_2483
	.long label_2484
	.long label_2485
	.long label_2486
	.long label_2487
	.long label_2488
	.long label_2489
	.long label_2490
	# data @ 0x8063848
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063860
	.globl quoting_style_vals
	.type quoting_style_vals, @object
quoting_style_vals:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063888
label_1824:
	.asciz "UTF-8"
	# data @ 0x806388e
label_1828:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
	# data @ 0x8063892
label_1832:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
	# data @ 0x8063896
label_1835:
	.asciz "GB18030"
	# data @ 0x806389e
label_1826:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
	# data @ 0x80638a2
label_1833:
	.byte 161
	.byte 175
	.byte 0
	# data @ 0x80638a5
label_1829:
	.byte 34
	.byte 0
	# data @ 0x80638a7
label_1834:
	.byte 39
	.byte 0
	# data @ 0x80638a9
label_1967:
	.asciz "`"
	# data @ 0x80638ab
	.byte 0
	# data @ 0x80638ac
label_1883:
	.long .label_2528
	.long .label_2529
	.long .label_1944
	.long .label_2530
	.long .label_2531
	.long .label_2532
	.long .label_2533
	.long .label_2534
	.long .label_2535
	.long .label_2535
	.long .label_2535
label_1873:
	.long .label_2536
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_2537
	.long .label_2538
	.long .label_2539
	.long .label_2540
	.long .label_2541
	.long .label_2542
	.long .label_2543
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_1868
	.long .label_2544
	.long .label_2545
	.long .label_2545
	.long .label_2546
	.long .label_2545
	.long .label_2547
	.long .label_2545
	.long .label_2548
	.long .label_2545
	.long .label_2545
	.long .label_2545
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2545
	.long .label_2545
	.long .label_2545
	.long .label_2545
	.long .label_2549
	.long .label_1868
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2545
	.long .label_2550
	.long .label_2547
	.long .label_2545
	.long .label_2547
	.long .label_2545
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2547
	.long .label_2551
	.long .label_2545
	.long .label_2551
	.long .label_2546
label_1840:
	.long .label_2552
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_2552
	.long .label_2552
	.long .label_2552
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_2552
	.long .label_1962
	.long .label_2552
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_1962
	.long .label_2552
	.long .label_2552
	.long .label_2552
label_1915:
	.long .label_2553
	.long .label_2553
	.long .label_1863
	.long .label_2553
	.long .label_1863
	.long .label_2553
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_1863
	.long .label_2553
	# data @ 0x8063bd4
label_2005:
	.asciz "%s"
	# data @ 0x8063bd7
	.byte 0
	# data @ 0x8063bd8
label_2022:
	.quad 0x41cdcd6500000000
	# data @ 0x8063be0
label_2030:
	.asciz "%s (%s) %s\n"
	# data @ 0x8063bec
label_2025:
	.asciz "%s %s\n"
	# data @ 0x8063bf3
label_2027:
	.asciz "(C)"
	# data @ 0x8063bf7
	.byte 0
	# data @ 0x8063bf8
label_2023:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
	# data @ 0x8063cc4
label_2032:
	.asciz "Written by %s.\n"
	# data @ 0x8063cd4
label_2034:
	.asciz "Written by %s and %s.\n"
	# data @ 0x8063ceb
label_2035:
	.asciz "Written by %s, %s, and %s.\n"
	# data @ 0x8063d07
	.byte 0
	# data @ 0x8063d08
label_2036:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
	# data @ 0x8063d28
label_2037:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
	# data @ 0x8063d4c
label_2038:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
	# data @ 0x8063d74
label_2039:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
	# data @ 0x8063da0
label_2040:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
	# data @ 0x8063dd0
label_2041:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
	# data @ 0x8063e04
label_2029:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
	# data @ 0x8063e40
label_2031:
	.long .label_2668
	.long .label_2669
	.long .label_2670
	.long .label_2671
	.long .label_2672
	.long .label_2673
	.long .label_2674
	.long .label_2675
	.long .label_2676
	.long .label_2677
	# data @ 0x8063e68
label_2052:
	.asciz "\nReport bugs to: %s\n"
	# data @ 0x8063e7d
label_2053:
	.asciz "bug-coreutils@gnu.org"
	# data @ 0x8063e93
label_2054:
	.asciz "%s home page: <%s>\n"
	# data @ 0x8063ea7
	.byte 0
	# data @ 0x8063ea8
label_2050:
	.asciz "https://www.gnu.org/software/coreutils/"
	# data @ 0x8063ed0
label_2051:
	.asciz "GNU coreutils"
	# data @ 0x8063ede
	.byte 0
	.byte 0
	# data @ 0x8063ee0
label_2049:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
	# data @ 0x8063f21
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8063f40
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	# data @ 0x8063f6f
label_2080:
	.asciz "memory exhausted"
	# data @ 0x8063f80
label_2079:
	.asciz "%s"
	# data @ 0x8063f83
label_2093:
	.asciz "%s: %s"
	# data @ 0x8063f8a
	.byte 0
	.byte 0
	# data @ 0x8063f8c
label_2119:
	.asciz "lib/xstrtol.c"
	# data @ 0x8063f9a
	.byte 0
	.byte 0
	# data @ 0x8063f9c
label_2120:
	.asciz "0 <= strtol_base && strtol_base <= 36"
	# data @ 0x8063fc2
	.byte 0
	.byte 0
	# data @ 0x8063fc4
label_2121:
	.long sub_805cc5d
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long sub_805cc5d
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long .label_2106
	.long sub_805cc5d
label_2117:
	.long sub_805ccef
	.long .label_2113
	.long .label_2113
	.long sub_805cd17
	.long .label_2113
	.long sub_805cd33
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cd4f
	.long .label_2113
	.long sub_805cd6b
	.long .label_2113
	.long .label_2113
	.long sub_805cd87
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cda0
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cdcf
	.long sub_805cde8
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805ccd3
	.long .label_2720
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cd33
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cd4f
	.long .label_2113
	.long sub_805cd6b
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long .label_2113
	.long sub_805cda0
	.long .label_2113
	.long .label_2113
	.long sub_805cdb9
	# data @ 0x806415c
	.globl __PRETTY_FUNCTION__.3254
	.type __PRETTY_FUNCTION__.3254, @object
__PRETTY_FUNCTION__.3254:
	.asciz "xstrtoul"
	# data @ 0x8064165
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x8064168
label_2140:
	.asciz "--"
	# data @ 0x806416b
label_2143:
	.asciz "invalid %s%s argument '%s'"
	# data @ 0x8064186
	.byte 0
	.byte 0
	# data @ 0x8064188
label_2133:
	.asciz "invalid suffix in %s%s argument '%s'"
	# data @ 0x80641ad
label_2137:
	.asciz "%s%s argument '%s' too large"
	# data @ 0x80641ca
	.byte 0
	.byte 0
	# data @ 0x80641cc
label_2161:
	.asciz "lib/xstrtol.c"
	# data @ 0x80641da
	.byte 0
	.byte 0
	# data @ 0x80641dc
label_2162:
	.asciz "0 <= strtol_base && strtol_base <= 36"
	# data @ 0x8064202
	.byte 0
	.byte 0
	# data @ 0x8064204
label_2169:
	.long sub_805d1e9
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long sub_805d1e9
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long .label_2163
	.long sub_805d1e9
label_2164:
	.long sub_805d27b
	.long .label_2158
	.long .label_2158
	.long sub_805d2a3
	.long .label_2158
	.long sub_805d2bf
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d2db
	.long .label_2158
	.long sub_805d2f7
	.long .label_2158
	.long .label_2158
	.long sub_805d313
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d32c
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d35b
	.long sub_805d374
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d25f
	.long .label_2567
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d2bf
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d2db
	.long .label_2158
	.long sub_805d2f7
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long .label_2158
	.long sub_805d32c
	.long .label_2158
	.long .label_2158
	.long sub_805d345
	# data @ 0x806439c
	.globl __PRETTY_FUNCTION__.3254_bio_def_00
	.type __PRETTY_FUNCTION__.3254_bio_def_00, @object
__PRETTY_FUNCTION__.3254_bio_def_00:
	.asciz "xstrtoumax"
	# data @ 0x80643a7
label_2203:
	.asciz "memory exhausted"
	# data @ 0x80643b8
label_2204:
	.asciz "%s\n"
	# data @ 0x80643bc
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x80643c0
label_2221:
	.byte 0
	# data @ 0x80643c1
label_2227:
	.asciz "TZ"
	# data @ 0x80643c4
label_2272:
	.byte 0
	# data @ 0x80643c5
label_2273:
	.asciz "ASCII"
	# data @ 0x80643cb
	.label_2729:
	.section .data
	.align 32
	# data @ 0x806a1c0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a1e0
	.globl UNKNOWN_SECURITY_CONTEXT
	.type UNKNOWN_SECURITY_CONTEXT, @object
UNKNOWN_SECURITY_CONTEXT:
	.asciz "?"
	# data @ 0x806a1e2
	.globl print_owner
	.type print_owner, @object
print_owner:
	.byte 0x1
	# data @ 0x806a1e3
	.globl print_group
	.type print_group, @object
print_group:
	.byte 0x1
	# data @ 0x806a1e4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a1e8
	.globl file_output_block_size
	.type file_output_block_size, @object
file_output_block_size:
	.byte 1
	# data @ 0x806a1e9
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a1ec
label_216:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a200
	.globl color_indicator
	.type color_indicator, @object
color_indicator:
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a204
label_96:
	.long label_135
	# data @ 0x806a208
label_97:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a20c
label_144:
	.long label_2665
	# data @ 0x806a210
label_796:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a214
label_797:
	.long 0x0
	# data @ 0x806a218
label_795:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a21c
	.long label_93
	# data @ 0x806a220
label_98:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a230
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a234
	.long label_2523
	# data @ 0x806a238
label_323:
	.long 0x5
	# data @ 0x806a23c
label_321:
	.long label_2365
	# data @ 0x806a240
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a244
	.long label_2659
	# data @ 0x806a248
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a24c
	.long label_2368
	# data @ 0x806a250
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a254
	.long label_2344
	# data @ 0x806a258
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a25c
	.long label_2344
	# data @ 0x806a260
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a270
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a274
	.long label_2680
	# data @ 0x806a278
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a27c
	.long label_2368
	# data @ 0x806a280
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a284
	.long label_2704
	# data @ 0x806a288
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a28c
	.long label_2347
	# data @ 0x806a290
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a294
	.long label_2713
	# data @ 0x806a298
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a29c
	.long label_2716
	# data @ 0x806a2a0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2a4
	.long label_2722
	# data @ 0x806a2a8
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2ac
	.long label_2340
	# data @ 0x806a2b0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2b8
label_787:
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2bc
	.long label_2341
	# data @ 0x806a2c0
	.globl long_time_format
	.type long_time_format, @object
long_time_format:
	.long label_2378
	# data @ 0x806a2c4
label_212:
	.long label_2343
	# data @ 0x806a2c8
	.globl first.8510
	.type first.8510, @object
first.8510:
	.byte 0x1
	# data @ 0x806a2c9
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2cc
	.globl width.9025
	.type width.9025, @object
width.9025:
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	# data @ 0x806a2d0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2e0
	.globl filetype_indicator.9329
	.type filetype_indicator.9329, @object
filetype_indicator.9329:
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a2e4
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 11
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 10
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a308
	.globl ls_mode
	.type ls_mode, @object
ls_mode:
	.long 0x1
	# data @ 0x806a30c
	.globl Version
	.type Version, @object
Version:
	.long label_2342
	# data @ 0x806a310
	.globl argmatch_die
	.type argmatch_die, @object
argmatch_die:
	.long __argmatch_die
	# data @ 0x806a314
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.byte 1
	# data @ 0x806a315
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a320
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	# data @ 0x806a324
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	# data @ 0x806a328
label_1979:
	.long slot0
	# data @ 0x806a32c
	.globl slotvec
	.type slotvec, @object
slotvec:
	.long slotvec0
	# data @ 0x806a330
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a340
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	# data @ 0x806a341
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a370
	.globl obstack_alloc_failed_handler
	.type obstack_alloc_failed_handler, @object
obstack_alloc_failed_handler:
	.long print_and_abort
	.section .bss
	.align 32
	# data @ 0x806a3a4
	.globl completed.7209
	.type completed.7209, @object
completed.7209:
	.byte 0x0
	# data @ 0x806a3a5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3c0
	.globl active_dir_set
	.type active_dir_set, @object
active_dir_set:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3c4
	.globl cwd_file
	.type cwd_file, @object
cwd_file:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3c8
	.globl cwd_n_alloc
	.type cwd_n_alloc, @object
cwd_n_alloc:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3cc
	.globl cwd_n_used
	.type cwd_n_used, @object
cwd_n_used:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3d0
	.globl cwd_some_quoted
	.type cwd_some_quoted, @object
cwd_some_quoted:
	.byte 0
	# data @ 0x806a3d1
	.globl align_variable_outer_quotes
	.type align_variable_outer_quotes, @object
align_variable_outer_quotes:
	.byte 0x0
	# data @ 0x806a3d2
	.byte 0
	.byte 0
	# data @ 0x806a3d4
	.globl sorted_file
	.type sorted_file, @object
sorted_file:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3d8
	.globl sorted_file_alloc
	.type sorted_file_alloc, @object
sorted_file_alloc:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3dc
	.globl color_symlink_as_referent
	.type color_symlink_as_referent, @object
color_symlink_as_referent:
	.byte 0x0
	# data @ 0x806a3dd
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3e0
	.globl hostname
	.type hostname, @object
hostname:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3e4
	.globl pending_dirs
	.type pending_dirs, @object
pending_dirs:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3e8
	.globl current_time
	.type current_time, @object
current_time:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3ec
label_165:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3f0
	.globl print_scontext
	.type print_scontext, @object
print_scontext:
	.byte 0x0
	# data @ 0x806a3f1
	.globl any_has_acl
	.type any_has_acl, @object
any_has_acl:
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3f4
	.globl inode_number_width
	.type inode_number_width, @object
inode_number_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3f8
	.globl block_size_width
	.type block_size_width, @object
block_size_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a3fc
	.globl nlink_width
	.type nlink_width, @object
nlink_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a400
	.globl scontext_width
	.type scontext_width, @object
scontext_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a404
	.globl owner_width
	.type owner_width, @object
owner_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a408
	.globl group_width
	.type group_width, @object
group_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a40c
	.globl author_width
	.type author_width, @object
author_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a410
	.globl major_device_number_width
	.type major_device_number_width, @object
major_device_number_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a414
	.globl minor_device_number_width
	.type minor_device_number_width, @object
minor_device_number_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a418
	.globl file_size_width
	.type file_size_width, @object
file_size_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a41c
	.globl format
	.type format, @object
format:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a420
	.globl time_type
	.type time_type, @object
time_type:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a424
	.globl sort_type
	.type sort_type, @object
sort_type:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a428
	.globl sort_reverse
	.type sort_reverse, @object
sort_reverse:
	.byte 0
	# data @ 0x806a429
	.globl print_author
	.type print_author, @object
print_author:
	.byte 0x0
	# data @ 0x806a42a
	.globl numeric_ids
	.type numeric_ids, @object
numeric_ids:
	.byte 0x0
	# data @ 0x806a42b
	.globl print_block_size
	.type print_block_size, @object
print_block_size:
	.byte 0x0
	# data @ 0x806a42c
	.globl human_output_opts
	.type human_output_opts, @object
human_output_opts:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a430
	.globl output_block_size
	.type output_block_size, @object
output_block_size:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a434
label_215:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a438
	.globl file_human_output_opts
	.type file_human_output_opts, @object
file_human_output_opts:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a43c
	.globl dired
	.type dired, @object
dired:
	.byte 0x0
	# data @ 0x806a43d
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a440
	.globl indicator_style
	.type indicator_style, @object
indicator_style:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a444
	.globl print_with_color
	.type print_with_color, @object
print_with_color:
	.byte 0x0
	# data @ 0x806a445
	.globl print_hyperlink
	.type print_hyperlink, @object
print_hyperlink:
	.byte 0x0
	# data @ 0x806a446
	.globl used_color
	.type used_color, @object
used_color:
	.byte 0x0
	# data @ 0x806a447
	.byte 0
	# data @ 0x806a448
	.globl color_ext_list
	.type color_ext_list, @object
color_ext_list:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a44c
	.globl color_buf
	.type color_buf, @object
color_buf:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a450
	.globl check_symlink_color
	.type check_symlink_color, @object
check_symlink_color:
	.byte 0x0
	# data @ 0x806a451
	.globl print_inode
	.type print_inode, @object
print_inode:
	.byte 0x0
	# data @ 0x806a452
	.byte 0
	.byte 0
	# data @ 0x806a454
	.globl dereference
	.type dereference, @object
dereference:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a458
	.globl recursive
	.type recursive, @object
recursive:
	.byte 0
	# data @ 0x806a459
	.globl immediate_dirs
	.type immediate_dirs, @object
immediate_dirs:
	.byte 0
	# data @ 0x806a45a
	.globl directories_first
	.type directories_first, @object
directories_first:
	.byte 0x0
	# data @ 0x806a45b
	.byte 0
	# data @ 0x806a45c
	.globl ignore_mode
	.type ignore_mode, @object
ignore_mode:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a460
	.globl ignore_patterns
	.type ignore_patterns, @object
ignore_patterns:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a464
	.globl hide_patterns
	.type hide_patterns, @object
hide_patterns:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a468
	.globl qmark_funny_chars
	.type qmark_funny_chars, @object
qmark_funny_chars:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a46c
	.globl filename_quoting_options
	.type filename_quoting_options, @object
filename_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a470
	.globl dirname_quoting_options
	.type dirname_quoting_options, @object
dirname_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a474
	.globl tabsize
	.type tabsize, @object
tabsize:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a478
	.globl print_dir_name
	.type print_dir_name, @object
print_dir_name:
	.byte 0x0
	# data @ 0x806a479
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a47c
	.globl line_length
	.type line_length, @object
line_length:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a480
	.globl localtz
	.type localtz, @object
localtz:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a484
	.globl format_needs_stat
	.type format_needs_stat, @object
format_needs_stat:
	.byte 0x0
	# data @ 0x806a485
	.globl format_needs_type
	.type format_needs_type, @object
format_needs_type:
	.byte 0x0
	# data @ 0x806a486
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a4a0
	.globl caught_signals
	.type caught_signals, @object
caught_signals:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a520
	.globl interrupt_signal
	.type interrupt_signal, @object
interrupt_signal:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a524
	.globl stop_signal_count
	.type stop_signal_count, @object
stop_signal_count:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a528
	.globl exit_status
	.type exit_status, @object
exit_status:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a52c
	.globl column_info
	.type column_info, @object
column_info:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a530
	.globl max_idx
	.type max_idx, @object
max_idx:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a534
	.globl dired_pos
	.type dired_pos, @object
dired_pos:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a540
	.globl dired_obstack
	.type dired_obstack, @object
dired_obstack:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a580
	.globl subdired_obstack
	.type subdired_obstack, @object
subdired_obstack:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a5c0
	.globl dev_ino_obstack
	.type dev_ino_obstack, @object
dev_ino_obstack:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a5cc
label_42:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl RFC3986
	.type RFC3986, @object
RFC3986:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a6cc
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a700
	.globl abformat
	.type abformat, @object
abformat:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a800
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806a900
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806aa00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806ab00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806ac00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806ad00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806ae00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806af00
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b000
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b100
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b200
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b300
	.globl use_abformat
	.type use_abformat, @object
use_abformat:
	.byte 0x0
	# data @ 0x806b301
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b320
	.globl failed_strcoll
	.type failed_strcoll, @object
failed_strcoll:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3c0
	.globl unsupported_device.8568
	.type unsupported_device.8568, @object
unsupported_device.8568:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3c4
label_423:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3c8
	.globl unsupported_device.8574
	.type unsupported_device.8574, @object
unsupported_device.8574:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3cc
label_426:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3d0
	.globl unsupported_device.8580
	.type unsupported_device.8580, @object
unsupported_device.8580:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3d4
label_431:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3d8
	.globl column_info_alloc.9410
	.type column_info_alloc.9410, @object
column_info_alloc.9410:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3dc
	.globl file_name
	.type file_name, @object
file_name:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3e0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3e4
	.globl user_alist
	.type user_alist, @object
user_alist:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3e8
	.globl nouser_alist
	.type nouser_alist, @object
nouser_alist:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3ec
	.globl group_alist
	.type group_alist, @object
group_alist:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3f0
	.globl nogroup_alist
	.type nogroup_alist, @object
nogroup_alist:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b3f4
	.globl program_name
	.type program_name, @object
program_name:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b400
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b404
label_1990:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b408
label_1991:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b40c
label_1992:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b410
label_1993:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b414
label_1994:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b418
label_1995:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b41c
label_1996:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b420
label_1997:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b424
label_1998:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b428
label_1999:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b42c
label_2000:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b440
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	# data @ 0x806b540
		.globl _end
	.type _end, @notype
_end: